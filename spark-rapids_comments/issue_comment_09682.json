[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1823569187",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1823569187",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1823569187,
        "node_id": "IC_kwDOD7z77c5ssXUj",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-22T22:08:46Z",
        "updated_at": "2023-11-27T23:13:06Z",
        "author_association": "COLLABORATOR",
        "body": "Attached [herewith](https://github.com/NVIDIA/spark-rapids/files/13444584/decimals_avg.parquet.zip) is a zipped Parquet file with 102 rows in a single `Decimal(8,3)` column.\r\n\r\nTaking the window functions out of the equation, one sees that running `AVG()` produces slightly different results on Apache Spark and the plugin:\r\n```scala\r\n// On Spark.\r\nscala> spark.read.parquet(\"/tmp/decimals_avg.parquet\").select( expr(\"avg(c)\") ).show\r\n+------------+\r\n|      avg(c)|\r\n+------------+\r\n|3527.6195313|\r\n+------------+\r\n\r\n// On the plugin:\r\n+------------+\r\n|      avg(c)|\r\n+------------+\r\n|3527.6195312|\r\n+------------+\r\n```\r\nThe behaviour seems to be consistent on Spark ~3.4.2~ 3.4.1 and Spark 3.2.3. The plugin result is off by `0.000001`.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1823569187/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1828781810",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1828781810",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1828781810,
        "node_id": "IC_kwDOD7z77c5tAP7y",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-27T23:12:26Z",
        "updated_at": "2023-11-27T23:12:26Z",
        "author_association": "COLLABORATOR",
        "body": "I have filed https://github.com/rapidsai/cudf/issues/14507 to track the CUDF side of this.\r\n\r\nI was able to repro this on CUDF by writing the input as `DECIMAL(12,7)` to Parquet, and then running the `MEAN` aggregation on it.  The bug I filed has the repro details.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1828781810/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1828821221",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1828821221",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1828821221,
        "node_id": "IC_kwDOD7z77c5tAZjl",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-27T23:50:00Z",
        "updated_at": "2023-11-27T23:50:00Z",
        "author_association": "COLLABORATOR",
        "body": "A couple of other findings. I tried querying `SUM`, `COUNT`, `AVG`, etc. as follows:\r\n```sql\r\nselect sum(c),  count(c), sum(c)/count(c), avg(c), cast(avg(c) as DECIMAL(12,8)) , cast(sum(c)/count(c) as decimal(12,7)) from foobar \r\n```\r\nOn CPU, those results tally up:\r\n```\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n|sum(c)    |count(c)|(sum(c) / count(c))         |avg(c)      |CAST(avg(c) AS DECIMAL(12,8))|CAST((sum(c) / count(c)) AS DECIMAL(12,7))|\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n|338651.475|96      |3527.61953125000000000000000|3527.6195313|3527.61953130                |3527.6195313                              |\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n\r\n```\r\n\r\nHere's what one finds on GPU:\r\n```\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n|sum(c)    |count(c)|(sum(c) / count(c))         |avg(c)      |CAST(avg(c) AS DECIMAL(12,8))|CAST((sum(c) / count(c)) AS DECIMAL(12,7))|\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n|338651.475|96      |3527.61953125000000000000000|3527.6195312|3527.61953120                |3527.6195313                              |\r\n+----------+--------+----------------------------+------------+-----------------------------+------------------------------------------+\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1828821221/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833138166",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1833138166",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1833138166,
        "node_id": "IC_kwDOD7z77c5tQ3f2",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T05:36:34Z",
        "updated_at": "2023-11-30T05:37:11Z",
        "author_association": "COLLABORATOR",
        "body": "There were some red herrings in investigating this bug.\r\n\r\nFirst off, I have closed the CUDF bug (rapidsai/cudf#14507) I raised for this.  CUDF is not at fault; it consistently truncates additional decimal digits.\r\n\r\nIt looked like this might have to do with `GpuDecimalAverage` and `GpuDecimalDivide`, but those operators are not involved. Consider this query:\r\n```sql\r\nSELECT avg(c) FROM foobar; -- c is a DECIMAL(8,3).\r\n```\r\nThe execution plan indicates `GpuDecimalAverage` isn't invoked at all. The operation is done completely in integer/double, and the result is cast to `DECIMAL(12,7)`:\r\n```\r\n== Optimized Logical Plan ==Aggregate [cast((avg(UnscaledValue(c#9)) / 1000.0) as decimal(12,7)) AS avg(c)#888]\r\n+- Relation [c#9] parquet\r\n\r\n== Physical Plan ==\r\nGpuColumnarToRow false\r\n+- GpuHashAggregate(keys=[], functions=[avg(UnscaledValue(c#9), DoubleType)], output=[avg(c)#888])\r\n   +- GpuShuffleCoalesce 1073741824\r\n      +- GpuColumnarExchange gpusinglepartitioning$(), ENSURE_REQUIREMENTS, [plan_id=1819]\r\n         +- GpuHashAggregate(keys=[], functions=[partial_avg(UnscaledValue(c#9), DoubleType)], output=[sum#892, count#893L])\r\n            +- GpuFileGpuScan parquet [c#9] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex[file:/tmp/decimals_avg.parquet], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<c:decimal(8,3)>\r\n```\r\nThe `avg()` is computed on the unscaled decimal reps, and the average is divided by `1000.0`.  The result is cast to `DECIMAL(12,7)`.\r\n\r\nThe `avg()` and the divide produce the same results on CPU and GPU.  So this amounts to a casting problem.\r\n\r\nHere's the simplest repro for the problem:\r\n```scala\r\nSeq(3527.61953125).toDF(\"d\").repartition(1).selectExpr(\"d\", \"CAST(d AS DECIMAL(12,7))\").show\r\n```\r\nOn CPU:\r\n```sql\r\n+-------------+---------------+\r\n|            d|as_decimal_12_7|\r\n+-------------+---------------+\r\n|3527.61953125|   3527.6195313|\r\n+-------------+---------------+\r\n```\r\nOn GPU:\r\n```sql\r\n+-----------+---------------+\r\n|          d|as_decimal_12_7|\r\n+-----------+---------------+\r\n|3527.619531|   3527.6195312|\r\n+-----------+---------------+\r\n```\r\n(Ignore how `d` is printed as `3527.619531` on GPU.  I think that's just a string/display formatting issue. The correct/complete value is written if serialized to file.)\r\n\r\nAll mention of window functions, aggregation, `GpuDecimalAverage` and everything else is a distraction.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833138166/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833903840",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1833903840",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1833903840,
        "node_id": "IC_kwDOD7z77c5tTybg",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T14:39:24Z",
        "updated_at": "2023-11-30T14:39:24Z",
        "author_association": "COLLABORATOR",
        "body": "This is a performance optimization in Spark that is only supposed to happen when the value would not be impacted by potential floating point issues.\r\n\r\nhttps://github.com/apache/spark/blob/9bb358b51e30b5041c0cd20e27cf995aca5ed4c7/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala#L2110-L2142\r\n\r\nSo if the precision is less than 15. 15 requires 50 bits to store it and a double has 52 bits in the significant section so the result should produce the correct answer without any possibility of errors.\r\n\r\nhttps://en.wikipedia.org/wiki/Double-precision_floating-point_format\r\n\r\nSo if we are getting the wrong answer back, then the problem is some where in the computation that the average was replaced with.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833903840/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833933174",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1833933174",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1833933174,
        "node_id": "IC_kwDOD7z77c5tT5l2",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T14:51:01Z",
        "updated_at": "2023-11-30T14:51:01Z",
        "author_association": "COLLABORATOR",
        "body": "I am remembering more now.  Converting a double to a decimal value has problems because they do it by going from a double to a string to a decimal. This is inherent in how scala does it in their BigDecimal class, and it is even a bit of magic with an implicit method that just makes it happen behind the scenes. But going from a Double to a String we cannot match what java does. It is not standard which is why we have `spark.rapids.sql.castStringToFloat.enabled`, which is off by default. Now I really want to understand what would happen if this optimization is disabled and what the result really would be. Is Spark right and we are wrong, or is Spark wrong and we are right? ",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833933174/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834050352",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1834050352",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1834050352,
        "node_id": "IC_kwDOD7z77c5tUWMw",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T15:55:59Z",
        "updated_at": "2023-11-30T15:55:59Z",
        "author_association": "COLLABORATOR",
        "body": "So java does odd things when interpreting floating point values compared to the rest of the world. They try to fix the problem that some decimal values cannot be represented as floating point values.\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#toString-double-\r\n\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\r\n\r\nThey are self consistent, but it is not standard.  The number we are trying to convert is one of them that cannot be accurately represented as a double.\r\n\r\nhttps://binaryconvert.com/result_double.html?decimal=051053050055046054049057053051049050053\r\n\r\nSo technically the Spark performance optimization is wrong in the general case. But I think how Java/Scala convert double to Strings and in turn decimal values \"fixes\" it.\r\n\r\nSo there are two options that we have to fix the problem ourselves.  We either undo the optimization and just to the average on Decimal values, or we find a way to replicate what Java is doing.  None of these are simple.\r\n\r\nIn the case of a Window operation it is not that hard to undo the optimization because it is self contained in a single exec.  We can do the pattern matching see the UnscaledValue(e) being manipulated. But for a hash aggregation or a reduction it gets to be much harder.  Especially if the optimization later went through other transformations related to distinct/etc it could get to be really hard to detect and undo this. We might be able to just find the final Divide by a constant followed by a cast to a Decimal and try to rewrite that part. Just because we get the rest of it right. That might be the simplest way to make this work.\r\n\r\nMatching java code is really difficult because it is GPL Licensed so we cannot copy or even read it and try to apply it.\r\n\r\nI think if we can try and detect the case of `cast(Long/Double Scalar that is 10 ^ x as Decimal(SOMETHING, X + 4)` and replace it with `CAST(LONG as Decimal(19,2))/DecimalScalar(10^X) and then have the divide output the desired precision and scale like we do for other decimal average conversions, then we are good.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834050352/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834055305",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1834055305",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1834055305,
        "node_id": "IC_kwDOD7z77c5tUXaJ",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T15:58:43Z",
        "updated_at": "2023-11-30T15:58:43Z",
        "author_association": "COLLABORATOR",
        "body": "But before we do any of that I want to be sure that we know what the original input long was before the divide happened and what the double was that we are dividing? I am assuming that it was `(352761953125 / 10 ^ 8)`",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834055305/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834182804",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1834182804",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1834182804,
        "node_id": "IC_kwDOD7z77c5tU2iU",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T17:07:42Z",
        "updated_at": "2023-11-30T17:07:42Z",
        "author_association": "COLLABORATOR",
        "body": "> know what the original input long was before the divide happened and what the double was that we are dividing? I am assuming that it was `(352761953125/ 10 ^ 8)`\n\nNot exactly. The result of the average (of the unscaled decimals) was `3527619.53125L`. That was then divided by `1000.0L` to rescale it. ",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834182804/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834650958",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1834650958",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1834650958,
        "node_id": "IC_kwDOD7z77c5tWo1O",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T22:19:07Z",
        "updated_at": "2023-11-30T22:21:24Z",
        "author_association": "COLLABORATOR",
        "body": "I can confirm here that [`GpuCast::castFloatsToDecimal()`](https://github.com/NVIDIA/spark-rapids/blob/fcad2279c31aa1d53e0c132cf90432169e212446/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuCast.scala#L1620) seems to be the one producing the differing output:\r\n```scala\r\n    // Approach to minimize difference between CPUCast and GPUCast:\r\n    // step 1. cast input to FLOAT64 (if necessary)\r\n    // step 2. cast FLOAT64 to container DECIMAL (who keeps one more digit for rounding)\r\n    // step 3. perform HALF_UP rounding on container DECIMAL\r\n    val checkedInput = withResource(input.castTo(DType.FLOAT64)) { double =>\r\n      val roundedDouble = double.round(dt.scale, cudf.RoundMode.HALF_UP)\r\n      withResource(roundedDouble) { rounded =>\r\n      // ...\r\n      }\r\n    }\r\n```\r\nThe second step (i.e. after ensuring the input is `FLOAT64`) is to `round(RoundMode.HALF_UP)`. This causes the following change in the input row:\r\n```scala\r\n3527.61953125 -> 3527.6195312\r\n```\r\nThe (final) CPU output for this row is `3527.6195313`.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1834650958/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1957736523",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-1957736523",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 1957736523,
        "node_id": "IC_kwDOD7z77c50sLBL",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-02-21T19:17:11Z",
        "updated_at": "2024-02-21T19:17:11Z",
        "author_association": "COLLABORATOR",
        "body": "I've relinquished ownership on this bug. I'm not actively working on this one.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1957736523/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/2126616418",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-2126616418",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 2126616418,
        "node_id": "IC_kwDOD7z77c5-wZdi",
        "user": {
            "login": "thirtiseven",
            "id": 7326403,
            "node_id": "MDQ6VXNlcjczMjY0MDM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7326403?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/thirtiseven",
            "html_url": "https://github.com/thirtiseven",
            "followers_url": "https://api.github.com/users/thirtiseven/followers",
            "following_url": "https://api.github.com/users/thirtiseven/following{/other_user}",
            "gists_url": "https://api.github.com/users/thirtiseven/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/thirtiseven/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/thirtiseven/subscriptions",
            "organizations_url": "https://api.github.com/users/thirtiseven/orgs",
            "repos_url": "https://api.github.com/users/thirtiseven/repos",
            "events_url": "https://api.github.com/users/thirtiseven/events{/privacy}",
            "received_events_url": "https://api.github.com/users/thirtiseven/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-23T09:11:38Z",
        "updated_at": "2024-05-23T09:11:38Z",
        "author_association": "COLLABORATOR",
        "body": "> I am remembering more now. Converting a double to a decimal value has problems because they do it by going from a double to a string to a decimal. This is inherent in how scala does it in their BigDecimal class, and it is even a bit of magic with an implicit method that just makes it happen behind the scenes. But going from a Double to a String we cannot match what java does. It is not standard which is why we have `spark.rapids.sql.castStringToFloat.enabled`, which is off by default. Now I really want to understand what would happen if this optimization is disabled and what the result really would be. Is Spark right and we are wrong, or is Spark wrong and we are right?\r\n\r\nSince we have an _almost match_ float to string kernel in [jni](https://github.com/NVIDIA/spark-rapids-jni/blob/branch-24.06/src/main/cpp/src/cast_float_to_string.cu), does that means we can also _almost match_ float to decimal easily by follow Spark's _float => string => decimal_ way?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/2126616418/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/2127064316",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9682#issuecomment-2127064316",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9682",
        "id": 2127064316,
        "node_id": "IC_kwDOD7z77c5-yGz8",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-23T13:07:13Z",
        "updated_at": "2024-05-23T13:07:13Z",
        "author_association": "COLLABORATOR",
        "body": "@thirtiseven yes that is one possibility, but again it is almost match. That is up to management about how close is good enough.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/2127064316/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]