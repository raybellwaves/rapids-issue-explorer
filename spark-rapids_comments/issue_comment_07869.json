[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464326044",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7869#issuecomment-1464326044",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7869",
        "id": 1464326044,
        "node_id": "IC_kwDOD7z77c5XR9ec",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-10T19:43:45Z",
        "updated_at": "2023-03-10T19:46:59Z",
        "author_association": "COLLABORATOR",
        "body": "I think we can implement a specific exception class in the Java JNI layer. Then we have a dedicated API in JNI to check for column size. Something like:\r\n```\r\nstatic void throwIfSizeExceedCudfLimit(...)\r\n  if (inputColumn.numRows() > long(INT_MAX)) {\r\n    throw new ColumnSizeExceedCudfLimitException(...);\r\n  }\r\n}\r\n```\r\n\r\nThe plugin just try+catch that specific exception for split+retry.\r\n\r\nProbably that `throwIfSizeExceedCudfLimit` check is called in `ColumnVector` (`ColumnView`?) constructor so we always have new column being checked.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464326044/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464374658",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7869#issuecomment-1464374658",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7869",
        "id": 1464374658,
        "node_id": "IC_kwDOD7z77c5XSJWC",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-10T20:22:56Z",
        "updated_at": "2023-03-10T20:22:56Z",
        "author_association": "COLLABORATOR",
        "body": "The problem is not with the input, but the output of operations.  CUDF is the one that hopefully finds that the output is too large and throws an exception.\r\n\r\nhttps://github.com/rapidsai/cudf/blob/2969b241c0654a11d1a61e29664bcaecd7bc4a15/cpp/include/cudf/strings/detail/strings_children.cuh#L82-L84\r\n\r\nBut that is not guaranteed in all cases because of overflow.  The ideal would be that when a string, or any other column type, would exceed the CUDF limits then there could be an exception class that is specific to this so we could know that it happened and then retry the operation with a smaller input to avoid the issue.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464374658/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464475352",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7869#issuecomment-1464475352",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7869",
        "id": 1464475352,
        "node_id": "IC_kwDOD7z77c5XSh7Y",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-10T21:09:32Z",
        "updated_at": "2023-03-10T21:09:32Z",
        "author_association": "COLLABORATOR",
        "body": "I see. Recently cudf introduced several new exception class (https://github.com/rapidsai/cudf/pull/12426) to throw in case of invalid input type. It should be reasonable to add a new exception type for our specific need.\r\n\r\nI've filed a related issue: https://github.com/rapidsai/cudf/issues/12925.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1464475352/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]