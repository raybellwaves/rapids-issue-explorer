[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1669768137",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/8919#issuecomment-1669768137",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8919",
        "id": 1669768137,
        "node_id": "IC_kwDOD7z77c5jhqPJ",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-08-08T14:47:58Z",
        "updated_at": "2023-08-08T14:47:58Z",
        "author_association": "COLLABORATOR",
        "body": "The issue is all around state and where that state is stored, and if you want to generate the exact same data after modifying a table as you would before modifying it. I kind of took the route of wanting to not allow modifications to the tables because it is hard to produce the same data in different ways to get to the same result.  But we can adjust how all of this works to make it simpler.\r\n\r\nThe table id is a number in DBGen that just increments each time a table is added. It is used as part of the hash to generate the data in the table.  So if you do \r\n```\r\nDBGen.addTable(\"a\", \"c: int\", 100)\r\nDBGen.addTable(\"b\", \"c: int\", 100)\r\n```\r\n\r\nTables a and b will have different values in them.  If you switched the order the tables were added to the database, then the data generated would also switch.\r\n\r\nEach column has an ID associated with it too. That ID is generated by walking the table in a specific order. So with the current setup adding a column to the end of a table should be doable, because we would just need to get the ID of the table and the ID of the last column so we know where to start from.\r\n\r\nUpdating an existing column without replacing the entire table is harder because the column ID might change based off of the previous columns in the same table.\r\n\r\nIf you want an API to replace a table that is also not hard because we can use the table ID from the previous table.  But because you are replacing a table it would not preserve the any of the settings/modifications done to the columns in the table.\r\n\r\nPerhaps the simplest thing to do is to change how we generate the table and column IDs. If we instead used the hash of the name of the table for the table ID, then the order of adding/changing tables would not matter.  If we also used a hash of a full column name, like for \"a map<string, list<struct<b int, c int>>>\" we would have `a`, `a.key`, `a.value`, `a.value.data`, `a.value.data.b`, and `a.value.data.c`. Then again we would not have to worry about the order of the columns in the table, but instead it would just be able the name of columns.  That would make it much simpler to be able to manipulate the generator after it is initially configured and get consistent results.\r\n\r\nAfter that it is just a matter of plumbing and making sure that we can reference back to the original DBGen when needed.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1669768137/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]