[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1411297553",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7585#issuecomment-1411297553",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7585",
        "id": 1411297553,
        "node_id": "IC_kwDOD7z77c5UHrER",
        "user": {
            "login": "sameerz",
            "id": 7036315,
            "node_id": "MDQ6VXNlcjcwMzYzMTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7036315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sameerz",
            "html_url": "https://github.com/sameerz",
            "followers_url": "https://api.github.com/users/sameerz/followers",
            "following_url": "https://api.github.com/users/sameerz/following{/other_user}",
            "gists_url": "https://api.github.com/users/sameerz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sameerz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sameerz/subscriptions",
            "organizations_url": "https://api.github.com/users/sameerz/orgs",
            "repos_url": "https://api.github.com/users/sameerz/repos",
            "events_url": "https://api.github.com/users/sameerz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sameerz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-01T01:08:25Z",
        "updated_at": "2023-02-01T01:08:25Z",
        "author_association": "COLLABORATOR",
        "body": "The handling of line terminators was documented in the compatibility guide in PR #7211 ",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1411297553/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430055141",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7585#issuecomment-1430055141",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7585",
        "id": 1430055141,
        "node_id": "IC_kwDOD7z77c5VPOjl",
        "user": {
            "login": "andygrove",
            "id": 934084,
            "node_id": "MDQ6VXNlcjkzNDA4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/934084?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andygrove",
            "html_url": "https://github.com/andygrove",
            "followers_url": "https://api.github.com/users/andygrove/followers",
            "following_url": "https://api.github.com/users/andygrove/following{/other_user}",
            "gists_url": "https://api.github.com/users/andygrove/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andygrove/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andygrove/subscriptions",
            "organizations_url": "https://api.github.com/users/andygrove/orgs",
            "repos_url": "https://api.github.com/users/andygrove/repos",
            "events_url": "https://api.github.com/users/andygrove/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andygrove/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-14T16:45:04Z",
        "updated_at": "2023-02-14T16:45:34Z",
        "author_association": "CONTRIBUTOR",
        "body": "To add more context here, cuDF has the correct behavior when passed `TEST$`. The problem is that we are transcoding `TEST$` to `TEST(?:\\r|\\u0085|\\u2028|\\u2029|\\r\\n)?$` to work around differences between Java's regexp engine and cuDF's regexp engine related to line terminators, and this transcoding does not provide the desired result for the example given in this issue.\r\n\r\nPossible solutions to resolve this issue:\r\n\r\n1. Find a transcoding that works in all cases (I am not sure if this is possible).\r\n2. Scan the input data and look for cases where we would produce incorrect results and fail the query.\r\n3. Request new Java-compatibility features in cuDF's regexp engine so that we don't have to transcode in the first place.\r\n4. Fork cuDF's regexp kernels and make them compatible with Java as part of `spark-rapids-jni`.\r\n\r\nIf we remove the transcoding, then the test fails on a different input. In this case, Java `$` ignores the final line terminator in the input, but cuDF does not.\r\n\r\n```\r\njavaPattern[0]=TEST$, cudfPattern=TEST$, input='aTEST\\u0085', cpu=true, gpu=false\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430055141/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430155613",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7585#issuecomment-1430155613",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7585",
        "id": 1430155613,
        "node_id": "IC_kwDOD7z77c5VPnFd",
        "user": {
            "login": "andygrove",
            "id": 934084,
            "node_id": "MDQ6VXNlcjkzNDA4NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/934084?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andygrove",
            "html_url": "https://github.com/andygrove",
            "followers_url": "https://api.github.com/users/andygrove/followers",
            "following_url": "https://api.github.com/users/andygrove/following{/other_user}",
            "gists_url": "https://api.github.com/users/andygrove/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andygrove/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andygrove/subscriptions",
            "organizations_url": "https://api.github.com/users/andygrove/orgs",
            "repos_url": "https://api.github.com/users/andygrove/repos",
            "events_url": "https://api.github.com/users/andygrove/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andygrove/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-14T18:00:07Z",
        "updated_at": "2023-02-14T18:00:28Z",
        "author_association": "CONTRIBUTOR",
        "body": "Here are some examples of mismatches when we remove the transcoding and use the same pattern `TEST$` on CPU and GPU.\r\n\r\n| Input | CPU | GPU |\r\n|-|-|-|\r\n| `TEST\\r` | true | false | \r\n| `TEST\\r\\n` | true | false |\r\n| `TEST\\u0085` | true | false |\r\n| `TEST\\u2028` | true | false |\r\n| `TEST\\u2029` | true | false |",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430155613/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430321628",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7585#issuecomment-1430321628",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7585",
        "id": 1430321628,
        "node_id": "IC_kwDOD7z77c5VQPnc",
        "user": {
            "login": "davidwendt",
            "id": 45795991,
            "node_id": "MDQ6VXNlcjQ1Nzk1OTkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/45795991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidwendt",
            "html_url": "https://github.com/davidwendt",
            "followers_url": "https://api.github.com/users/davidwendt/followers",
            "following_url": "https://api.github.com/users/davidwendt/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidwendt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidwendt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidwendt/subscriptions",
            "organizations_url": "https://api.github.com/users/davidwendt/orgs",
            "repos_url": "https://api.github.com/users/davidwendt/repos",
            "events_url": "https://api.github.com/users/davidwendt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidwendt/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-14T20:17:37Z",
        "updated_at": "2023-02-14T20:17:37Z",
        "author_association": "NONE",
        "body": "One option is to do a replace of these with a single `\\n` on the input data before evaluating the regex.\r\nThis can be done with a single libcudf call to `cudf::strings::replace` like the following:\r\n```\r\nauto input   = cudf::test::strings_column_wrapper({\"test\\r\\n\", \"test\u221e\", \"test\u03c6\", \"test\"});\r\nauto targets = cudf::test::strings_column_wrapper({\"\\r\\n\", \"\u221e\", \"\u03c6\"});\r\nauto repls   = cudf::test::strings_column_wrapper({\"\\n\", \"\\n\", \"\\n\"});\r\n\r\nauto results = cudf::strings::replace(cudf::strings_column_view{input},\r\n                                      cudf::strings_column_view(targets),\r\n                                      cudf::strings_column_view(repls));\r\nresults => {\"test\\n\", \"test\\n\", \"test\\n\", \"test\"}\r\n```\r\nAnd then apply `test$` pattern to that.\r\nI believe the `\\r\\n` to `\\n` replacement may already be occurring based on the comment here which was resolved.\r\nhttps://github.com/rapidsai/cudf/issues/11979#issuecomment-1307025060",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1430321628/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]