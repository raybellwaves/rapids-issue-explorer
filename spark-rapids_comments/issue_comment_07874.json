[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1462326879",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7874#issuecomment-1462326879",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7874",
        "id": 1462326879,
        "node_id": "IC_kwDOD7z77c5XKVZf",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-09T16:05:27Z",
        "updated_at": "2023-03-09T16:05:27Z",
        "author_association": "COLLABORATOR",
        "body": "We need to go through this on an operator by operator basis, and look at all of the types to see where there are gaps.\r\n\r\nFor example a udf that does a divide of integers could throw a divide by 0 exception, but the SQL divide by default does not.\r\n\r\nWe also have to see what happens if ANSI is enabled or not.  Can we force the divide to be an ANSI divide to get the behavior we want? There is a lot of testing and evaluation that we need to go through to understand what work needs to be done to really truly make this work.\r\n\r\nWhat about Long vs long. In UDFs if the type is a long and a null shows up as input, then the UDF is not run and the output is null. But if the type is a Long, then the null is passed to the UDF and we need to be able to handle throwing exceptions for NPEs at the same time the java/scala code would.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1462326879/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1478609749",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7874#issuecomment-1478609749",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7874",
        "id": 1478609749,
        "node_id": "IC_kwDOD7z77c5YIctV",
        "user": {
            "login": "mattahrens",
            "id": 5303895,
            "node_id": "MDQ6VXNlcjUzMDM4OTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5303895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mattahrens",
            "html_url": "https://github.com/mattahrens",
            "followers_url": "https://api.github.com/users/mattahrens/followers",
            "following_url": "https://api.github.com/users/mattahrens/following{/other_user}",
            "gists_url": "https://api.github.com/users/mattahrens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mattahrens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mattahrens/subscriptions",
            "organizations_url": "https://api.github.com/users/mattahrens/orgs",
            "repos_url": "https://api.github.com/users/mattahrens/repos",
            "events_url": "https://api.github.com/users/mattahrens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mattahrens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-21T21:31:03Z",
        "updated_at": "2023-03-21T21:31:03Z",
        "author_association": "COLLABORATOR",
        "body": "Functionality should be viewed as a prototype.  Additional validation would be needed before considering this by default.\n\n@viadea: what are the use cases where you have seen that enabling this feature has had a major benefit?",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1478609749/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1675174004",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7874#issuecomment-1675174004",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7874",
        "id": 1675174004,
        "node_id": "IC_kwDOD7z77c5j2SB0",
        "user": {
            "login": "viadea",
            "id": 9665750,
            "node_id": "MDQ6VXNlcjk2NjU3NTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9665750?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/viadea",
            "html_url": "https://github.com/viadea",
            "followers_url": "https://api.github.com/users/viadea/followers",
            "following_url": "https://api.github.com/users/viadea/following{/other_user}",
            "gists_url": "https://api.github.com/users/viadea/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/viadea/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/viadea/subscriptions",
            "organizations_url": "https://api.github.com/users/viadea/orgs",
            "repos_url": "https://api.github.com/users/viadea/repos",
            "events_url": "https://api.github.com/users/viadea/events{/privacy}",
            "received_events_url": "https://api.github.com/users/viadea/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-08-11T18:02:51Z",
        "updated_at": "2023-08-11T18:02:51Z",
        "author_association": "COLLABORATOR",
        "body": "@mattahrens Regarding `spark.rapids.sql.udfCompiler.enabled`, I did not realize we might have different results for supported Scala UDFs -> Catalyst expression. \r\nsometimes we enable this parameter and hope it can help convert those simple enough Scala UDFs.\r\nBut if we have such potential result issue, I would suggest we firstly address those before enabling it by default.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1675174004/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]