[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1134862417",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1134862417",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1134862417,
        "node_id": "IC_kwDOD7z77c5DpKBR",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-23T16:03:49Z",
        "updated_at": "2022-05-23T16:03:49Z",
        "author_association": "COLLABORATOR",
        "body": "The documentation needs to be cleaned up to make this clear. We do not support running arbitrary java/scala code on the GPU. We have some experimental support that can [transpile a simple UDF into catalyst expressions](https://nvidia.github.io/spark-rapids/docs/additional-functionality/udf-to-catalyst-expressions.html), but we do not have a way to actually execute java or scala code on the GPU.\r\n\r\nThis means something like the following \r\n```\r\nval df = Seq((\"A\", 1), (\"B\", 2), (\"A\", 3), (\"B\", 4)).toDF(\"str\", \"num\")\r\ndf.groupByKey(r => r.getString(0)).flatMapGroups((k, it) => it.map(i => i.getInt(1))).collect()\r\n```\r\n\r\nwill not be able to execute the `r => r.getString(0)` nor `(k, it) => it.map(i => i.getInt(1))` on the GPU.\r\n\r\n- `StaticInvoke` calls into custom JVM static methods. We cannot generically support it on the GPU.\r\n- `BoundReference` is simple to support, but generally only shows up after we have converted code to the GPU, not before, which is why we do not yet support it for translation. This appears to be related to how `StaticInvoke` is created.\r\n- `AssertNotNull` would be simple to implement, but is only inserted into a plan when converting to a DataFrame from a DataSet, so we have not prioritized it.\r\n- `ValidateExternalType` is there to validate that the value returned by a `DataSet` is compatible with the `DataFrame` it is being turned into. Because a `DataSet` is expected to hold things like a `java.math.BigDecimal` or a `java.lang.String` makes it very difficult to run on the GPU.\r\n- `GetExternalRowField` pulls values out of a `Row` not an `InternalRow` or an `UnsafeRow` which is what we currently support.\r\n\r\nIn order to support these we would have to do a lot of JVM byte code analysis at the plan level to be able to understand what was happening with the plan, and find ways to execute it on the GPU. This is not trivial which is why we have not taken on the challenge yet. In the short term, if it is possible moving to a DataFrame API instead of data set would allow us to accelerate the processing on the GPU.\r\n\r\n```\r\ndf.groupBy(\"str\").agg(collect_list(col(\"num\")).alias(\"value\")).selectExpr(\"explode(value) as value\").collect()\r\n```\r\nI know this is not possible in all cases, but the more complicated the JVM processing is, the less likely it is that we would be able to automatically do byte code analysis on it and create a corresponding GPU plan automatically.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1134862417/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1136447221",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1136447221",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1136447221,
        "node_id": "IC_kwDOD7z77c5DvM71",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-24T21:26:00Z",
        "updated_at": "2022-05-24T21:26:00Z",
        "author_association": "COLLABORATOR",
        "body": "@SidWeng is it okay if I hijack this and turn it into a research spike to see what it might take to add any dataset support at all?",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1136447221/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1136703563",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1136703563",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1136703563,
        "node_id": "IC_kwDOD7z77c5DwLhL",
        "user": {
            "login": "SidWeng",
            "id": 40747777,
            "node_id": "MDQ6VXNlcjQwNzQ3Nzc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/40747777?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SidWeng",
            "html_url": "https://github.com/SidWeng",
            "followers_url": "https://api.github.com/users/SidWeng/followers",
            "following_url": "https://api.github.com/users/SidWeng/following{/other_user}",
            "gists_url": "https://api.github.com/users/SidWeng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SidWeng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SidWeng/subscriptions",
            "organizations_url": "https://api.github.com/users/SidWeng/orgs",
            "repos_url": "https://api.github.com/users/SidWeng/repos",
            "events_url": "https://api.github.com/users/SidWeng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SidWeng/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-25T04:10:20Z",
        "updated_at": "2022-05-25T04:10:20Z",
        "author_association": "NONE",
        "body": "@revans2 Of course and thanks for  your explanation.\r\n\r\n> In order to support these we would have to do a lot of JVM byte code analysis at the plan level to be able to understand what was happening with the plan, and find ways to execute it on the GPU.\r\n\r\nTry to understand more detail, do you mean the byte code analysis should be done in `GpuOverrides.wrapPlan()`?\r\nFrom my current knowledge, `GpuOverrides.wrapPlan()` maps `SparkPlan` into `SparkPlanMeta` which wraps `ExecRule`, then `GpuOverrides.doConvertPlan()` convert `SparkPlanMeta` to GPU version `SparkPlan` using `SparkPlanMeta.convertToGpu()`.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1136703563/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1137394986",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1137394986",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1137394986,
        "node_id": "IC_kwDOD7z77c5Dy0Uq",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-25T15:01:20Z",
        "updated_at": "2022-05-25T15:01:20Z",
        "author_association": "COLLABORATOR",
        "body": "> Try to understand more detail, do you mean the byte code analysis should be done in GpuOverrides.wrapPlan()?\r\nFrom my current knowledge, GpuOverrides.wrapPlan() maps SparkPlan into SparkPlanMeta which wraps ExecRule, then GpuOverrides.doConvertPlan() convert SparkPlanMeta to GPU version SparkPlan using SparkPlanMeta.convertToGpu().\r\n\r\nHonestly, I do not know where the correct place to do the byte code analysis would be. Our UDF to Catalyst transpiler is a rule added to the logical plan optimizations. This is early on and ideally would let other optimizations take place, like predicate push down analysis that happens in the physical plan optimizations. If we wanted to really take advantage of everything possible we would want to have a rule early on in the logical plan that would do as much translation to catalyst as possible.\r\n\r\nBut that requires us to only use fully publicly available catalyst operations. it might be simpler to just add our own translation rules like you suggested for thinks like `InvokeStatic` that would do the byte code analysis and figure out that it is calling into `r.getString(0)` which we could then translate into whatever GPU code/operations are needed to support it, int he context it currently is in.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1137394986/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1188157922",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1188157922",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1188157922,
        "node_id": "IC_kwDOD7z77c5G0dni",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-18T19:12:25Z",
        "updated_at": "2022-07-18T19:12:25Z",
        "author_association": "COLLABORATOR",
        "body": "@SidWeng I have started to take a look at this and it is very complicated. It is likely to involve a lot of byte code analysis to have any hope of this working. But I really would like to get some examples of operations that we should look at first. When I search for dataset usage on github most of what I find are really bad examples where the dataframe API could be used just even more simply and cleanly than dataset could be. If you have some examples that you can share with us to help us focus on what is most important that would be great.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1188157922/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1206246822",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5587#issuecomment-1206246822",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5587",
        "id": 1206246822,
        "node_id": "IC_kwDOD7z77c5H5d2m",
        "user": {
            "login": "SidWeng",
            "id": 40747777,
            "node_id": "MDQ6VXNlcjQwNzQ3Nzc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/40747777?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SidWeng",
            "html_url": "https://github.com/SidWeng",
            "followers_url": "https://api.github.com/users/SidWeng/followers",
            "following_url": "https://api.github.com/users/SidWeng/following{/other_user}",
            "gists_url": "https://api.github.com/users/SidWeng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SidWeng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SidWeng/subscriptions",
            "organizations_url": "https://api.github.com/users/SidWeng/orgs",
            "repos_url": "https://api.github.com/users/SidWeng/repos",
            "events_url": "https://api.github.com/users/SidWeng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SidWeng/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-05T09:32:07Z",
        "updated_at": "2022-08-05T09:32:22Z",
        "author_association": "NONE",
        "body": "@revans2 Sorry for late reply and here's an example in our scenario:\r\n\r\nWe have a DataFrame of Record, what we want to do is group Record by region, then do some operation on each of group.\r\nAt first we use `repartitionAndSortWithinPartitions()` and `mapPartitions()` but we want to speed up with GPU and come up with the following code.\r\n```\r\ncase class Record(id: String, name: String, region: String)\r\n\r\n// df is a DataFrame of Record\r\ndf.groupByKey(i => i.getString(2))\r\n   .flatMapGroups { case (_, iter) => func(iter) }\r\n   .collect()\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1206246822/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]