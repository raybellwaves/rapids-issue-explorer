[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832768235",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9847#issuecomment-1832768235",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9847",
        "id": 1832768235,
        "node_id": "IC_kwDOD7z77c5tPdLr",
        "user": {
            "login": "jlowe",
            "id": 1360766,
            "node_id": "MDQ6VXNlcjEzNjA3NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jlowe",
            "html_url": "https://github.com/jlowe",
            "followers_url": "https://api.github.com/users/jlowe/followers",
            "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
            "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
            "organizations_url": "https://api.github.com/users/jlowe/orgs",
            "repos_url": "https://api.github.com/users/jlowe/repos",
            "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jlowe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-29T21:59:44Z",
        "updated_at": "2023-11-29T21:59:44Z",
        "author_association": "MEMBER",
        "body": "The -0.0 vs 0.0 is not an actual mismatch in the test (it's using approx float comparison already), that's an artifact of the difftool used to produce the output when the test fails which is just looking at raw text and no longer doing the floating point approx comparison logic.\r\n\r\nThe real issue is more along the lines of #9350.  In this specific case with DATAGEN_SEED=3, the problem is only with single-precision floating point value 6.121944898040965e-05f which gets rounded incorrectly up instead of down.  I tracked this down to a problem in libcudf where the calculations for single-precision floating point rounding are forced to use single-precision floating point throughout which introduces enough error to cause the issue.  Filed https://github.com/rapidsai/cudf/issues/14528",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832768235/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832791921",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9847#issuecomment-1832791921",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9847",
        "id": 1832791921,
        "node_id": "IC_kwDOD7z77c5tPi9x",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-29T22:19:52Z",
        "updated_at": "2023-11-29T22:19:52Z",
        "author_association": "COLLABORATOR",
        "body": "@jlowe do you think that this might happen with double values too for rounding to larger numbers of digits?  Right now we go up to 10, which exposed a problem for float. But should we try larger values for double?",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832791921/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832800276",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9847#issuecomment-1832800276",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9847",
        "id": 1832800276,
        "node_id": "IC_kwDOD7z77c5tPlAU",
        "user": {
            "login": "jlowe",
            "id": 1360766,
            "node_id": "MDQ6VXNlcjEzNjA3NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jlowe",
            "html_url": "https://github.com/jlowe",
            "followers_url": "https://api.github.com/users/jlowe/followers",
            "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
            "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
            "organizations_url": "https://api.github.com/users/jlowe/orgs",
            "repos_url": "https://api.github.com/users/jlowe/repos",
            "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jlowe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-29T22:27:40Z",
        "updated_at": "2023-11-29T22:27:40Z",
        "author_association": "MEMBER",
        "body": "> do you think that this might happen with double values too for rounding to larger numbers of digits?\r\n\r\nYes, I'm sure that will happen at some point for specific values and rounding places, even for doubles.  We'll won't be able to match Spark's behavior here if we stick with floating-point types, since Spark goes to BigDecimal and thus will have a lot more precision to wield.  Fixing the cudf issue I filed for floats may give us enough additional precision to handle most (all?) of the FLOAT32 cases, but it won't do anything to improve the known limitations when rounding with doubles to high numbers of decimal places.  We may want to do some experiments to know how many decimal places we can reliably round to and consider fallback to the CPU when we see rounding to a decimal place we cannot reliably match.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1832800276/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833970323",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9847#issuecomment-1833970323",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9847",
        "id": 1833970323,
        "node_id": "IC_kwDOD7z77c5tUCqT",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T15:11:38Z",
        "updated_at": "2023-11-30T15:11:38Z",
        "author_association": "NONE",
        "body": "> We may want to do some experiments to know how many decimal places we can reliably round to and consider fallback to the CPU when we see rounding to a decimal place we cannot reliably match.\r\n\r\nI think for float32 trying to round anything more than 7 decimal places (inclusive) might result in some \"strange\" results (even if you use double precision).\r\n\r\nConsider a float32 value and its two closest neighbours:\r\n\r\n```\r\nx.1234567890 // decimal digits\r\n1.00009977817535400391\r\n1.00009989738464355469 // <-- we're trying to round this one\r\n1.00010001659393310547\r\n```\r\n\r\nRounding to six digits produces `1.00010001658383310547`, rounding to seven digits reproduces the input (you might want to see 1.0000999 as the \"correctly rounded in infinite precision\" value). But none of the nearby floats are a good representation of the value rounded to 7 digits. So you'd need to produce a double result to represent the rounding \"correctly\" (whatever that means).",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1833970323/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]