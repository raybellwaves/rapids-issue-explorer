[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479714154",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7919#issuecomment-1479714154",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7919",
        "id": 1479714154,
        "node_id": "IC_kwDOD7z77c5YMqVq",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-22T14:53:33Z",
        "updated_at": "2023-03-22T14:53:33Z",
        "author_association": "COLLABORATOR",
        "body": "@nvliyuan There are several things happening here and only one of them we should consider to be a bug.\r\n\r\nFirst we are doing a write on the GPU for ORC when bloom filters are enabled. We do not support bloom filter writes on the GPU, so what we write out does not have any bloom filter data in it.  This could be a bug and we should at least fall back to the CPU until bloom filter writes can be supported by the GPU. I will file a separate issue for falling back to the CPU for bloom filter writes.\r\n\r\nAs for reading the data this works as we expect. We get the correct answer, but we have to scan more rows than we expect/want to scan. We should look into the bloom filter to understand if we are, or are not using it for filtering out stripes. I am not sure if that would be good enough or not.  It would require some more investigation.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479714154/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479720516",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7919#issuecomment-1479720516",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7919",
        "id": 1479720516,
        "node_id": "IC_kwDOD7z77c5YMr5E",
        "user": {
            "login": "nvliyuan",
            "id": 84758614,
            "node_id": "MDQ6VXNlcjg0NzU4NjE0",
            "avatar_url": "https://avatars.githubusercontent.com/u/84758614?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nvliyuan",
            "html_url": "https://github.com/nvliyuan",
            "followers_url": "https://api.github.com/users/nvliyuan/followers",
            "following_url": "https://api.github.com/users/nvliyuan/following{/other_user}",
            "gists_url": "https://api.github.com/users/nvliyuan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nvliyuan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nvliyuan/subscriptions",
            "organizations_url": "https://api.github.com/users/nvliyuan/orgs",
            "repos_url": "https://api.github.com/users/nvliyuan/repos",
            "events_url": "https://api.github.com/users/nvliyuan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nvliyuan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-22T14:57:34Z",
        "updated_at": "2023-03-22T14:57:34Z",
        "author_association": "COLLABORATOR",
        "body": "> We do not support bloom filter writes on the GPU, so what we write out does not have any bloom filter data in it.\r\n\r\nsorry forget to mention in the issue that the normal dataset and bloom dataset are all generated by CPU.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479720516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479730504",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7919#issuecomment-1479730504",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7919",
        "id": 1479730504,
        "node_id": "IC_kwDOD7z77c5YMuVI",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-22T15:01:14Z",
        "updated_at": "2023-03-22T15:01:14Z",
        "author_association": "COLLABORATOR",
        "body": "I filed https://github.com/NVIDIA/spark-rapids/issues/7921 for the bug where we need to fall back to the CPU.  As for bloom filter support on reads we need to do some investigation and see what it would take to support it at least for filtering out stripes.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1479730504/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1608210575",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7919#issuecomment-1608210575",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7919",
        "id": 1608210575,
        "node_id": "IC_kwDOD7z77c5f21iP",
        "user": {
            "login": "jlowe",
            "id": 1360766,
            "node_id": "MDQ6VXNlcjEzNjA3NjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jlowe",
            "html_url": "https://github.com/jlowe",
            "followers_url": "https://api.github.com/users/jlowe/followers",
            "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
            "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
            "organizations_url": "https://api.github.com/users/jlowe/orgs",
            "repos_url": "https://api.github.com/users/jlowe/repos",
            "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jlowe/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-06-26T20:39:22Z",
        "updated_at": "2023-06-26T20:39:22Z",
        "author_association": "MEMBER",
        "body": "> We should look into the bloom filter to understand if we are, or are not using it for filtering out stripes.\r\n\r\nI verified that the GPU read is leveraging bloom filters for eliminating stripes.  I tried to load data from an ORC file where the min/max statistics were unable to eliminate the stripe based on the ID being probed but the bloom filter was, and zero rows were emitted from the GPU OrcScan.  So the thing missing is filtering row groups within a stripe (i.e.: using the row index stats).\r\n\r\nFiltering rowgroups within a stripe is possible, but it will be tricky given the existing APIs to cudf.  A row index entry has a triplet of info for compressed column streams: an offset the compression block containing the row group, the number of compression bytes to discard at the start of the block, and the number of RLE bytes to discard after that to get to the start of the rowgroup.  We'd either need to develop a new, lower-level API for feeding data to the libcudf ORC reader, allowing cudf to locate the data without actually needing the data to be there (so we could avoid the I/O), or we would need to cheaply fabricate stand-in data for the data that was skipped in the remote filesystem to keep the ORC file valid (probably necessitating re-encoding the ORC row index stream or potentially writing a lot of data on the CPU).",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1608210575/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]