[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656849732",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/343#issuecomment-656849732",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/343",
        "id": 656849732,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njg0OTczMg==",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-10T19:22:19Z",
        "updated_at": "2020-07-10T19:22:19Z",
        "author_association": "COLLABORATOR",
        "body": "I am just curious how much effort we want to put into this.  If it is just a string, then we can include it in the description we already have implemented.  Or perhaps a separate field like we do for incompat.\r\n\r\nhttps://github.com/NVIDIA/spark-rapids/blob/468abaa328d45e330ea4a7f7918201784b5a82e3/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuOverrides.scala#L1724",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656849732/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656851610",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/343#issuecomment-656851610",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/343",
        "id": 656851610,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njg1MTYxMA==",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-10T19:27:02Z",
        "updated_at": "2020-07-10T19:27:02Z",
        "author_association": "COLLABORATOR",
        "body": "Sorry one more thing.  The problem with all of this is trying to keep everything in sync, like any other documentation.  If we have to keep a text string somewhere in sync with the code it describes, we want to be sure that the code and the string are as close to each other as possible, and even then they will get out of sync.  The best would be to do something with the actual code.  If we could make some of the checks data driven, like input types, and scalar vs non-scalar parameters, then we could have both the documentation and the checks run off of the same code.  That to me is what we should be shooting for.\r\n\r\nAnnotations don't appear to solve any of that for me.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656851610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656866674",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/343#issuecomment-656866674",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/343",
        "id": 656866674,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njg2NjY3NA==",
        "user": {
            "login": "abellina",
            "id": 1901059,
            "node_id": "MDQ6VXNlcjE5MDEwNTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abellina",
            "html_url": "https://github.com/abellina",
            "followers_url": "https://api.github.com/users/abellina/followers",
            "following_url": "https://api.github.com/users/abellina/following{/other_user}",
            "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
            "organizations_url": "https://api.github.com/users/abellina/orgs",
            "repos_url": "https://api.github.com/users/abellina/repos",
            "events_url": "https://api.github.com/users/abellina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abellina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-10T20:05:53Z",
        "updated_at": "2020-07-10T20:07:08Z",
        "author_association": "COLLABORATOR",
        "body": "> The best would be to do something with the actual code. If we could make some of the checks data driven, like input types, and scalar vs non-scalar parameters, then we could have both the documentation and the checks run off of the same code. That to me is what we should be shooting for.\r\n\r\nI agree, but this goes back to the level of effort. I think for types, the effort is worth it though, and I can see ways of tackling it. It seems to me that given a set of `DataType` we should be able to call a static function that returns some kind of _SupportLevel_ instance that can state that level: \"supported\", \"not supported\", \"supported IF condition\", and the condition expressed in a way that can be evaluated (hands waving).\r\n\r\n> Annotations don't appear to solve any of that for me.\r\n\r\nWell they do bring the info closer to the [code](https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/aggregate/Average.scala#L26), but yeah no guarantee that this would be updated => it's not executable. That said I do not know what the alternative is, because there could be things not easily captured (or not possible to capture), and it seems like good code higene just like keeping function headers up to date, and adding a proper description (something in the checklist). I can think of ways to express that the gpu join only supports certain `JoinType` instances, something like:\r\n\r\n```\r\n  validIf(join.joinType)\r\n      .matches(Inner, Cross)\r\n      .otherwise(s\"$join.joinType currently is not supported\")\r\n```\r\n\r\nBut then you have the cases where we depend on something at runtime:\r\n\r\n```\r\n    val left = childPlans.head.convertIfNeeded()\r\n    val right = childPlans(1).convertIfNeeded()\r\n    // The broadcast part of this must be a BroadcastExchangeExec\r\n    val buildSide = join.buildSide match {\r\n      case BuildLeft => left\r\n      case BuildRight => right\r\n    }\r\n    if (!buildSide.isInstanceOf[GpuBroadcastExchangeExec]) {\r\n      throw new IllegalStateException(\"the broadcast must be on the GPU too\")\r\n    }\r\n```\r\n\r\nAnd yeah this one we can't really capture in a good way. Unless I am missing something.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/656866674/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]