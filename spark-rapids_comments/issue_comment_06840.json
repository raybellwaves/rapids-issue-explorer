[
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1847774868",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/6840#issuecomment-1847774868",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/6840",
        "id": 1847774868,
        "node_id": "IC_kwDOD7z77c5uIs6U",
        "user": {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-08T20:02:12Z",
        "updated_at": "2023-12-08T20:02:12Z",
        "author_association": "COLLABORATOR",
        "body": "After doing some research into the JDK's API, here are some interesting findings:\r\n\r\n1) Java stores the transitions for the timezones with daylight savings after they have already happened. So for past dates, the transition list has all the previous daylight savings transitions in the transition list as fixed transitions (which makes sense). This means that the transition list will actually grow each year for these timezones. Also, the implication is that for dates in the past, we would adopt the same approach we take with non-repeating rules. \r\n\r\n2) Transition rules exist for dates in the future. The idea is for each current and future year, you can compute the ZoneOffsetTransition for that future year. \r\n\r\nSo we have 2 approaches we can try here:\r\n\r\n1) We can use `ZoneOffsetTransitionRule.createTransitition(...)` to create transitions for a set of future years and append these to fixed transition list for that timezone. This would incur a longer initialization time and more memory required to store the extra transitions, but computing the conversion to and from UTC would simply use the existing kernel as if the transitions were fixed and non-repeating. This is definitely the simplest to implement and is parallel to the implementation that cuDF currently uses in parsing non-UTC timestamps from ORC files. \r\n\r\n2) We would store the rules in another column vector, and then implement an addition to the kernel that would use rules if we would fall out of the existing transition list (ie use a transition that doesn't exist yet). We would have to process the timestamp to figure out which rule would apply and then apply a created transition from that rule.  The logic is more complicated in this case so it might not perform as well as the simpler fixed transition kernel since we would need some additional conditional logic in this case.  But initialization time would only increase a nominal amount to store the rules, and the storage cost would only increase on the yearly basis that Java uses and for the additional columns to store rules.\r\n\r\nFor now, I'm inclined to try out (2) first since I think (1) feels more like too much additional cost for what looks like premature optimization. However, we could keep in mind to implement both approaches (or a combination) since it could be something that is tuned to the data involved. For example if we are working with a lot of future timestamps, (1) could be better since that algorithm is a lot cleaner than doing a lot of processing and extraction from each timestamp to determine if it falls under a specific rule. Also, if we can partially tune an implementation of (1), maybe we can cover more than enough with less overhead.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1847774868/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1847784228",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/6840#issuecomment-1847784228",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/6840",
        "id": 1847784228,
        "node_id": "IC_kwDOD7z77c5uIvMk",
        "user": {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-08T20:10:27Z",
        "updated_at": "2023-12-08T20:10:27Z",
        "author_association": "COLLABORATOR",
        "body": "Should also add, at minimum for approach (2), we should ensure the transitions for the current year are already computed since that logic is potentially more complicated given the overlap between fixed transitions and choosing rules for a daylight savings cycle that hasn't yet completed. It might be much easier to start the following year with fresh rule choice at that point.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1847784228/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1870447166",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/6840#issuecomment-1870447166",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/6840",
        "id": 1870447166,
        "node_id": "IC_kwDOD7z77c5vfMI-",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-27T16:18:07Z",
        "updated_at": "2023-12-27T16:18:07Z",
        "author_association": "COLLABORATOR",
        "body": "I did some initial work looking at approach 1 when I filed the issue. The size of the database is not likely to be too horrible on a per time-zone basis. It would probably be about 11 MiB per time zone because it would need to go out to the year 294247 or so to fully support everything that Spark can also support. \r\n\r\n```\r\n294247 years * 2 transitions per year * (8 + 8 + 4 bytes) => 11.22 MiB\r\n```\r\n\r\nThere are about 206 time zones that have transition rules\r\n\r\n```\r\nscala> java.time.ZoneId.getAvailableZoneIds.asScala.map(f => java.time.ZoneId.of(f).normalized).filter(f => !f.getRules().getTransitionRules.isEmpty()).size\r\nres18: Int = 206\r\n```\r\n\r\nWhich means we would need about 2.25 GiB to store all of the rules for those timezones.  That is small enough That I don't think we would need to worry about the Column size limits in Spark, but it is large enough that I don't think we want to try and keep the entire thing cached in either CPU or GPU memory. So option 2 is the ideal solution if we can make it work. If we need to we could try and play some games where we load timezones on demand as they are needed, as we probably need only one or two timezone ever. We could also look for the maximum timestamp and load up to that point, as it should be very very uncommon to need all of the data. But that would open up a number of corner cases which I would not be super happy about. So if we can make the dynamic version work, then it would be awesome.\r\n\r\nAlso the dynamic version would set us up to be able to support things like fixed offset rules that don't actually have a name.",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1870447166/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1998774655",
        "html_url": "https://github.com/NVIDIA/spark-rapids/issues/6840#issuecomment-1998774655",
        "issue_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/6840",
        "id": 1998774655,
        "node_id": "IC_kwDOD7z77c53IuF_",
        "user": {
            "login": "res-life",
            "id": 8166419,
            "node_id": "MDQ6VXNlcjgxNjY0MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8166419?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/res-life",
            "html_url": "https://github.com/res-life",
            "followers_url": "https://api.github.com/users/res-life/followers",
            "following_url": "https://api.github.com/users/res-life/following{/other_user}",
            "gists_url": "https://api.github.com/users/res-life/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/res-life/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/res-life/subscriptions",
            "organizations_url": "https://api.github.com/users/res-life/orgs",
            "repos_url": "https://api.github.com/users/res-life/repos",
            "events_url": "https://api.github.com/users/res-life/events{/privacy}",
            "received_events_url": "https://api.github.com/users/res-life/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-03-15T01:49:14Z",
        "updated_at": "2024-03-15T01:49:14Z",
        "author_association": "COLLABORATOR",
        "body": "Not planing work on this for release 24.04\r\n@sameerz  can we move it to next release?",
        "reactions": {
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/comments/1998774655/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]