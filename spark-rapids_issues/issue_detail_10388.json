{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10388",
    "id": 2121708924,
    "node_id": "I_kwDOD7z77c5-drV8",
    "number": 10388,
    "title": "[BUG] test_hash_query_multiple_distincts_with_non_distinct test failed",
    "user": {
        "login": "nartal1",
        "id": 50492963,
        "node_id": "MDQ6VXNlcjUwNDkyOTYz",
        "avatar_url": "https://avatars.githubusercontent.com/u/50492963?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nartal1",
        "html_url": "https://github.com/nartal1",
        "followers_url": "https://api.github.com/users/nartal1/followers",
        "following_url": "https://api.github.com/users/nartal1/following{/other_user}",
        "gists_url": "https://api.github.com/users/nartal1/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nartal1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nartal1/subscriptions",
        "organizations_url": "https://api.github.com/users/nartal1/orgs",
        "repos_url": "https://api.github.com/users/nartal1/repos",
        "events_url": "https://api.github.com/users/nartal1/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nartal1/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-02-06T21:38:41Z",
    "updated_at": "2024-02-07T01:38:11Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n\r\nCouple of integration tests failed in CI.\r\n\r\n```\r\n[2024-02-06T18:59:36.497Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_query_multiple_distincts_with_non_distinct[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.batchSizeBytes': '250'}-[('a', RepeatSeq(Long)), ('b', Integer), ('c', Long)]][DATAGEN_SEED=1707241567, INJECT_OOM, IGNORE_ORDER, INCOMPAT, APPROXIMATE_FLOAT] - AssertionError: GPU and CPU float values are different [9, 'avg(DISTINCT c)']\r\n\r\n[2024-02-06T18:59:36.497Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_query_multiple_distincts_with_non_distinct[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.batchSizeBytes': '250'}-[('a', RepeatSeq(Double)), ('b', Integer), ('c', Long)]][DATAGEN_SEED=1707241567, INJECT_OOM, IGNORE_ORDER, INCOMPAT, APPROXIMATE_FLOAT] - AssertionError: GPU and CPU float values are different [1, 'avg(DISTINCT c)']\r\n\r\n[2024-02-06T18:59:36.497Z] = 2 failed, 22302 passed, 947 skipped, 708 xfailed, 2538 xpassed, 13049 warnings in 4408.49s (1:13:28) =\r\n```\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```\r\n[2024-02-06T18:59:36.491Z] =================================== FAILURES ===================================\r\n\r\n[2024-02-06T18:59:36.491Z] _ test_hash_query_multiple_distincts_with_non_distinct[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.batchSizeBytes': '250'}-[('a', RepeatSeq(Long)), ('b', Integer), ('c', Long)]] _\r\n\r\n[2024-02-06T18:59:36.491Z] [gw3] linux -- Python 3.9.18 /opt/conda/bin/python\r\n\r\n[2024-02-06T18:59:36.491Z] \r\n\r\n[2024-02-06T18:59:36.491Z] data_gen = [('a', RepeatSeq(Long)), ('b', Integer), ('c', Long)]\r\n\r\n[2024-02-06T18:59:36.491Z] conf = {'spark.rapids.sql.batchSizeBytes': '250', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.variableFloatAgg.enabled': 'true'}\r\n\r\n[2024-02-06T18:59:36.491Z] \r\n\r\n[2024-02-06T18:59:36.491Z]     @approximate_float\r\n\r\n[2024-02-06T18:59:36.491Z]     @ignore_order\r\n\r\n[2024-02-06T18:59:36.491Z]     @incompat\r\n\r\n[2024-02-06T18:59:36.491Z]     @pytest.mark.parametrize('data_gen', _init_list, ids=idfn)\r\n\r\n[2024-02-06T18:59:36.491Z]     @pytest.mark.parametrize('conf', get_params(_confs, params_markers_for_confs), ids=idfn)\r\n\r\n[2024-02-06T18:59:36.491Z]     def test_hash_query_multiple_distincts_with_non_distinct(data_gen, conf):\r\n\r\n[2024-02-06T18:59:36.491Z]         local_conf = copy_and_update(conf, {'spark.sql.legacy.allowParameterlessCount': 'true'})\r\n\r\n[2024-02-06T18:59:36.491Z] >       assert_gpu_and_cpu_are_equal_sql(\r\n\r\n[2024-02-06T18:59:36.491Z]             lambda spark : gen_df(spark, data_gen, length=100),\r\n\r\n[2024-02-06T18:59:36.491Z]             \"hash_agg_table\",\r\n\r\n[2024-02-06T18:59:36.491Z]             'select avg(a),' +\r\n\r\n[2024-02-06T18:59:36.491Z]             'avg(distinct b),' +\r\n\r\n[2024-02-06T18:59:36.491Z]             'avg(distinct c),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'sum(distinct a),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'count(distinct b),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'count(a),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'count(),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'sum(a),' +\r\n\r\n[2024-02-06T18:59:36.492Z]             'min(a),'+\r\n\r\n[2024-02-06T18:59:36.492Z]             'max(a) from hash_agg_table group by a',\r\n\r\n[2024-02-06T18:59:36.492Z]             conf=local_conf)\r\n\r\n[2024-02-06T18:59:36.492Z] \r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/hash_aggregate_test.py:1100: \r\n\r\n[2024-02-06T18:59:36.492Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:637: in assert_gpu_and_cpu_are_equal_sql\r\n\r\n[2024-02-06T18:59:36.492Z]     assert_gpu_and_cpu_are_equal_collect(do_it_all, conf, is_cpu_first=is_cpu_first)\r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n\r\n[2024-02-06T18:59:36.492Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n\r\n[2024-02-06T18:59:36.492Z]     assert_equal(from_cpu, from_gpu)\r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n\r\n[2024-02-06T18:59:36.492Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n\r\n[2024-02-06T18:59:36.492Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-02-06T18:59:36.492Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-02-06T18:59:36.492Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-02-06T18:59:36.492Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-02-06T18:59:36.492Z] \r\n\r\n[2024-02-06T18:59:36.492Z] cpu = 0.3333333333333333, gpu = 0.0\r\n\r\n[2024-02-06T18:59:36.492Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f671694b280>\r\n\r\n[2024-02-06T18:59:36.492Z] path = [9, 'avg(DISTINCT c)']\r\n\r\n[2024-02-06T18:59:36.492Z] \r\n\r\n[2024-02-06T18:59:36.492Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n\r\n[2024-02-06T18:59:36.492Z]         t = type(cpu)\r\n\r\n[2024-02-06T18:59:36.492Z]         if (t is Row):\r\n\r\n[2024-02-06T18:59:36.492Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-02-06T18:59:36.492Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n\r\n[2024-02-06T18:59:36.492Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n\r\n[2024-02-06T18:59:36.492Z]                 for field in cpu.__fields__:\r\n\r\n[2024-02-06T18:59:36.492Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-02-06T18:59:36.492Z]             else:\r\n\r\n[2024-02-06T18:59:36.492Z]                 for index in range(len(cpu)):\r\n\r\n[2024-02-06T18:59:36.492Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-02-06T18:59:36.492Z]         elif (t is list):\r\n\r\n[2024-02-06T18:59:36.492Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-02-06T18:59:36.492Z]             for index in range(len(cpu)):\r\n\r\n[2024-02-06T18:59:36.492Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-02-06T18:59:36.492Z]         elif (t is tuple):\r\n\r\n[2024-02-06T18:59:36.492Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-02-06T18:59:36.492Z]             for index in range(len(cpu)):\r\n\r\n[2024-02-06T18:59:36.492Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-02-06T18:59:36.492Z]         elif (t is pytypes.GeneratorType):\r\n\r\n[2024-02-06T18:59:36.492Z]             index = 0\r\n\r\n[2024-02-06T18:59:36.492Z]             # generator has no zip :( so we have to do this the hard way\r\n\r\n[2024-02-06T18:59:36.492Z]             done = False\r\n\r\n[2024-02-06T18:59:36.492Z]             while not done:\r\n\r\n[2024-02-06T18:59:36.492Z]                 sub_cpu = None\r\n\r\n[2024-02-06T18:59:36.492Z]                 sub_gpu = None\r\n\r\n[2024-02-06T18:59:36.492Z]                 try:\r\n\r\n[2024-02-06T18:59:36.492Z]                     sub_cpu = next(cpu)\r\n\r\n[2024-02-06T18:59:36.492Z]                 except StopIteration:\r\n\r\n[2024-02-06T18:59:36.492Z]                     done = True\r\n\r\n[2024-02-06T18:59:36.492Z]     \r\n\r\n[2024-02-06T18:59:36.492Z]                 try:\r\n\r\n[2024-02-06T18:59:36.492Z]                     sub_gpu = next(gpu)\r\n\r\n[2024-02-06T18:59:36.492Z]                 except StopIteration:\r\n\r\n[2024-02-06T18:59:36.492Z]                     done = True\r\n\r\n[2024-02-06T18:59:36.492Z]     \r\n\r\n[2024-02-06T18:59:36.492Z]                 if done:\r\n\r\n[2024-02-06T18:59:36.492Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n\r\n[2024-02-06T18:59:36.492Z]                 else:\r\n\r\n[2024-02-06T18:59:36.492Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n\r\n[2024-02-06T18:59:36.492Z]     \r\n\r\n[2024-02-06T18:59:36.492Z]                 index = index + 1\r\n\r\n[2024-02-06T18:59:36.492Z]         elif (t is dict):\r\n\r\n[2024-02-06T18:59:36.492Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n\r\n[2024-02-06T18:59:36.493Z]             # so sort the items to do our best with ignoring the order of dicts\r\n\r\n[2024-02-06T18:59:36.493Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-02-06T18:59:36.493Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-02-06T18:59:36.493Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n\r\n[2024-02-06T18:59:36.493Z]         elif (t is int):\r\n\r\n[2024-02-06T18:59:36.493Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n\r\n[2024-02-06T18:59:36.493Z]         elif (t is float):\r\n\r\n[2024-02-06T18:59:36.493Z]             if (math.isnan(cpu)):\r\n\r\n[2024-02-06T18:59:36.493Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n\r\n[2024-02-06T18:59:36.493Z]             else:\r\n\r\n[2024-02-06T18:59:36.493Z] >               assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n\r\n[2024-02-06T18:59:36.493Z] E               AssertionError: GPU and CPU float values are different [9, 'avg(DISTINCT c)']\r\n\r\n[2024-02-06T18:59:36.493Z] \r\n\r\n[2024-02-06T18:59:36.493Z] ../../src/main/python/asserts.py:83: AssertionError\r\n\r\n[2024-02-06T18:59:36.493Z] ----------------------------- Captured stdout call -----------------------------\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Row comparison failure details</summary>\r\n```\r\n[2024-02-06T18:59:36.493Z] ### CPU RUN ###\r\n\r\n[2024-02-06T18:59:36.493Z] ### GPU RUN ###\r\n\r\n[2024-02-06T18:59:36.493Z] ### COLLECT: GPU TOOK 4.849984169006348 CPU TOOK 0.2125396728515625 ###\r\n\r\n[2024-02-06T18:59:36.493Z] --- CPU OUTPUT\r\n\r\n[2024-02-06T18:59:36.493Z] +++ GPU OUTPUT\r\n\r\n[2024-02-06T18:59:36.493Z] @@ -1,16 +1,16 @@\r\n\r\n[2024-02-06T18:59:36.493Z] -Row(avg(a)=None, avg(DISTINCT b)=97847931.6, avg(DISTINCT c)=6.542211850285254e+17, sum(DISTINCT a)=None, count(DISTINCT b)=5, count(a)=0, count()=0, sum(a)=None, min(a)=None, max(a)=None)\r\n\r\n[2024-02-06T18:59:36.493Z] +Row(avg(a)=None, avg(DISTINCT b)=97847931.6, avg(DISTINCT c)=6.542211850285253e+17, sum(DISTINCT a)=None, count(DISTINCT b)=5, count(a)=0, count()=0, sum(a)=None, min(a)=None, max(a)=None)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-8.594081403696903e+18, avg(DISTINCT b)=-1249600293.2, avg(DISTINCT c)=4.930553319657971e+18, sum(DISTINCT a)=-8594081403696904602, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-6076918871065419778, min(a)=-8594081403696904602, max(a)=-8594081403696904602)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-7.292019604031148e+18, avg(DISTINCT b)=-1047329468.5, avg(DISTINCT c)=-2.766247696420863e+18, sum(DISTINCT a)=-7292019604031147756, count(DISTINCT b)=4, count(a)=5, count()=0, sum(a)=433390127263364452, min(a)=-7292019604031147756, max(a)=-7292019604031147756)\r\n\r\n[2024-02-06T18:59:36.493Z] -Row(avg(a)=-6.324399690665519e+18, avg(DISTINCT b)=410847587.25, avg(DISTINCT c)=2.7951354725822003e+18, sum(DISTINCT a)=-6324399690665518815, count(DISTINCT b)=4, count(a)=5, count()=0, sum(a)=5271489694091509157, min(a)=-6324399690665518815, max(a)=-6324399690665518815)\r\n\r\n[2024-02-06T18:59:36.493Z] +Row(avg(a)=-6.324399690665519e+18, avg(DISTINCT b)=410847587.25, avg(DISTINCT c)=2.795135472582201e+18, sum(DISTINCT a)=-6324399690665518815, count(DISTINCT b)=4, count(a)=5, count()=0, sum(a)=5271489694091509157, min(a)=-6324399690665518815, max(a)=-6324399690665518815)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-5.529714505917774e+18, avg(DISTINCT b)=524121794.2, avg(DISTINCT c)=-2.065017352565244e+18, sum(DISTINCT a)=-5529714505917774829, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-9201828455879322529, min(a)=-5529714505917774829, max(a)=-5529714505917774829)\r\n\r\n[2024-02-06T18:59:36.493Z] -Row(avg(a)=-3.4344446251788196e+18, avg(DISTINCT b)=300605186.4, avg(DISTINCT c)=3.119367024348167e+18, sum(DISTINCT a)=-3434444625178819882, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=1274520947815452206, min(a)=-3434444625178819882, max(a)=-3434444625178819882)\r\n\r\n[2024-02-06T18:59:36.493Z] +Row(avg(a)=-3.4344446251788196e+18, avg(DISTINCT b)=300605186.4, avg(DISTINCT c)=3.119367024348168e+18, sum(DISTINCT a)=-3434444625178819882, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=1274520947815452206, min(a)=-3434444625178819882, max(a)=-3434444625178819882)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-3.310449533566134e+18, avg(DISTINCT b)=265857672.4, avg(DISTINCT c)=3.272777074709599e+18, sum(DISTINCT a)=-3310449533566133802, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=1894496405878882606, min(a)=-3310449533566133802, max(a)=-3310449533566133802)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-2.884625137694547e+18, avg(DISTINCT b)=546079903.6, avg(DISTINCT c)=6.166362012566798e+18, sum(DISTINCT a)=-2884625137694547083, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=4023618385236816201, min(a)=-2884625137694547083, max(a)=-2884625137694547083)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-2.7104747527529626e+18, avg(DISTINCT b)=12693216.2, avg(DISTINCT c)=2.4840956037708134e+18, sum(DISTINCT a)=-2710474752752962552, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=4894370309944738856, min(a)=-2710474752752962552, max(a)=-2710474752752962552)\r\n\r\n[2024-02-06T18:59:36.493Z] -Row(avg(a)=-1.0587361154177737e+18, avg(DISTINCT b)=334875179.4, avg(DISTINCT c)=0.3333333333333333, sum(DISTINCT a)=-1058736115417773644, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-5293680577088868220, min(a)=-1058736115417773644, max(a)=-1058736115417773644)\r\n\r\n[2024-02-06T18:59:36.493Z] +Row(avg(a)=-1.0587361154177737e+18, avg(DISTINCT b)=334875179.4, avg(DISTINCT c)=0.0, sum(DISTINCT a)=-1058736115417773644, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-5293680577088868220, min(a)=-1058736115417773644, max(a)=-1058736115417773644)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=-1.8675424882859837e+17, avg(DISTINCT b)=584921538.0, avg(DISTINCT c)=1.2170936589137014e+18, sum(DISTINCT a)=-186754248828598369, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-933771244142991845, min(a)=-186754248828598369, max(a)=-186754248828598369)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=9.520202753884983e+17, avg(DISTINCT b)=-654122271.6, avg(DISTINCT c)=-3.979133140836961e+18, sum(DISTINCT a)=952020275388498180, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=4760101376942490900, min(a)=952020275388498180, max(a)=952020275388498180)\r\n\r\n[2024-02-06T18:59:36.493Z] -Row(avg(a)=3.0361021002538097e+18, avg(DISTINCT b)=129949043.4, avg(DISTINCT c)=5.512833278957472e+17, sum(DISTINCT a)=3036102100253810148, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-3266233572440500876, min(a)=3036102100253810148, max(a)=3036102100253810148)\r\n\r\n[2024-02-06T18:59:36.493Z] +Row(avg(a)=3.0361021002538097e+18, avg(DISTINCT b)=129949043.4, avg(DISTINCT c)=5.5128332789574694e+17, sum(DISTINCT a)=3036102100253810148, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-3266233572440500876, min(a)=3036102100253810148, max(a)=3036102100253810148)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=3.789965635110535e+18, avg(DISTINCT b)=-539085763.0, avg(DISTINCT c)=2.3197003604368456e+18, sum(DISTINCT a)=3789965635110535153, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=503084101843124149, min(a)=3789965635110535153, max(a)=3789965635110535153)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=4.389238186344302e+18, avg(DISTINCT b)=-32664735.5, avg(DISTINCT c)=9.529190848617919e+17, sum(DISTINCT a)=4389238186344302570, count(DISTINCT b)=4, count(a)=5, count()=0, sum(a)=3499446858011961234, min(a)=4389238186344302570, max(a)=4389238186344302570)\r\n\r\n[2024-02-06T18:59:36.493Z]  Row(avg(a)=5.682119074944395e+18, avg(DISTINCT b)=-782410329.0, avg(DISTINCT c)=1.6429856859303187e+17, sum(DISTINCT a)=5682119074944395708, count(DISTINCT b)=5, count(a)=5, count()=0, sum(a)=-8482892772697124692, min(a)=5682119074944395708, max(a)=5682119074944395708)\r\n```\r\n</details>\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10388/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}