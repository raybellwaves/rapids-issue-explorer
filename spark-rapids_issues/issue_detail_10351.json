{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10351",
    "id": 2110972366,
    "node_id": "I_kwDOD7z77c590uHO",
    "number": 10351,
    "title": "[BUG] test_from_json_mixed_types_list_struct failed",
    "user": {
        "login": "jlowe",
        "id": 1360766,
        "node_id": "MDQ6VXNlcjEzNjA3NjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlowe",
        "html_url": "https://github.com/jlowe",
        "followers_url": "https://api.github.com/users/jlowe/followers",
        "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
        "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
        "organizations_url": "https://api.github.com/users/jlowe/orgs",
        "repos_url": "https://api.github.com/users/jlowe/repos",
        "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jlowe/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 2710265788,
            "node_id": "MDU6TGFiZWwyNzEwMjY1Nzg4",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/cudf_dependency",
            "name": "cudf_dependency",
            "color": "7400FF",
            "default": false,
            "description": "An issue or PR with this label depends on a new feature in cudf"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2024-01-31T21:09:05Z",
    "updated_at": "2024-04-10T21:51:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "```\r\n[2024-01-31T20:47:58.664Z] =========================== short test summary info ============================\r\n[2024-01-31T20:47:58.664Z] FAILED ../../src/main/python/json_test.py::test_from_json_mixed_types_list_struct[struct<a:string>][DATAGEN_SEED=1706710850, INJECT_OOM]\r\n[2024-01-31T20:47:58.664Z] = 1 failed, 21488 passed, 1743 skipped, 719 xfailed, 2502 xpassed, 12115 warnings in 23223.91s (6:27:03) =\r\n```\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```\r\n[2024-01-31T20:47:58.663Z] =================================== FAILURES ===================================\r\n\r\n[2024-01-31T20:47:58.663Z] ___________ test_from_json_mixed_types_list_struct[struct<a:string>] ___________\r\n\r\n[2024-01-31T20:47:58.663Z] \r\n\r\n[2024-01-31T20:47:58.663Z] schema = 'struct<a:string>'\r\n\r\n[2024-01-31T20:47:58.663Z] \r\n\r\n[2024-01-31T20:47:58.663Z]     @pytest.mark.parametrize('schema', [\r\n\r\n[2024-01-31T20:47:58.663Z]         'struct<a:string>'\r\n\r\n[2024-01-31T20:47:58.663Z]     ])\r\n\r\n[2024-01-31T20:47:58.663Z]     @allow_non_gpu(*non_utc_allow)\r\n\r\n[2024-01-31T20:47:58.663Z]     def test_from_json_mixed_types_list_struct(schema):\r\n\r\n[2024-01-31T20:47:58.663Z]         json_string_gen = StringGen(r'{\"a\": (\\[1,2,3\\]|{\"b\":\"[a-z]{2}\"}) }')\r\n\r\n[2024-01-31T20:47:58.663Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n\r\n[2024-01-31T20:47:58.663Z]             lambda spark : unary_op_df(spark, json_string_gen) \\\r\n\r\n[2024-01-31T20:47:58.663Z]                 .select('a', f.from_json('a', schema)),\r\n\r\n[2024-01-31T20:47:58.663Z]             conf={\"spark.rapids.sql.expression.JsonToStructs\": True,\r\n\r\n[2024-01-31T20:47:58.663Z]                   'spark.rapids.sql.json.read.mixedTypesAsString.enabled': True})\r\n\r\n[2024-01-31T20:47:58.663Z] \r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/json_test.py:833: \r\n\r\n[2024-01-31T20:47:58.663Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n\r\n[2024-01-31T20:47:58.663Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n\r\n[2024-01-31T20:47:58.663Z]     assert_equal(from_cpu, from_gpu)\r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n\r\n[2024-01-31T20:47:58.663Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n\r\n[2024-01-31T20:47:58.663Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-01-31T20:47:58.663Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-01-31T20:47:58.663Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-01-31T20:47:58.663Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-01-31T20:47:58.663Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-01-31T20:47:58.663Z] \r\n\r\n[2024-01-31T20:47:58.663Z] cpu = '{\"b\":\"mh\"}', gpu = '{mh}'\r\n\r\n[2024-01-31T20:47:58.663Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f578bae0160>\r\n\r\n[2024-01-31T20:47:58.663Z] path = [84, 'from_json(a)', 'a']\r\n\r\n[2024-01-31T20:47:58.663Z] \r\n\r\n[2024-01-31T20:47:58.663Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n\r\n[2024-01-31T20:47:58.663Z]         t = type(cpu)\r\n\r\n[2024-01-31T20:47:58.663Z]         if (t is Row):\r\n\r\n[2024-01-31T20:47:58.663Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-01-31T20:47:58.663Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n\r\n[2024-01-31T20:47:58.663Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n\r\n[2024-01-31T20:47:58.663Z]                 for field in cpu.__fields__:\r\n\r\n[2024-01-31T20:47:58.663Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-01-31T20:47:58.663Z]             else:\r\n\r\n[2024-01-31T20:47:58.663Z]                 for index in range(len(cpu)):\r\n\r\n[2024-01-31T20:47:58.663Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is list):\r\n\r\n[2024-01-31T20:47:58.663Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-01-31T20:47:58.663Z]             for index in range(len(cpu)):\r\n\r\n[2024-01-31T20:47:58.663Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is tuple):\r\n\r\n[2024-01-31T20:47:58.663Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-01-31T20:47:58.663Z]             for index in range(len(cpu)):\r\n\r\n[2024-01-31T20:47:58.663Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is pytypes.GeneratorType):\r\n\r\n[2024-01-31T20:47:58.663Z]             index = 0\r\n\r\n[2024-01-31T20:47:58.663Z]             # generator has no zip :( so we have to do this the hard way\r\n\r\n[2024-01-31T20:47:58.663Z]             done = False\r\n\r\n[2024-01-31T20:47:58.663Z]             while not done:\r\n\r\n[2024-01-31T20:47:58.663Z]                 sub_cpu = None\r\n\r\n[2024-01-31T20:47:58.663Z]                 sub_gpu = None\r\n\r\n[2024-01-31T20:47:58.663Z]                 try:\r\n\r\n[2024-01-31T20:47:58.663Z]                     sub_cpu = next(cpu)\r\n\r\n[2024-01-31T20:47:58.663Z]                 except StopIteration:\r\n\r\n[2024-01-31T20:47:58.663Z]                     done = True\r\n\r\n[2024-01-31T20:47:58.663Z]     \r\n\r\n[2024-01-31T20:47:58.663Z]                 try:\r\n\r\n[2024-01-31T20:47:58.663Z]                     sub_gpu = next(gpu)\r\n\r\n[2024-01-31T20:47:58.663Z]                 except StopIteration:\r\n\r\n[2024-01-31T20:47:58.663Z]                     done = True\r\n\r\n[2024-01-31T20:47:58.663Z]     \r\n\r\n[2024-01-31T20:47:58.663Z]                 if done:\r\n\r\n[2024-01-31T20:47:58.663Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n\r\n[2024-01-31T20:47:58.663Z]                 else:\r\n\r\n[2024-01-31T20:47:58.663Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n\r\n[2024-01-31T20:47:58.663Z]     \r\n\r\n[2024-01-31T20:47:58.663Z]                 index = index + 1\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is dict):\r\n\r\n[2024-01-31T20:47:58.663Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n\r\n[2024-01-31T20:47:58.663Z]             # so sort the items to do our best with ignoring the order of dicts\r\n\r\n[2024-01-31T20:47:58.663Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-01-31T20:47:58.663Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-01-31T20:47:58.663Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is int):\r\n\r\n[2024-01-31T20:47:58.663Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n\r\n[2024-01-31T20:47:58.663Z]         elif (t is float):\r\n\r\n[2024-01-31T20:47:58.663Z]             if (math.isnan(cpu)):\r\n\r\n[2024-01-31T20:47:58.663Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n\r\n[2024-01-31T20:47:58.663Z]             else:\r\n\r\n[2024-01-31T20:47:58.663Z]                 assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n\r\n[2024-01-31T20:47:58.663Z]         elif isinstance(cpu, str):\r\n\r\n[2024-01-31T20:47:58.663Z] >           assert cpu == gpu, \"GPU and CPU string values are different at {}\".format(path)\r\n\r\n[2024-01-31T20:47:58.663Z] E           AssertionError: GPU and CPU string values are different at [84, 'from_json(a)', 'a']\r\n```\r\n</details>\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10351/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}