{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10641",
    "id": 2211939187,
    "node_id": "I_kwDOD7z77c6D14Nz",
    "number": 10641,
    "title": "[BUG] test_regexp_choice failed",
    "user": {
        "login": "jlowe",
        "id": 1360766,
        "node_id": "MDQ6VXNlcjEzNjA3NjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlowe",
        "html_url": "https://github.com/jlowe",
        "followers_url": "https://api.github.com/users/jlowe/followers",
        "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
        "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
        "organizations_url": "https://api.github.com/users/jlowe/orgs",
        "repos_url": "https://api.github.com/users/jlowe/repos",
        "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jlowe/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "NVnavkumar",
        "id": 97137715,
        "node_id": "U_kgDOBco0Mw",
        "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NVnavkumar",
        "html_url": "https://github.com/NVnavkumar",
        "followers_url": "https://api.github.com/users/NVnavkumar/followers",
        "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
        "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
        "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
        "repos_url": "https://api.github.com/users/NVnavkumar/repos",
        "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-03-27T21:28:56Z",
    "updated_at": "2024-05-14T22:45:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Nightly integration test run had a failure in test_regexp_choice.\r\n```\r\n[2024-03-27T19:43:44.838Z] FAILED ../../src/main/python/regexp_test.py::test_regexp_choice[DATAGEN_SEED=1711561563, TZ=UTC, INJECT_OOM] - AssertionError: GPU and CPU string values are different at [609, 'regexp_extract(a, (abc1a$|ab2ab$), 1)']\r\n```\r\n\r\n<details>\r\n  <summary>Details</summary>\r\n\r\n```\r\n[2024-03-27T19:43:44.835Z] =================================== FAILURES ===================================\r\n\r\n[2024-03-27T19:43:44.835Z] ______________________________ test_regexp_choice ______________________________\r\n\r\n[2024-03-27T19:43:44.835Z] [gw0] linux -- Python 3.9.19 /opt/conda/bin/python\r\n\r\n[2024-03-27T19:43:44.835Z] \r\n\r\n[2024-03-27T19:43:44.835Z]     def test_regexp_choice():\r\n\r\n[2024-03-27T19:43:44.835Z]         gen = mk_str_gen('[abcd]{1,3}[0-9]{1,3}[abcd]{1,3}[ \\n\\t\\r]{0,2}')\r\n\r\n[2024-03-27T19:43:44.835Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n\r\n[2024-03-27T19:43:44.835Z]                 lambda spark: unary_op_df(spark, gen).selectExpr(\r\n\r\n[2024-03-27T19:43:44.835Z]                     'rlike(a, \"[abcd]|[123]\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'rlike(a, \"[^\\n\\r]|abcd\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'rlike(a, \"abd1a$|^ab2a\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'rlike(a, \"[a-c]*|[\\n]\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'rlike(a, \"[a-c]+|[\\n]\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_extract(a, \"(abc1a$|^ab2ab|a3abc)\", 1)',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_extract(a, \"(abc1a$|ab2ab$)\", 1)',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_extract(a, \"(ab+|^ab)\", 1)',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_extract(a, \"(ab*|^ab)\", 1)',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_replace(a, \"[abcd]$|^abc\", \"@\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_replace(a, \"[ab]$|[cd]$\", \"@\")',\r\n\r\n[2024-03-27T19:43:44.835Z]                     'regexp_replace(a, \"[ab]+|^cd1\", \"@\")'\r\n\r\n[2024-03-27T19:43:44.835Z]                 ),\r\n\r\n[2024-03-27T19:43:44.835Z]             conf=_regexp_conf)\r\n\r\n[2024-03-27T19:43:44.835Z] \r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/regexp_test.py:568: \r\n\r\n[2024-03-27T19:43:44.835Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n\r\n[2024-03-27T19:43:44.835Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n\r\n[2024-03-27T19:43:44.835Z]     assert_equal(from_cpu, from_gpu)\r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n\r\n[2024-03-27T19:43:44.835Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n\r\n[2024-03-27T19:43:44.835Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-03-27T19:43:44.835Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-03-27T19:43:44.835Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-03-27T19:43:44.835Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-03-27T19:43:44.835Z] \r\n\r\n[2024-03-27T19:43:44.835Z] cpu = 'ab2ab', gpu = 'ab2ab\\r'\r\n\r\n[2024-03-27T19:43:44.835Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f86b47c1040>\r\n\r\n[2024-03-27T19:43:44.835Z] path = [609, 'regexp_extract(a, (abc1a$|ab2ab$), 1)']\r\n\r\n[2024-03-27T19:43:44.835Z] \r\n\r\n[2024-03-27T19:43:44.835Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n\r\n[2024-03-27T19:43:44.835Z]         t = type(cpu)\r\n\r\n[2024-03-27T19:43:44.835Z]         if (t is Row):\r\n\r\n[2024-03-27T19:43:44.835Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-03-27T19:43:44.835Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n\r\n[2024-03-27T19:43:44.835Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n\r\n[2024-03-27T19:43:44.836Z]                 for field in cpu.__fields__:\r\n\r\n[2024-03-27T19:43:44.836Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-03-27T19:43:44.836Z]             else:\r\n\r\n[2024-03-27T19:43:44.836Z]                 for index in range(len(cpu)):\r\n\r\n[2024-03-27T19:43:44.836Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is list):\r\n\r\n[2024-03-27T19:43:44.836Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-03-27T19:43:44.836Z]             for index in range(len(cpu)):\r\n\r\n[2024-03-27T19:43:44.836Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is tuple):\r\n\r\n[2024-03-27T19:43:44.836Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-03-27T19:43:44.836Z]             for index in range(len(cpu)):\r\n\r\n[2024-03-27T19:43:44.836Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is pytypes.GeneratorType):\r\n\r\n[2024-03-27T19:43:44.836Z]             index = 0\r\n\r\n[2024-03-27T19:43:44.836Z]             # generator has no zip :( so we have to do this the hard way\r\n\r\n[2024-03-27T19:43:44.836Z]             done = False\r\n\r\n[2024-03-27T19:43:44.836Z]             while not done:\r\n\r\n[2024-03-27T19:43:44.836Z]                 sub_cpu = None\r\n\r\n[2024-03-27T19:43:44.836Z]                 sub_gpu = None\r\n\r\n[2024-03-27T19:43:44.836Z]                 try:\r\n\r\n[2024-03-27T19:43:44.836Z]                     sub_cpu = next(cpu)\r\n\r\n[2024-03-27T19:43:44.836Z]                 except StopIteration:\r\n\r\n[2024-03-27T19:43:44.836Z]                     done = True\r\n\r\n[2024-03-27T19:43:44.836Z]     \r\n\r\n[2024-03-27T19:43:44.836Z]                 try:\r\n\r\n[2024-03-27T19:43:44.836Z]                     sub_gpu = next(gpu)\r\n\r\n[2024-03-27T19:43:44.836Z]                 except StopIteration:\r\n\r\n[2024-03-27T19:43:44.836Z]                     done = True\r\n\r\n[2024-03-27T19:43:44.836Z]     \r\n\r\n[2024-03-27T19:43:44.836Z]                 if done:\r\n\r\n[2024-03-27T19:43:44.836Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n\r\n[2024-03-27T19:43:44.836Z]                 else:\r\n\r\n[2024-03-27T19:43:44.836Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n\r\n[2024-03-27T19:43:44.836Z]     \r\n\r\n[2024-03-27T19:43:44.836Z]                 index = index + 1\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is dict):\r\n\r\n[2024-03-27T19:43:44.836Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n\r\n[2024-03-27T19:43:44.836Z]             # so sort the items to do our best with ignoring the order of dicts\r\n\r\n[2024-03-27T19:43:44.836Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-03-27T19:43:44.836Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-03-27T19:43:44.836Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is int):\r\n\r\n[2024-03-27T19:43:44.836Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n\r\n[2024-03-27T19:43:44.836Z]         elif (t is float):\r\n\r\n[2024-03-27T19:43:44.836Z]             if (math.isnan(cpu)):\r\n\r\n[2024-03-27T19:43:44.836Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n\r\n[2024-03-27T19:43:44.836Z]             else:\r\n\r\n[2024-03-27T19:43:44.836Z]                 assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n\r\n[2024-03-27T19:43:44.836Z]         elif isinstance(cpu, str):\r\n\r\n[2024-03-27T19:43:44.836Z] >           assert cpu == gpu, \"GPU and CPU string values are different at {}\".format(path)\r\n\r\n[2024-03-27T19:43:44.836Z] E           AssertionError: GPU and CPU string values are different at [609, 'regexp_extract(a, (abc1a$|ab2ab$), 1)']\r\n\r\n[2024-03-27T19:43:44.836Z] \r\n\r\n[2024-03-27T19:43:44.836Z] ../../src/main/python/asserts.py:85: AssertionError\r\n\r\n```\r\n</details>\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10641/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}