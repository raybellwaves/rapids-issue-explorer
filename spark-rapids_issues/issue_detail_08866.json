{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/8866",
    "id": 1827092544,
    "node_id": "I_kwDOD7z77c5s5zhA",
    "number": 8866,
    "title": "[BUG] allow_non_gpu usage/documentation could be improved",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 2094874947,
            "node_id": "MDU6TGFiZWwyMDk0ODc0OTQ3",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/test",
            "name": "test",
            "color": "60d6d4",
            "default": false,
            "description": "Only impacts tests"
        },
        {
            "id": 3444490915,
            "node_id": "LA_kwDOD7z77c7NTsKj",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/tech%20debt",
            "name": "tech debt",
            "color": "0052cc",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-07-28T21:09:33Z",
    "updated_at": "2023-08-08T20:32:14Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "`@allow_non_gpu` takes a list of strings that can match expressions and execs in Spark. When we traverse the plan we look at each exec nodes and ask if its on the GPU, and if not, is it in this allow list. If the exec is not in the allow list we make sure to fail tests.\r\n\r\nThe issue is that this method looks at children only to recurse, and not necessarily members of the expression. For example, `GpuProject` has a `projectList` and these are not children, so anything in a project is not being looked at (but if the project is on the CPU due to a fallback it has to be called out in the allow list), which we do in some cases and redundantly add the expression:\r\n```\r\nregexp_test.py:@allow_non_gpu('ProjectExec', 'StringSplit')\r\nregexp_test.py:@allow_non_gpu('ProjectExec', 'RegExpReplace')\r\nregexp_test.py:@allow_non_gpu('ProjectExec', 'RegExpExtract')\r\n```\r\n\r\nI see this with Project, but I am not sure what other execs have similar issues. I am filing this for us to clean up `allow_non_gpu` in the integration tests in the future and document how it's supposed to be used. Also for tests like this we should be using something like `assert_gpu_fallback_collect` to call out the CPU expression we really do want to see fallen back, as other expressions may not be all that relevant to the particular test.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8866/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}