{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/8301",
    "id": 1712694840,
    "node_id": "I_kwDOD7z77c5mFaY4",
    "number": 8301,
    "title": "[FEA] semaphore prioritization",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 2094500742,
            "node_id": "MDU6TGFiZWwyMDk0NTAwNzQy",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/performance",
            "name": "performance",
            "color": "d845b1",
            "default": false,
            "description": "A performance related task/issue"
        },
        {
            "id": 4029093938,
            "node_id": "LA_kwDOD7z77c7wJxgy",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/reliability",
            "name": "reliability",
            "color": "2654AF",
            "default": false,
            "description": "Features to improve reliability or bugs that severly impact the reliability of the plugin"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "abellina",
            "id": 1901059,
            "node_id": "MDQ6VXNlcjE5MDEwNTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abellina",
            "html_url": "https://github.com/abellina",
            "followers_url": "https://api.github.com/users/abellina/followers",
            "following_url": "https://api.github.com/users/abellina/following{/other_user}",
            "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
            "organizations_url": "https://api.github.com/users/abellina/orgs",
            "repos_url": "https://api.github.com/users/abellina/repos",
            "events_url": "https://api.github.com/users/abellina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abellina/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-05-16T20:27:12Z",
    "updated_at": "2023-06-30T17:33:42Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This was discussed with @revans2 and @jlowe and they asked me to file an issue.\r\n\r\nWe have seen over time semaphore acquisition patterns that are detrimental to performance. \r\n\r\n- Round-robin: \r\n  We often see a round-robin pattern where executor tasks seemingly stair step through their work: \r\n  - t1 acquires, does some work and lets go, \r\n  - t2 acquires and does some work and lets go, etc. \r\n  \r\n  The pattern rolls over (often with t1 waiting for work to be done by other threads, when it would have been ready). The problem with this pattern is that each of the tasks that let go _and wants the semaphore back a bit later_ must have made \"everything spillable\" (which is great for the OOM-handling case), but it creates memory churn: the decision is between how much time to spend spilling vs. how much time we gain by letting other tasks on the GPU (halting problem).\r\n\r\n- Not letting go of the semaphore during IO:\r\n  We have tried in the [past](https://github.com/NVIDIA/spark-rapids/pull/4078) to release the semaphore during shuffled join IO, but we don't have a solution for this case in all scenarios. We have seen scenarios from customer queries (for example for aggregates waiting on shuffle), where the IO is orders of magnitude higher than the actual GPU work and it would make sense to not preclude this IO from all the task threads.\r\n\r\nRelated issues: https://github.com/NVIDIA/spark-rapids/issues/4970\r\n\r\nAs a first take on this issue @revans2 and @jlowe suggested researching how an unfair semaphore performs. A semaphore whose priorities are deterministic could potentially be a win because there would be a clear winner when there are races. We would sort the list of tasks pending to acquire the semaphore by task attempt Id for now (but later on it might be memory pressure based), and then we would pick the highest task to give the semaphore credit to. If the task releases and comes right back, it would starve other tasks, but then we are prioritizing staying on the GPU.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8301/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}