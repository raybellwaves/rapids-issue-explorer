{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10428",
    "id": 2137004790,
    "node_id": "I_kwDOD7z77c5_YBr2",
    "number": 10428,
    "title": "[BUG] Casting Long.MinValue as a Timestamp to a string produces an invalid string entry.",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-02-15T16:51:03Z",
    "updated_at": "2024-02-20T21:13:50Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nThis is partly related to https://github.com/NVIDIA/spark-rapids/issues/83 and https://issues.apache.org/jira/browse/SPARK-47063\r\n\r\nOur result for `Long.MinValue` when being cast to a timestamp results in `Long.MinValue`, which is the same as the non-codegen code in Spark. But when I try to cast that timestamp to a String we produce a string that is not just wrong, but it is invalid. \r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nSeq(Long.MinValue).toDF(\"v\").repartition(1).selectExpr(\"*\", \"CAST(v AS timestamp) as ts\", \"CAST(CAST(v AS timestamp) AS STRING) as sts\").repartition(1).selectExpr(\"v\", \"sts\", \"unix_micros(ts)\").collect\r\n```\r\nThe multiple repartitions are there to allow the CASTs to run on the GPU, but we don't support `unix_micros` yet so I had to move it to a separate operator.\r\n\r\n```\r\nArray([-9223372036854775808,-12-21 19:59:05.224192????,-9223372036854775808])\r\n```\r\n\r\nBut on the CPU, after I disable code gen so that it gets the same number as us we get.\r\n\r\n```\r\nscala> spark.conf.set(\"spark.sql.codegen.factoryMode\", \"NO_CODEGEN\")\r\nscala> spark.conf.set(\"spark.sql.codegen.wholeStage\", false)\r\nscala> Seq(Long.MinValue).toDF(\"v\").repartition(1).selectExpr(\"*\", \"CAST(v AS timestamp) as ts\", \"CAST(CAST(v AS timestamp) AS STRING) as sts\").repartition(1).selectExpr(\"v\", \"sts\", \"unix_micros(ts)\").collect\r\nres10: Array[org.apache.spark.sql.Row] = Array([-9223372036854775808,-290308-12-21 19:59:05.224192,-9223372036854775808])``\r\n```\r\n\r\nI understand that this date/timestamp is totally outside of a typical range but this is default behavior and we are really not only producing a bad result, it looks like the string produced has garbage at the end of it.\r\n\r\n**Expected behavior**\r\nIt should produce the exact same answer as Spark, and ideally we also fix https://github.com/NVIDIA/spark-rapids/issues/83 too so at least we overflow in the same common way that Spark does most of the time.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10428/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}