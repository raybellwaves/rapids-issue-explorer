{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/2897",
    "id": 940999782,
    "node_id": "MDU6SXNzdWU5NDA5OTk3ODI=",
    "number": 2897,
    "title": "[FEA] Move control messages to flat buffers in UCX",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 2096543664,
            "node_id": "MDU6TGFiZWwyMDk2NTQzNjY0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/shuffle",
            "name": "shuffle",
            "color": "67fc73",
            "default": false,
            "description": "things that impact the shuffle plugin"
        },
        {
            "id": 2223784867,
            "node_id": "MDU6TGFiZWwyMjIzNzg0ODY3",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/P2",
            "name": "P2",
            "color": "8ff7b9",
            "default": false,
            "description": "Not required for release"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-07-09T19:01:38Z",
    "updated_at": "2021-09-15T15:48:13Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "In https://github.com/NVIDIA/spark-rapids/pull/2886, we added a `Control` UCX active message that currently is used as a handshake message at startup. Currently, this is using `ByteBuffer` directly to both pack and unpack the message, following a prior implementation that sent the handshake over TCP.\r\n\r\nThe objects used to pack/unpack these messages come from a shared pool. There are also messages serialized using flat buffers. The JDK picked big endian for `ByteBuffer` yet we use flat buffers that use (and expressly set on the `ByteBuffer`) little endian order.  So there's a mix being used right now, and it can lead to confusion, as the byte order is a property of the `ByteBuffer` object. The shared pool now forces big endian, so that buffers obtained from it look like JDK buffers, which was done to fix a bug.\r\n\r\nIn order to remove confusion, perhaps the best way to handle this is to introduce a flat buffer that can be used for the `Control` message, and then claim a single endianness for all of shuffle. It would make the pack/unpack code a bit cleaner too.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/2897/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}