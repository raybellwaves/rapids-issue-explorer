{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/8743",
    "id": 1810181794,
    "node_id": "I_kwDOD7z77c5r5S6i",
    "number": 8743,
    "title": "[FEA] Add support for conditional equi-joins not covered by AST",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 2094500742,
            "node_id": "MDU6TGFiZWwyMDk0NTAwNzQy",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/performance",
            "name": "performance",
            "color": "d845b1",
            "default": false,
            "description": "A performance related task/issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "winningsix",
        "id": 2278268,
        "node_id": "MDQ6VXNlcjIyNzgyNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2278268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/winningsix",
        "html_url": "https://github.com/winningsix",
        "followers_url": "https://api.github.com/users/winningsix/followers",
        "following_url": "https://api.github.com/users/winningsix/following{/other_user}",
        "gists_url": "https://api.github.com/users/winningsix/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/winningsix/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/winningsix/subscriptions",
        "organizations_url": "https://api.github.com/users/winningsix/orgs",
        "repos_url": "https://api.github.com/users/winningsix/repos",
        "events_url": "https://api.github.com/users/winningsix/events{/privacy}",
        "received_events_url": "https://api.github.com/users/winningsix/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "winningsix",
            "id": 2278268,
            "node_id": "MDQ6VXNlcjIyNzgyNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2278268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/winningsix",
            "html_url": "https://github.com/winningsix",
            "followers_url": "https://api.github.com/users/winningsix/followers",
            "following_url": "https://api.github.com/users/winningsix/following{/other_user}",
            "gists_url": "https://api.github.com/users/winningsix/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/winningsix/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/winningsix/subscriptions",
            "organizations_url": "https://api.github.com/users/winningsix/orgs",
            "repos_url": "https://api.github.com/users/winningsix/repos",
            "events_url": "https://api.github.com/users/winningsix/events{/privacy}",
            "received_events_url": "https://api.github.com/users/winningsix/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-07-18T15:31:04Z",
    "updated_at": "2023-11-01T13:18:47Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSo to start out this is not saying that we should do this. We need some performance tests to see if we really should do it or not. Be aware that https://github.com/NVIDIA/spark-rapids/issues/8742 might impact the performance of this a lot.\r\n\r\nRight now we only support doing a post filter on inner joins. This means we re-write the join so that the conditional part of the join happens as a post filter on the results of the join.  This does not work for other join types because we lose information needed to actually do the filter.  But in theory we can rewrite the other conditional equi-joins to be inner joins followed by some kind of post processing.  This is similar to what we do for full outer joins.  In those cases we could do the inner join with filtering and then do post processing to get the final result.\r\n\r\nLike for a left outer join, it can be rewritten as do an inner join and then we add back all of the rows on the left side that didn't show up in the output.\r\n\r\nFor left semi-join,  it can be rewritten as do an inner join, drop the right columns and do a distinct on the left columns.\r\n\r\nFor left anti-join, it can be rewritten as do an inner join and only output the columns from the left table that are not in the inner join output.\r\n\r\nFor both left semi and anti we probably want to be very careful about not gathering columns from the right hand table unless they are needed as a part of the filtering.\r\n\r\nLike I said before I don't know if this is worth doing, or if it will just add a lot of complexity to join that is not needed by anyone. Probably should wait until we have a customer that needs something like this, and then we need to do a lot of tests to see if it is a win over keeping the join on the CPU.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/8743/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}