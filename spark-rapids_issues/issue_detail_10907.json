{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10907",
    "id": 2318835454,
    "node_id": "I_kwDOD7z77c6KNp7-",
    "number": 10907,
    "title": "from_json function parses a column containing an empty array, throws an exception.",
    "user": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "Feng-Jiang28",
            "id": 106386742,
            "node_id": "U_kgDOBldVNg",
            "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Feng-Jiang28",
            "html_url": "https://github.com/Feng-Jiang28",
            "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
            "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
            "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
            "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
            "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
            "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-27T10:37:09Z",
    "updated_at": "2024-05-28T19:42:26Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "from_json function parses a column containing an empty array, throws an exception. \r\n\r\nCPU:\r\n```\r\n\r\nscala> import org.apache.spark.sql.types.{IntegerType, StructType}\r\nscala> val df = Seq(\"\"\"[]\"\"\").toDS()\r\nscala> df.write.mode(\"OVERWRITE\").parquet(\"TEMP\")                                                                     \r\nscala> val df2 = spark.read.parquet(\"TEMP\")\r\nscala> val schema = new StructType().add(\"a\", IntegerType)\r\nscala> var parsed = df2.select(from_json($\"value\", schema))\r\nscala> parsed.show()\r\n+----------------+                                                              \r\n|from_json(value)|\r\n+----------------+\r\n|          {null}|\r\n+----------------+\r\n\r\n```\r\n\r\nGPU:\r\n```\r\n$ $SPARK_HOME/bin/spark-shell --master local[*] --jars ${SPARK_RAPIDS_PLUGIN_JAR} \r\n--conf spark.plugins=com.nvidia.spark.SQLPlugin \r\n--conf spark.rapids.sql.enabled=true \r\n--conf spark.rapids.sql.explain=ALL --driver-java-options '-ea -Duser.timezone=UTC ' \r\n--conf spark.rapids.sql.expression.JsonTuple=true \r\n--conf spark.rapids.sql.expression.GetJsonObject=true \r\n--conf spark.rapids.sql.expression.JsonToStructs=true \r\n--conf spark.rapids.sql.expression.StructsToJson=true\r\n```\r\n\r\n```\r\nscala> import org.apache.spark.sql.types.{IntegerType, StructType}\r\nscala> val df = Seq(\"\"\"[]\"\"\").toDS()\r\nscala> df.write.mode(\"OVERWRITE\").parquet(\"TEMP\")\r\n24/05/27 10:39:59 WARN GpuOverrides: \r\n*Exec <DataWritingCommandExec> will run on GPU\r\n  *Output <InsertIntoHadoopFsRelationCommand> will run on GPU\r\n  ! <LocalTableScanExec> cannot run on GPU because GPU does not currently support the operator class org.apache.spark.sql.execution.LocalTableScanExec\r\n    @Expression <AttributeReference> value#1 could run on GPU\r\n\r\n\r\nscala> val df2 = spark.read.parquet(\"TEMP\")\r\nscala> val schema = new StructType().add(\"a\", IntegerType)\r\nscala> var parsed = df2.select(from_json($\"value\", schema))\r\nscala> parsed.show()\r\n24/05/27 10:40:02 WARN GpuOverrides: \r\n!Exec <CollectLimitExec> cannot run on GPU because the Exec CollectLimitExec has been disabled, and is disabled by default because Collect Limit replacement can be slower on the GPU, if huge number of rows in a batch it could help by limiting the number of rows transferred from GPU to CPU. Set spark.rapids.sql.exec.CollectLimitExec to true if you wish to enable it\r\n  @Partitioning <SinglePartition$> could run on GPU\r\n  *Exec <ProjectExec> will run on GPU\r\n    *Expression <Alias> cast(from_json(StructField(a,IntegerType,true), value#5, Some(UTC)) as string) AS from_json(value)#11 will run on GPU\r\n      *Expression <Cast> cast(from_json(StructField(a,IntegerType,true), value#5, Some(UTC)) as string) will run on GPU\r\n        *Expression <JsonToStructs> from_json(StructField(a,IntegerType,true), value#5, Some(UTC)) will run on GPU\r\n    *Exec <FileSourceScanExec> will run on GPU\r\n\r\n24/05/27 10:40:02 ERROR Executor: Exception in task 0.0 in stage 3.0 (TID 3)\r\njava.lang.IllegalStateException: No empty row count provided and the table read has no row count or columns\r\n\tat ai.rapids.cudf.Table.gatherJSONColumns(Table.java:1204)\r\n\tat ai.rapids.cudf.Table.readJSON(Table.java:1446)\r\n\tat ai.rapids.cudf.Table.readJSON(Table.java:1428)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$doColumnar$2(GpuJsonToStructs.scala:179)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$doColumnar$1(GpuJsonToStructs.scala:177)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.doColumnar(GpuJsonToStructs.scala:175)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.doItColumnar(GpuExpressions.scala:250)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.$anonfun$columnarEval$1(GpuExpressions.scala:261)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.columnarEval(GpuExpressions.scala:260)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.columnarEval(GpuExpressions.scala:260)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuAlias.columnarEval(namedExpressions.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.$anonfun$project$1(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1(implicits.scala:221)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1$adapted(implicits.scala:218)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.safeMap(implicits.scala:218)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$AutoCloseableProducingSeq.safeMap(implicits.scala:253)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.project(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$project$2(basicPhysicalOperators.scala:619)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.recurse$2(basicPhysicalOperators.scala:618)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.project(basicPhysicalOperators.scala:631)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$5(basicPhysicalOperators.scala:567)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$.withRestoreOnRetry(RmmRapidsRetryIterator.scala:272)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$4(basicPhysicalOperators.scala:567)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$3(basicPhysicalOperators.scala:565)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$NoInputSpliterator.next(RmmRapidsRetryIterator.scala:395)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$RmmRapidsRetryIterator.next(RmmRapidsRetryIterator.scala:6\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10907/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}