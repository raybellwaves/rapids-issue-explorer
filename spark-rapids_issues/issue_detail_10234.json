{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10234",
    "id": 2092811883,
    "node_id": "I_kwDOD7z77c58vcZr",
    "number": 10234,
    "title": "[BUG] hash_aggregate_test.py::test_hash_multiple_mode_query_avg_distincts failed with DATAGEN_SEED=1705756525",
    "user": {
        "login": "sameerz",
        "id": 7036315,
        "node_id": "MDQ6VXNlcjcwMzYzMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7036315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sameerz",
        "html_url": "https://github.com/sameerz",
        "followers_url": "https://api.github.com/users/sameerz/followers",
        "following_url": "https://api.github.com/users/sameerz/following{/other_user}",
        "gists_url": "https://api.github.com/users/sameerz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sameerz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sameerz/subscriptions",
        "organizations_url": "https://api.github.com/users/sameerz/orgs",
        "repos_url": "https://api.github.com/users/sameerz/repos",
        "events_url": "https://api.github.com/users/sameerz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sameerz/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2024-01-21T22:31:03Z",
    "updated_at": "2024-03-26T20:11:32Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n```\r\n[2024-01-20T14:37:05.949Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]][DATAGEN_SEED=1705756525, INJECT_OOM, IGNORE_ORDER, INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)] - AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.949Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'final'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]][DATAGEN_SEED=1705756525, IGNORE_ORDER, INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)] - AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.949Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'partial'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]][DATAGEN_SEED=1705756525, INJECT_OOM, IGNORE_ORDER, INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)] - AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n```\r\n\r\n<details><summary>Detailed output</summary>\r\n<pre>\r\n[2024-01-20T14:37:05.944Z] _ test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]] _\r\n[2024-01-20T14:37:05.944Z] [gw3] linux -- Python 3.9.18 /opt/conda/bin/python\r\n[2024-01-20T14:37:05.944Z] \r\n[2024-01-20T14:37:05.944Z] data_gen = [('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]\r\n[2024-01-20T14:37:05.944Z] conf = {'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.variableFloatAgg.enabled': 'true'}\r\n[2024-01-20T14:37:05.944Z] \r\n[2024-01-20T14:37:05.944Z]     @approximate_float\r\n[2024-01-20T14:37:05.944Z]     @ignore_order\r\n[2024-01-20T14:37:05.944Z]     @incompat\r\n[2024-01-20T14:37:05.944Z]     @pytest.mark.parametrize('data_gen', _init_list, ids=idfn)\r\n[2024-01-20T14:37:05.944Z]     @pytest.mark.parametrize('conf', get_params(_confs, params_markers_for_confs),\r\n[2024-01-20T14:37:05.944Z]         ids=idfn)\r\n[2024-01-20T14:37:05.944Z]     def test_hash_multiple_mode_query_avg_distincts(data_gen, conf):\r\n[2024-01-20T14:37:05.944Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n[2024-01-20T14:37:05.944Z]             lambda spark: gen_df(spark, data_gen, length=100)\r\n[2024-01-20T14:37:05.944Z]                 .selectExpr('avg(distinct a)', 'avg(distinct b)','avg(distinct c)'),\r\n[2024-01-20T14:37:05.944Z]             conf=conf)\r\n[2024-01-20T14:37:05.944Z] \r\n[2024-01-20T14:37:05.944Z] ../../src/main/python/hash_aggregate_test.py:1087: \r\n[2024-01-20T14:37:05.944Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.944Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n[2024-01-20T14:37:05.944Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n[2024-01-20T14:37:05.944Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n[2024-01-20T14:37:05.944Z]     assert_equal(from_cpu, from_gpu)\r\n[2024-01-20T14:37:05.945Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n[2024-01-20T14:37:05.945Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n[2024-01-20T14:37:05.945Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n[2024-01-20T14:37:05.945Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.945Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n[2024-01-20T14:37:05.945Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.945Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.945Z] \r\n[2024-01-20T14:37:05.945Z] cpu = -9.961353300130207e+25, gpu = -9.961254917499822e+25\r\n[2024-01-20T14:37:05.945Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f7f804d4430>\r\n[2024-01-20T14:37:05.945Z] path = [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.945Z] \r\n[2024-01-20T14:37:05.945Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n[2024-01-20T14:37:05.945Z]         t = type(cpu)\r\n[2024-01-20T14:37:05.945Z]         if (t is Row):\r\n[2024-01-20T14:37:05.945Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.945Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n[2024-01-20T14:37:05.945Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n[2024-01-20T14:37:05.945Z]                 for field in cpu.__fields__:\r\n[2024-01-20T14:37:05.945Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.945Z]             else:\r\n[2024-01-20T14:37:05.945Z]                 for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.945Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.945Z]         elif (t is list):\r\n[2024-01-20T14:37:05.945Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.945Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.945Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.945Z]         elif (t is tuple):\r\n[2024-01-20T14:37:05.945Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.945Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.945Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.945Z]         elif (t is pytypes.GeneratorType):\r\n[2024-01-20T14:37:05.945Z]             index = 0\r\n[2024-01-20T14:37:05.945Z]             # generator has no zip :( so we have to do this the hard way\r\n[2024-01-20T14:37:05.945Z]             done = False\r\n[2024-01-20T14:37:05.945Z]             while not done:\r\n[2024-01-20T14:37:05.945Z]                 sub_cpu = None\r\n[2024-01-20T14:37:05.945Z]                 sub_gpu = None\r\n[2024-01-20T14:37:05.945Z]                 try:\r\n[2024-01-20T14:37:05.945Z]                     sub_cpu = next(cpu)\r\n[2024-01-20T14:37:05.945Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.945Z]                     done = True\r\n[2024-01-20T14:37:05.945Z]     \r\n[2024-01-20T14:37:05.945Z]                 try:\r\n[2024-01-20T14:37:05.945Z]                     sub_gpu = next(gpu)\r\n[2024-01-20T14:37:05.945Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.945Z]                     done = True\r\n[2024-01-20T14:37:05.945Z]     \r\n[2024-01-20T14:37:05.945Z]                 if done:\r\n[2024-01-20T14:37:05.945Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n[2024-01-20T14:37:05.945Z]                 else:\r\n[2024-01-20T14:37:05.945Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n[2024-01-20T14:37:05.945Z]     \r\n[2024-01-20T14:37:05.945Z]                 index = index + 1\r\n[2024-01-20T14:37:05.945Z]         elif (t is dict):\r\n[2024-01-20T14:37:05.945Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n[2024-01-20T14:37:05.945Z]             # so sort the items to do our best with ignoring the order of dicts\r\n[2024-01-20T14:37:05.945Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.945Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.945Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n[2024-01-20T14:37:05.945Z]         elif (t is int):\r\n[2024-01-20T14:37:05.945Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.945Z]         elif (t is float):\r\n[2024-01-20T14:37:05.945Z]             if (math.isnan(cpu)):\r\n[2024-01-20T14:37:05.945Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.945Z]             else:\r\n[2024-01-20T14:37:05.945Z] >               assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n[2024-01-20T14:37:05.946Z] E               AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:83: AssertionError\r\n[2024-01-20T14:37:05.946Z] ----------------------------- Captured stdout call -----------------------------\r\n[2024-01-20T14:37:05.946Z] ### CPU RUN ###\r\n[2024-01-20T14:37:05.946Z] ### GPU RUN ###\r\n[2024-01-20T14:37:05.946Z] ### COLLECT: GPU TOOK 0.17374825477600098 CPU TOOK 0.13654327392578125 ###\r\n[2024-01-20T14:37:05.946Z] --- CPU OUTPUT\r\n[2024-01-20T14:37:05.946Z] +++ GPU OUTPUT\r\n[2024-01-20T14:37:05.946Z] @@ -1 +1 @@\r\n[2024-01-20T14:37:05.946Z] -Row(avg(DISTINCT a)=-9.961353300130207e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.749297777543448e+17)\r\n[2024-01-20T14:37:05.946Z] +Row(avg(DISTINCT a)=-9.961254917499822e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.74929777754345e+17)\r\n[2024-01-20T14:37:05.946Z] _ test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'final'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]] _\r\n[2024-01-20T14:37:05.946Z] [gw3] linux -- Python 3.9.18 /opt/conda/bin/python\r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z] data_gen = [('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]\r\n[2024-01-20T14:37:05.946Z] conf = {'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'final', 'spark.rapids.sql.variableFloatAgg.enabled': 'true'}\r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z]     @approximate_float\r\n[2024-01-20T14:37:05.946Z]     @ignore_order\r\n[2024-01-20T14:37:05.946Z]     @incompat\r\n[2024-01-20T14:37:05.946Z]     @pytest.mark.parametrize('data_gen', _init_list, ids=idfn)\r\n[2024-01-20T14:37:05.946Z]     @pytest.mark.parametrize('conf', get_params(_confs, params_markers_for_confs),\r\n[2024-01-20T14:37:05.946Z]         ids=idfn)\r\n[2024-01-20T14:37:05.946Z]     def test_hash_multiple_mode_query_avg_distincts(data_gen, conf):\r\n[2024-01-20T14:37:05.946Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n[2024-01-20T14:37:05.946Z]             lambda spark: gen_df(spark, data_gen, length=100)\r\n[2024-01-20T14:37:05.946Z]                 .selectExpr('avg(distinct a)', 'avg(distinct b)','avg(distinct c)'),\r\n[2024-01-20T14:37:05.946Z]             conf=conf)\r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/hash_aggregate_test.py:1087: \r\n[2024-01-20T14:37:05.946Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n[2024-01-20T14:37:05.946Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n[2024-01-20T14:37:05.946Z]     assert_equal(from_cpu, from_gpu)\r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n[2024-01-20T14:37:05.946Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n[2024-01-20T14:37:05.946Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.946Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n[2024-01-20T14:37:05.946Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.946Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z] cpu = -9.961254917487832e+25, gpu = -9.961353300130207e+25\r\n[2024-01-20T14:37:05.946Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f808f0e1d30>\r\n[2024-01-20T14:37:05.946Z] path = [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.946Z] \r\n[2024-01-20T14:37:05.946Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n[2024-01-20T14:37:05.946Z]         t = type(cpu)\r\n[2024-01-20T14:37:05.946Z]         if (t is Row):\r\n[2024-01-20T14:37:05.946Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.946Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n[2024-01-20T14:37:05.946Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n[2024-01-20T14:37:05.946Z]                 for field in cpu.__fields__:\r\n[2024-01-20T14:37:05.946Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.946Z]             else:\r\n[2024-01-20T14:37:05.946Z]                 for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.946Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.946Z]         elif (t is list):\r\n[2024-01-20T14:37:05.946Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.946Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.946Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.946Z]         elif (t is tuple):\r\n[2024-01-20T14:37:05.946Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.946Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.946Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.946Z]         elif (t is pytypes.GeneratorType):\r\n[2024-01-20T14:37:05.946Z]             index = 0\r\n[2024-01-20T14:37:05.946Z]             # generator has no zip :( so we have to do this the hard way\r\n[2024-01-20T14:37:05.946Z]             done = False\r\n[2024-01-20T14:37:05.946Z]             while not done:\r\n[2024-01-20T14:37:05.946Z]                 sub_cpu = None\r\n[2024-01-20T14:37:05.947Z]                 sub_gpu = None\r\n[2024-01-20T14:37:05.947Z]                 try:\r\n[2024-01-20T14:37:05.947Z]                     sub_cpu = next(cpu)\r\n[2024-01-20T14:37:05.947Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.947Z]                     done = True\r\n[2024-01-20T14:37:05.947Z]     \r\n[2024-01-20T14:37:05.947Z]                 try:\r\n[2024-01-20T14:37:05.947Z]                     sub_gpu = next(gpu)\r\n[2024-01-20T14:37:05.947Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.947Z]                     done = True\r\n[2024-01-20T14:37:05.947Z]     \r\n[2024-01-20T14:37:05.947Z]                 if done:\r\n[2024-01-20T14:37:05.947Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n[2024-01-20T14:37:05.947Z]                 else:\r\n[2024-01-20T14:37:05.947Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n[2024-01-20T14:37:05.947Z]     \r\n[2024-01-20T14:37:05.947Z]                 index = index + 1\r\n[2024-01-20T14:37:05.947Z]         elif (t is dict):\r\n[2024-01-20T14:37:05.947Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n[2024-01-20T14:37:05.947Z]             # so sort the items to do our best with ignoring the order of dicts\r\n[2024-01-20T14:37:05.947Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.947Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.947Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n[2024-01-20T14:37:05.947Z]         elif (t is int):\r\n[2024-01-20T14:37:05.947Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.947Z]         elif (t is float):\r\n[2024-01-20T14:37:05.947Z]             if (math.isnan(cpu)):\r\n[2024-01-20T14:37:05.947Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.947Z]             else:\r\n[2024-01-20T14:37:05.947Z] >               assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n[2024-01-20T14:37:05.947Z] E               AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:83: AssertionError\r\n[2024-01-20T14:37:05.947Z] ----------------------------- Captured stdout call -----------------------------\r\n[2024-01-20T14:37:05.947Z] ### CPU RUN ###\r\n[2024-01-20T14:37:05.947Z] ### GPU RUN ###\r\n[2024-01-20T14:37:05.947Z] ### COLLECT: GPU TOOK 0.14001178741455078 CPU TOOK 0.11022210121154785 ###\r\n[2024-01-20T14:37:05.947Z] --- CPU OUTPUT\r\n[2024-01-20T14:37:05.947Z] +++ GPU OUTPUT\r\n[2024-01-20T14:37:05.947Z] @@ -1 +1 @@\r\n[2024-01-20T14:37:05.947Z] -Row(avg(DISTINCT a)=-9.961254917487832e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.749297777543451e+17)\r\n[2024-01-20T14:37:05.947Z] +Row(avg(DISTINCT a)=-9.961353300130207e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.749297777543451e+17)\r\n[2024-01-20T14:37:05.947Z] _ test_hash_multiple_mode_query_avg_distincts[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'partial'}-[('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]] _\r\n[2024-01-20T14:37:05.947Z] [gw3] linux -- Python 3.9.18 /opt/conda/bin/python\r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z] data_gen = [('a', RepeatSeq(Float)), ('b', Float), ('c', Long)]\r\n[2024-01-20T14:37:05.947Z] conf = {'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'partial', 'spark.rapids.sql.variableFloatAgg.enabled': 'true'}\r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z]     @approximate_float\r\n[2024-01-20T14:37:05.947Z]     @ignore_order\r\n[2024-01-20T14:37:05.947Z]     @incompat\r\n[2024-01-20T14:37:05.947Z]     @pytest.mark.parametrize('data_gen', _init_list, ids=idfn)\r\n[2024-01-20T14:37:05.947Z]     @pytest.mark.parametrize('conf', get_params(_confs, params_markers_for_confs),\r\n[2024-01-20T14:37:05.947Z]         ids=idfn)\r\n[2024-01-20T14:37:05.947Z]     def test_hash_multiple_mode_query_avg_distincts(data_gen, conf):\r\n[2024-01-20T14:37:05.947Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n[2024-01-20T14:37:05.947Z]             lambda spark: gen_df(spark, data_gen, length=100)\r\n[2024-01-20T14:37:05.947Z]                 .selectExpr('avg(distinct a)', 'avg(distinct b)','avg(distinct c)'),\r\n[2024-01-20T14:37:05.947Z]             conf=conf)\r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/hash_aggregate_test.py:1087: \r\n[2024-01-20T14:37:05.947Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n[2024-01-20T14:37:05.947Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n[2024-01-20T14:37:05.947Z]     assert_equal(from_cpu, from_gpu)\r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n[2024-01-20T14:37:05.947Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n[2024-01-20T14:37:05.947Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.947Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n[2024-01-20T14:37:05.947Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.947Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z] cpu = -9.961254917487832e+25, gpu = -9.961353300130207e+25\r\n[2024-01-20T14:37:05.947Z] float_check = <function get_float_check.<locals>.<lambda> at 0x7f7f7bd170d0>\r\n[2024-01-20T14:37:05.947Z] path = [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.947Z] \r\n[2024-01-20T14:37:05.947Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n[2024-01-20T14:37:05.947Z]         t = type(cpu)\r\n[2024-01-20T14:37:05.947Z]         if (t is Row):\r\n[2024-01-20T14:37:05.947Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.948Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n[2024-01-20T14:37:05.948Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n[2024-01-20T14:37:05.948Z]                 for field in cpu.__fields__:\r\n[2024-01-20T14:37:05.948Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n[2024-01-20T14:37:05.948Z]             else:\r\n[2024-01-20T14:37:05.948Z]                 for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.948Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.948Z]         elif (t is list):\r\n[2024-01-20T14:37:05.948Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.948Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.948Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.948Z]         elif (t is tuple):\r\n[2024-01-20T14:37:05.948Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n[2024-01-20T14:37:05.948Z]             for index in range(len(cpu)):\r\n[2024-01-20T14:37:05.948Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n[2024-01-20T14:37:05.948Z]         elif (t is pytypes.GeneratorType):\r\n[2024-01-20T14:37:05.948Z]             index = 0\r\n[2024-01-20T14:37:05.948Z]             # generator has no zip :( so we have to do this the hard way\r\n[2024-01-20T14:37:05.948Z]             done = False\r\n[2024-01-20T14:37:05.948Z]             while not done:\r\n[2024-01-20T14:37:05.948Z]                 sub_cpu = None\r\n[2024-01-20T14:37:05.948Z]                 sub_gpu = None\r\n[2024-01-20T14:37:05.948Z]                 try:\r\n[2024-01-20T14:37:05.948Z]                     sub_cpu = next(cpu)\r\n[2024-01-20T14:37:05.948Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.948Z]                     done = True\r\n[2024-01-20T14:37:05.948Z]     \r\n[2024-01-20T14:37:05.948Z]                 try:\r\n[2024-01-20T14:37:05.948Z]                     sub_gpu = next(gpu)\r\n[2024-01-20T14:37:05.948Z]                 except StopIteration:\r\n[2024-01-20T14:37:05.948Z]                     done = True\r\n[2024-01-20T14:37:05.948Z]     \r\n[2024-01-20T14:37:05.948Z]                 if done:\r\n[2024-01-20T14:37:05.948Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n[2024-01-20T14:37:05.948Z]                 else:\r\n[2024-01-20T14:37:05.948Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n[2024-01-20T14:37:05.948Z]     \r\n[2024-01-20T14:37:05.948Z]                 index = index + 1\r\n[2024-01-20T14:37:05.948Z]         elif (t is dict):\r\n[2024-01-20T14:37:05.948Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n[2024-01-20T14:37:05.948Z]             # so sort the items to do our best with ignoring the order of dicts\r\n[2024-01-20T14:37:05.948Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.948Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n[2024-01-20T14:37:05.948Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n[2024-01-20T14:37:05.948Z]         elif (t is int):\r\n[2024-01-20T14:37:05.948Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.948Z]         elif (t is float):\r\n[2024-01-20T14:37:05.948Z]             if (math.isnan(cpu)):\r\n[2024-01-20T14:37:05.948Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n[2024-01-20T14:37:05.948Z]             else:\r\n[2024-01-20T14:37:05.948Z] >               assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n[2024-01-20T14:37:05.948Z] E               AssertionError: GPU and CPU float values are different [0, 'avg(DISTINCT a)']\r\n[2024-01-20T14:37:05.948Z] \r\n[2024-01-20T14:37:05.948Z] ../../src/main/python/asserts.py:83: AssertionError\r\n[2024-01-20T14:37:05.948Z] ----------------------------- Captured stdout call -----------------------------\r\n[2024-01-20T14:37:05.948Z] ### CPU RUN ###\r\n[2024-01-20T14:37:05.948Z] ### GPU RUN ###\r\n[2024-01-20T14:37:05.948Z] ### COLLECT: GPU TOOK 0.1446061134338379 CPU TOOK 0.08382821083068848 ###\r\n[2024-01-20T14:37:05.948Z] --- CPU OUTPUT\r\n[2024-01-20T14:37:05.948Z] +++ GPU OUTPUT\r\n[2024-01-20T14:37:05.948Z] @@ -1 +1 @@\r\n[2024-01-20T14:37:05.948Z] -Row(avg(DISTINCT a)=-9.961254917487832e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.749297777543451e+17)\r\n[2024-01-20T14:37:05.948Z] +Row(avg(DISTINCT a)=-9.961353300130207e+25, avg(DISTINCT b)=nan, avg(DISTINCT c)=-6.749297777543448e+17)\r\n</pre>\r\n</details>\r\n\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n**Expected behavior**\r\n\r\n**Environment details (please complete the following information)**\r\n - Environment location: Regular integration test environment\r\n - Spark configuration settings related to the issue\r\n\r\n**Additional context**\r\nScala 2.13 test\r\nDATAGEN_SEED=1705756525\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10234/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}