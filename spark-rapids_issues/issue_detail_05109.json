{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5109",
    "id": 1188602438,
    "node_id": "I_kwDOD7z77c5G2KJG",
    "number": 5109,
    "title": "[FEA] GroupBy on an arbitrary nested array(with struct/array inside)",
    "user": {
        "login": "viadea",
        "id": 9665750,
        "node_id": "MDQ6VXNlcjk2NjU3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9665750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/viadea",
        "html_url": "https://github.com/viadea",
        "followers_url": "https://api.github.com/users/viadea/followers",
        "following_url": "https://api.github.com/users/viadea/following{/other_user}",
        "gists_url": "https://api.github.com/users/viadea/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/viadea/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/viadea/subscriptions",
        "organizations_url": "https://api.github.com/users/viadea/orgs",
        "repos_url": "https://api.github.com/users/viadea/repos",
        "events_url": "https://api.github.com/users/viadea/events{/privacy}",
        "received_events_url": "https://api.github.com/users/viadea/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 2710265788,
            "node_id": "MDU6TGFiZWwyNzEwMjY1Nzg4",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/cudf_dependency",
            "name": "cudf_dependency",
            "color": "7400FF",
            "default": false,
            "description": "An issue or PR with this label depends on a new feature in cudf"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-03-31T19:36:52Z",
    "updated_at": "2023-03-06T04:51:51Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "I wish we can support GroupBy on an arbitrary nested array(with struct/array inside).\r\nFor example, the column could be very complex like inside the struct, there is array, struct nested as well.\r\n\r\nThe sample query:\r\n```\r\nSELECT a_nested_struct_col FROM table\r\nGROUP BY request.a_nested_struct_col  limit 3\r\n```\r\n\r\nThe not-supported-message could be like:\r\n```\r\n!Expression <KnownFloatingPointNormalized> knownfloatingpointnormalized(if (... (StructType(StructField(a,DoubleType,true), StructField(b,StringType,true),  StructField(c,LongType,true), StructField(d,ArrayType(LongType,true),true)) is not supported); expression KnownFloatingPointNormalized knownfloatingpointnormalized(...\r\n```\r\n\r\nThe real use case has a very complex array column which has nested struct/array inside. \r\nIf you need the real example, please ping me offline.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5109/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}