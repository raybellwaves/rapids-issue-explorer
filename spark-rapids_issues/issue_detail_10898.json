{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10898",
    "id": 2318089517,
    "node_id": "I_kwDOD7z77c6KKz0t",
    "number": 10898,
    "title": "[BUG] test_from_json_struct_decimal integration test failed with DATAGEN_SEED=1716745329",
    "user": {
        "login": "nartal1",
        "id": 50492963,
        "node_id": "MDQ6VXNlcjUwNDkyOTYz",
        "avatar_url": "https://avatars.githubusercontent.com/u/50492963?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nartal1",
        "html_url": "https://github.com/nartal1",
        "followers_url": "https://api.github.com/users/nartal1/followers",
        "following_url": "https://api.github.com/users/nartal1/following{/other_user}",
        "gists_url": "https://api.github.com/users/nartal1/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nartal1/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nartal1/subscriptions",
        "organizations_url": "https://api.github.com/users/nartal1/orgs",
        "repos_url": "https://api.github.com/users/nartal1/repos",
        "events_url": "https://api.github.com/users/nartal1/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nartal1/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-05-27T02:15:42Z",
    "updated_at": "2024-05-30T07:30:31Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n\r\ntest_from_json_struct_decimal failed on nightly run due to mismatch in CPU and GPU results.\r\n\r\n```\r\n12:47:16  =========================== short test summary info ============================\r\n12:47:16  FAILED ../../src/main/python/json_test.py::test_from_json_struct_decimal[DATAGEN_SEED=1716745329, TZ=UTC, INJECT_OOM] - AssertionError: GPU and CPU decimal values are different at [455, 'from_json(a)', 'a']\r\n12:47:16  = 1 failed, 28076 passed, 1019 skipped, 669 xfailed, 837 xpassed, 14679 warnings in 7506.97s (2:05:06) =\r\n```\r\n\r\n```\r\n[2024-05-26T19:47:16.980Z] =================================== FAILURES ===================================\r\n\r\n[2024-05-26T19:47:16.980Z] ________________________ test_from_json_struct_decimal _________________________\r\n\r\n[2024-05-26T19:47:16.980Z] [gw2] linux -- Python 3.9.19 /usr/bin/python\r\n\r\n[2024-05-26T19:47:16.980Z] \r\n\r\n[2024-05-26T19:47:16.980Z]     @allow_non_gpu(*non_utc_allow)\r\n\r\n[2024-05-26T19:47:16.980Z]     def test_from_json_struct_decimal():\r\n\r\n[2024-05-26T19:47:16.980Z]         json_string_gen = StringGen(r'{ \"a\": \"[+-]?([0-9]{0,5})?(\\.[0-9]{0,2})?([eE][+-]?[0-9]{1,2})?\" }') \\\r\n\r\n[2024-05-26T19:47:16.980Z]             .with_special_pattern('', weight=50) \\\r\n\r\n[2024-05-26T19:47:16.980Z]             .with_special_pattern('null', weight=50)\r\n\r\n[2024-05-26T19:47:16.980Z] >       assert_gpu_and_cpu_are_equal_collect(\r\n\r\n[2024-05-26T19:47:16.980Z]             lambda spark : unary_op_df(spark, json_string_gen) \\\r\n\r\n[2024-05-26T19:47:16.980Z]                 .select(f.col('a'), f.from_json('a', 'struct<a:decimal>')),\r\n\r\n[2024-05-26T19:47:16.980Z]             conf=_enable_all_types_conf)\r\n\r\n[2024-05-26T19:47:16.980Z] \r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/json_test.py:695: \r\n\r\n[2024-05-26T19:47:16.980Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n\r\n[2024-05-26T19:47:16.980Z]     _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n\r\n[2024-05-26T19:47:16.980Z]     assert_equal(from_cpu, from_gpu)\r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:107: in assert_equal\r\n\r\n[2024-05-26T19:47:16.980Z]     _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:43: in _assert_equal\r\n\r\n[2024-05-26T19:47:16.980Z]     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-05-26T19:47:16.980Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-05-26T19:47:16.980Z] ../../src/main/python/asserts.py:36: in _assert_equal\r\n\r\n[2024-05-26T19:47:16.980Z]     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-05-26T19:47:16.980Z] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n[2024-05-26T19:47:16.980Z] \r\n\r\n[2024-05-26T19:47:16.980Z] cpu = Decimal('0'), gpu = None\r\n\r\n[2024-05-26T19:47:16.980Z] float_check = <function get_float_check.<locals>.<lambda> at 0xfffefd074820>\r\n\r\n[2024-05-26T19:47:16.981Z] path = [455, 'from_json(a)', 'a']\r\n\r\n[2024-05-26T19:47:16.981Z] \r\n\r\n[2024-05-26T19:47:16.981Z]     def _assert_equal(cpu, gpu, float_check, path):\r\n\r\n[2024-05-26T19:47:16.981Z]         t = type(cpu)\r\n\r\n[2024-05-26T19:47:16.981Z]         if (t is Row):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-05-26T19:47:16.981Z]             if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n\r\n[2024-05-26T19:47:16.981Z]                 assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n\r\n[2024-05-26T19:47:16.981Z]                 for field in cpu.__fields__:\r\n\r\n[2024-05-26T19:47:16.981Z]                     _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n\r\n[2024-05-26T19:47:16.981Z]             else:\r\n\r\n[2024-05-26T19:47:16.981Z]                 for index in range(len(cpu)):\r\n\r\n[2024-05-26T19:47:16.981Z]                     _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is list):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-05-26T19:47:16.981Z]             for index in range(len(cpu)):\r\n\r\n[2024-05-26T19:47:16.981Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is tuple):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n\r\n[2024-05-26T19:47:16.981Z]             for index in range(len(cpu)):\r\n\r\n[2024-05-26T19:47:16.981Z]                 _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is pytypes.GeneratorType):\r\n\r\n[2024-05-26T19:47:16.981Z]             index = 0\r\n\r\n[2024-05-26T19:47:16.981Z]             # generator has no zip :( so we have to do this the hard way\r\n\r\n[2024-05-26T19:47:16.981Z]             done = False\r\n\r\n[2024-05-26T19:47:16.981Z]             while not done:\r\n\r\n[2024-05-26T19:47:16.981Z]                 sub_cpu = None\r\n\r\n[2024-05-26T19:47:16.981Z]                 sub_gpu = None\r\n\r\n[2024-05-26T19:47:16.981Z]                 try:\r\n\r\n[2024-05-26T19:47:16.981Z]                     sub_cpu = next(cpu)\r\n\r\n[2024-05-26T19:47:16.981Z]                 except StopIteration:\r\n\r\n[2024-05-26T19:47:16.981Z]                     done = True\r\n\r\n[2024-05-26T19:47:16.981Z]     \r\n\r\n[2024-05-26T19:47:16.981Z]                 try:\r\n\r\n[2024-05-26T19:47:16.981Z]                     sub_gpu = next(gpu)\r\n\r\n[2024-05-26T19:47:16.981Z]                 except StopIteration:\r\n\r\n[2024-05-26T19:47:16.981Z]                     done = True\r\n\r\n[2024-05-26T19:47:16.981Z]     \r\n\r\n[2024-05-26T19:47:16.981Z]                 if done:\r\n\r\n[2024-05-26T19:47:16.981Z]                     assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]                 else:\r\n\r\n[2024-05-26T19:47:16.981Z]                     _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n\r\n[2024-05-26T19:47:16.981Z]     \r\n\r\n[2024-05-26T19:47:16.981Z]                 index = index + 1\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is dict):\r\n\r\n[2024-05-26T19:47:16.981Z]             # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n\r\n[2024-05-26T19:47:16.981Z]             # so sort the items to do our best with ignoring the order of dicts\r\n\r\n[2024-05-26T19:47:16.981Z]             cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-05-26T19:47:16.981Z]             gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n\r\n[2024-05-26T19:47:16.981Z]             _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is int):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif (t is float):\r\n\r\n[2024-05-26T19:47:16.981Z]             if (math.isnan(cpu)):\r\n\r\n[2024-05-26T19:47:16.981Z]                 assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]             else:\r\n\r\n[2024-05-26T19:47:16.981Z]                 assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif isinstance(cpu, str):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert cpu == gpu, \"GPU and CPU string values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif isinstance(cpu, datetime):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert cpu == gpu, \"GPU and CPU timestamp values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif isinstance(cpu, date):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert cpu == gpu, \"GPU and CPU date values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif isinstance(cpu, bool):\r\n\r\n[2024-05-26T19:47:16.981Z]             assert cpu == gpu, \"GPU and CPU boolean values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z]         elif isinstance(cpu, Decimal):\r\n\r\n[2024-05-26T19:47:16.981Z] >           assert cpu == gpu, \"GPU and CPU decimal values are different at {}\".format(path)\r\n\r\n[2024-05-26T19:47:16.981Z] E           AssertionError: GPU and CPU decimal values are different at [455, 'from_json(a)', 'a']\r\n\r\n[2024-05-26T19:47:16.981Z] \r\n\r\n[2024-05-26T19:47:16.981Z] ../../src/main/python/asserts.py:93: AssertionError\r\n\r\n[2024-05-26T19:47:16.981Z] ----------------------------- Captured stdout call -----------------------------\r\n```\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10898/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}