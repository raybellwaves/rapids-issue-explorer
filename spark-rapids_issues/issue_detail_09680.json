{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9680",
    "id": 1991078865,
    "node_id": "I_kwDOD7z77c52rXPR",
    "number": 9680,
    "title": "[BUG] Update AST join split condition code to avoid idempotent issues",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 3444490915,
            "node_id": "LA_kwDOD7z77c7NTsKj",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/tech%20debt",
            "name": "tech debt",
            "color": "0052cc",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-11-13T17:04:29Z",
    "updated_at": "2023-11-14T21:32:40Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nThis is related to https://github.com/NVIDIA/spark-rapids/pull/9635#discussion_r1386755030\r\n\r\nI am not 100% sure that this is a bug at all.\r\n\r\nThe current code for non-AST-able join condition splitting will do three passes through the join condition.\r\n\r\nThe first pass will verify that we can fix up the join condition to make this work.\r\n\r\nThe second pass will build come up with a plan on how to fix-up the condition\r\n\r\nThe third pass will actually execute the plan and update the condition.\r\n\r\nThe issue is that in both the second and third passes the join condition will be converted, partially or fully, to the GPU.  This assumes that the conversion will be idempotent. I don't know of any case where it is not, but it could become a problem in the future because I don't think we ever guarantee that will happen.\r\n\r\nThe first pass happens both when we tag the expression to see if we can support this operation on the GPU, but also as we are trying to do the conversion. I think this is to avoid caching some data in-between tagging and conversion.\r\n\r\nTo me I think the long term solution is to operate on CPU expressions + BaseExprMeta instances instead of GPU expressions. This way we don't need to convert anything to the GPU until we are fully done with rewriting the query. This is not simple because the Meta objects are not setup to be modified in this kind of a way. In general I would like to see us walk through the the condition in almost exactly the same way that we walk through it to check if we can split up the join condition. We might even be able to use the same code for walking the tree. When we hit a spot where we would need to split we do the split right then and there. We put in a new Alias and append the sub-tree to an input project operation.  If we need to we can also do deduping of sub-expressions that are replaced. For that I would do the ExpressionEquals check on the CPU expressions instead of the GPU expressions.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9680/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}