{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/5895",
    "id": 1281592253,
    "node_id": "I_kwDOD7z77c5MY4u9",
    "number": 5895,
    "title": "[FEA] ORC reading supports schema evolution",
    "user": {
        "login": "firestarman",
        "id": 7280411,
        "node_id": "MDQ6VXNlcjcyODA0MTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7280411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/firestarman",
        "html_url": "https://github.com/firestarman",
        "followers_url": "https://api.github.com/users/firestarman/followers",
        "following_url": "https://api.github.com/users/firestarman/following{/other_user}",
        "gists_url": "https://api.github.com/users/firestarman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/firestarman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/firestarman/subscriptions",
        "organizations_url": "https://api.github.com/users/firestarman/orgs",
        "repos_url": "https://api.github.com/users/firestarman/repos",
        "events_url": "https://api.github.com/users/firestarman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/firestarman/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-06-23T02:57:14Z",
    "updated_at": "2022-08-10T09:29:41Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "CPU ORC reading supports schema evolution as discribed in issue #135. But GPU does not. GPU will run into exceptions when users specify a reader schema which is different from the file one, e.g\r\n```\r\nscala> spark.conf.set(\"spark.rapids.sql.enabled\", \"false\")\r\n\r\nscala> Seq(1,2,3,4,5).toDF(\"ci\").write.mode(\"overwrite\").orc(\"/data/tmp/orc/\")\r\n\r\nscala> sql(\"create table if not exists tcl2 (`ci` LONG) using ORC options(path '/data/tmp/orc/')\")\r\nres2: org.apache.spark.sql.DataFrame = []\r\n\r\nscala> sql(\"select * from tcl2\").show\r\n+---+\r\n| ci|\r\n+---+\r\n|  3|\r\n|  4|\r\n|  1|\r\n|  2|\r\n|  5|\r\n+---+\r\n\r\nscala> spark.conf.set(\"spark.rapids.sql.enabled\", \"true\")\r\n\r\nscala> sql(\"create table if not exists tcl (`ci` LONG) using ORC options(path '/data/tmp/orc/')\")\r\nres5: org.apache.spark.sql.DataFrame = []\r\n\r\nscala> sql(\"select * from tcl\").show\r\n22/06/20 08:42:49 ERROR Executor: Exception in task 0.0 in stage 3.0 (TID 10)\r\njava.lang.AssertionError: assertion failed\r\n\tat scala.Predef$.assert(Predef.scala:208)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler$GpuOrcPartitionReaderUtils.checkSchemaCompatibility(GpuOrcScan.scala:1244)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler$GpuOrcPartitionReaderUtils.$anonfun$checkSchemaCompatibility$3(GpuOrcScan.scala:1279)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler$GpuOrcPartitionReaderUtils.checkSchemaCompatibility(GpuOrcScan.scala:1264)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler$GpuOrcPartitionReaderUtils.getOrcPartitionReaderContext(GpuOrcScan.scala:990)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler.$anonfun$filterStripes$4(GpuOrcScan.scala:844)\r\n\tat com.nvidia.spark.rapids.Arm.withResource(Arm.scala:28)\r\n\tat com.nvidia.spark.rapids.Arm.withResource$(Arm.scala:26)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler.withResource(GpuOrcScan.scala:789)\r\n\tat com.nvidia.spark.rapids.GpuOrcFileFilterHandler.$anonfun$filterStripes$1(GpuOrcScan.scala:842)\r\n\tat com.nvidia.spark.rapids.shims.OrcShims320untilAllBase.withReader(OrcShims320untilAllBase.scala:36)\r\n\tat com.nvidia.spark.rapids.shims.OrcShims320untilAllBase.withReader$(OrcShims320untilAllBase.scala:34)\r\n\tat com.nvidia.spark.rapids.shims.OrcShims$.withReader(OrcShims.scala:22)\r\n...\r\n```\r\nUnfornately we can not detect this case at tagging stage, because we do not know the file schema at that time. `dataSchema` is not reliable because files may have different schemas.\r\n\r\nHere is the feature list I can think of to support the schema evolution for ORC reading.\r\n- [x] Remove columns being not required but existing in the file.\r\n- [x] Add columns missing in the file.\r\n- [x] Re-order columns according to the read schema.\r\n- [ ] Support type casting between compatible types.\r\n  - [x] https://github.com/NVIDIA/spark-rapids/pull/5960\r\n  - [ ] #6149\r\n- [x] https://github.com/NVIDIA/spark-rapids/issues/5948\r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/5895/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}