{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10922",
    "id": 2320365034,
    "node_id": "I_kwDOD7z77c6KTfXq",
    "number": 10922,
    "title": "from_json with predefined schema when converts json with misssing fields, throwing an exception.",
    "user": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-28T07:44:04Z",
    "updated_at": "2024-05-28T19:42:59Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "from_json with predefined schema when converts json with misssing fields, throwing an exception.\r\n## Reproduce:\r\nCPU:\r\n```\r\nscala> import org.apache.spark.sql.{SparkSession, Row}\r\nimport org.apache.spark.sql.{SparkSession, Row}\r\n\r\nscala> import org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.functions._\r\n\r\nscala> import org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.types._\r\n\r\nscala> \r\n\r\nscala> val spark = SparkSession.builder.appName(\"Test\").getOrCreate()\r\n24/05/28 15:43:57 WARN SparkSession: Using an existing Spark session; only runtime SQL configurations will take effect.\r\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@58f6dab9\r\n\r\nscala> import spark.implicits._\r\nimport spark.implicits._\r\n\r\nscala> val input = \"\"\"{\r\n     |   |  \"a\": 1,\r\n     |   |  \"c\": \"foo\"\r\n     |   |}\r\n     |   |\"\"\".stripMargin\r\ninput: String =\r\n\"{\r\n  \"a\": 1,\r\n  \"c\": \"foo\"\r\n}\r\n\"\r\n\r\nscala> val jsonSchema = new StructType().add(\"a\", LongType, nullable = false).add(\"b\", StringType, nullable = false).add(\"c\", StringType, nullable = false)\r\njsonSchema: org.apache.spark.sql.types.StructType = StructType(StructField(a,LongType,false),StructField(b,StringType,false),StructField(c,StringType,false))\r\n\r\nscala> val jsonData = Seq(input).toDS()\r\njsonData: org.apache.spark.sql.Dataset[String] = [value: string]\r\n\r\nscala> val df = jsonData.toDF(\"jsonString\")\r\ndf: org.apache.spark.sql.DataFrame = [jsonString: string]\r\n\r\nscala> \r\n\r\nscala> df.write.mode(\"OVERWRITE\").parquet(\"TEMP\")\r\n                                                                                \r\nscala> val df2 = spark.read.parquet(\"TEMP\")\r\ndf2: org.apache.spark.sql.DataFrame = [jsonString: string]\r\n\r\nscala> val parsedDF = df2.select(from_json(col(\"jsonString\"), jsonSchema).as(\"data\"))\r\nparsedDF: org.apache.spark.sql.DataFrame = [data: struct<a: bigint, b: string ... 1 more field>]\r\n\r\nscala>   .select(\"data.*\")\r\nres1: org.apache.spark.sql.DataFrame = [a: bigint, b: string ... 1 more field]\r\n\r\nscala> parsedDF.show(false)\r\n+--------------+                                                                \r\n|data          |\r\n+--------------+\r\n|{1, null, foo}|\r\n+--------------+\r\n\r\n\r\nscala> parsedDF.printSchema()\r\nroot\r\n |-- data: struct (nullable = true)\r\n |    |-- a: long (nullable = true)\r\n |    |-- b: string (nullable = true)\r\n |    |-- c: string (nullable = true)\r\n\r\n\r\nscala> spark.stop()\r\n\r\n```\r\nGPU:\r\n```\r\n:~$ $SPARK_HOME/bin/spark-shell --master local[*] --jars ${SPARK_RAPIDS_PLUGIN_JAR} \r\n--conf spark.plugins=com.nvidia.spark.SQLPlugin \r\n--conf spark.rapids.sql.enabled=true \r\n--conf spark.rapids.sql.explain=ALL \r\n--driver-java-options '-ea -Duser.timezone=UTC ' \r\n--conf spark.rapids.sql.expression.JsonTuple=true \r\n--conf spark.rapids.sql.expression.GetJsonObject=true \r\n--conf spark.rapids.sql.expression.JsonToStructs=true \r\n--conf spark.rapids.sql.expression.StructsToJson=true\r\n```\r\n\r\n```\r\nscala> import org.apache.spark.sql.{SparkSession, Row}\r\nimport org.apache.spark.sql.{SparkSession, Row}\r\n\r\nscala> import org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.functions._\r\n\r\nscala> import org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.types._\r\n\r\nscala> \r\n\r\nscala> val spark = SparkSession.builder.appName(\"Test\").getOrCreate()\r\n24/05/28 07:45:26 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\r\n24/05/28 07:45:26 WARN RapidsPluginUtils: RAPIDS Accelerator is enabled, to disable GPU support set `spark.rapids.sql.enabled` to false.\r\n24/05/28 07:45:26 WARN RapidsPluginUtils: spark.rapids.sql.explain is set to `ALL`. Set it to 'NONE' to suppress the diagnostics logging about the query placement on the GPU.\r\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@64a97889\r\n\r\nscala> import spark.implicits._\r\nimport spark.implicits._\r\n\r\nscala> val input = \"\"\"{\r\n     |   |  \"a\": 1,\r\n     |   |  \"c\": \"foo\"\r\n     |   |}\r\n     |   |\"\"\".stripMargin\r\ninput: String =\r\n\"{\r\n  \"a\": 1,\r\n  \"c\": \"foo\"\r\n}\r\n\"\r\n\r\nscala> val jsonSchema = new StructType().add(\"a\", LongType, nullable = false).add(\"b\", StringType, nullable = false).add(\"c\", StringType, nullable = false)\r\njsonSchema: org.apache.spark.sql.types.StructType = StructType(StructField(a,LongType,false),StructField(b,StringType,false),StructField(c,StringType,false))\r\n\r\nscala> val jsonData = Seq(input).toDS()\r\njsonData: org.apache.spark.sql.Dataset[String] = [value: string]\r\n\r\nscala> val df = jsonData.toDF(\"jsonString\")\r\ndf: org.apache.spark.sql.DataFrame = [jsonString: string]\r\n\r\nscala> \r\n\r\nscala> df.write.mode(\"OVERWRITE\").parquet(\"TEMP\")\r\n24/05/28 07:45:29 WARN GpuOverrides: \r\n*Exec <DataWritingCommandExec> will run on GPU\r\n  *Output <InsertIntoHadoopFsRelationCommand> will run on GPU\r\n  ! <LocalTableScanExec> cannot run on GPU because GPU does not currently support the operator class org.apache.spark.sql.execution.LocalTableScanExec\r\n    @Expression <AttributeReference> jsonString#93 could run on GPU\r\n\r\n\r\nscala> val df2 = spark.read.parquet(\"TEMP\")\r\ndf2: org.apache.spark.sql.DataFrame = [jsonString: string]\r\n\r\nscala> val parsedDF = df2.select(from_json(col(\"jsonString\"), jsonSchema).as(\"data\"))\r\nparsedDF: org.apache.spark.sql.DataFrame = [data: struct<a: bigint, b: string ... 1 more field>]\r\n\r\nscala>   .select(\"data.*\")\r\nres20: org.apache.spark.sql.DataFrame = [a: bigint, b: string ... 1 more field]\r\n\r\nscala> parsedDF.show(false)\r\n24/05/28 07:45:29 WARN GpuOverrides: \r\n!Exec <CollectLimitExec> cannot run on GPU because the Exec CollectLimitExec has been disabled, and is disabled by default because Collect Limit replacement can be slower on the GPU, if huge number of rows in a batch it could help by limiting the number of rows transferred from GPU to CPU. Set spark.rapids.sql.exec.CollectLimitExec to true if you wish to enable it\r\n  @Partitioning <SinglePartition$> could run on GPU\r\n  *Exec <ProjectExec> will run on GPU\r\n    *Expression <Alias> cast(from_json(StructField(a,LongType,false), StructField(b,StringType,false), StructField(c,StringType,false), jsonString#96, Some(UTC)) as string) AS data#108 will run on GPU\r\n      *Expression <Cast> cast(from_json(StructField(a,LongType,false), StructField(b,StringType,false), StructField(c,StringType,false), jsonString#96, Some(UTC)) as string) will run on GPU\r\n        *Expression <JsonToStructs> from_json(StructField(a,LongType,false), StructField(b,StringType,false), StructField(c,StringType,false), jsonString#96, Some(UTC)) will run on GPU\r\n    *Exec <FileSourceScanExec> will run on GPU\r\n\r\n24/05/28 07:45:29 ERROR Executor: Exception in task 0.0 in stage 3.0 (TID 3)\r\njava.lang.IllegalArgumentException: We cannot currently support parsing JSON that contains a line separator in it\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$3(GpuJsonToStructs.scala:144)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$3$adapted(GpuJsonToStructs.scala:141)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$2(GpuJsonToStructs.scala:141)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$2$adapted(GpuJsonToStructs.scala:140)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$1(GpuJsonToStructs.scala:140)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$checkForNewline$1$adapted(GpuJsonToStructs.scala:139)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.checkForNewline(GpuJsonToStructs.scala:139)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$cleanAndConcat$12(GpuJsonToStructs.scala:116)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat org.apache.spark.sql.rapids.GpuJsonToStructs.$anonfun$cleanAndConcat$11(GpuJsonToStructs.scala:115)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10922/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}