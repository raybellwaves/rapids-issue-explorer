{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10980",
    "id": 2334838279,
    "node_id": "I_kwDOD7z77c6LKs4H",
    "number": 10980,
    "title": "[FEA] Support short mode of DayTimeIntervalType when cast string to daytime",
    "user": {
        "login": "thirtiseven",
        "id": 7326403,
        "node_id": "MDQ6VXNlcjczMjY0MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7326403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thirtiseven",
        "html_url": "https://github.com/thirtiseven",
        "followers_url": "https://api.github.com/users/thirtiseven/followers",
        "following_url": "https://api.github.com/users/thirtiseven/following{/other_user}",
        "gists_url": "https://api.github.com/users/thirtiseven/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thirtiseven/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thirtiseven/subscriptions",
        "organizations_url": "https://api.github.com/users/thirtiseven/orgs",
        "repos_url": "https://api.github.com/users/thirtiseven/repos",
        "events_url": "https://api.github.com/users/thirtiseven/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thirtiseven/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 2094235324,
            "node_id": "MDU6TGFiZWwyMDk0MjM1MzI0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/?%20-%20Needs%20Triage",
            "name": "? - Needs Triage",
            "color": "e99695",
            "default": false,
            "description": "Need team to review and classify"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-06-05T03:50:09Z",
    "updated_at": "2024-06-05T06:43:51Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSpark UT case `Cast string to day-time interval` and `Take into account day-time interval fields in cast` failed because we are not support `short mode` of DayTimeIntervalType when cast string to daytime.\r\n\r\nUncomment the `Cast string to day-time interval` or `Take into account day-time interval fields in cast` in [RapidsTestSettings.scala](https://github.com/NVIDIA/spark-rapids/blob/branch-24.08/tests/src/test/spark330/scala/org/apache/spark/sql/rapids/utils/RapidsTestSettings.scala), then run `RapidsCastSuite`:\r\n```\r\nmvn test -Dbuildver=330 -DwildcardSuites=org.apache.spark.sql.rapids.suites.RapidsCastSuite\r\n```\r\ngot:\r\n```\r\norg.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 13762.0 failed 1 times, most recent failure: Lost task 1.0 in stage 13762.0 (TID 27525) (spark-haoyang executor driver): java.lang.IllegalArgumentException: Cast string to day time interval failed, may be the format is invalid, range check failed or overflow\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtilsBase.$anonfun$castStringToDayTimeIntervalWithThrow$1(GpuIntervalUtilsBase.scala:174)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtilsBase.castStringToDayTimeIntervalWithThrow(GpuIntervalUtilsBase.scala:172)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtilsBase.castStringToDayTimeIntervalWithThrow$(GpuIntervalUtilsBase.scala:171)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtils$.castStringToDayTimeIntervalWithThrow(GpuIntervalUtils.scala:34)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtilsBase.castStringToDayTimeIntervalWithThrow(GpuIntervalUtilsBase.scala:160)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtilsBase.castStringToDayTimeIntervalWithThrow$(GpuIntervalUtilsBase.scala:159)\r\n\tat com.nvidia.spark.rapids.shims.GpuIntervalUtils$.castStringToDayTimeIntervalWithThrow(GpuIntervalUtils.scala:34)\r\n\tat com.nvidia.spark.rapids.GpuCast$.doCast(GpuCast.scala:593)\r\n\tat com.nvidia.spark.rapids.GpuCast.doColumnar(GpuCast.scala:1903)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.doItColumnar(GpuExpressions.scala:250)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.$anonfun$columnarEval$1(GpuExpressions.scala:261)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.columnarEval(GpuExpressions.scala:260)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuAlias.columnarEval(namedExpressions.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.$anonfun$project$1(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1(implicits.scala:221)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1$adapted(implicits.scala:218)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.safeMap(implicits.scala:218)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$AutoCloseableProducingSeq.safeMap(implicits.scala:253)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.project(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$project$2(basicPhysicalOperators.scala:619)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.recurse$2(basicPhysicalOperators.scala:618)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.project(basicPhysicalOperators.scala:631)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$5(basicPhysicalOperators.scala:567)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$.withRestoreOnRetry(RmmRapidsRetryIterator.scala:272)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$4(basicPhysicalOperators.scala:567)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$3(basicPhysicalOperators.scala:565)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$NoInputSpliterator.next(RmmRapidsRetryIterator.scala:395)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$RmmRapidsRetryIterator.next(RmmRapidsRetryIterator.scala:613)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$RmmRapidsRetryAutoCloseableIterator.next(RmmRapidsRetryIterator.scala:517)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$.drainSingleWithVerification(RmmRapidsRetryIterator.scala:291)\r\n\tat com.nvidia.spark.rapids.RmmRapidsRetryIterator$.withRetryNoSplit(RmmRapidsRetryIterator.scala:185)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$1(basicPhysicalOperators.scala:565)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:39)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.projectWithRetrySingleBatchInternal(basicPhysicalOperators.scala:562)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.projectAndCloseWithRetrySingleBatch(basicPhysicalOperators.scala:601)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec.$anonfun$internalDoExecuteColumnar$2(basicPhysicalOperators.scala:384)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec.$anonfun$internalDoExecuteColumnar$1(basicPhysicalOperators.scala:380)\r\n\tat scala.collection.Iterator$$anon$10.next(Iterator.scala:461)\r\n\tat com.nvidia.spark.rapids.ColumnarToRowIterator.$anonfun$fetchNextBatch$3(GpuColumnarToRowExec.scala:290)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.ColumnarToRowIterator.fetchNextBatch(GpuColumnarToRowExec.scala:287)\r\n\tat com.nvidia.spark.rapids.ColumnarToRowIterator.loadNextBatch(GpuColumnarToRowExec.scala:257)\r\n\tat com.nvidia.spark.rapids.ColumnarToRowIterator.hasNext(GpuColumnarToRowExec.scala:304)\r\n\tat scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:460)\r\n\tat org.apache.spark.sql.execution.SparkPlan.$anonfun$getByteArrayRdd$1(SparkPlan.scala:364)\r\n\tat org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2(RDD.scala:890)\r\n\tat org.apache.spark.rdd.RDD.$anonfun$mapPartitionsInternal$2$adapted(RDD.scala:890)\r\n\tat org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:52)\r\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:365)\r\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:329)\r\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\r\n\tat org.apache.spark.scheduler.Task.run(Task.scala:136)\r\n\tat org.apache.spark.executor.Executor$TaskRunner.$anonfun$run$3(Executor.scala:548)\r\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1504)\r\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:551)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:750)\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nWe will check the subtype in DayTimeIntervalType and find a regex pattern in [GpuIntervalUtilsBase](https://github.com/NVIDIA/spark-rapids/blob/149e0d58e50d815eb741c225f79aa60c2ea805b2/sql-plugin/src/main/spark330/scala/com/nvidia/spark/rapids/shims/GpuIntervalUtilsBase.scala) , then extract the input data with the pattern. We can updated those pattern so it can also match data in short mode.\r\n\r\n**Describe alternatives you've considered**\r\nIf we are not plan to support it, at least we need to note we do not support short mode of DayTimeIntervalType in compatibility doc.\r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10980/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}