{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/9247",
    "id": 1900028909,
    "node_id": "I_kwDOD7z77c5xQCPt",
    "number": 9247,
    "title": "`test_initcap` failed with seed 14",
    "user": {
        "login": "thirtiseven",
        "id": 7326403,
        "node_id": "MDQ6VXNlcjczMjY0MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7326403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thirtiseven",
        "html_url": "https://github.com/thirtiseven",
        "followers_url": "https://api.github.com/users/thirtiseven/followers",
        "following_url": "https://api.github.com/users/thirtiseven/following{/other_user}",
        "gists_url": "https://api.github.com/users/thirtiseven/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thirtiseven/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thirtiseven/subscriptions",
        "organizations_url": "https://api.github.com/users/thirtiseven/orgs",
        "repos_url": "https://api.github.com/users/thirtiseven/repos",
        "events_url": "https://api.github.com/users/thirtiseven/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thirtiseven/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2710265788,
            "node_id": "MDU6TGFiZWwyNzEwMjY1Nzg4",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/cudf_dependency",
            "name": "cudf_dependency",
            "color": "7400FF",
            "default": false,
            "description": "An issue or PR with this label depends on a new feature in cudf"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2023-09-18T01:41:57Z",
    "updated_at": "2024-01-22T21:17:45Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Changing seed to some other values like 14 will fail `test_initcap`:\r\n```\r\n@incompat\r\ndef test_initcap():\r\n    # Because we don't use the same unicode version we need to limit\r\n    # the charicter set to something more reasonable\r\n    # upper and lower should cover the corner cases, this is mostly to\r\n    # see if there are issues with spaces\r\n    gen = mk_str_gen('([aAbB1357\u023a\u00e9\u0178_@%-]{0,15}[ \\r\\n\\t]{1,2}){1,5}')\r\n    assert_gpu_and_cpu_are_equal_collect(\r\n            lambda spark: unary_op_df(spark, gen, seed=14).select(\r\n                f.initcap(f.col('a'))))\r\n```\r\n\r\nlog:\r\n\r\n```\r\n________________________________________________________________________ test_initcap _________________________________________________________________________\r\n[gw0] linux -- Python 3.8.3 /home/haoyangl/.pyenv/versions/3.8.3/bin/python\r\n\r\n    @incompat\r\n    # @pytest.mark.parametrize('seed', [i for i in range(30)], ids=idfn)\r\n    def test_initcap():\r\n        # Because we don't use the same unicode version we need to limit\r\n        # the charicter set to something more reasonable\r\n        # upper and lower should cover the corner cases, this is mostly to\r\n        # see if there are issues with spaces\r\n        gen = mk_str_gen('([aAbB1357\u023a\u00e9\u0178_@%-]{0,15}[ \\r\\n\\t]{1,2}){1,5}')\r\n>       assert_gpu_and_cpu_are_equal_collect(\r\n                lambda spark: unary_op_df(spark, gen, seed=14).select(\r\n                    f.initcap(f.col('a'))))\r\n\r\n../../src/main/python/string_test.py:661:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../src/main/python/asserts.py:566: in assert_gpu_and_cpu_are_equal_collect\r\n    _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first)\r\n../../src/main/python/asserts.py:497: in _assert_gpu_and_cpu_are_equal\r\n    assert_equal(from_cpu, from_gpu)\r\n../../src/main/python/asserts.py:107: in assert_equal\r\n    _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n../../src/main/python/asserts.py:43: in _assert_equal\r\n    _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n../../src/main/python/asserts.py:36: in _assert_equal\r\n    _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncpu = '\u00df\u00ab\u00be\u00ee\u00ed\\x87\\x04av~', gpu = 'SS\u00ab\u00be\u00ee\u00ed\\x87\\x04av~', float_check = <function get_float_check.<locals>.<lambda> at 0x7f481df77ee0>, path = [80, 'initcap(a)']\r\n\r\n    def _assert_equal(cpu, gpu, float_check, path):\r\n        t = type(cpu)\r\n        if (t is Row):\r\n            assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n            if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n                assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n                for field in cpu.__fields__:\r\n                    _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n            else:\r\n                for index in range(len(cpu)):\r\n                    _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n        elif (t is list):\r\n            assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n            for index in range(len(cpu)):\r\n                _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n        elif (t is tuple):\r\n            assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n            for index in range(len(cpu)):\r\n                _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n        elif (t is pytypes.GeneratorType):\r\n            index = 0\r\n            # generator has no zip :( so we have to do this the hard way\r\n            done = False\r\n            while not done:\r\n                sub_cpu = None\r\n                sub_gpu = None\r\n                try:\r\n                    sub_cpu = next(cpu)\r\n                except StopIteration:\r\n                    done = True\r\n\r\n                try:\r\n                    sub_gpu = next(gpu)\r\n                except StopIteration:\r\n                    done = True\r\n\r\n                if done:\r\n                    assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n                else:\r\n                    _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n\r\n                index = index + 1\r\n        elif (t is dict):\r\n            # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n            # so sort the items to do our best with ignoring the order of dicts\r\n            cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n            gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n            _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n        elif (t is int):\r\n            assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n        elif (t is float):\r\n            if (math.isnan(cpu)):\r\n                assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n            else:\r\n                assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n        elif isinstance(cpu, str):\r\n>           assert cpu == gpu, \"GPU and CPU string values are different at {}\".format(path)\r\nE           AssertionError: GPU and CPU string values are different at [80, 'initcap(a)']\r\n\r\n../../src/main/python/asserts.py:85: AssertionError\r\n-------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------\r\n### CPU RUN ###\r\n### GPU RUN ###\r\n### COLLECT: GPU TOOK 0.5010926723480225 CPU TOOK 3.5713346004486084 ###\r\n--- CPU OUTPUT\r\n+++ GPU OUTPUT\r\n@@ -78,7 +78,7 @@\r\n Row(initcap(a)='@13_-%7b@b%5\u00e9_a\\r Bb-\u00e93b\u00e9\u00e9375a17@\\t B3b_@\u00e9-@@b3b\u00e9\u2c65\u00ff\\r 5773\u00ff\u00e93\u2c65b%5\u2c655%a\\r\\t75\u2c65baa3bb5@\u00e9-\u00e9@ \\r')\r\n Row(initcap(a)='_aaa-_@\u2c655@-5a5\u00ff\\r%\u00e93\u00e91\u2c65_aba77_%a\\t 55@15b7ab%1\u00ffb_3\\r\\r_777%-33-\u00ff\u00e9_7%b\\t A_-5a73\u00ff755a5\u00e9b \\n')\r\n Row(initcap(a)='A3-b\u00ff7\u00e93\u00ffb7a-b\u00ff\\n\\r\u2c65\u00ff-@-\u00e9-77\u2c65\u00ff-@5b\\ra7-ba77%b-\u2c657@51\\n\\r51@a5bab-b3b5_b \u023a@%aa@-ab_a11\u00e91 \\n')\r\n-Row(initcap(a)='\u00df\u00ab\u00be\u00ee\u00ed\\x87\\x04av~')\r\n+Row(initcap(a)='SS\u00ab\u00be\u00ee\u00ed\\x87\\x04av~')\r\n Row(initcap(a)='\u00c9\u00e9%\u00e9aa7-ba%b1\u00e93 \\t553-a1\u2c65_bbbb@1%\\n55b%aba@\u00ff55\u00ff\u2c65\u00ff\u00ff\\n7-3b-3\u00ff\u00e9\u00e9\u2c65@7-_\\r\\nab_-a73b7\u00e91-3\u2c65_\\t ')\r\n Row(initcap(a)='@\u00ff\u2c65\u00e9a_b15_3\u00e9\u2c65__\\r \u00c9a@53a@%1aaa1bb \\r\u2c65baa\u00ff-\u00e9_71b5-_5\\r\\n1@a57bab7b3\u00e9b\u00e93\\n\\n\u00e91%_1\u2c65\u2c655b\u00ff7a%-5\\r\\n')\r\n Row(initcap(a)=None)\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/9247/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}