{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10901",
    "id": 2318159020,
    "node_id": "I_kwDOD7z77c6KLEys",
    "number": 10901,
    "title": "from_json function parses a column containing JSON data using a StructType object based on a provided schema, throws an exception, when the json's structure only partially matches the shema.",
    "user": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "Feng-Jiang28",
            "id": 106386742,
            "node_id": "U_kgDOBldVNg",
            "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Feng-Jiang28",
            "html_url": "https://github.com/Feng-Jiang28",
            "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
            "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
            "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
            "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
            "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
            "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-27T03:39:55Z",
    "updated_at": "2024-05-28T19:42:15Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "`from_json` function parses a column containing JSON data using a StructType object based on a provided schema, throws an exception, when the json's structure only partially matches the shema.\r\n\r\nCPU:\r\n```\r\ncala>     import org.apache.spark.sql.types.{ArrayType, IntegerType, LongType, MapType, StringType, StructType}\r\nscala>     import org.apache.spark.sql.functions.{from_json, to_json}\r\nscala>     import org.apache.spark.sql.{Row}\r\nscala>           val st = new StructType().add(\"c1\", LongType).add(\"c2\", ArrayType(new StructType().add(\"c3\", LongType).add(\"c4\", StringType)))\r\nscala>     val df1 = Seq(\"\"\"{\"c2\": [19], \"c1\": 123456}\"\"\").toDF(\"c0\")\r\nscala>     df1.write.mode(\"OVERWRITE\").parquet(\"TEMP\")                                                           \r\nscala>           val df2 = spark.read.parquet(\"TEMP\")\r\nscala>     df2.select(from_json($\"c0\", st)).show()\r\n+--------------+\r\n| from_json(c0)|\r\n+--------------+\r\n|{123456, null}|\r\n+--------------+\r\n\r\n```\r\nGPU:\r\n```\r\n$SPARK_HOME/bin/spark-shell --master local[*] --jars ${SPARK_RAPIDS_PLUGIN_JAR} --conf spark.plugins=com.nvidia.spark.SQLPlugin --conf spark.rapids.sql.enabled=true --conf spark.rapids.sql.explain=ALL --driver-java-options '-ea -Duser.timezone=UTC ' --conf spark.rapids.sql.expression.JsonTuple=true --conf spark.rapids.sql.expression.GetJsonObject=true --conf spark.rapids.sql.expression.JsonToStructs=true --conf spark.rapids.sql.expression.StructsToJson=true\r\n\r\n```\r\n```\r\nscala>     import org.apache.spark.sql.types.{ArrayType, IntegerType, LongType, MapType, StringType, StructType}\r\nscala>     import org.apache.spark.sql.functions.{from_json, to_json}\r\nscala>     import org.apache.spark.sql.{Row}\r\nscala>           val st = new StructType().add(\"c1\", LongType).add(\"c2\", ArrayType(new StructType().add(\"c3\", LongType).add(\"c4\", StringType)))\r\nscala>     val df1 = Seq(\"\"\"{\"c2\": [19], \"c1\": 123456}\"\"\").toDF(\"c0\")\r\nscala>     df1.write.mode(\"OVERWRITE\").parquet(\"TEMP\")                                                                              \r\nscala>           val df2 = spark.read.parquet(\"TEMP\")\r\nscala>     df2.select(from_json($\"c0\", st)).show()\r\n24/05/27 03:36:48 WARN GpuOverrides: \r\n!Exec <CollectLimitExec> cannot run on GPU because the Exec CollectLimitExec has been disabled, and is disabled by default because Collect Limit replacement can be slower on the GPU, if huge number of rows in a batch it could help by limiting the number of rows transferred from GPU to CPU. Set spark.rapids.sql.exec.CollectLimitExec to true if you wish to enable it\r\n  @Partitioning <SinglePartition$> could run on GPU\r\n  *Exec <ProjectExec> will run on GPU\r\n    *Expression <Alias> cast(from_json(StructField(c1,LongType,true), StructField(c2,ArrayType(StructType(StructField(c3,LongType,true),StructField(c4,StringType,true)),true),true), c0#7, Some(UTC)) as string) AS from_json(c0)#13 will run on GPU\r\n      *Expression <Cast> cast(from_json(StructField(c1,LongType,true), StructField(c2,ArrayType(StructType(StructField(c3,LongType,true),StructField(c4,StringType,true)),true),true), c0#7, Some(UTC)) as string) will run on GPU\r\n        *Expression <JsonToStructs> from_json(StructField(c1,LongType,true), StructField(c2,ArrayType(StructType(StructField(c3,LongType,true),StructField(c4,StringType,true)),true),true), c0#7, Some(UTC)) will run on GPU\r\n    *Exec <FileSourceScanExec> will run on GPU\r\n\r\n24/05/27 03:36:49 ERROR Executor: Exception in task 0.0 in stage 3.0 (TID 3)\r\nai.rapids.cudf.CudfException: CUDF failure at: /home/jenkins/agent/workspace/jenkins-spark-rapids-jni_nightly-pre_release-295-cuda11/target/libcudf-install/include/cudf/column/column_factories.hpp:343: Invalid, non-fixed-width type.\r\n\tat ai.rapids.cudf.Table.readJSONFromDataSource(Native Method)\r\n\tat ai.rapids.cudf.Table.readJSON(Table.java:1441)\r\n\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10901/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}