{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/7583",
    "id": 1557262978,
    "node_id": "I_kwDOD7z77c5c0fKC",
    "number": 7583,
    "title": "[BUG] GpuGenerateExec is executing child columns too early",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2094500742,
            "node_id": "MDU6TGFiZWwyMDk0NTAwNzQy",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/performance",
            "name": "performance",
            "color": "d845b1",
            "default": false,
            "description": "A performance related task/issue"
        },
        {
            "id": 2586576266,
            "node_id": "MDU6TGFiZWwyNTg2NTc2MjY2",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/task",
            "name": "task",
            "color": "65abf7",
            "default": false,
            "description": "Work required that improves the product but is not user facing"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-01-25T20:57:33Z",
    "updated_at": "2023-01-31T21:13:06Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nGpuGenerateExec takes a single GpuGenerator as input along with a list of attributes that should be passed through. These attributes are not unchanged as they pass through. The rows in them could be duplicated as a part of doing the generate (like with an explode).  The problem is that GpuGenerateExec assumes that all of the children in GpuGenerator should be materialized into columns. Also the columns passed into the generate method of GpuGenerator assumes a very specific order that is known ahead of time.\r\n\r\nThis is not true at all for json_tuple and is not true generally. Because of this we end up materializing a column of strings for each column we want to pull out from the json string.  For example `SELECT ONE, TWO, THREE, json_tuple(jsonData, \"a\", \"b\", \"c\") FROM TABLE` would result in a GpuGenerateExec that has a generator as the GpuJsonTuple and a requiredChildOutput of ONE, TWO, THREE. The GpuGenerateExec will then pull out the children from GpuJsonTuple and bind them for us against the input to the GpuGenerateExec. It will also do this for `requiredChildOutput`. Then it will run all of these expressions an create a ColumnarBatch that is passed to the generator.generate to produce the final output.\r\n\r\nThis means that the batch passed into GpuJsonTuple.generate will have \"ONE\", \"TWO', \"THREE\", \"JsonData\", \"a\", \"b\", \"c\" in it. \"a\", \"b\", and \"c\" are completely useless because they are literal values and we are just wasting memory storing them as a column.\r\n\r\nI personally thing that GpuGenerateExec should pass bind the GpuGenerator and requiredChildOutput to child.output (similar to what we do today, but different in that the GpuGenerator's children are now replaced with bound references as needed. Then the generate method is changed to take the bound `requiredChildOutput` instead of `generatorOffset`. Then each Generator would be responsible for running the bound expressions to produce what it needs/wants and returning the data appropriately.\r\n\r\nThe big issue is with splitting the data.  generate right now takes a ColumnarBatch as input and produces a single ColumnarBatch. It also has an `inputSplitIndices` method to look at the input batch and decide where to split it so we don't go over any limits.  There is also a \"fixedLenLazy*` which is an optimization around doing an explode with a scalar array/map.\r\n\r\nIf we make the above changes to generate along with having it return an Iterator[ColumnarBatch] instead of just a single ColumnarBatch, I think we can make most of that complexity disappear. The big issue is that if we want to split things into an iterator that is now pushed into the GpuGenerator instead of being in GpuGenerateExec, but I think we can have enough helper methods that this is not going to be a big deal.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/7583/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}