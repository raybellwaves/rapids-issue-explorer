{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10233",
    "id": 2092806456,
    "node_id": "I_kwDOD7z77c58vbE4",
    "number": 10233,
    "title": "[BUG] hash_aggregate_test.py::test_exact_percentile_reduction failed with DATAGEN_SEED=1705866905",
    "user": {
        "login": "sameerz",
        "id": 7036315,
        "node_id": "MDQ6VXNlcjcwMzYzMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7036315?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sameerz",
        "html_url": "https://github.com/sameerz",
        "followers_url": "https://api.github.com/users/sameerz/followers",
        "following_url": "https://api.github.com/users/sameerz/following{/other_user}",
        "gists_url": "https://api.github.com/users/sameerz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sameerz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sameerz/subscriptions",
        "organizations_url": "https://api.github.com/users/sameerz/orgs",
        "repos_url": "https://api.github.com/users/sameerz/repos",
        "events_url": "https://api.github.com/users/sameerz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sameerz/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-01-21T22:14:46Z",
    "updated_at": "2024-04-24T17:09:30Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n\r\n[2024-01-21T17:44:19.558Z] FAILED ../../src/main/python/hash_aggregate_test.py::test_exact_percentile_reduction[[('val', RepeatSeq(Double)), ('freq', Long(not_null))]][DATAGEN_SEED=1705857175][0m - AssertionError: GPU and CPU float values are different [0, 'percentile(val,...\r\n\r\nSummary: \r\n\r\n```\r\n09:44:19  --- CPU OUTPUT\r\n09:44:19  +++ GPU OUTPUT\r\n09:44:19  @@ -1 +1 @@\r\n09:44:19  -Row(percentile(val, CAST(0.1 AS DOUBLE), 1)=-3.0600528894266366e+181, percentile(val, CAST(0 AS DOUBLE), 1)=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), 1)=nan, percentile(val, array(0.1), 1)=[-3.0600528894266366e+181], percentile(val, array(), 1)=None, percentile(val, array(0.1, 0.5, 0.9), 1)=[-3.0600528894266366e+181, -4.9069119243789216e-275, 1.7532295949136916e+204], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), 1)=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.9069119243789216e-275, nan, nan], percentile(val, CAST(0.1 AS DOUBLE), abs(freq))=-1.3398677426484608e+183, percentile(val, CAST(0 AS DOUBLE), abs(freq))=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), abs(freq))=nan, percentile(val, array(0.1), abs(freq))=[-1.3398677426484608e+183], percentile(val, array(), abs(freq))=None, percentile(val, array(0.1, 0.5, 0.9), abs(freq))=[-1.3398677426484608e+183, -4.302064318624199e-276, 5.054511151289938e+220], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), abs(freq))=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan])\r\n09:44:19  +Row(percentile(val, CAST(0.1 AS DOUBLE), 1)=-3.0600528894266366e+181, percentile(val, CAST(0 AS DOUBLE), 1)=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), 1)=nan, percentile(val, array(0.1), 1)=[-3.0600528894266366e+181], percentile(val, array(), 1)=None, percentile(val, array(0.1, 0.5, 0.9), 1)=[-3.0600528894266366e+181, -4.302064318624199e-276, 1.7532295949136916e+204], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), 1)=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan], percentile(val, CAST(0.1 AS DOUBLE), abs(freq))=-1.3398677426484608e+183, percentile(val, CAST(0 AS DOUBLE), abs(freq))=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), abs(freq))=nan, percentile(val, array(0.1), abs(freq))=[-1.3398677426484608e+183], percentile(val, array(), abs(freq))=None, percentile(val, array(0.1, 0.5, 0.9), abs(freq))=[-1.3398677426484608e+183, -4.302064318624199e-276, 5.054511151289938e+220], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), abs(freq))=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan])\r\n```\r\n\r\n<details>\r\n<summary>Detailed output</summary>\r\n<pre>\r\n _ test_exact_percentile_reduction[[('val', RepeatSeq(Double)), ('freq', Long(not_null))]] _\r\n09:44:19  \r\n09:44:19  data_gen = [('val', RepeatSeq(Double)), ('freq', Long(not_null))]\r\n09:44:19  \r\n09:44:19      @pytest.mark.parametrize('data_gen', exact_percentile_reduction_data_gen, ids=idfn)\r\n09:44:19      def test_exact_percentile_reduction(data_gen):\r\n09:44:19  >       assert_gpu_and_cpu_are_equal_collect(\r\n09:44:19              lambda spark: exact_percentile_reduction(gen_df(spark, data_gen))\r\n09:44:19          )\r\n09:44:19  \r\n09:44:19  ../../src/main/python/hash_aggregate_test.py:922: \r\n09:44:19  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n09:44:19  ../../src/main/python/asserts.py:595: in assert_gpu_and_cpu_are_equal_collect\r\n09:44:19      _assert_gpu_and_cpu_are_equal(func, 'COLLECT', conf=conf, is_cpu_first=is_cpu_first, result_canonicalize_func_before_compare=result_canonicalize_func_before_compare)\r\n09:44:19  ../../src/main/python/asserts.py:517: in _assert_gpu_and_cpu_are_equal\r\n09:44:19      assert_equal(from_cpu, from_gpu)\r\n09:44:19  ../../src/main/python/asserts.py:107: in assert_equal\r\n09:44:19      _assert_equal(cpu, gpu, float_check=get_float_check(), path=[])\r\n09:44:19  ../../src/main/python/asserts.py:43: in _assert_equal\r\n09:44:19      _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n09:44:19  ../../src/main/python/asserts.py:36: in _assert_equal\r\n09:44:19      _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n09:44:19  ../../src/main/python/asserts.py:43: in _assert_equal\r\n09:44:19      _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n09:44:19  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n09:44:19  \r\n09:44:19  cpu = -4.9069119243789216e-275, gpu = -4.302064318624199e-276\r\n09:44:19  float_check = <function get_float_check.<locals>.<lambda> at 0x7f1a9a9a4b80>\r\n09:44:19  path = [0, 'percentile(val, array(0.1, 0.5, 0.9), 1)', 1]\r\n09:44:19  \r\n09:44:19      def _assert_equal(cpu, gpu, float_check, path):\r\n09:44:19          t = type(cpu)\r\n09:44:19          if (t is Row):\r\n09:44:19              assert len(cpu) == len(gpu), \"CPU and GPU row have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n09:44:19              if hasattr(cpu, \"__fields__\") and hasattr(gpu, \"__fields__\"):\r\n09:44:19                  assert cpu.__fields__ == gpu.__fields__, \"CPU and GPU row have different fields at {} CPU: {} GPU: {}\".format(path, cpu.__fields__, gpu.__fields__)\r\n09:44:19                  for field in cpu.__fields__:\r\n09:44:19                      _assert_equal(cpu[field], gpu[field], float_check, path + [field])\r\n09:44:19              else:\r\n09:44:19                  for index in range(len(cpu)):\r\n09:44:19                      _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n09:44:19          elif (t is list):\r\n09:44:19              assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n09:44:19              for index in range(len(cpu)):\r\n09:44:19                  _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n09:44:19          elif (t is tuple):\r\n09:44:19              assert len(cpu) == len(gpu), \"CPU and GPU list have different lengths at {} CPU: {} GPU: {}\".format(path, len(cpu), len(gpu))\r\n09:44:19              for index in range(len(cpu)):\r\n09:44:19                  _assert_equal(cpu[index], gpu[index], float_check, path + [index])\r\n09:44:19          elif (t is pytypes.GeneratorType):\r\n09:44:19              index = 0\r\n09:44:19              # generator has no zip :( so we have to do this the hard way\r\n09:44:19              done = False\r\n09:44:19              while not done:\r\n09:44:19                  sub_cpu = None\r\n09:44:19                  sub_gpu = None\r\n09:44:19                  try:\r\n09:44:19                      sub_cpu = next(cpu)\r\n09:44:19                  except StopIteration:\r\n09:44:19                      done = True\r\n09:44:19      \r\n09:44:19                  try:\r\n09:44:19                      sub_gpu = next(gpu)\r\n09:44:19                  except StopIteration:\r\n09:44:19                      done = True\r\n09:44:19      \r\n09:44:19                  if done:\r\n09:44:19                      assert sub_cpu == sub_gpu and sub_cpu == None, \"CPU and GPU generators have different lengths at {}\".format(path)\r\n09:44:19                  else:\r\n09:44:19                      _assert_equal(sub_cpu, sub_gpu, float_check, path + [index])\r\n09:44:19      \r\n09:44:19                  index = index + 1\r\n09:44:19          elif (t is dict):\r\n09:44:19              # The order of key/values is not guaranteed in python dicts, nor are they guaranteed by Spark\r\n09:44:19              # so sort the items to do our best with ignoring the order of dicts\r\n09:44:19              cpu_items = list(cpu.items()).sort(key=_RowCmp)\r\n09:44:19              gpu_items = list(gpu.items()).sort(key=_RowCmp)\r\n09:44:19              _assert_equal(cpu_items, gpu_items, float_check, path + [\"map\"])\r\n09:44:19          elif (t is int):\r\n09:44:19              assert cpu == gpu, \"GPU and CPU int values are different at {}\".format(path)\r\n09:44:19          elif (t is float):\r\n09:44:19              if (math.isnan(cpu)):\r\n09:44:19                  assert math.isnan(gpu), \"GPU and CPU float values are different at {}\".format(path)\r\n09:44:19              else:\r\n09:44:19  >               assert float_check(cpu, gpu), \"GPU and CPU float values are different {}\".format(path)\r\n09:44:19  E               AssertionError: GPU and CPU float values are different [0, 'percentile(val, array(0.1, 0.5, 0.9), 1)', 1]\r\n09:44:19  \r\n09:44:19  ../../src/main/python/asserts.py:83: AssertionError\r\n09:44:19  ----------------------------- Captured stdout call -----------------------------\r\n09:44:19  ### CPU RUN ###\r\n09:44:19  ### GPU RUN ###\r\n09:44:19  ### COLLECT: GPU TOOK 0.26613664627075195 CPU TOOK 0.17803049087524414 ###\r\n09:44:19  --- CPU OUTPUT\r\n09:44:19  +++ GPU OUTPUT\r\n09:44:19  @@ -1 +1 @@\r\n09:44:19  -Row(percentile(val, CAST(0.1 AS DOUBLE), 1)=-3.0600528894266366e+181, percentile(val, CAST(0 AS DOUBLE), 1)=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), 1)=nan, percentile(val, array(0.1), 1)=[-3.0600528894266366e+181], percentile(val, array(), 1)=None, percentile(val, array(0.1, 0.5, 0.9), 1)=[-3.0600528894266366e+181, -4.9069119243789216e-275, 1.7532295949136916e+204], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), 1)=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.9069119243789216e-275, nan, nan], percentile(val, CAST(0.1 AS DOUBLE), abs(freq))=-1.3398677426484608e+183, percentile(val, CAST(0 AS DOUBLE), abs(freq))=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), abs(freq))=nan, percentile(val, array(0.1), abs(freq))=[-1.3398677426484608e+183], percentile(val, array(), abs(freq))=None, percentile(val, array(0.1, 0.5, 0.9), abs(freq))=[-1.3398677426484608e+183, -4.302064318624199e-276, 5.054511151289938e+220], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), abs(freq))=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan])\r\n09:44:19  +Row(percentile(val, CAST(0.1 AS DOUBLE), 1)=-3.0600528894266366e+181, percentile(val, CAST(0 AS DOUBLE), 1)=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), 1)=nan, percentile(val, array(0.1), 1)=[-3.0600528894266366e+181], percentile(val, array(), 1)=None, percentile(val, array(0.1, 0.5, 0.9), 1)=[-3.0600528894266366e+181, -4.302064318624199e-276, 1.7532295949136916e+204], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), 1)=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan], percentile(val, CAST(0.1 AS DOUBLE), abs(freq))=-1.3398677426484608e+183, percentile(val, CAST(0 AS DOUBLE), abs(freq))=-2.4711378026196358e+293, percentile(val, CAST(1 AS DOUBLE), abs(freq))=nan, percentile(val, array(0.1), abs(freq))=[-1.3398677426484608e+183], percentile(val, array(), abs(freq))=None, percentile(val, array(0.1, 0.5, 0.9), abs(freq))=[-1.3398677426484608e+183, -4.302064318624199e-276, 5.054511151289938e+220], percentile(val, array(CAST(0 AS DECIMAL(14,4)), CAST(0.0001 AS DECIMAL(14,4)), CAST(0.5 AS DECIMAL(14,4)), CAST(0.9999 AS DECIMAL(14,4)), CAST(1 AS DECIMAL(14,4))), abs(freq))=[-2.4711378026196358e+293, -2.4711378026196358e+293, -4.302064318624199e-276, nan, nan])\r\n</pre>\r\n</details>\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n**Expected behavior**\r\n\r\n**Environment details (please complete the following information)**\r\n - Environment location: Dataproc 2.0 Ubuntu 18.04\r\n\r\n**Additional context**\r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10233/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}