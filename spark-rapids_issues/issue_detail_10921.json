{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10921",
    "id": 2320279959,
    "node_id": "I_kwDOD7z77c6KTKmX",
    "number": 10921,
    "title": "to_json - array with single map",
    "user": {
        "login": "Feng-Jiang28",
        "id": 106386742,
        "node_id": "U_kgDOBldVNg",
        "avatar_url": "https://avatars.githubusercontent.com/u/106386742?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Feng-Jiang28",
        "html_url": "https://github.com/Feng-Jiang28",
        "followers_url": "https://api.github.com/users/Feng-Jiang28/followers",
        "following_url": "https://api.github.com/users/Feng-Jiang28/following{/other_user}",
        "gists_url": "https://api.github.com/users/Feng-Jiang28/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Feng-Jiang28/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Feng-Jiang28/subscriptions",
        "organizations_url": "https://api.github.com/users/Feng-Jiang28/orgs",
        "repos_url": "https://api.github.com/users/Feng-Jiang28/repos",
        "events_url": "https://api.github.com/users/Feng-Jiang28/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Feng-Jiang28/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735874,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODc0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-28T06:57:06Z",
    "updated_at": "2024-05-28T19:43:01Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "The same issue in: when there is only a single map in the array, rapids throws an exception:\r\n#10920 \r\nCPU:\r\n```\r\nscala> import org.apache.spark.sql.{SparkSession, Row}\r\nimport org.apache.spark.sql.{SparkSession, Row}\r\n\r\nscala> import org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.functions._\r\n\r\nscala> import org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.types._\r\n\r\nscala> import org.apache.spark.sql.catalyst.util.ArrayBasedMapData\r\nimport org.apache.spark.sql.catalyst.util.ArrayBasedMapData\r\n\r\nscala> import org.apache.spark.unsafe.types.UTF8String\r\nimport org.apache.spark.unsafe.types.UTF8String\r\n\r\nscala> \r\n\r\nscala> val spark = SparkSession.builder.appName(\"Test\").getOrCreate()\r\n24/05/28 14:56:32 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\r\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@286ced2a\r\n\r\nscala> import spark.implicits._\r\nimport spark.implicits._\r\n\r\nscala> val mapType = MapType(StringType, IntegerType)\r\nmapType: org.apache.spark.sql.types.MapType = MapType(StringType,IntegerType,true)\r\n\r\nscala> val inputSchema = ArrayType(mapType)\r\ninputSchema: org.apache.spark.sql.types.ArrayType = ArrayType(MapType(StringType,IntegerType,true),true)\r\n\r\nscala> val data = Seq(\r\n     |   Row(Seq(Map(\"a\" -> 1)))\r\n     | )\r\ndata: Seq[org.apache.spark.sql.Row] = List([List(Map(a -> 1))])\r\n\r\nscala> val df = spark.createDataFrame(\r\n     |   spark.sparkContext.parallelize(data),\r\n     |   StructType(Seq(StructField(\"value\", inputSchema)))\r\n     | )\r\ndf: org.apache.spark.sql.DataFrame = [value: array<map<string,int>>]\r\n\r\nscala> val jsonDF = df.select(to_json(col(\"value\")).alias(\"json_string\"))\r\njsonDF: org.apache.spark.sql.DataFrame = [json_string: string]\r\n\r\nscala> jsonDF.show(false)\r\n+-----------+\r\n|json_string|\r\n+-----------+\r\n|[{\"a\":1}]  |\r\n+-----------+\r\n\r\n```\r\nGPU:\r\n```\r\n$ $SPARK_HOME/bin/spark-shell --master local[*] --jars ${SPARK_RAPIDS_PLUGIN_JAR} \r\n--conf spark.plugins=com.nvidia.spark.SQLPlugin \r\n--conf spark.rapids.sql.enabled=true \r\n--conf spark.rapids.sql.explain=ALL --driver-java-options '-ea -Duser.timezone=UTC ' \r\n--conf spark.rapids.sql.expression.JsonTuple=true \r\n--conf spark.rapids.sql.expression.GetJsonObject=true \r\n--conf spark.rapids.sql.expression.JsonToStructs=true \r\n--conf spark.rapids.sql.expression.StructsToJson=true\r\n```\r\n```\r\nscala> import org.apache.spark.sql.{SparkSession, Row}\r\nimport org.apache.spark.sql.{SparkSession, Row}\r\n\r\nscala> import org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.functions._\r\n\r\nscala> import org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.types._\r\n\r\nscala> import org.apache.spark.sql.catalyst.util.ArrayBasedMapData\r\nimport org.apache.spark.sql.catalyst.util.ArrayBasedMapData\r\n\r\nscala> import org.apache.spark.unsafe.types.UTF8String\r\nimport org.apache.spark.unsafe.types.UTF8String\r\n\r\nscala> \r\n\r\nscala> val spark = SparkSession.builder.appName(\"Test\").getOrCreate()\r\n24/05/28 06:59:25 WARN SparkSession: Using an existing Spark session; only runtime SQL configurations will take effect.\r\nspark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@4effe36a\r\n\r\nscala> import spark.implicits._\r\nimport spark.implicits._\r\n\r\nscala> val mapType = MapType(StringType, IntegerType)\r\nmapType: org.apache.spark.sql.types.MapType = MapType(StringType,IntegerType,true)\r\n\r\nscala> val inputSchema = ArrayType(mapType)\r\ninputSchema: org.apache.spark.sql.types.ArrayType = ArrayType(MapType(StringType,IntegerType,true),true)\r\n\r\nscala> val data = Seq(\r\n     |   Row(Seq(Map(\"a\" -> 1)))\r\n     | )\r\ndata: Seq[org.apache.spark.sql.Row] = List([List(Map(a -> 1))])\r\n\r\nscala> val df = spark.createDataFrame(\r\n     |   spark.sparkContext.parallelize(data),\r\n     |   StructType(Seq(StructField(\"value\", inputSchema)))\r\n     | )\r\ndf: org.apache.spark.sql.DataFrame = [value: array<map<string,int>>]\r\n\r\nscala> val jsonDF = df.select(to_json(col(\"value\")).alias(\"json_string\"))\r\njsonDF: org.apache.spark.sql.DataFrame = [json_string: string]\r\n\r\nscala> jsonDF.show(false)\r\n24/05/28 06:59:28 WARN GpuOverrides: \r\n!Exec <CollectLimitExec> cannot run on GPU because the Exec CollectLimitExec has been disabled, and is disabled by default because Collect Limit replacement can be slower on the GPU, if huge number of rows in a batch it could help by limiting the number of rows transferred from GPU to CPU. Set spark.rapids.sql.exec.CollectLimitExec to true if you wish to enable it\r\n  @Partitioning <SinglePartition$> could run on GPU\r\n  *Exec <ProjectExec> will run on GPU\r\n    *Expression <Alias> to_json(value#1, Some(UTC)) AS json_string#6 will run on GPU\r\n      *Expression <StructsToJson> to_json(value#1, Some(UTC)) will run on GPU\r\n    ! <RDDScanExec> cannot run on GPU because GPU does not currently support the operator class org.apache.spark.sql.execution.RDDScanExec\r\n      @Expression <AttributeReference> value#1 could run on GPU\r\n\r\n24/05/28 06:59:29 ERROR Executor: Exception in task 6.0 in stage 2.0 (TID 11)\r\njava.lang.ClassCastException: org.apache.spark.sql.types.ArrayType cannot be cast to org.apache.spark.sql.types.StructType\r\n\tat org.apache.spark.sql.rapids.GpuStructsToJson.doColumnar(GpuStructsToJson.scala:86)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.doItColumnar(GpuExpressions.scala:250)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.$anonfun$columnarEval$1(GpuExpressions.scala:261)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuUnaryExpression.columnarEval(GpuExpressions.scala:260)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuAlias.columnarEval(namedExpressions.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$ReallyAGpuExpression.columnarEval(implicits.scala:35)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.$anonfun$project$1(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1(implicits.scala:221)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.$anonfun$safeMap$1$adapted(implicits.scala:218)\r\n\tat scala.collection.immutable.List.foreach(List.scala:431)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$MapsSafely.safeMap(implicits.scala:218)\r\n\tat com.nvidia.spark.rapids.RapidsPluginImplicits$AutoCloseableProducingSeq.safeMap(implicits.scala:253)\r\n\tat com.nvidia.spark.rapids.GpuProjectExec$.project(basicPhysicalOperators.scala:110)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$project$2(basicPhysicalOperators.scala:619)\r\n\tat com.nvidia.spark.rapids.Arm$.withResource(Arm.scala:30)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.recurse$2(basicPhysicalOperators.scala:618)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.project(basicPhysicalOperators.scala:631)\r\n\tat com.nvidia.spark.rapids.GpuTieredProject.$anonfun$projectWithRetrySingleBatchInternal$5(basicPhysicalOperators.scala:567)\r\n\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10921/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}