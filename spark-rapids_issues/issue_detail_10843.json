{
    "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843",
    "repository_url": "https://api.github.com/repos/NVIDIA/spark-rapids",
    "labels_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843/labels{/name}",
    "comments_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843/comments",
    "events_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843/events",
    "html_url": "https://github.com/NVIDIA/spark-rapids/issues/10843",
    "id": 2305576485,
    "node_id": "I_kwDOD7z77c6JbE4l",
    "number": 10843,
    "title": "[FEA] LoRe framework - Support operator specific dump tool for performance issue local reproduce",
    "user": {
        "login": "winningsix",
        "id": 2278268,
        "node_id": "MDQ6VXNlcjIyNzgyNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2278268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/winningsix",
        "html_url": "https://github.com/winningsix",
        "followers_url": "https://api.github.com/users/winningsix/followers",
        "following_url": "https://api.github.com/users/winningsix/following{/other_user}",
        "gists_url": "https://api.github.com/users/winningsix/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/winningsix/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/winningsix/subscriptions",
        "organizations_url": "https://api.github.com/users/winningsix/orgs",
        "repos_url": "https://api.github.com/users/winningsix/repos",
        "events_url": "https://api.github.com/users/winningsix/events{/privacy}",
        "received_events_url": "https://api.github.com/users/winningsix/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2061735884,
            "node_id": "MDU6TGFiZWwyMDYxNzM1ODg0",
            "url": "https://api.github.com/repos/NVIDIA/spark-rapids/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "res-life",
        "id": 8166419,
        "node_id": "MDQ6VXNlcjgxNjY0MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8166419?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/res-life",
        "html_url": "https://github.com/res-life",
        "followers_url": "https://api.github.com/users/res-life/followers",
        "following_url": "https://api.github.com/users/res-life/following{/other_user}",
        "gists_url": "https://api.github.com/users/res-life/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/res-life/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/res-life/subscriptions",
        "organizations_url": "https://api.github.com/users/res-life/orgs",
        "repos_url": "https://api.github.com/users/res-life/repos",
        "events_url": "https://api.github.com/users/res-life/events{/privacy}",
        "received_events_url": "https://api.github.com/users/res-life/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "res-life",
            "id": 8166419,
            "node_id": "MDQ6VXNlcjgxNjY0MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8166419?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/res-life",
            "html_url": "https://github.com/res-life",
            "followers_url": "https://api.github.com/users/res-life/followers",
            "following_url": "https://api.github.com/users/res-life/following{/other_user}",
            "gists_url": "https://api.github.com/users/res-life/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/res-life/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/res-life/subscriptions",
            "organizations_url": "https://api.github.com/users/res-life/orgs",
            "repos_url": "https://api.github.com/users/res-life/repos",
            "events_url": "https://api.github.com/users/res-life/events{/privacy}",
            "received_events_url": "https://api.github.com/users/res-life/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-20T09:43:03Z",
    "updated_at": "2024-05-29T07:34:31Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThere exist some challenges in reproduce some performance issues locally with a simple approach. As a developer/user, it would be great to have a tool:\r\n\r\n-  \u201cAt will\u201d to dump data at operator granularity. Either performance issue or compatibility issue (a.k.a. Semantic consistency), the problematic operator may come in relatively late stage. The prior filter may have quite some different behavior in selectivity or a join with multiple tables where the join key is not easy to reproduce. Thus, it is really hard to make a local reproduce of the original issue. \u201cAt will\u201d means we want to reproduce the issues at a specific operator without rerun the entire plan fragment or SQL.\r\n\r\n- \u201cReplay\u201d the execution locally with a single Spark application. A \u201creplay\u201d means the exact operator with the dump data can run directly from developer side.\r\n\r\n- Being able to do data desensitization for the dump data if needed. Two running modes are provided: masked mode VS. plain mode. For plain mode, data is not masked and used to generate needed NCU/Nsys directly for that data. For masked mode, data is translated into masked data in an irreversible way.\r\n\r\n- Being able to reproduce both diff and performance issues.\r\n\r\n- Provide a reasonable way to dump the data in a controllable way. For diff issues, it should allow the dump a dedicated number of rows. For performance issues, it allows dumping the execution batch which lasts longer than a preconfigured threshold. Additionally, it should provide a task limit avoiding dumping too much data.\r\n\r\n- Async dump mode for a problematic operator. Don't wait for job's complete to trigger the file/class dump.\r\n\r\n**Describe the solution you'd like**\r\nThe  workflow of **LO**cal **RE**play (Lore) framework usage in performance issue replay is as follows:\r\n- `Dump`: Developer decides which operator to dump and decide the threshold of operator time we should take care of. Using the following capture as example, if we set the dump filter with a threshold of 2 second, then it will dump related columnar batch as well as a serialized GpuProject class into binary files. With a configuration of task limit, it could specific how many data file dumps for each single file.\r\n\r\n- `Replay`: Restoring from the dumped files, the problematic operator together with some specific columnar batch will run locally easily.\r\n\r\nThis comprises of several sub-tasks:\r\n- ProjectExec support: https://github.com/NVIDIA/spark-rapids/issues/10862\r\n- HashAggExec support: https://github.com/NVIDIA/spark-rapids/issues/10942",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/NVIDIA/spark-rapids/issues/10843/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}