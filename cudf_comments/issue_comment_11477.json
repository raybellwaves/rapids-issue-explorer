[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1236229511",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1236229511",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1236229511,
        "node_id": "IC_kwDOBWUGps5Jr12H",
        "user": {
            "login": "github-actions[bot]",
            "id": 41898282,
            "node_id": "MDM6Qm90NDE4OTgyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/github-actions%5Bbot%5D",
            "html_url": "https://github.com/apps/github-actions",
            "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2022-09-04T01:34:46Z",
        "updated_at": "2022-09-04T01:34:46Z",
        "author_association": "NONE",
        "body": "This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1236229511/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1330808713",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1330808713",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1330808713,
        "node_id": "IC_kwDOBWUGps5PUoeJ",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-29T15:16:02Z",
        "updated_at": "2022-11-29T15:16:02Z",
        "author_association": "CONTRIBUTOR",
        "body": "This is not possible because `Series` objects contain data of a single homogenous dtype. In this case (mixed string and numeric columns), the series that we want to get would contain heterogeneous dtypes, which is not supported. Pandas can happily store `object` arrays that really support heterogeneous dtypes so it is not a problem there.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1330808713/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1333979799",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1333979799",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1333979799,
        "node_id": "IC_kwDOBWUGps5PguqX",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-01T15:53:58Z",
        "updated_at": "2022-12-01T15:53:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "Should we {raise, warn, something_else}?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1333979799/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335139741",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335139741",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1335139741,
        "node_id": "IC_kwDOBWUGps5PlJ2d",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T12:03:37Z",
        "updated_at": "2022-12-02T12:03:37Z",
        "author_association": "CONTRIBUTOR",
        "body": "I think we should never try and convert to a `Series`. That makes `.i?loc`-based indexing have consistent semantics in all cases, and try and convince pandas that that should also be the behaviour there. The isomorphism between a 1xN dataframe and length-N series in pandas is not really that strong anyway which is probably a cause of a bunch of special-casing.\r\n\r\ne.g.\r\n```python\r\nimport pandas as pd\r\ndf = pd.DataFrame({\"a\": [1, 2, 3, 4],\r\n                   \"b\": [1, 2, 1, 2],\r\n                   \"c\": [1, 1, 2, 2],\r\n                   \"d\": [1, 2, 3, 4]}, index=[\"e\", \"f\", \"g\", \"h\"])\r\n\r\nprint(df.loc[\"e\"][\"a\"] * df)    # single number is broadcast\r\n#    a  b  c  d\r\n# e  1  1  1  1\r\n# f  2  2  1  2\r\n# g  3  1  2  3\r\n# h  4  2  2  4\r\nprint(df.loc[[\"e\"]][\"a\"] * df)  # (1,) series is not aligned\r\n#     a   b   c   d   e\r\n# e NaN NaN NaN NaN NaN\r\n# f NaN NaN NaN NaN NaN\r\n# g NaN NaN NaN NaN NaN\r\n# h NaN NaN NaN NaN NaN\r\n\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335139741/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335302760",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335302760",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1335302760,
        "node_id": "IC_kwDOBWUGps5Plxpo",
        "user": {
            "login": "brandon-b-miller",
            "id": 53796099,
            "node_id": "MDQ6VXNlcjUzNzk2MDk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/53796099?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandon-b-miller",
            "html_url": "https://github.com/brandon-b-miller",
            "followers_url": "https://api.github.com/users/brandon-b-miller/followers",
            "following_url": "https://api.github.com/users/brandon-b-miller/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandon-b-miller/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandon-b-miller/subscriptions",
            "organizations_url": "https://api.github.com/users/brandon-b-miller/orgs",
            "repos_url": "https://api.github.com/users/brandon-b-miller/repos",
            "events_url": "https://api.github.com/users/brandon-b-miller/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandon-b-miller/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T14:20:19Z",
        "updated_at": "2022-12-02T14:20:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "I'd agree with @wence- here over the long term and would rather see pandas always return a dataframe. As for what to do in the short term, there was a little discussion around raising in https://github.com/rapidsai/cudf/pull/11501 that I liked. For me, both the casting and the returning of inconsistent object types (that might fail downstream handling) are approximately equally bad problems.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335302760/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335749550",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335749550",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1335749550,
        "node_id": "IC_kwDOBWUGps5Pneuu",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T19:46:59Z",
        "updated_at": "2022-12-02T19:46:59Z",
        "author_association": "CONTRIBUTOR",
        "body": "I concur with everything @wence- says. It's not just a question of the special-casing of the code, but also the fact that the relationship between a single-row DataFrame and a Series is pretty weak (much weaker than between a row vector and a column vector I would argue given the metadata associated with the tabular structure). I don't think it makes much of an improvement to the API, and it's certainly inconsistent with databases like SQL that have no concept of a Series and will just produce a table with a single row for such operations. It's also important to realize that indexing methods are just one of multiple cases where pandas DataFrame operations will return a Series if the operations reduces to a single row. Reductions are one other example, e.g. `df.mean`. We should try to get this changed by pandas, and not just in this particular case.\r\n\r\nFrom cudf's perspective I would also point out that the current behavior causes additional headaches due to the different memory layouts of DataFrame and Series, some of which can also lead to serious performance issues. One important case is when users want to do anything where the newly generated Series interacts with the original DataFrame. Consider something like `df[df == df.max()]`. This code is hiding an unexpected performance bottleneck. `max` will generate a Series where the index corresponds to the original column names. Since libcudf doesn't offer a way to create a scalar view into each element, the equality operator ends up requiring the creation of a new DeviceScalar (and therefore a new allocation + D2H2D transfer) for each element. \r\n\r\nCC @mroeschke ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335749550/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335873349",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335873349",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1335873349,
        "node_id": "IC_kwDOBWUGps5Pn89F",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-02T21:45:42Z",
        "updated_at": "2022-12-02T21:45:42Z",
        "author_association": "CONTRIBUTOR",
        "body": "pandas row indexing with a single element vs single element in a list (`.iloc[pos]` vs `.iloc[[pos]]`) was odd to me too when first encountering it, but I think overtime pandas has been trying to return a consistent object with respect to indexer type. Specifically centralizing around, \"a single list-like indexer should always return a DataFrame\"\r\n\r\n```\r\nIn [7]: import pandas as pd\r\n   ...: df = pd.DataFrame({\"a\": [1, 2, 3, 4],\r\n   ...:                    \"b\": [1, 2, 1, 2],\r\n   ...:                    \"c\": [1, 1, 2, 2],\r\n   ...:                    \"d\": [1, 2, 3, 4]}, index=[\"e\", \"f\", \"g\", \"h\"])\r\n\r\nIn [8]: df.loc[[\"e\"]]\r\nOut[8]:\r\n   a  b  c  d\r\ne  1  1  1  1\r\n\r\nIn [9]: df.loc[[]]\r\nOut[9]:\r\nEmpty DataFrame\r\nColumns: [a, b, c, d]\r\nIndex: []\r\n\r\nIn [10]: df.iloc[[0]]\r\nOut[10]:\r\n   a  b  c  d\r\ne  1  1  1  1\r\n\r\nIn [11]: df.iloc[[]]\r\nOut[11]:\r\nEmpty DataFrame\r\nColumns: [a, b, c, d]\r\nIndex: []\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1335873349/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1469758972",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1469758972",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1469758972,
        "node_id": "IC_kwDOBWUGps5Xmr38",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-15T10:36:55Z",
        "updated_at": "2023-03-15T10:36:55Z",
        "author_association": "CONTRIBUTOR",
        "body": "> pandas row indexing with a single element vs single element in a list (`.iloc[pos]` vs `.iloc[[pos]]`) was odd to me too when first encountering it, but I think overtime pandas has been trying to return a consistent object with respect to indexer type. Specifically centralizing around, \"a single list-like indexer should always return a DataFrame\"\r\n> \r\n> ```\r\n> In [7]: import pandas as pd\r\n>    ...: df = pd.DataFrame({\"a\": [1, 2, 3, 4],\r\n>    ...:                    \"b\": [1, 2, 1, 2],\r\n>    ...:                    \"c\": [1, 1, 2, 2],\r\n>    ...:                    \"d\": [1, 2, 3, 4]}, index=[\"e\", \"f\", \"g\", \"h\"])\r\n> \r\n> In [8]: df.loc[[\"e\"]]\r\n> Out[8]:\r\n>    a  b  c  d\r\n> e  1  1  1  1\r\n> \r\n> In [9]: df.loc[[]]\r\n> Out[9]:\r\n> Empty DataFrame\r\n> Columns: [a, b, c, d]\r\n> Index: []\r\n> \r\n> In [10]: df.iloc[[0]]\r\n> Out[10]:\r\n>    a  b  c  d\r\n> e  1  1  1  1\r\n> \r\n> In [11]: df.iloc[[]]\r\n> Out[11]:\r\n> Empty DataFrame\r\n> Columns: [a, b, c, d]\r\n> Index: []\r\n> ```\r\n\r\nJust to follow up here, because I'm thinking about this again. The inconsistency is not when providing a singleton list index entry, but rather a singleton index entry:\r\n\r\nCompare:\r\n\r\n```python\r\nimport pandas as pd\r\ndf = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [1, 2, 3]}, index=[\"c\", \"d\"]})\r\n\r\ndf.loc[[\"c\"]] # => dataframe\r\ndf.loc[\"c\"] # => series\r\n```\r\nIf trying to standardise on pyarrow datatypes rather than python ones in pandas, this will cause the same problems as @brandon-b-miller notes in the initial issue. When the columns of your dataframe have mixed types it's not possible to take a row and turn it into a series of homogenous type.\r\n\r\nI realise it's rather late in the day, but do you think it is worth trying to make a change to these indexing semantics in pandas 2? (@mroeschke)",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1469758972/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1470418738",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1470418738",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1470418738,
        "node_id": "IC_kwDOBWUGps5XpM8y",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-15T17:04:45Z",
        "updated_at": "2023-03-15T17:04:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Looks like currently pandas will fall back to object dtype if indexing a row of mixed pyarrow types\r\n\r\n```\r\nIn [1]: df = pd.DataFrame({\r\n   ...: \"A\": pd.array([1], dtype=\"int64[pyarrow]\"),\r\n   ...: \"B\": pd.array([b\"foo\"], dtype=\"binary[pyarrow]\")})\r\n\r\nIn [2]: df\r\nOut[2]:\r\n   A       B\r\n0  1  b'foo'\r\n\r\nIn [3]: df.iloc[0]\r\nOut[3]:\r\nA         1\r\nB    b'foo'\r\nName: 0, dtype: object\r\n```\r\n\r\nwhich I think is acceptable behavior for pandas to fall back to object type here even though there's no pyarrow object type.\r\n\r\nI think it would be a fairly late to change this for pandas 2.0 since an RC already has been released but I think it might be worth discussing for pandas 3.0",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1470418738/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905000541",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905000541",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1905000541,
        "node_id": "IC_kwDOBWUGps5xjABd",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-22T23:16:07Z",
        "updated_at": "2024-01-22T23:16:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "With respect to the original example https://github.com/rapidsai/cudf/issues/11477#issue-1329308430 and availability of `cudf.pandas`, I think that row indexing that would result in non-homogenous types should raise a `MixedTypeError` or `NotImplementedError`",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905000541/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905119692",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905119692",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1905119692,
        "node_id": "IC_kwDOBWUGps5xjdHM",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-23T01:18:14Z",
        "updated_at": "2024-01-23T01:18:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "So this already raises in pandas compatibility mode. To confirm, do we want to also make this raise in non pandas compatibility mode?\r\n\r\n```python\r\nIn [5]: with cudf.option_context(\"mode.pandas_compatible\", True):\r\n   ...:     df1.iloc[0]\r\nTypeError: cudf does not support mixed types, please type-cast both series to same dtypes.\r\n\r\nIn [6]: with cudf.option_context(\"mode.pandas_compatible\", True):\r\n   ...:     df1.loc[\"a\"]\r\nTypeError: All columns need to be of same type, please typecast to common dtype.\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905119692/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905135144",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905135144",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1905135144,
        "node_id": "IC_kwDOBWUGps5xjg4o",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-23T01:37:05Z",
        "updated_at": "2024-01-23T01:37:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "For regular mode, raising would be fine - but we should throw a deprecation warning for at least a release.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1905135144/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1909096563",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1909096563",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1909096563,
        "node_id": "IC_kwDOBWUGps5xyoBz",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-24T23:31:00Z",
        "updated_at": "2024-01-24T23:31:00Z",
        "author_association": "CONTRIBUTOR",
        "body": "One more follow up. How strict do we want to be about \"all columns must have the same type when selecting rows\"? Do we want to try to implement coercion of types for numeric types coercion be absolutely strict (e.g. float32 & float64 columns would raise)?\r\n\r\n```python\r\nIn [2]: pd.DataFrame([[1, 1.0]]).iloc[0]\r\nOut[2]: \r\n0    1.0\r\n1    1.0\r\nName: 0, dtype: float64\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1909096563/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1909801733",
        "html_url": "https://github.com/rapidsai/cudf/issues/11477#issuecomment-1909801733",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11477",
        "id": 1909801733,
        "node_id": "IC_kwDOBWUGps5x1UMF",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-25T10:04:24Z",
        "updated_at": "2024-01-25T10:04:24Z",
        "author_association": "CONTRIBUTOR",
        "body": "My finger in the air feeling is:\r\n\r\n- try to coerce in pandas-compat mode\r\n- raise without coercion in non-compat mode\r\n\r\nI note that pandas has already deprecated the case of _setting_ a row of a dataframe with mismatching dtypes. Although it appears like it is still value-dependent:\r\n```\r\nIn [19]: df = pd.DataFrame([[1, 1.0]])\r\n\r\nIn [20]: s = pd.Series([2.5, 2.5])\r\n\r\nIn [21]: df.iloc[0, :] = s\r\n<ipython-input-21-dc029282b8b2>:1: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2.5' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\r\n  df.iloc[0, :] = s\r\n\r\nIn [22]: df\r\nOut[22]: \r\n     0    1\r\n0  2.5  2.5\r\n\r\nIn [23]: df = pd.DataFrame([[1, 1.0]])\r\n\r\nIn [24]: s = pd.Series([2.0, 2.0])\r\n\r\nIn [25]: df.iloc[0, :] = s\r\n\r\nIn [26]: df\r\nOut[26]: \r\n   0    1\r\n0  2  2.0\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1909801733/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]