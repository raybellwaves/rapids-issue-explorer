[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1751813070",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1751813070",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1751813070,
        "node_id": "IC_kwDOBWUGps5oaovO",
        "user": {
            "login": "etseidl",
            "id": 25541553,
            "node_id": "MDQ6VXNlcjI1NTQxNTUz",
            "avatar_url": "https://avatars.githubusercontent.com/u/25541553?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/etseidl",
            "html_url": "https://github.com/etseidl",
            "followers_url": "https://api.github.com/users/etseidl/followers",
            "following_url": "https://api.github.com/users/etseidl/following{/other_user}",
            "gists_url": "https://api.github.com/users/etseidl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/etseidl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/etseidl/subscriptions",
            "organizations_url": "https://api.github.com/users/etseidl/orgs",
            "repos_url": "https://api.github.com/users/etseidl/repos",
            "events_url": "https://api.github.com/users/etseidl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/etseidl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-07T20:37:35Z",
        "updated_at": "2023-10-08T00:52:24Z",
        "author_association": "CONTRIBUTOR",
        "body": "Looking at a hex dump of the file, it seems the page data is padded with an extra 8 bytes of zero valued bytes. The string length calculation is likely just using the data length minus `4*num_values` to calculate the string buffer length, so the pad bytes are being included in the final string. This is unfortunate because it means the quick short cut to getting the string lengths can't be used and we'll instead always have to do an expensive traversal of the plain encoded string data. :( \r\n\r\nTBH I'd consider this a bug on the write side...I'll have to check the spec to see if these padding bytes are forbidden or this is just a gray area.\r\n\r\nLooking at fastparquet, it seems the padding was added to get some tests to pass.  See [this](https://github.com/dask/fastparquet/commit/8f62b0efa195099228b6201afd64cc8981df0f52) commit (writer.py, lines 452 and 484). I wonder if it's worth bringing up with the fastparquet devs, adding garbage padding to byte array columns should not be necessary.\r\n\r\nThe relevant line in the current fastparquet is [here](https://github.com/dask/fastparquet/blame/58cdab6adc72c377e2460f90b05e90b9140ddf29/fastparquet/writer.py#L622)",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1751813070/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1753558860",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1753558860",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1753558860,
        "node_id": "IC_kwDOBWUGps5ohS9M",
        "user": {
            "login": "etseidl",
            "id": 25541553,
            "node_id": "MDQ6VXNlcjI1NTQxNTUz",
            "avatar_url": "https://avatars.githubusercontent.com/u/25541553?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/etseidl",
            "html_url": "https://github.com/etseidl",
            "followers_url": "https://api.github.com/users/etseidl/followers",
            "following_url": "https://api.github.com/users/etseidl/following{/other_user}",
            "gists_url": "https://api.github.com/users/etseidl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/etseidl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/etseidl/subscriptions",
            "organizations_url": "https://api.github.com/users/etseidl/orgs",
            "repos_url": "https://api.github.com/users/etseidl/repos",
            "events_url": "https://api.github.com/users/etseidl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/etseidl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-09T19:20:44Z",
        "updated_at": "2023-10-09T19:20:44Z",
        "author_association": "CONTRIBUTOR",
        "body": "Just FYI, here's a profile showing the impact of having to do the string size calculation the hard way. The profile shows reading 50M lines from a large parquet file containing plain encoded strings. The top profile is traversing the encoded string data, summing string lengths as it goes. Due to the structure of the data, this cannot be parallelized so a single thread per page is doing this operation. The bottom profile uses the page data size from the header to calculate string sizes. The call to `gpuComputeStringSizes` in the former takes 848ms, nearly doubling the read time. Overall read time for the entire file (200M rows, 8.6GB) goes from 3.5s to 6.9s.\r\n\r\n![Screenshot from 2023-10-09 11-53-07](https://github.com/rapidsai/cudf/assets/25541553/7e5e02b1-9ee2-4fce-8861-c1fae7701b54)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1753558860/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1754410825",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1754410825",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1754410825,
        "node_id": "IC_kwDOBWUGps5oki9J",
        "user": {
            "login": "mythrocks",
            "id": 5607330,
            "node_id": "MDQ6VXNlcjU2MDczMzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5607330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mythrocks",
            "html_url": "https://github.com/mythrocks",
            "followers_url": "https://api.github.com/users/mythrocks/followers",
            "following_url": "https://api.github.com/users/mythrocks/following{/other_user}",
            "gists_url": "https://api.github.com/users/mythrocks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mythrocks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mythrocks/subscriptions",
            "organizations_url": "https://api.github.com/users/mythrocks/orgs",
            "repos_url": "https://api.github.com/users/mythrocks/repos",
            "events_url": "https://api.github.com/users/mythrocks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mythrocks/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-10T05:22:59Z",
        "updated_at": "2023-10-10T05:22:59Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I'll have to check the spec to see if these padding bytes are forbidden or this is just a gray area.\r\n\r\nThank you for the analysis, @etseidl. This has me curious.\r\n\r\nThe main reason I considered this might be something we should address is that the Spark Parquet reader, and the parquet tools seem to read the file correctly. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1754410825/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1754432002",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1754432002",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1754432002,
        "node_id": "IC_kwDOBWUGps5okoIC",
        "user": {
            "login": "etseidl",
            "id": 25541553,
            "node_id": "MDQ6VXNlcjI1NTQxNTUz",
            "avatar_url": "https://avatars.githubusercontent.com/u/25541553?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/etseidl",
            "html_url": "https://github.com/etseidl",
            "followers_url": "https://api.github.com/users/etseidl/followers",
            "following_url": "https://api.github.com/users/etseidl/following{/other_user}",
            "gists_url": "https://api.github.com/users/etseidl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/etseidl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/etseidl/subscriptions",
            "organizations_url": "https://api.github.com/users/etseidl/orgs",
            "repos_url": "https://api.github.com/users/etseidl/repos",
            "events_url": "https://api.github.com/users/etseidl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/etseidl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-10T05:47:39Z",
        "updated_at": "2023-10-12T20:57:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "> The main reason I considered this might be something we should address is that the Spark Parquet reader, and the parquet tools seem to read the file correctly.\r\n\r\nYep, because they're reading a page at a time in batches, so they don't need to worry about exact total sizes, they just read the length of each string as they consume it. Even libcudf as of last year would have read that file ok because the string reads were done in two passes.  Now that we have the single pass read, we need to rely on accurate metadata to get the string data copied into the correct places in the column buffer.\r\n\r\nAs usual, the Parquet spec is silent on this. The closest I could find to an answer is in the section on data pages, where it is stated that the `uncompressed_page_size` field is the sum of rep level data, def level data, and encoded values. I personally think adding the 8 bytes of padding is kind of hacky, and it's just a happy accident that other readers are ok with that.\r\n\r\nEdit: Actually, I missed [this](https://github.com/apache/parquet-format#data-pages) \"For data pages, the 3 pieces of information are encoded back to back, after the page header. No padding is allowed in the data page.\" \r\n\r\nAnyway, so as to not kill performance for all, would it be acceptable to add an option to do the more expensive string size calculation when necessary?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1754432002/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1760145934",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1760145934",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1760145934,
        "node_id": "IC_kwDOBWUGps5o6bIO",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-12T18:24:25Z",
        "updated_at": "2023-10-12T18:24:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you @etseidl and @mythrocks for studying this anomaly. If we did have a reader option to pre-compute sizes, would Spark-RAPIDS have to always set this option to make sure we are correctly avoiding this behavior in the fastparquet writer? \r\n\r\nDo you think there could be any sensible postprocessing options to trim the null characters? TBH I didn't even know null characters could exist.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1760145934/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1760182379",
        "html_url": "https://github.com/rapidsai/cudf/issues/14258#issuecomment-1760182379",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14258",
        "id": 1760182379,
        "node_id": "IC_kwDOBWUGps5o6kBr",
        "user": {
            "login": "etseidl",
            "id": 25541553,
            "node_id": "MDQ6VXNlcjI1NTQxNTUz",
            "avatar_url": "https://avatars.githubusercontent.com/u/25541553?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/etseidl",
            "html_url": "https://github.com/etseidl",
            "followers_url": "https://api.github.com/users/etseidl/followers",
            "following_url": "https://api.github.com/users/etseidl/following{/other_user}",
            "gists_url": "https://api.github.com/users/etseidl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/etseidl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/etseidl/subscriptions",
            "organizations_url": "https://api.github.com/users/etseidl/orgs",
            "repos_url": "https://api.github.com/users/etseidl/repos",
            "events_url": "https://api.github.com/users/etseidl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/etseidl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-12T18:39:21Z",
        "updated_at": "2023-10-12T18:39:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "> If we did have a reader option to pre-compute sizes, would Spark-RAPIDS have to always set this option to make sure we are correctly avoiding this behavior in the fastparquet writer?\r\n\r\nYes...or we could turn it around and make the slow pre-compute the default, and enable the faster version on demand. But if fastparquet fixes their writer (I don't see why they wouldn't, they did not do the padding for V2 pages, for instance), then the cudf reader would be slower by default for no reason. A brittle option would be to check the `created_by` tag in the metadata and enable the slow reader if fastparquet is detected there.\r\n\r\n> Do you think there could be any sensible postprocessing options to trim the null characters?\r\n\r\nWell, you'd wind up with a column buffer with holes in it.  `CCCC00CCCCCCC00CCCCCCC`. You would have to shift chunks of char data left and update the offsets array to match.\r\n\r\n> TBH I didn't even know null characters could exist.\r\n\r\nThey're just byte arrays, with an annotation to interpret as UTF8 strings, so null chars are just fine.  The trouble here is fastparquet is adding this padding and counting it in the data size, even though it's not strictly data.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1760182379/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]