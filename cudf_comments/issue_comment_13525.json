[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1999956313",
        "html_url": "https://github.com/rapidsai/cudf/issues/13525#issuecomment-1999956313",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13525",
        "id": 1999956313,
        "node_id": "IC_kwDOBWUGps53NOlZ",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-03-15T15:52:21Z",
        "updated_at": "2024-03-15T15:52:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "@GregoryKimball From the Spark perspective The following are in priority order. This is based mostly on how likely I think it is that a customer would see these problems/limitations.  And also if we have a work around that would let us enable the JSON parsing functionality by default or not without this change, even if it is limited functionality.\r\n\r\nBlocker:\r\n1. #15260\r\n2. #15278\r\n3. #15277\r\n4. #15280\r\n5. #15303\r\n6. #15222 - This is likely going to need to be broken down into smaller pieces, not all of which are going to be blockers. I also think we need to what is the best way to support this because there will be a performance impact to others that don't want validation like this.\r\n7. #15318 I don't want to mark this a blocker, but we have a customer that insists on it. We are in the process of trying to develop normalization code that would work, but a lot of the problem is how can/would we be able to integrate this with the existing JSON parsing code. \r\n\r\nNon-Blocker:\r\n1. #5712 - I think I can work around this, but it will end up being a performance hit if we don't have a better way to deal with it.\r\n2. #14951 / #13473 - performance optimization (I think these might be dupes of each other)\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1999956313/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2000478103",
        "html_url": "https://github.com/rapidsai/cudf/issues/13525#issuecomment-2000478103",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13525",
        "id": 2000478103,
        "node_id": "IC_kwDOBWUGps53PN-X",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-03-15T21:36:39Z",
        "updated_at": "2024-03-15T21:36:39Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you @revans2 for summarizing your investigation. We've been studying these requirements and we would like to continue the discussion with you next week.\r\n\r\nlibcudf will soon address:\r\n1, 2, 5\r\n\r\nlibcudf is doing design work on:\r\nemitting raw strings (helps with 6, 7)\r\nmoving whitespace normalization after tokenization (helps with 4)\r\n\r\nlibcudf suggests that 3 is a non-blocker",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2000478103/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2004048432",
        "html_url": "https://github.com/rapidsai/cudf/issues/13525#issuecomment-2004048432",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13525",
        "id": 2004048432,
        "node_id": "IC_kwDOBWUGps53c1ow",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-03-18T14:19:50Z",
        "updated_at": "2024-03-18T14:19:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "Like I said I can work around 3, but I don't know how to make it performant without help from CUDF, and we have seen this in actual customer data.  Perhaps I can write a custom kernel myself that looks at quotes and replaces values in quotes vs outside of quotes as needed. I'll see.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2004048432/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2015817023",
        "html_url": "https://github.com/rapidsai/cudf/issues/13525#issuecomment-2015817023",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13525",
        "id": 2015817023,
        "node_id": "IC_kwDOBWUGps54Ju0_",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-03-22T20:01:18Z",
        "updated_at": "2024-03-22T20:01:18Z",
        "author_association": "CONTRIBUTOR",
        "body": "We had more discussions on the JSON compatibility issues and identified \"multi-line\" support as a blocker (relates to 3 above). We don't currently have a way to process a strings column as JSON Lines when the rows contain unquoted newline characters. Also our whitespace normalization can't remove unquoted newline characters. (See #10267 and #15277 for related requests)",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2015817023/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]