[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828379998",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828379998",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1828379998,
        "node_id": "IC_kwDOBWUGps5s-t1e",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-27T18:20:23Z",
        "updated_at": "2023-11-27T18:20:23Z",
        "author_association": "CONTRIBUTOR",
        "body": "I suspect this is hitting an out-of-memory error on the GPU and falling back to the CPU. What GPU are you using?\r\n\r\nIf your columns are int64/float64 types, (284 million rows * 9 columns * 8 bytes per element) gives about 20 GB of memory consumption for the data alone, before the intermediate storage needed for the groupby computation and results.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828379998/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828698855",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828698855",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1828698855,
        "node_id": "IC_kwDOBWUGps5s_7rn",
        "user": {
            "login": "kolfild26",
            "id": 12990695,
            "node_id": "MDQ6VXNlcjEyOTkwNjk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12990695?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kolfild26",
            "html_url": "https://github.com/kolfild26",
            "followers_url": "https://api.github.com/users/kolfild26/followers",
            "following_url": "https://api.github.com/users/kolfild26/following{/other_user}",
            "gists_url": "https://api.github.com/users/kolfild26/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kolfild26/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kolfild26/subscriptions",
            "organizations_url": "https://api.github.com/users/kolfild26/orgs",
            "repos_url": "https://api.github.com/users/kolfild26/repos",
            "events_url": "https://api.github.com/users/kolfild26/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kolfild26/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-27T22:05:59Z",
        "updated_at": "2023-11-27T22:05:59Z",
        "author_association": "NONE",
        "body": "```\r\nCODE                int64\r\nORDER_CODE          int64\r\nVERSION_CODE        int64\r\nID_WARE           float64\r\nQTY_ORDERED         int64\r\nCATALOG_PRICE     float64\r\nPRICE             float64\r\nTO_PAY            float64\r\nDISCOUNT_TOTAL    float64\r\n```\r\nI played with the size, at some point it starts falling `DataFrame.groupby` back  the CPU and then `SeriesGroupBy.sum` too.\r\nBut the point it starts falling is around 110.000.000 that corresponds to ~7.4Gb.\r\nMy GPU is **Tesla V100-PCIE-32GB**\r\n\r\n                                                                                                                  \r\n```                                                                                                    \r\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n\u2503 Function                     \u2503 GPU ncalls \u2503 GPU cumtime \u2503 GPU percall \u2503 CPU ncalls \u2503 CPU cumtime \u2503 CPU percall \u2503\r\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\r\n\u2502 DataFrame.groupby            \u2502 1          \u2502 0.000       \u2502 0.000       \u2502 0          \u2502 0.000       \u2502 0.000       \u2502\r\n\u2502 DataFrameGroupBy.__getitem__ \u2502 1          \u2502 0.001       \u2502 0.001       \u2502 0          \u2502 0.000       \u2502 0.000       \u2502\r\n\u2502 SeriesGroupBy.sum            \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 20.493      \u2502 20.493      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n\u2503 Function                     \u2503 GPU ncalls \u2503 GPU cumtime \u2503 GPU percall \u2503 CPU ncalls \u2503 CPU cumtime \u2503 CPU percall \u2503\r\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\r\n\u2502 DataFrame.groupby            \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 0.681       \u2502 0.681       \u2502\r\n\u2502 DataFrameGroupBy.__getitem__ \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 0.677       \u2502 0.677       \u2502\r\n\u2502 SeriesGroupBy.sum            \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 7.586       \u2502 7.586       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828698855/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828714460",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828714460",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1828714460,
        "node_id": "IC_kwDOBWUGps5s__fc",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-27T22:17:35Z",
        "updated_at": "2023-11-27T22:17:35Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for exploring!\r\n\r\nJust curious, does it help to filter out just the `ID` and `PRICE` columns _before_ the groupby? If so, we might be missing out on some optimizations internally and that would be a bug:\r\n\r\n```python\r\ndf = df[[\"ID\", \"TOTAL\"]]\r\nresult = df.groupby(\"ID\").sum()\r\n```\r\n\r\nAt the same time, you can try turning cuDF's spilling on to spill unused data:\r\n\r\n```\r\nCUDF_SPILL=1 python -m cudf.pandas ...\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1828714460/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830755123",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830755123",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1830755123,
        "node_id": "IC_kwDOBWUGps5tHxsz",
        "user": {
            "login": "kolfild26",
            "id": 12990695,
            "node_id": "MDQ6VXNlcjEyOTkwNjk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12990695?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kolfild26",
            "html_url": "https://github.com/kolfild26",
            "followers_url": "https://api.github.com/users/kolfild26/followers",
            "following_url": "https://api.github.com/users/kolfild26/following{/other_user}",
            "gists_url": "https://api.github.com/users/kolfild26/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kolfild26/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kolfild26/subscriptions",
            "organizations_url": "https://api.github.com/users/kolfild26/orgs",
            "repos_url": "https://api.github.com/users/kolfild26/repos",
            "events_url": "https://api.github.com/users/kolfild26/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kolfild26/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-28T21:11:59Z",
        "updated_at": "2023-11-28T21:11:59Z",
        "author_association": "NONE",
        "body": "@shwina\r\nThanks fro your updates. My answers are below.\r\n\r\n1\ufe0f\u20e3 \r\n> Just curious, does it help to filter out just the ID and PRICE columns before the groupby? If so, we might be missing out on some optimizations internally and that would be a bug:\r\n> \r\n> > df = df[[\"ID\", \"TOTAL\"]]\r\n> > result = df.groupby(\"ID\").sum()\r\n\r\nYes, that's what I see now. Filtering out two columns before the groupby fixes all. The groupby is again on the GPU.\r\n\r\n```\r\n%%cudf.pandas.profile\r\ndf=COM_ORDER_LINE.groupby(['ID_WARE'])['PRICE'].sum()\r\n                                                                                                                  \r\n                                            Total time elapsed: 27.720 seconds                                    \r\n                                          0 GPU function calls in 0.000 seconds                                   \r\n                                          3 CPU function calls in 20.844 seconds                                  \r\n                                                                                                                                                                                                                                        \r\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n\u2503 Function                     \u2503 GPU ncalls \u2503 GPU cumtime \u2503 GPU percall \u2503 CPU ncalls \u2503 CPU cumtime \u2503 CPU percall \u2503\r\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\r\n\u2502 DataFrame.groupby            \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 2.359       \u2502 2.359       \u2502\r\n\u2502 DataFrameGroupBy.__getitem__ \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 2.334       \u2502 2.334       \u2502\r\n\u2502 SeriesGroupBy.sum            \u2502 0          \u2502 0.000       \u2502 0.000       \u2502 1          \u2502 16.152      \u2502 16.152      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\nCOM_ORDER_LINE_tmp=COM_ORDER_LINE[['ID_WARE', 'PRICE']]\r\n```\r\n```\r\n%%cudf.pandas.profile\r\ndf=COM_ORDER_LINE_tmp.groupby(['ID_WARE'])['PRICE'].sum()\r\n                                            Total time elapsed: 0.358 seconds                                     \r\n                                          3 GPU function calls in 0.329 seconds                                   \r\n                                          0 CPU function calls in 0.000 seconds                                   \r\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n\u2503 Function                     \u2503 GPU ncalls \u2503 GPU cumtime \u2503 GPU percall \u2503 CPU ncalls \u2503 CPU cumtime \u2503 CPU percall \u2503\r\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\r\n\u2502 DataFrame.groupby            \u2502 1          \u2502 0.001       \u2502 0.001       \u2502 0          \u2502 0.000       \u2502 0.000       \u2502\r\n\u2502 DataFrameGroupBy.__getitem__ \u2502 1          \u2502 0.001       \u2502 0.001       \u2502 0          \u2502 0.000       \u2502 0.000       \u2502\r\n\u2502 SeriesGroupBy.sum            \u2502 1          \u2502 0.327       \u2502 0.327       \u2502 0          \u2502 0.000       \u2502 0.000       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n2\ufe0f\u20e3 \r\n```\r\nAt the same time, you can try turning cuDF's spilling on to spill unused data:\r\n```\r\n\r\nI also noticed that when I restart the machine, the first try after the restart is successfully being calculated on the GPU. Only once. Next run is falling back to the CPU again.\r\nSo, it looks like that the gpu memory really needs to be cleaned from unused data.\r\n\r\n```\r\nCUDF_SPILL=1 python -m cudf.pandas ...\r\n```\r\nIs there any way to switch on this option in the jupyter notebook? ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830755123/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830795476",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830795476",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1830795476,
        "node_id": "IC_kwDOBWUGps5tH7jU",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-28T21:42:51Z",
        "updated_at": "2023-11-28T21:42:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Filtering out two columns before the groupby fixes all.\r\n\r\nThanks! We'll investigate whether we can optimize things so that you don't have to do this filter, and report back here.\r\n\r\n> I also noticed that when I restart the machine, the first try after the restart is successfully being calculated on the GPU. Only once. Next run is falling back to the CPU again.\r\n\r\nAh, interesting. There are a few possibilities then:\r\n\r\n- We have a memory leak (this would be bad)\r\n- Some Python objects are caught in reference cycles and haven't been cleared. You can try running `gc.collect()` to release the memory associated with those objects and see if that helps with memory usage.\r\n\r\nCan you try the following:\r\n\r\n```Python\r\nimport gc\r\n\r\n# run groupby-sum for the first time\r\ngc.collect()\r\n# run groupby-sum for the second time\r\n```\r\n\r\nand let us know if that works?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830795476/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830815731",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830815731",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1830815731,
        "node_id": "IC_kwDOBWUGps5tIAfz",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-28T21:54:00Z",
        "updated_at": "2023-11-28T21:54:00Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Is there any way to switch on this option in the jupyter notebook?\r\n\r\nYes -- you can run jupyter notebook with:\r\n\r\n```\r\nCUDF_SPILL=1 jupyter notebook ...\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1830815731/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832936983",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832936983",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1832936983,
        "node_id": "IC_kwDOBWUGps5tQGYX",
        "user": {
            "login": "kolfild26",
            "id": 12990695,
            "node_id": "MDQ6VXNlcjEyOTkwNjk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12990695?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kolfild26",
            "html_url": "https://github.com/kolfild26",
            "followers_url": "https://api.github.com/users/kolfild26/followers",
            "following_url": "https://api.github.com/users/kolfild26/following{/other_user}",
            "gists_url": "https://api.github.com/users/kolfild26/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kolfild26/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kolfild26/subscriptions",
            "organizations_url": "https://api.github.com/users/kolfild26/orgs",
            "repos_url": "https://api.github.com/users/kolfild26/repos",
            "events_url": "https://api.github.com/users/kolfild26/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kolfild26/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T00:58:51Z",
        "updated_at": "2023-11-30T00:58:51Z",
        "author_association": "NONE",
        "body": "`gc.collect()` doesn't change anything. \r\nNo need to fully restart(as I mentioned above) but just to recreate the conda env with rapids and cuda like:\r\n`conda create -n rapids-23.10 -c rapidsai -c conda-forge -c nvidia rapids=23.10 python=3.10 cuda-version=12.0`\r\nand the groupby() works out several times and then starts falling back to the CPU. The exact number of times before the falling is unpredictable, it might be 1 (as I said earlier) or 2-3, around.\r\nI've also tried the `sort_values()` and the `join() `operations. The same picture in there. There is a limit of the df size below which it's all on the GPU and above which it's  going to the CPU. The only thing that varies is the size. Each of that three operations has its own limit in my case. For the groupby and sort_values it's around ~100kk. For the join (_inner_ for instance) is to be ~10kk.\r\n\r\n> CUDF_SPILL=1\r\n\r\nI tried this and **periodically** I catch the warning:\r\n```\r\n[WARNING] RMM allocation of 2.12GiB bytes failed, spill-on-demand couldn't find any device memory to spill:\r\n<SpillManager spill_on_demand=True device_memory_limit=N/A | 7.38GiB spilled | 22.28GiB (100%) unspilled (unspillable)>\r\ntraceback\r\n```\r\nAnd, unfortunatelly _spilling_ doesn't help here too, no matter with or w/o this warning.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832936983/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832940500",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832940500",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1832940500,
        "node_id": "IC_kwDOBWUGps5tQHPU",
        "user": {
            "login": "kolfild26",
            "id": 12990695,
            "node_id": "MDQ6VXNlcjEyOTkwNjk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12990695?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kolfild26",
            "html_url": "https://github.com/kolfild26",
            "followers_url": "https://api.github.com/users/kolfild26/followers",
            "following_url": "https://api.github.com/users/kolfild26/following{/other_user}",
            "gists_url": "https://api.github.com/users/kolfild26/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kolfild26/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kolfild26/subscriptions",
            "organizations_url": "https://api.github.com/users/kolfild26/orgs",
            "repos_url": "https://api.github.com/users/kolfild26/repos",
            "events_url": "https://api.github.com/users/kolfild26/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kolfild26/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T01:03:31Z",
        "updated_at": "2023-11-30T01:03:31Z",
        "author_association": "NONE",
        "body": "`7.38GiB spilled | 22.28GiB (100%) unspilled (unspillable)`\r\n\ud83e\udd14  might this be the cause? Looks like it says that only 7,4Gb from 32Gb were available for that operation.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832940500/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832955842",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832955842",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1832955842,
        "node_id": "IC_kwDOBWUGps5tQK_C",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T01:22:45Z",
        "updated_at": "2023-11-30T01:22:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for looking into it!\r\n\r\n> There is a limit of the df size below which it's all on the GPU and above which it's going to the CPU. The only thing that varies is the size. Each of that three operations has its own limit in my case. For the groupby and sort_values it's around ~100kk. For the join (inner for instance) is to be ~10kk.\r\n\r\nYeah this variability makes sense. The amount of intermediate memory required by a `join` operation can be very different from that required by `groupby` or `sort`.\r\n\r\nOn the `groupby` front, it does sound like we can optimize things so that you don't have to do a filter of the columns before `groupby`. \r\n\r\nI think you're essentially running up to the limitation that operations on larger data require more than the available GPU memory. While spilling can _sometimes_ help with that, it doesn't seem to in this particular situation. So the operations end up executing on CPU.\r\n\r\n--- \r\n\r\nTaking a step back, are you able to share what your workflow looks like? Perhaps we can provide more useful/specific suggestions if we can see the whole code. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1832955842/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1836634637",
        "html_url": "https://github.com/rapidsai/cudf/issues/14500#issuecomment-1836634637",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14500",
        "id": 1836634637,
        "node_id": "IC_kwDOBWUGps5teNIN",
        "user": {
            "login": "kolfild26",
            "id": 12990695,
            "node_id": "MDQ6VXNlcjEyOTkwNjk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12990695?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kolfild26",
            "html_url": "https://github.com/kolfild26",
            "followers_url": "https://api.github.com/users/kolfild26/followers",
            "following_url": "https://api.github.com/users/kolfild26/following{/other_user}",
            "gists_url": "https://api.github.com/users/kolfild26/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kolfild26/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kolfild26/subscriptions",
            "organizations_url": "https://api.github.com/users/kolfild26/orgs",
            "repos_url": "https://api.github.com/users/kolfild26/repos",
            "events_url": "https://api.github.com/users/kolfild26/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kolfild26/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-01T19:08:53Z",
        "updated_at": "2023-12-01T19:08:53Z",
        "author_association": "NONE",
        "body": "> are you able to share what your workflow looks like? Perhaps we can provide more useful/specific suggestions if we can see the whole code.\r\n\r\nI just started learning the cudf from exploring its boundaries. So, didn't apply it for the actual pipeline yet. But will definitely do this!\r\nWill raise an issue if I have any questions. Or I will update this one if it's relevant.\r\nThanks for your help.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1836634637/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]