[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1845946142",
        "html_url": "https://github.com/rapidsai/cudf/issues/14594#issuecomment-1845946142",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594",
        "id": 1845946142,
        "node_id": "IC_kwDOBWUGps5uBuce",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-07T19:06:30Z",
        "updated_at": "2023-12-07T19:06:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "Another question that comes to mind is whether these _same_ rules should be applied to binops (there's a different set of rules in pandas for merges compared to binops AFAICT).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1845946142/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1846967116",
        "html_url": "https://github.com/rapidsai/cudf/issues/14594#issuecomment-1846967116",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594",
        "id": 1846967116,
        "node_id": "IC_kwDOBWUGps5uFntM",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-08T11:01:47Z",
        "updated_at": "2023-12-08T11:01:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "Here's what I concretely propose for integer promotions:\r\n\r\n```\r\n      +----+    +-----+    +-----+    +-----+\r\n      | i8 |--->| i16 |--->| i32 |--->| i64 |\r\n      +----+    +--^--+    +--^--+    +--^--+\r\n                  /          /          /\r\n              /---'      /---'      /---'\r\n          /---'      /---'      /---'        \r\n      +--+-+    +---+-+    +---+-+    +-----+\r\n      | u8 |--->| u16 |--->| u32 |--->| u64 |\r\n      +----+    +-----+    +-----+    +-----+\r\n```\r\n\r\nFor floating point (noting that we don't have float 16 right now):\r\n\r\n```\r\n      +-----+    +-----+    +-----+\r\n      | f16 |--->| f32 |--->| f64 |\r\n      +-----+    +-----+    +-----+\r\n```\r\n\r\nThe thorny one is unifying these two. If you send (for example), the pair `(i16, f32)` to `f32`, and the pair `(u16, f32)` to `f32`, which is safe since you lose no data, then that breaks the lattice property of the promotion scheme with the consequence that type promotion is no longer associative. `((i16, u16),  f32) -> (i32, f32) -> f64`, but `(i16, (u16, f32)) -> (i16, f32) -> f32`.\r\n\r\nJax solves this problem by letting arbitrary width float win over arbitrary width integer, so that `(i64, f16) -> f16`. But I don't think that's a reasonable solution for cudf.\r\n\r\nWe can remove the lattice property and have integer to float conversions where they are lossless. The issue is that a sequence of merges might or might not raise depending on their order (and join reordering is a common optimisation).\r\n\r\nConsequently, having thought harder, I am inclined to raise for joins between integral and float keys, and promote safely using the lattices above for same-kind keys.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1846967116/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1847794906",
        "html_url": "https://github.com/rapidsai/cudf/issues/14594#issuecomment-1847794906",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594",
        "id": 1847794906,
        "node_id": "IC_kwDOBWUGps5uIxza",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-08T20:20:55Z",
        "updated_at": "2023-12-08T20:23:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "Just for comparison, pandas essentially dispatches to `np.result_type` to determine promotion. This logic generally does not apply when an element is trying to be set into an existing typed column.\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: types = [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64, np.float32, np.float64]\r\n\r\nIn [3]: np.__version__\r\nOut[3]: '1.26.0'\r\n\r\nIn [4]: import itertools\r\n\r\nIn [5]: for typ1, typ2 in itertools.combinations(types, 2):\r\n    ...:     print(f\"{np.dtype(typ1)} + {np.dtype(typ2)} -> {np.result_type(typ1, typ2)}\")\r\n    ...: \r\nint8 + int16 -> int16\r\nint8 + int32 -> int32\r\nint8 + int64 -> int64\r\nint8 + uint8 -> int16\r\nint8 + uint16 -> int32\r\nint8 + uint32 -> int64\r\nint8 + uint64 -> float64\r\nint8 + float32 -> float32\r\nint8 + float64 -> float64\r\nint16 + int32 -> int32\r\nint16 + int64 -> int64\r\nint16 + uint8 -> int16\r\nint16 + uint16 -> int32\r\nint16 + uint32 -> int64\r\nint16 + uint64 -> float64\r\nint16 + float32 -> float32\r\nint16 + float64 -> float64\r\nint32 + int64 -> int64\r\nint32 + uint8 -> int32\r\nint32 + uint16 -> int32\r\nint32 + uint32 -> int64\r\nint32 + uint64 -> float64\r\nint32 + float32 -> float64\r\nint32 + float64 -> float64\r\nint64 + uint8 -> int64\r\nint64 + uint16 -> int64\r\nint64 + uint32 -> int64\r\nint64 + uint64 -> float64\r\nint64 + float32 -> float64\r\nint64 + float64 -> float64\r\nuint8 + uint16 -> uint16\r\nuint8 + uint32 -> uint32\r\nuint8 + uint64 -> uint64\r\nuint8 + float32 -> float32\r\nuint8 + float64 -> float64\r\nuint16 + uint32 -> uint32\r\nuint16 + uint64 -> uint64\r\nuint16 + float32 -> float32\r\nuint16 + float64 -> float64\r\nuint32 + uint64 -> uint64\r\nuint32 + float32 -> float64\r\nuint32 + float64 -> float64\r\nuint64 + float32 -> float64\r\nuint64 + float64 -> float64\r\nfloat32 + float64 -> float64\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1847794906/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]