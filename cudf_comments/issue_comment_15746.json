[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2111045750",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2111045750",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2111045750,
        "node_id": "IC_kwDOBWUGps591AB2",
        "user": {
            "login": "davidwendt",
            "id": 45795991,
            "node_id": "MDQ6VXNlcjQ1Nzk1OTkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/45795991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidwendt",
            "html_url": "https://github.com/davidwendt",
            "followers_url": "https://api.github.com/users/davidwendt/followers",
            "following_url": "https://api.github.com/users/davidwendt/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidwendt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidwendt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidwendt/subscriptions",
            "organizations_url": "https://api.github.com/users/davidwendt/orgs",
            "repos_url": "https://api.github.com/users/davidwendt/repos",
            "events_url": "https://api.github.com/users/davidwendt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidwendt/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-14T20:02:45Z",
        "updated_at": "2024-05-14T20:02:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "This has been requested before: https://github.com/rapidsai/cudf/issues/11979\r\nSupporting an array of single characters may be doable but supporting `\\r\\n` will likely not be possible.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2111045750/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2123425209",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2123425209",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2123425209,
        "node_id": "IC_kwDOBWUGps5-kOW5",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-21T20:54:02Z",
        "updated_at": "2024-05-21T20:54:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you @NVnavkumar for raising this topic. Would you please share more information about this?\r\n* what is the performance for a line terminator pattern that only matches `\\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?\r\n* would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?\r\n* As @davidwendt mentioned, supporting a `\\r\\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?\r\n* Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\\r`, `\\n`,` \\u0085`, `\\u2028`, or `\\u2029` but not `\\r\\n`?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2123425209/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2135921038",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2135921038",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2135921038,
        "node_id": "IC_kwDOBWUGps5_T5GO",
        "user": {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-28T19:01:11Z",
        "updated_at": "2024-05-28T19:01:11Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Thank you @NVnavkumar for raising this topic. Would you please share more information about this?\r\n> \r\n> * what is the performance for a line terminator pattern that only matches `\\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?\r\n> * would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?\r\n> * As @davidwendt mentioned, supporting a `\\r\\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?\r\n> * Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\\r`, `\\n`,` \\u0085`, `\\u2028`, or `\\u2029` but not `\\r\\n`?\r\n\r\nAddressing these questions here:\r\n\r\n* I'm still working on measuring the performance impact here, and trying to ascertain that for certain strings that only include newlines (`\\n`), what is the performance impact of the transpiled regex vs sending the original regex into cudf directly. The theory is that these would get pretty close to the Spark output so transpilation overhead can be reduced.\r\n\r\n* Line terminators actually dictate both `^` and `$` behavior, since they dictate ultimately both the start and end of the line. Sometimes we want to use these in more complicated ways like choice (e.g.`abc|$` matches `abc` or we just want the end of the line, see https://github.com/NVIDIA/spark-rapids/issues/10764 for corresponding spark-rapids issue). In multiline mode, this means that they basically become a matcher for the line terminator characters themselves or the end of the string.\r\n\r\n* One option we have (and we might even have it in lieu of this issue), is to substitute `\\r\\n` for `\\n`, and then run the cudf regexp engine. However, this substitution adds an additional GPU operation **and** manipulates the original string, so for some operations (like extract), we won't get the same output since we won't be able to include the original line terminator in the output. Another option is we could simplify the transpilation to something like `\\r\\n$|$`. If that works, that might be a better option to maintain compatibility with Spark. I also would like to propose that Spark could disable such a transpilation under a \"maximizeCompatiblity\" flag for perfomance purposes.\r\n\r\n* Using the second option described in the previous paragraph, this could still be potentially very useful with the simplified transpilation.\r\n\r\nI will try to update with some performance numbers soon.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2135921038/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2146150399",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2146150399",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2146150399,
        "node_id": "IC_kwDOBWUGps5_66f_",
        "user": {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-03T21:24:40Z",
        "updated_at": "2024-06-03T21:24:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "From a performance perspective, I did a very brief test with regexp_extract and Spark involving randomly generated strings which only included newlines at the end of the string (as opposed to other types of line terminators).  I chose a relatively simple pattern `(boo:+)$` (which involves a single capture group and the `$` to match the end of the string.  I chose extract since that's the case where the Spark-RAPIDS regexp transpiler code since it tests how extract handles the potential non-capturing group for `$` transpilation:\r\n\r\n\r\nHere is the performance of the `extract` kernel measured with nsys in 2 scenarios, 1 using the transpiled regex, 2 using the regex as given to cudf. \r\n\r\n```\r\n1) Transpiled Regex\r\nName\tStart\tDuration\tTID\tCategory\r\nextract\t20.7979s\t5.596 ms\t939788\t\r\nextract\t20.7979s\t5.593 ms\t939789\t\r\nextract\t20.8318s\t4.843 ms\t939790\t\r\nextract\t20.8317s\t4.827 ms\t939791\t\r\n------------------------------------------\r\n avg                          5.215 ms\r\n\r\n2) cuDF using the original regex\r\nName\tStart\tDuration\tTID\tCategory\r\nextract\t20.6463s\t2.719 ms\t941563\t\r\nextract\t20.6789s\t        1.840 ms\t941564\t\r\nextract\t20.6465s\t2.634 ms\t941565\t\r\nextract\t20.6789s\t        1.685 ms\t941566\t\r\n------------------------------------------\r\n avg                                   2.220 ms\r\n```\r\n\r\nMore testing can be done to fully vet this performance characteristic, but it should illustrate how much complexity the transpiled regex is adding to handle these additional line terminators. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2146150399/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2148317768",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2148317768",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2148317768,
        "node_id": "IC_kwDOBWUGps6ADLpI",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-04T19:58:41Z",
        "updated_at": "2024-06-04T19:58:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "@NVnavkumar Would you please post an example of the transpiled pattern? I would love to see the new pattern that comes out after you go through the steps to convert `$` into something that gives correct result.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2148317768/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2151228813",
        "html_url": "https://github.com/rapidsai/cudf/issues/15746#issuecomment-2151228813",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15746",
        "id": 2151228813,
        "node_id": "IC_kwDOBWUGps6AOSWN",
        "user": {
            "login": "NVnavkumar",
            "id": 97137715,
            "node_id": "U_kgDOBco0Mw",
            "avatar_url": "https://avatars.githubusercontent.com/u/97137715?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NVnavkumar",
            "html_url": "https://github.com/NVnavkumar",
            "followers_url": "https://api.github.com/users/NVnavkumar/followers",
            "following_url": "https://api.github.com/users/NVnavkumar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NVnavkumar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NVnavkumar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NVnavkumar/subscriptions",
            "organizations_url": "https://api.github.com/users/NVnavkumar/orgs",
            "repos_url": "https://api.github.com/users/NVnavkumar/repos",
            "events_url": "https://api.github.com/users/NVnavkumar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NVnavkumar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-06T01:21:14Z",
        "updated_at": "2024-06-06T01:23:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "> @NVnavkumar Would you please post an example of the transpiled pattern? I would love to see the new pattern that comes out after you go through the steps to convert `$` into something that gives correct result.\r\n\r\nSo the original pattern `(boo:+)$` becomes `(boo:+)(?:\\r|\\u0085|\\u2028|\\u2029|\\r\\n)?$`.  This is to accomodate the `\\r\\n` double character and the possibility of supporting the 4 additional characters `\\r` and the 3 unicode line breaks.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2151228813/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]