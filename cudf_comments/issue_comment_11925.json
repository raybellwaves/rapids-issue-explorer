[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282404537",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282404537",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1282404537,
        "node_id": "IC_kwDOBWUGps5Mb_C5",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-18T13:39:47Z",
        "updated_at": "2022-10-18T13:39:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "In general, `axis=1` for other methods like `max()` or `mean()` is supported via CuPy, which doesn't provide `mode()`.\r\n\r\nI don't think it would be trivial or easy to implement `mode()` as it effectively needs a row-wise stream compaction. @GregoryKimball or @brandon-b-miller -- I wonder if you have any thoughts on the feasibility of implementing this using libcudf or numba respectively?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282404537/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282476205",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282476205",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1282476205,
        "node_id": "IC_kwDOBWUGps5McQit",
        "user": {
            "login": "brandon-b-miller",
            "id": 53796099,
            "node_id": "MDQ6VXNlcjUzNzk2MDk5",
            "avatar_url": "https://avatars.githubusercontent.com/u/53796099?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brandon-b-miller",
            "html_url": "https://github.com/brandon-b-miller",
            "followers_url": "https://api.github.com/users/brandon-b-miller/followers",
            "following_url": "https://api.github.com/users/brandon-b-miller/following{/other_user}",
            "gists_url": "https://api.github.com/users/brandon-b-miller/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brandon-b-miller/subscriptions",
            "organizations_url": "https://api.github.com/users/brandon-b-miller/orgs",
            "repos_url": "https://api.github.com/users/brandon-b-miller/repos",
            "events_url": "https://api.github.com/users/brandon-b-miller/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brandon-b-miller/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-18T14:20:10Z",
        "updated_at": "2022-10-18T14:20:10Z",
        "author_association": "CONTRIBUTOR",
        "body": "It seems like it would be possible to write a numba kernel that consumes a matrix-like data structure (possibly generated from the input dataframe) and computes the mode across the rows, however I think the challenge for us in cuDF would be making sure that kernel (or family of kernels) matches pandas for all the edge cases involving dataframes with mixed dtypes, nulls, nans, and the like. We'd also want to think about the UX of dispatching to cupy for some row-wise operations and a custom numba kernel which requires compilation for others. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282476205/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282483956",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282483956",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1282483956,
        "node_id": "IC_kwDOBWUGps5McSb0",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-18T14:25:28Z",
        "updated_at": "2022-10-18T14:25:28Z",
        "author_association": "MEMBER",
        "body": "I agree. This is probably in scope for CuPy, as SciPy explicitly implements it (with a fairly interesting return type). Given this operation is not columnar in nature, I think it makes sense to implement this in the Python layer by dispatching to a potential future CuPy implementation.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1282483956/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295282805",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295282805",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1295282805,
        "node_id": "IC_kwDOBWUGps5NNHJ1",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T17:47:56Z",
        "updated_at": "2022-10-28T17:47:56Z",
        "author_association": "MEMBER",
        "body": "Per offline discussion with @dawilliams-nvidia , limited support for only numeric types would be sufficient",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295282805/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295364327",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295364327",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1295364327,
        "node_id": "IC_kwDOBWUGps5NNbDn",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T19:16:40Z",
        "updated_at": "2022-10-28T19:18:39Z",
        "author_association": "CONTRIBUTOR",
        "body": "If numeric-only types are sufficient here, I would suggest the same thing as I mentioned here: https://github.com/rapidsai/cudf/issues/11570#issuecomment-1221119749\r\n\r\nWe can implement something like `axis=1` by returning `df.T.mode(axis=0).T`. The explicit transposes will only work for dataframes with similar dtypes (I am not exactly sure what qualifies for like-casting on tranpose) but it would permit a reasonable subset of `axis=1` use cases to be performed in a fairly efficient manner. The two transposes are not ideal for speed, but neither is row-wise operation. This might be an okay compromise between GPU perf and usability.\r\n\r\n@shwina @beckernick @brandon-b-miller Do we have other issues like this where CuPy is limiting us? I suspect similar issues would exist for cuDF types that CuPy doesn't support, but a (transpose, columnar reduction, transpose) could be viable.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295364327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295411696",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295411696",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1295411696,
        "node_id": "IC_kwDOBWUGps5NNmnw",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T20:01:54Z",
        "updated_at": "2022-10-28T20:01:54Z",
        "author_association": "MEMBER",
        "body": "We changed transpose to return a contiguous buffer, right? I think that allocating thousands of columns will be a non-starter.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295411696/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295637078",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295637078",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1295637078,
        "node_id": "IC_kwDOBWUGps5NOdpW",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T23:26:02Z",
        "updated_at": "2022-10-28T23:26:02Z",
        "author_association": "CONTRIBUTOR",
        "body": "> We changed transpose to return a contiguous buffer, right?\r\n\r\nIndeed we did.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295637078/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295647173",
        "html_url": "https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295647173",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11925",
        "id": 1295647173,
        "node_id": "IC_kwDOBWUGps5NOgHF",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T23:51:12Z",
        "updated_at": "2022-10-28T23:52:35Z",
        "author_association": "CONTRIBUTOR",
        "body": "I see. An alternative would be to allocate a single column that is matrix-like (has `columns*rows` entries), copy all the entries there (no need to transpose), and add an auxiliary column of row labels. Then do a groupby count over both columns `(row_label, value)` to get the counts of each value in each row. Take the result and do a groupby argmax over `row_label` to get the index of the mode of each row, and gather the corresponding values to return.\r\n\r\nThe first groupby cardinality could be very large with low counts for each grouping, but both groupby steps can use hash-based implementations.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1295647173/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]