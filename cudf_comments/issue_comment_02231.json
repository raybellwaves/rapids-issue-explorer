[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/511424305",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-511424305",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 511424305,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTQyNDMwNQ==",
        "user": {
            "login": "kkraus14",
            "id": 3665167,
            "node_id": "MDQ6VXNlcjM2NjUxNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3665167?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kkraus14",
            "html_url": "https://github.com/kkraus14",
            "followers_url": "https://api.github.com/users/kkraus14/followers",
            "following_url": "https://api.github.com/users/kkraus14/following{/other_user}",
            "gists_url": "https://api.github.com/users/kkraus14/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kkraus14/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kkraus14/subscriptions",
            "organizations_url": "https://api.github.com/users/kkraus14/orgs",
            "repos_url": "https://api.github.com/users/kkraus14/repos",
            "events_url": "https://api.github.com/users/kkraus14/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kkraus14/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-15T14:24:52Z",
        "updated_at": "2019-07-15T14:24:52Z",
        "author_association": "COLLABORATOR",
        "body": "For reference: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge_asof.html\r\n\r\nI can only see this working with a sort based join FYI.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/511424305/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887009853",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-887009853",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 887009853,
        "node_id": "IC_kwDOBWUGps403rI9",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T20:37:24Z",
        "updated_at": "2021-07-26T20:37:56Z",
        "author_association": "MEMBER",
        "body": "@vyasr might the recent conditional join / AST work perhaps be relevant for this issue? Copying the summary from the pandas docs linked above.\r\n\r\n\r\nPerform an asof merge.\r\n\r\nThis is similar to a left-join except that we match on nearest key rather than equal keys. Both DataFrames must be sorted by the key.\r\n\r\nFor each row in the left DataFrame:\r\n\r\n- A \u201cbackward\u201d search selects the last row in the right DataFrame whose \u2018on\u2019 key is less than or equal to the left\u2019s key.\r\n- A \u201cforward\u201d search selects the first row in the right DataFrame whose \u2018on\u2019 key is greater than or equal to the left\u2019s key.\r\n- A \u201cnearest\u201d search selects the row in the right DataFrame whose \u2018on\u2019 key is closest in absolute distance to the left\u2019s key.\r\n\r\nThe default is \u201cbackward\u201d and is compatible in versions below 0.20.0. The direction parameter was added in version 0.20.0 and introduces \u201cforward\u201d and \u201cnearest\u201d.\r\n\r\nOptionally match on equivalent keys with \u2018by\u2019 before searching with \u2018on\u2019.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887009853/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887030362",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-887030362",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 887030362,
        "node_id": "IC_kwDOBWUGps403wJa",
        "user": {
            "login": "jrhemstad",
            "id": 15221289,
            "node_id": "MDQ6VXNlcjE1MjIxMjg5",
            "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrhemstad",
            "html_url": "https://github.com/jrhemstad",
            "followers_url": "https://api.github.com/users/jrhemstad/followers",
            "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
            "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
            "repos_url": "https://api.github.com/users/jrhemstad/repos",
            "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T21:12:28Z",
        "updated_at": "2021-07-26T21:12:28Z",
        "author_association": "CONTRIBUTOR",
        "body": "This could not be implemented with the AST as it requires storing state (i.e., the \"closest so far\" value). I'm not sure how you would implement this in a way that is not terrible. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887030362/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887055418",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-887055418",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 887055418,
        "node_id": "IC_kwDOBWUGps4032Q6",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T22:00:21Z",
        "updated_at": "2021-07-26T22:07:24Z",
        "author_association": "CONTRIBUTOR",
        "body": "The kernel computing conditional joins currently uses a 1D grid to parallelize only over the rows of the left table. We probably want to retain the flexibility to change the grid layout in the future if we find a more performant approach for conditional joins, but a slightly modified version of the current kernel that stores the \"closest so far\" value in a kernel-local variable should work for this use case, right? Note that the pandas API specifically requires that both DataFrames are sorted to begin with. I'm imagining something like the following (in very rough pseudocode):\r\n```\r\njoin_index = SENTINEL\r\nfinished = false\r\nfor row in right:\r\n    if not finished and condition(row):\r\n        join_index = index(row)\r\n    else:\r\n        finished = true\r\n\r\nif join_index == SENTINEL:\r\n    handle_no_join()\r\nelse:\r\n    add_pair_to_cache(left_row, join_index)\r\n```\r\nwith `condition =  ast_operator::GREATER` for `backwards` and `condition = ast_operator::LESS` for `forwards`. `nearest` would require a little extra logic using `ast_operator::GREATER` but then doing a comparison of two values the first time the condition is False.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/887055418/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1500453948",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-1500453948",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 1500453948,
        "node_id": "IC_kwDOBWUGps5Zbxw8",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-07T16:46:57Z",
        "updated_at": "2023-05-04T11:02:53Z",
        "author_association": "CONTRIBUTOR",
        "body": "Quick update: my interest in this issue has grown since I started researching sort-based join algorithms such as the \"[inequality_join](https://duckdb.org/2022/05/27/iejoin.html)\" in DuckDB, \"[asof join](https://pola-rs.github.io/polars-book/user-guide/transformations/joins/#asof-join)\" in polars, and \"[merge_asof](https://pandas.pydata.org/docs/reference/api/pandas.merge_asof.html)\" in pandas. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1500453948/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1553094087",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-1553094087",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 1553094087,
        "node_id": "IC_kwDOBWUGps5cklXH",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-18T13:55:05Z",
        "updated_at": "2023-05-18T13:55:05Z",
        "author_association": "MEMBER",
        "body": "DuckDB has officially added \"AS OF\" joins as of the v8.0.0 release (pun intended).\r\n\r\n- https://duckdb.org/2023/05/17/announcing-duckdb-080.html\r\n- https://duckdb.org/docs/guides/sql_features/asof_join.html\r\n- https://github.com/duckdb/duckdb/pull/6719",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1553094087/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1553332700",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-1553332700",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 1553332700,
        "node_id": "IC_kwDOBWUGps5clfnc",
        "user": {
            "login": "revans2",
            "id": 3441321,
            "node_id": "MDQ6VXNlcjM0NDEzMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/revans2",
            "html_url": "https://github.com/revans2",
            "followers_url": "https://api.github.com/users/revans2/followers",
            "following_url": "https://api.github.com/users/revans2/following{/other_user}",
            "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
            "organizations_url": "https://api.github.com/users/revans2/orgs",
            "repos_url": "https://api.github.com/users/revans2/repos",
            "events_url": "https://api.github.com/users/revans2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/revans2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-18T16:47:31Z",
        "updated_at": "2023-05-18T19:35:11Z",
        "author_association": "CONTRIBUTOR",
        "body": "Both Spark and DuckDB implement \"ASOF\" join using slightly different translations to operators that I think both CUDF and Dask already support. These translations allow the processing to be mostly distributed, which is really nice.\r\n\r\nSpark's translation will do a join followed by an aggregation. \r\n\r\nhttps://github.com/apache/spark/blob/d7a8b852eaa6cc04df1eea0018a9b9de29b1c4fe/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/RewriteAsOfJoin.scala#L27-L47\r\n\r\nIn this `MIN_BY` is essentially an `ARGMIN` aggregation followed by gather using the index returned on the first column passed to the `MIN_BY`. The problem here is that the join will likely explode. They use the tolerance from pandas to reduce the window (Spark only supports this for their pandas compatibility layer currently).\r\n\r\nI have not tried but want to. We have not been looking at it in depth because it is only for pandas compatibility right now.\r\n\r\nWhere as DuckDB appears to be doing a lead of 1 in a window operation to get a min/max value, but the default for the last value in the lead not `null` it is `infinity` so that they can get the proper range.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/execution/physical_plan/plan_asof_join.cpp#L48\r\n\r\nAnd then DuckDB does a conditional join bounding the left hand side key by values in that range.  It is a conditional join.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/execution/physical_plan/plan_asof_join.cpp#L73\r\n\r\nThe problem here is that if the asof join does not include any equality operations the window operation is likely to require all of the data to go to a single task (at least when doing this how Spark does it, not sure on DuckDB or Dask)\r\n\r\nBoth of these implementations are likely to require a cross join if are no equality operations in the join condition. I don't think that is very likely (I think the DuckDB example is bad), but I do think that there are ways that we can make it much better if we need to.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1553332700/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1911172395",
        "html_url": "https://github.com/rapidsai/cudf/issues/2231#issuecomment-1911172395",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/2231",
        "id": 1911172395,
        "node_id": "IC_kwDOBWUGps5x6i0r",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-25T23:39:18Z",
        "updated_at": "2024-01-25T23:40:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "This feature is still of interest for libcudf, and we may choose a segmented sort-based join that uses binary search to locate correct matches. \r\n\r\nLooking at the pandas API for [merge_asof](https://pandas.pydata.org/pandas-docs/version/0.25.0/reference/api/pandas.merge_asof.html), there are a few key arguments that our algorithm should support:\r\n* `on`: references the numeric column that is used to find closest matches\r\n* `by`: references one or more columns that must be equal in `right` and `left` before searching the `on` values\r\n* `direction`: \"forward\", \"backward\" or \"nearest\" defines how to match the `on` values\r\n* `tolerance`: don't match if the closest `on` values are too far apart\r\n* `allow_exact_matches`: whether to match when `on` values are `==` or only find the closest non-equal\r\n\r\nPossible primitives needed:\r\nDevice-callable binary search that can work with custom functors. This will allow us to interface implementations of `backward/forward/nearest` with template dispatch to support `tolerance/nearest` for primitive types\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1911172395/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]