[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336788016",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336788016",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1336788016,
        "node_id": "IC_kwDOBWUGps5PrcQw",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T06:00:33Z",
        "updated_at": "2022-12-05T06:00:33Z",
        "author_association": "CONTRIBUTOR",
        "body": "What do you mean groupby + aggregation? If I guessed correctly, we already have `MERGE_LIST` aggregation that does the merging for lists.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336788016/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336789949",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336789949",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1336789949,
        "node_id": "IC_kwDOBWUGps5Prcu9",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T06:02:41Z",
        "updated_at": "2022-12-05T06:03:02Z",
        "author_association": "CONTRIBUTOR",
        "body": "If you want to do groupby min/max etc. on lists as the input values then we recently have enough tools to support them---just a matter of time to enable them.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336789949/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336822660",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336822660",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1336822660,
        "node_id": "IC_kwDOBWUGps5PrkuE",
        "user": {
            "login": "infzo",
            "id": 43532055,
            "node_id": "MDQ6VXNlcjQzNTMyMDU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43532055?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/infzo",
            "html_url": "https://github.com/infzo",
            "followers_url": "https://api.github.com/users/infzo/followers",
            "following_url": "https://api.github.com/users/infzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/infzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/infzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/infzo/subscriptions",
            "organizations_url": "https://api.github.com/users/infzo/orgs",
            "repos_url": "https://api.github.com/users/infzo/repos",
            "events_url": "https://api.github.com/users/infzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/infzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T06:45:12Z",
        "updated_at": "2022-12-05T06:45:12Z",
        "author_association": "NONE",
        "body": "> If you want to do groupby min/max etc. on lists as the input values then we recently have enough tools to support them---just a matter of time to enable them.\r\n\r\n@ttnghia Yes, something like this; there are a few questions:\r\n\r\n1. How long will this feature be supported in the release version?\r\n2. Our requirements are urgent. Is there a faster way to implement this function in the current version?\r\n\r\nSQL case:\r\n\r\n![\u6355\u83b73](https://user-images.githubusercontent.com/43532055/205566477-dc2cced0-d664-4c74-a7d0-495cc3dff7d0.PNG)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336822660/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336848603",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336848603",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1336848603,
        "node_id": "IC_kwDOBWUGps5PrrDb",
        "user": {
            "login": "mjshare",
            "id": 60972404,
            "node_id": "MDQ6VXNlcjYwOTcyNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/60972404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjshare",
            "html_url": "https://github.com/mjshare",
            "followers_url": "https://api.github.com/users/mjshare/followers",
            "following_url": "https://api.github.com/users/mjshare/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjshare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjshare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjshare/subscriptions",
            "organizations_url": "https://api.github.com/users/mjshare/orgs",
            "repos_url": "https://api.github.com/users/mjshare/repos",
            "events_url": "https://api.github.com/users/mjshare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjshare/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T07:14:50Z",
        "updated_at": "2022-12-05T07:15:49Z",
        "author_association": "NONE",
        "body": "> @ttnghia\r\n\r\nHow do I perform operations such as count and sum after deduplication in the list?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1336848603/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337546513",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337546513",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1337546513,
        "node_id": "IC_kwDOBWUGps5PuVcR",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T15:11:00Z",
        "updated_at": "2022-12-05T15:11:52Z",
        "author_association": "CONTRIBUTOR",
        "body": "Oh sorry, what you've shown in the picture is per-list aggregation on the list elements (I thought that you want aggregation just at the lists level). This needs to implement new aggregations from scratch. I believe that @GregoryKimball can answer more questions about prioritizing for this FEA.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337546513/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337728767",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337728767",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1337728767,
        "node_id": "IC_kwDOBWUGps5PvB7_",
        "user": {
            "login": "ttnghia",
            "id": 7416935,
            "node_id": "MDQ6VXNlcjc0MTY5MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttnghia",
            "html_url": "https://github.com/ttnghia",
            "followers_url": "https://api.github.com/users/ttnghia/followers",
            "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
            "organizations_url": "https://api.github.com/users/ttnghia/orgs",
            "repos_url": "https://api.github.com/users/ttnghia/repos",
            "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttnghia/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T16:57:24Z",
        "updated_at": "2022-12-05T16:57:24Z",
        "author_association": "CONTRIBUTOR",
        "body": "After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:\r\n1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then\r\n2. Call segmented min/max/sum on the list elements using list offsets.\r\n\r\nHowever, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337728767/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337769092",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337769092",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1337769092,
        "node_id": "IC_kwDOBWUGps5PvLyE",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-05T17:17:03Z",
        "updated_at": "2022-12-05T17:17:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "@infzo perhaps I'm misunderstanding, but can you not just do this?\r\n\r\n```python\r\nIn [67]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})\r\n\r\nIn [68]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})\r\n\r\nIn [69]: cudf.concat([df1, df2]).groupby('a').agg({'b': 'max', 'c': 'nunique'})\r\nOut[69]: \r\n   b  c\r\na      \r\n1  1  1\r\n2  3  1\r\n3  5  1\r\n\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1337769092/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338601526",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338601526",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1338601526,
        "node_id": "IC_kwDOBWUGps5PyXA2",
        "user": {
            "login": "mjshare",
            "id": 60972404,
            "node_id": "MDQ6VXNlcjYwOTcyNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/60972404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjshare",
            "html_url": "https://github.com/mjshare",
            "followers_url": "https://api.github.com/users/mjshare/followers",
            "following_url": "https://api.github.com/users/mjshare/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjshare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjshare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjshare/subscriptions",
            "organizations_url": "https://api.github.com/users/mjshare/orgs",
            "repos_url": "https://api.github.com/users/mjshare/repos",
            "events_url": "https://api.github.com/users/mjshare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjshare/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T01:36:44Z",
        "updated_at": "2022-12-06T01:36:44Z",
        "author_association": "NONE",
        "body": "\r\n> After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:\r\n> \r\n> 1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then\r\n> 2. Call segmented min/max/sum on the list elements using list offsets.\r\n> \r\n> However, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.\r\n@ttnghia \uff0cThe problem is that the list does not support count, max, and sum with groupby\r\nDoes the community have a plan to support it? We have scenarios to support it\uff1f\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338601526/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338610392",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338610392",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1338610392,
        "node_id": "IC_kwDOBWUGps5PyZLY",
        "user": {
            "login": "infzo",
            "id": 43532055,
            "node_id": "MDQ6VXNlcjQzNTMyMDU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43532055?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/infzo",
            "html_url": "https://github.com/infzo",
            "followers_url": "https://api.github.com/users/infzo/followers",
            "following_url": "https://api.github.com/users/infzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/infzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/infzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/infzo/subscriptions",
            "organizations_url": "https://api.github.com/users/infzo/orgs",
            "repos_url": "https://api.github.com/users/infzo/repos",
            "events_url": "https://api.github.com/users/infzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/infzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T01:43:35Z",
        "updated_at": "2022-12-06T01:43:35Z",
        "author_association": "NONE",
        "body": "> After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:\r\n> \r\n> 1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then\r\n> 2. Call segmented min/max/sum on the list elements using list offsets.\r\n> \r\n> However, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.\r\n\r\n@ttnghia Yes, this is our current solution. Segmented min/max/sum is a requirement for the list method. For details, see Describe alternatives you've considered. The current cudf version does not have these operators.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338610392/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338613411",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338613411",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1338613411,
        "node_id": "IC_kwDOBWUGps5PyZ6j",
        "user": {
            "login": "infzo",
            "id": 43532055,
            "node_id": "MDQ6VXNlcjQzNTMyMDU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/43532055?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/infzo",
            "html_url": "https://github.com/infzo",
            "followers_url": "https://api.github.com/users/infzo/followers",
            "following_url": "https://api.github.com/users/infzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/infzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/infzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/infzo/subscriptions",
            "organizations_url": "https://api.github.com/users/infzo/orgs",
            "repos_url": "https://api.github.com/users/infzo/repos",
            "events_url": "https://api.github.com/users/infzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/infzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T01:48:58Z",
        "updated_at": "2022-12-06T01:48:58Z",
        "author_association": "NONE",
        "body": "> @infzo perhaps I'm misunderstanding, but can you not just do this?\r\n> \r\n> ```python\r\n> In [67]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})\r\n> \r\n> In [68]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})\r\n> \r\n> In [69]: cudf.concat([df1, df2]).groupby('a').agg({'b': 'max', 'c': 'nunique'})\r\n> Out[69]: \r\n>    b  c\r\n> a      \r\n> 1  1  1\r\n> 2  3  1\r\n> 3  5  1\r\n> ```\r\n\r\n@shwina A use case given above. In actual scenarios, more than one billion rows of data are queried in the table. As a result, the following problems occur:\r\n1. The GPU of a single machine cannot accommodate such a large amount of data, and the cuDF DataFrame has an upper limit on the number of rows.\r\n2. A large amount of data consumes a long time for network transmission, which reduces processing efficiency.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1338613411/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339282229",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339282229",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1339282229,
        "node_id": "IC_kwDOBWUGps5P09M1",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T12:57:28Z",
        "updated_at": "2022-12-06T13:01:57Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for the context, @infzo. I think I understand. How about doing it this way then?\r\n\r\nThe following happens on the local nodes:\r\n\r\n```python\r\nIn [79]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})\r\n\r\nIn [80]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})\r\n\r\nIn [81]: df1\r\nOut[81]: \r\n   a     b  c\r\n0  1     1  x\r\n1  1  <NA>  x\r\n2  2     3  z\r\n\r\nIn [82]: df2\r\nOut[82]: \r\n   a     b     c\r\n0  1     1     x\r\n1  3  <NA>     z\r\n2  3     5  <NA>\r\n\r\nIn [83]: df1_unique = df1.groupby('a', as_index=False).unique()\r\n\r\nIn [84]: df2_unique = df2.groupby('a', as_index=False).unique()\r\n```\r\n\r\nThe following happens on the merge node:\r\n\r\n```python\r\nIn [85]: df_merged = cudf.concat([df1_unique, df2_unique], ignore_index=True)\r\n\r\nIn [86]: b_max = df_merged[['a', 'b']].explode('b').groupby('a').max()\r\n\r\nIn [87]: c_nunique = df_merged[['a', 'c']].explode('c').groupby('a').nunique()\r\n\r\nIn [88]: result = cudf.concat([b_max, c_nunique], axis=1)\r\n\r\nIn [89]: result\r\nOut[89]: \r\n   b  c\r\na      \r\n1  1  1\r\n2  3  1\r\n3  5  1\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339282229/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339380849",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339380849",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1339380849,
        "node_id": "IC_kwDOBWUGps5P1VRx",
        "user": {
            "login": "mjshare",
            "id": 60972404,
            "node_id": "MDQ6VXNlcjYwOTcyNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/60972404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjshare",
            "html_url": "https://github.com/mjshare",
            "followers_url": "https://api.github.com/users/mjshare/followers",
            "following_url": "https://api.github.com/users/mjshare/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjshare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjshare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjshare/subscriptions",
            "organizations_url": "https://api.github.com/users/mjshare/orgs",
            "repos_url": "https://api.github.com/users/mjshare/repos",
            "events_url": "https://api.github.com/users/mjshare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjshare/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T13:20:52Z",
        "updated_at": "2022-12-06T13:20:52Z",
        "author_association": "NONE",
        "body": "> Thanks for the context, @infzo. I think I understand. How about doing it this way then?\r\n> \r\n> The following happens on the local nodes:\r\n> \r\n> ```python\r\n> In [79]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})\r\n> \r\n> In [80]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})\r\n> \r\n> In [81]: df1\r\n> Out[81]: \r\n>    a     b  c\r\n> 0  1     1  x\r\n> 1  1  <NA>  x\r\n> 2  2     3  z\r\n> \r\n> In [82]: df2\r\n> Out[82]: \r\n>    a     b     c\r\n> 0  1     1     x\r\n> 1  3  <NA>     z\r\n> 2  3     5  <NA>\r\n> \r\n> In [83]: df1_unique = df1.groupby('a', as_index=False).unique()\r\n> \r\n> In [84]: df2_unique = df2.groupby('a', as_index=False).unique()\r\n> ```\r\n> \r\n> The following happens on the merge node:\r\n> \r\n> ```python\r\n> In [85]: df_merged = cudf.concat([df1_unique, df2_unique], ignore_index=True)\r\n> \r\n> In [86]: b_max = df_merged[['a', 'b']].explode('b').groupby('a').max()\r\n> \r\n> In [87]: c_nunique = df_merged[['a', 'c']].explode('c').groupby('a').nunique()\r\n> \r\n> In [88]: result = cudf.concat([b_max, c_nunique], axis=1)\r\n> \r\n> In [89]: result\r\n> Out[89]: \r\n>    b  c\r\n> a      \r\n> 1  1  1\r\n> 2  3  1\r\n> 3  5  1\r\n> ```\r\n@shwina \r\nThis method may have a risk: If there are multi-column aggregation and multi-column groupby, explode expansion may cause insufficient GPU memory. Is there any solution to this problem?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339380849/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339429727",
        "html_url": "https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339429727",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12301",
        "id": 1339429727,
        "node_id": "IC_kwDOBWUGps5P1hNf",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-12-06T13:57:40Z",
        "updated_at": "2022-12-06T13:57:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "> If there are multi-column aggregation and multi-column groupby, explode expansion may cause insufficient GPU memory\r\n\r\nYou're right that the call to `explode()` does incur additional memory cost although that cost should be linear with the number of elements in the list column (`'b'` or `'c'` in this case).\r\n\r\nWhat I'm proposing here is a workaround that is compatible with the existing Pandas/cuDF API. Segmented reduction would be the appropriate solution to the problem, but those are not currently available via the Python API.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1339429727/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]