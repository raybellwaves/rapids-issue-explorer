[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2086306889",
        "html_url": "https://github.com/rapidsai/cudf/issues/15620#issuecomment-2086306889",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15620",
        "id": 2086306889,
        "node_id": "IC_kwDOBWUGps58WoRJ",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-30T18:01:01Z",
        "updated_at": "2024-04-30T18:01:01Z",
        "author_association": "CONTRIBUTOR",
        "body": "Are there any ways in which CCCL's `cuda::memcpy_async` could help us here? https://nvidia.github.io/cccl/libcudacxx/extended_api/asynchronous_operations/memcpy_async.html\r\n\r\nI'm not super familiar with the facilities libcudacxx provides for this, but perhaps this could be in scope.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2086306889/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2086667470",
        "html_url": "https://github.com/rapidsai/cudf/issues/15620#issuecomment-2086667470",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15620",
        "id": 2086667470,
        "node_id": "IC_kwDOBWUGps58YATO",
        "user": {
            "login": "abellina",
            "id": 1901059,
            "node_id": "MDQ6VXNlcjE5MDEwNTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abellina",
            "html_url": "https://github.com/abellina",
            "followers_url": "https://api.github.com/users/abellina/followers",
            "following_url": "https://api.github.com/users/abellina/following{/other_user}",
            "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
            "organizations_url": "https://api.github.com/users/abellina/orgs",
            "repos_url": "https://api.github.com/users/abellina/repos",
            "events_url": "https://api.github.com/users/abellina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abellina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-30T19:07:47Z",
        "updated_at": "2024-04-30T19:07:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "@bdice I am not familiar with it either. A quick code search is yielding that `cuda::memcpy_async` handles D2D copies (shared, global). I suppose we could refer to pinned memory as another \"device\" memory type, so in that case I see some relation, but the main thing is code we use to orchestrate copies should likely fallback to `cudaMemcpyAsync`: if pinned memory isn't available to bounce the copy through, or if it's disabled. I believe single threaded applications (single stream) may want to use `cudaMemcpyAsync` as is, because there shouldn't be much contention on the CE in those cases.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2086667470/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2087236600",
        "html_url": "https://github.com/rapidsai/cudf/issues/15620#issuecomment-2087236600",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15620",
        "id": 2087236600,
        "node_id": "IC_kwDOBWUGps58aLP4",
        "user": {
            "login": "jrhemstad",
            "id": 15221289,
            "node_id": "MDQ6VXNlcjE1MjIxMjg5",
            "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrhemstad",
            "html_url": "https://github.com/jrhemstad",
            "followers_url": "https://api.github.com/users/jrhemstad/followers",
            "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
            "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
            "repos_url": "https://api.github.com/users/jrhemstad/repos",
            "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-30T20:49:54Z",
        "updated_at": "2024-04-30T20:49:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "I suspect many of the small copies in `cuDF` come from `rmm::device_scalar`. We could just update the implementation to use a kernel instead of `cudaMemcpy*`. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2087236600/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2093562167",
        "html_url": "https://github.com/rapidsai/cudf/issues/15620#issuecomment-2093562167",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15620",
        "id": 2093562167,
        "node_id": "IC_kwDOBWUGps58yTk3",
        "user": {
            "login": "vuule",
            "id": 16005690,
            "node_id": "MDQ6VXNlcjE2MDA1Njkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/16005690?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vuule",
            "html_url": "https://github.com/vuule",
            "followers_url": "https://api.github.com/users/vuule/followers",
            "following_url": "https://api.github.com/users/vuule/following{/other_user}",
            "gists_url": "https://api.github.com/users/vuule/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vuule/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vuule/subscriptions",
            "organizations_url": "https://api.github.com/users/vuule/orgs",
            "repos_url": "https://api.github.com/users/vuule/repos",
            "events_url": "https://api.github.com/users/vuule/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vuule/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-03T18:40:50Z",
        "updated_at": "2024-05-03T18:40:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I suspect many of the small copies in `cuDF` come from `rmm::device_scalar`. We could just update the implementation to use a kernel instead of `cudaMemcpy*`.\r\n\r\nAFAIK we also need to get `device_scalar` to use pinned memory. Which implies that we'd also need to pass a host memory resource at to enable the use of a pinned pool.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2093562167/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]