[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1494790921",
        "html_url": "https://github.com/rapidsai/cudf/issues/13045#issuecomment-1494790921",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13045",
        "id": 1494790921,
        "node_id": "IC_kwDOBWUGps5ZGLMJ",
        "user": {
            "login": "galipremsagar",
            "id": 11664259,
            "node_id": "MDQ6VXNlcjExNjY0MjU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/11664259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/galipremsagar",
            "html_url": "https://github.com/galipremsagar",
            "followers_url": "https://api.github.com/users/galipremsagar/followers",
            "following_url": "https://api.github.com/users/galipremsagar/following{/other_user}",
            "gists_url": "https://api.github.com/users/galipremsagar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/galipremsagar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/galipremsagar/subscriptions",
            "organizations_url": "https://api.github.com/users/galipremsagar/orgs",
            "repos_url": "https://api.github.com/users/galipremsagar/repos",
            "events_url": "https://api.github.com/users/galipremsagar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/galipremsagar/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-03T18:32:45Z",
        "updated_at": "2023-04-03T18:34:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "We currently raise an error for our `DataFrame.__array__` implementation, should we be doing the same for `__array_function__` too? or give this an exception to have an implementation on our end?  cc: @shwina ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1494790921/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1496582027",
        "html_url": "https://github.com/rapidsai/cudf/issues/13045#issuecomment-1496582027",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13045",
        "id": 1496582027,
        "node_id": "IC_kwDOBWUGps5ZNAeL",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-04T20:43:58Z",
        "updated_at": "2023-04-04T20:43:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "A similar question too for `__array_ufunc__`\r\n\r\n```\r\nIn [3]: cudf.DataFrame(np.eye(2)) * np.eye(2)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[3], line 1\r\n----> 1 cudf.DataFrame(np.eye(2)) * np.eye(2)\r\n\r\nTypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'multiply'>, '__call__',      0    1\r\n0  1.0  0.0\r\n1  0.0  1.0, array([[1., 0.],\r\n       [0., 1.]])): 'DataFrame', 'ndarray'\r\n\r\nIn [4]: import pandas as pd\r\n\r\nIn [5]: pd.DataFrame(np.eye(2)) * np.eye(2)\r\nOut[5]: \r\n     0    1\r\n0  1.0  0.0\r\n1  0.0  1.0\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1496582027/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1500736672",
        "html_url": "https://github.com/rapidsai/cudf/issues/13045#issuecomment-1500736672",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13045",
        "id": 1500736672,
        "node_id": "IC_kwDOBWUGps5Zc2yg",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-08T00:14:42Z",
        "updated_at": "2023-04-08T00:14:42Z",
        "author_association": "CONTRIBUTOR",
        "body": "No, we should not raise by default. However, we probably want a smarter dispatch pattern here.\r\n\r\nThe problem with `__array__` is that it provides an implicit conversion pathway from device data to host data. That means that a cudf object could be passed to some other library that accesses this attribute and triggers an implicit conversion to host memory. That's an easy performance footgun to eliminate.\r\n\r\n`__array_ufunc__` and `__array_function__` are different since they are dispatch pathways for functions. If possible, we should support them. ufuncs are easier since they are [enumerated by numpy](https://numpy.org/doc/stable/reference/ufuncs.html#available-ufuncs). The set of functions supported by the [`__array_function__` protocol](https://numpy.org/doc/stable/reference/arrays.classes.html#numpy.class.__array_function__), on the other hand, is not. Ideally, our implementation is designed to try to run the function in a way that we know, and fail if no such way is found, and that is what we want.\r\n\r\nThe two errors above indicate to me that we may want to clean up our failure pathways, though. I'm not sure what errors look like for a given object that is supposed to support these protocols if they don't support a particular ufunc/array func, but we should endeavor to match that. The easiest way to test is probably to define a trivial array-like object with those attribute and see what the expected traceback is. Alternatively the specs for those protocols should indicate exactly what should be done. We may be returning `NotImplemented` somewhere that we should be doing something else, or accessing `__array_ufunc__` directly without the necessary error checking that numpy does internally when it accesses that attribute.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1500736672/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]