[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834025865",
        "html_url": "https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834025865",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14521",
        "id": 1834025865,
        "node_id": "IC_kwDOBWUGps5tUQOJ",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T15:42:19Z",
        "updated_at": "2023-11-30T15:42:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "Plausibly, at the cost of making the `to_arrow` functions in cudf aware of things, we could do this by unwrapping the wrapped result of `to_arrow().to_pandas()` (replacing it with `to_arrow().to_pandas()._fsproxy_slow`).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834025865/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834049803",
        "html_url": "https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834049803",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14521",
        "id": 1834049803,
        "node_id": "IC_kwDOBWUGps5tUWEL",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T15:55:39Z",
        "updated_at": "2023-11-30T15:55:39Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Plausibly, at the cost of making the to_arrow functions in cudf aware of things\r\n\r\nIf this means making `cudf` aware of `cudf.pandas` proxy types, I'm strongly -1 to this. I'd really like to keep the separation of concerns here.\r\n\r\n> Rather than letting module attribute lookup be context dependent, always deliver wrapped types such that the constructor context-dependently decides whether or not to deliver a real or wrapped type.\r\n\r\nThis would likely break a bunch of things, but specifically it would break the following:\r\n\r\n```python\r\n# somewhere inside pandas code:\r\nisinstance(df, pd.DataFrame)  # returns false\r\n```\r\n\r\n---\r\n\r\n> Something else?\r\n\r\nMaybe https://github.com/apache/arrow/issues/38325?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834049803/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834074612",
        "html_url": "https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834074612",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14521",
        "id": 1834074612,
        "node_id": "IC_kwDOBWUGps5tUcH0",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T16:09:25Z",
        "updated_at": "2023-11-30T16:09:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "> > Plausibly, at the cost of making the to_arrow functions in cudf aware of things\r\n> \r\n> If this means making `cudf` aware of `cudf.pandas` proxy types, I'm strongly -1 to this. I'd really like to keep the separation of concerns here.\r\n\r\nYeah, I don't want that either.\r\n\r\n> > Rather than letting module attribute lookup be context dependent, always deliver wrapped types such that the constructor context-dependently decides whether or not to deliver a real or wrapped type.\r\n> \r\n> This would likely break a bunch of things, but specifically it would break the following:\r\n> \r\n> ```python\r\n> # somewhere inside pandas code:\r\n> isinstance(df, pd.DataFrame)  # returns false\r\n> ```\r\n\r\nYou could dodge that bullet by continuing to _also_ maintain the module getattr handling, perhaps allowlisted inside the pandas codebase, I _think_.\r\n\r\n> > Something else?\r\n> \r\n> Maybe [apache/arrow#38325](https://github.com/apache/arrow/issues/38325)?\r\n\r\nDoes that help? That seems to be an interface for objects consuming arrow-like things and delivering \"something\". I guess that if, as a result, rather than doing `arrow_table.to_pandas()` we instead do `pandas.from_arrow(arrow_table)` (like `cudf.from_arrow`) then we're in business because we can just call `pandas.from_arrow(...)` inside cudf, and that also becomes the blessed way to get from arrow to pandas _externally_. Then we need no change because our existing denylisting on module attribute lookup would do the right thing.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834074612/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834093116",
        "html_url": "https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834093116",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14521",
        "id": 1834093116,
        "node_id": "IC_kwDOBWUGps5tUgo8",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-30T16:18:51Z",
        "updated_at": "2023-11-30T16:18:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "> You could dodge that bullet by continuing to also maintain the module getattr handling, perhaps allowlisted inside the pandas codebase, I think.\r\n\r\nYeah that might do it...",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1834093116/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1843045989",
        "html_url": "https://github.com/rapidsai/cudf/issues/14521#issuecomment-1843045989",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/14521",
        "id": 1843045989,
        "node_id": "IC_kwDOBWUGps5t2qZl",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-06T14:50:45Z",
        "updated_at": "2023-12-06T14:51:04Z",
        "author_association": "MEMBER",
        "body": "While discussing some current dask + cudf.pandas problems with @shwina, he pointed me to this issue. Thanks for pushing on this!\r\n\r\nUnfortunately, I cannot suggest any new ideas here, but I do want to add a bit more Dask-related motivation:\r\n\r\nBoth `dask.dataframe` and `dask_expr` are currently using `pa.Table.to_pandas()` in several critical places. The most important places are `read_parquet` and \u201cp2p\u201d shuffling. This essentially means that `cudf.pandas` will run into problems for any Parquet based Dask workflow. It also means that any \u201cp2p\u201d-based shuffle (used by default for sorting and merging when a distributed client is active) will produce \u201creal\u201d pd.DataFrame objects.\r\n\r\nI know that Ashwin is already aware of these problems, but I wanted to make sure others had the same context.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1843045989/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]