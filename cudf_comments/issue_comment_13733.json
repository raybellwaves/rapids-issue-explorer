[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1727560137",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-1727560137",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 1727560137,
        "node_id": "IC_kwDOBWUGps5m-HnJ",
        "user": {
            "login": "harrism",
            "id": 783069,
            "node_id": "MDQ6VXNlcjc4MzA2OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/783069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/harrism",
            "html_url": "https://github.com/harrism",
            "followers_url": "https://api.github.com/users/harrism/followers",
            "following_url": "https://api.github.com/users/harrism/following{/other_user}",
            "gists_url": "https://api.github.com/users/harrism/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/harrism/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/harrism/subscriptions",
            "organizations_url": "https://api.github.com/users/harrism/orgs",
            "repos_url": "https://api.github.com/users/harrism/repos",
            "events_url": "https://api.github.com/users/harrism/events{/privacy}",
            "received_events_url": "https://api.github.com/users/harrism/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-09-20T11:43:15Z",
        "updated_at": "2023-09-20T11:44:12Z",
        "author_association": "MEMBER",
        "body": "**\ud83d\udc4f praise:** \u200f Great descriptive issue!\r\n**\ud83d\udca1 suggestion:** \u200f I think the table in the description could be a GH task list so each \"step\" can be made into an issue.\r\n**\u2753 question:** \u200f \r\n> \"large strings column\": int64 character data and int64 offset data\r\n\r\nint64 data with int64 offsets sounds larger than:\r\n\r\n> \"unbounded strings column\": int8 character data up to 2^64 bytes and int64 offset data\r\n\r\nAnd this sounds bounded, but large. Not boundless.\r\n\r\nCan you clarify or give an example of the structure?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1727560137/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1743420700",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-1743420700",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 1743420700,
        "node_id": "IC_kwDOBWUGps5n6n0c",
        "user": {
            "login": "gaohao95",
            "id": 21973464,
            "node_id": "MDQ6VXNlcjIxOTczNDY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/21973464?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaohao95",
            "html_url": "https://github.com/gaohao95",
            "followers_url": "https://api.github.com/users/gaohao95/followers",
            "following_url": "https://api.github.com/users/gaohao95/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaohao95/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaohao95/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaohao95/subscriptions",
            "organizations_url": "https://api.github.com/users/gaohao95/orgs",
            "repos_url": "https://api.github.com/users/gaohao95/repos",
            "events_url": "https://api.github.com/users/gaohao95/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaohao95/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-02T17:06:09Z",
        "updated_at": "2023-10-02T17:06:09Z",
        "author_association": "CONTRIBUTOR",
        "body": "This feature would be a great help for us. We use `cudf::table` as a CPU-memory storage to enable zero-copy. In theory, CPU memory has more capacity to hold larger tables, but we constantly run into the character limits.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1743420700/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1744557487",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-1744557487",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 1744557487,
        "node_id": "IC_kwDOBWUGps5n-9Wv",
        "user": {
            "login": "LutzCle",
            "id": 14541978,
            "node_id": "MDQ6VXNlcjE0NTQxOTc4",
            "avatar_url": "https://avatars.githubusercontent.com/u/14541978?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LutzCle",
            "html_url": "https://github.com/LutzCle",
            "followers_url": "https://api.github.com/users/LutzCle/followers",
            "following_url": "https://api.github.com/users/LutzCle/following{/other_user}",
            "gists_url": "https://api.github.com/users/LutzCle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LutzCle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LutzCle/subscriptions",
            "organizations_url": "https://api.github.com/users/LutzCle/orgs",
            "repos_url": "https://api.github.com/users/LutzCle/repos",
            "events_url": "https://api.github.com/users/LutzCle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LutzCle/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-03T09:12:50Z",
        "updated_at": "2023-10-03T09:12:50Z",
        "author_association": "NONE",
        "body": "Following up on @gaohao95's comment, our use case is storing TPC-H data in a `cudf::table`. At scale factor 100, the `l_comment` and `ps_comment` string columns overflow the 32-bit offset.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1744557487/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2060290747",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2060290747",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2060290747,
        "node_id": "IC_kwDOBWUGps56zYq7",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-17T03:45:41Z",
        "updated_at": "2024-04-17T03:46:29Z",
        "author_association": "CONTRIBUTOR",
        "body": "Now that #15195 is merged, I did some testing via cuDF-python\r\n```\r\n>>> df2['char'].str.slice(0,2)  \r\nOK\r\n\r\n>>> df2['char'].str.contains(0,2)  \r\nOK\r\n\r\n>>> df2['char'].str.contains('p', regex=True)\r\nOK\r\n\r\n>>> df2['char'].nunique()\r\n57\r\n\r\n# add a column, df2['c'] = 1\r\n>>> df2.groupby('char').sum()['c'].reset_index()\r\nOK\r\n\r\n>>> df2['char'] + 'b'\r\nOverflowError: CUDF failure at: /nfs/repo/cudf24.06/cpp/include/cudf/strings/\r\ndetail/strings_children.cuh:82: Size of output exceeds the column size limit\r\n\r\n>>> df2['char'].str.upper()\r\nRuntimeError: THRUST_INDEX_TYPE_DISPATCH 64-bit count is unsupported in libcudf\r\n```\r\n\r\nSo far so good! Many APIs can successfully consume large strings, and only concat can produce them for now. \ud83c\udf89 ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2060290747/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2079656314",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2079656314",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2079656314,
        "node_id": "IC_kwDOBWUGps579Ql6",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-26T15:51:01Z",
        "updated_at": "2024-04-26T15:57:18Z",
        "author_association": "MEMBER",
        "body": "This is incredibly exciting! More than any individual string operation, one of the most common pain points I see in workflows is the inability to bring strings along as a payload during joins (now that concat works):\r\n\r\n```python\r\n%env LIBCUDF_LARGE_STRINGS_ENABLED=1\r\n\r\nimport cudf\r\nimport numpy as np\r\n\r\nN = 6000\r\n\r\ndf1 = cudf.DataFrame({\r\n    \"val\": [\"this is a fairly short string\", \"this one is a bit longer, but not much\"]*N,\r\n    \"key\": [0, 1]*N\r\n})\r\n\r\nres = df1.merge(df1, on=\"key\")\r\nprint(f\"{res.val_x.str.len().sum():,} characters in string column\")\r\n---------------------------------------------------------------------------\r\nOverflowError                             Traceback (most recent call last)\r\nCell In[11], line 13\r\n      6 N = 6000\r\n      8 df1 = cudf.DataFrame({\r\n      9     \"val\": [\"this is a fairly short string\", \"this one is a bit longer, but not much\"]*N,\r\n     10     \"key\": [0, 1]*N\r\n     11 })\r\n---> 13 res = df1.merge(df1, on=\"key\")\r\n     14 print(f\"{res.val_x.str.len().sum():,} characters in string column\")\r\n\r\nFile [/nvme/0/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116]\r\n...\r\nFile copying.pyx:151, in cudf._lib.copying.gather()\r\n\r\nFile copying.pyx:34, in cudf._lib.pylibcudf.copying.gather()\r\n\r\nFile copying.pyx:66, in cudf._lib.pylibcudf.copying.gather()\r\n\r\nOverflowError: CUDF failure at: /opt/conda/conda-bld/work/cpp/include/cudf/detail/sizes_to_offsets_iterator.cuh:323: Size of output exceeds the column size limit\r\n```\r\n\r\nIf I only have numeric data, this works smoothly as the output dataframe is only 72M rows.\r\n\r\n```python\r\n%env LIBCUDF_LARGE_STRINGS_ENABLED=1\r\n\r\nimport cudf\r\nimport numpy as np\r\n\r\nN = 6000\r\n\r\ndf1 = cudf.DataFrame({\r\n    \"val\": [10, 100]*N,\r\n    \"key\": [0, 1]*N\r\n})\r\n\r\nres = df1.merge(df1, on=\"key\")\r\nprint(f\"{len(res):,} rows in dataframe\")\r\n72,000,000 rows in dataframe\r\n```\r\n\r\nI'd love to be able to complete this (contrived) example, because I think it's representative of something we see often: this limit causing failures in workflows where users _expect_ things to work smoothly.\r\n\r\nAs a reference, the self-join works with `N=5000` as it only ends up with 1.7B total characters.\r\n\r\n```python\r\n%env LIBCUDF_LARGE_STRINGS_ENABLED=1\r\n\r\nimport cudf\r\nimport numpy as np\r\n\r\nN = 5000\r\n\r\ndf1 = cudf.DataFrame({\r\n    \"val\": [\"this is a fairly short string\", \"this one is a bit longer, but not much\"]*N,\r\n    \"key\": [0, 1]*N\r\n})\r\n\r\nres = df1.merge(df1, on=\"key\")\r\nprint(f\"{res.val_x.str.len().sum():,} characters in string column\")\r\nenv: LIBCUDF_LARGE_STRINGS_ENABLED=1\r\n1,675,000,000 characters in string column\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2079656314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2101596054",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2101596054",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2101596054,
        "node_id": "IC_kwDOBWUGps59Q8-W",
        "user": {
            "login": "davidwendt",
            "id": 45795991,
            "node_id": "MDQ6VXNlcjQ1Nzk1OTkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/45795991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidwendt",
            "html_url": "https://github.com/davidwendt",
            "followers_url": "https://api.github.com/users/davidwendt/followers",
            "following_url": "https://api.github.com/users/davidwendt/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidwendt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidwendt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidwendt/subscriptions",
            "organizations_url": "https://api.github.com/users/davidwendt/orgs",
            "repos_url": "https://api.github.com/users/davidwendt/repos",
            "events_url": "https://api.github.com/users/davidwendt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidwendt/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-08T22:19:43Z",
        "updated_at": "2024-05-08T22:19:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "The issue described here https://github.com/rapidsai/cudf/issues/13733#issuecomment-2079656314 should be fixed with https://github.com/rapidsai/cudf/pull/15621",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2101596054/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2142054132",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2142054132",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2142054132,
        "node_id": "IC_kwDOBWUGps5_rSb0",
        "user": {
            "login": "davidwendt",
            "id": 45795991,
            "node_id": "MDQ6VXNlcjQ1Nzk1OTkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/45795991?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/davidwendt",
            "html_url": "https://github.com/davidwendt",
            "followers_url": "https://api.github.com/users/davidwendt/followers",
            "following_url": "https://api.github.com/users/davidwendt/following{/other_user}",
            "gists_url": "https://api.github.com/users/davidwendt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/davidwendt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/davidwendt/subscriptions",
            "organizations_url": "https://api.github.com/users/davidwendt/orgs",
            "repos_url": "https://api.github.com/users/davidwendt/repos",
            "events_url": "https://api.github.com/users/davidwendt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/davidwendt/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-31T12:50:31Z",
        "updated_at": "2024-05-31T12:50:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "And now the issue described here https://github.com/rapidsai/cudf/issues/13733#issuecomment-2060290747 should be fixed with #15721 ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2142054132/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2148404497",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2148404497",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2148404497,
        "node_id": "IC_kwDOBWUGps6ADg0R",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-04T20:57:28Z",
        "updated_at": "2024-06-05T03:53:36Z",
        "author_association": "MEMBER",
        "body": "> CSV | \u00a0 | This uses factories that are already enabled. Still needs testing.\r\n> -- | -- | --\r\n\r\nGave this a quick spin -- the CSV reader itself works but we fail ~if we need to copy a libcudf column/table from device to host (e.g., if we call `.head()`~ if we need to go down the `to_pandas` codepath for device-to-host copies.\r\n\r\nSo I'd say:\r\n- CSV reader appears to work\r\n- `to_pandas` device-to-host transfer fails (will file an issue), while `to_arrow` works (which makes sense given \"part 3\" above)\r\n\r\n```python\r\n%env LIBCUDF_LARGE_STRINGS_ENABLED=1\r\n\r\nimport cudf\r\n\r\nN = int(5e7)\r\n\r\ndf = cudf.DataFrame({\r\n    \"val\": [\"this is a short string\", \"this one is a bit longer, but not much\"]*N,\r\n    \"key\": [0, 1]*N\r\n})\r\ndf.to_csv(\"large_string_df.csv\", chunksize=1000000, index=False)\r\ndel df\r\n```\r\n\r\n```python\r\ndf = cudf.read_csv(\"large_string_df.csv\")\r\nprint(len(df))\r\nprint(df.iloc[0])\r\n100000000\r\n                      val  key\r\n0  this is a short string    0\r\n```\r\n\r\n```python\r\ndf.head()\r\n---------------------------------------------------------------------------\r\nArrowException                            Traceback (most recent call last)\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/core/formatters.py:711](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/core/formatters.py#line=710), in PlainTextFormatter.__call__(self, obj)\r\n    704 stream = StringIO()\r\n    705 printer = pretty.RepresentationPrinter(stream, self.verbose,\r\n    706     self.max_width, self.newline,\r\n    707     max_seq_length=self.max_seq_length,\r\n    708     singleton_pprinters=self.singleton_printers,\r\n    709     type_pprinters=self.type_printers,\r\n    710     deferred_pprinters=self.deferred_printers)\r\n--> 711 printer.pretty(obj)\r\n    712 printer.flush()\r\n    713 return stream.getvalue()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py:411](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py#line=410), in RepresentationPrinter.pretty(self, obj)\r\n    408                         return meth(obj, self, cycle)\r\n    409                 if cls is not object \\\r\n    410                         and callable(cls.__dict__.get('__repr__')):\r\n--> 411                     return _repr_pprint(obj, self, cycle)\r\n    413     return _default_pprint(obj, self, cycle)\r\n    414 finally:\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py:779](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py#line=778), in _repr_pprint(obj, p, cycle)\r\n    777 \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\r\n    778 # Find newlines and replace them with p.break_()\r\n--> 779 output = repr(obj)\r\n    780 lines = output.splitlines()\r\n    781 with p.group():\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py#line=115), in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n    113 @wraps(func)\r\n    114 def inner(*args, **kwargs):\r\n    115     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 116     result = func(*args, **kwargs)\r\n    117     libnvtx_pop_range(self.domain.handle)\r\n    118     return result\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:1973](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=1972), in DataFrame.__repr__(self)\r\n   1970 @_cudf_nvtx_annotate\r\n   1971 def __repr__(self):\r\n   1972     output = self._get_renderable_dataframe()\r\n-> 1973     return self._clean_renderable_dataframe(output)\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:1835](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=1834), in DataFrame._clean_renderable_dataframe(self, output)\r\n   1832 else:\r\n   1833     width = None\r\n-> 1835 output = output.to_pandas().to_string(\r\n   1836     max_rows=max_rows,\r\n   1837     min_rows=min_rows,\r\n   1838     max_cols=max_cols,\r\n   1839     line_width=width,\r\n   1840     max_colwidth=max_colwidth,\r\n   1841     show_dimensions=show_dimensions,\r\n   1842 )\r\n   1844 lines = output.split(\"\\n\")\r\n   1846 if lines[-1].startswith(\"[\"):\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py#line=115), in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n    113 @wraps(func)\r\n    114 def inner(*args, **kwargs):\r\n    115     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 116     result = func(*args, **kwargs)\r\n    117     libnvtx_pop_range(self.domain.handle)\r\n    118     return result\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:5324](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=5323), in DataFrame.to_pandas(self, nullable, arrow_type)\r\n   5249 \"\"\"\r\n   5250 Convert to a Pandas DataFrame.\r\n   5251 \r\n   (...)\r\n   5321 dtype: object\r\n   5322 \"\"\"\r\n   5323 out_index = self.index.to_pandas()\r\n-> 5324 out_data = {\r\n   5325     i: col.to_pandas(\r\n   5326         index=out_index, nullable=nullable, arrow_type=arrow_type\r\n   5327     )\r\n   5328     for i, col in enumerate(self._data.columns)\r\n   5329 }\r\n   5331 out_df = pd.DataFrame(out_data, index=out_index)\r\n   5332 out_df.columns = self._data.to_pandas_index()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:5325](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=5324), in <dictcomp>(.0)\r\n   5249 \"\"\"\r\n   5250 Convert to a Pandas DataFrame.\r\n   5251 \r\n   (...)\r\n   5321 dtype: object\r\n   5322 \"\"\"\r\n   5323 out_index = self.index.to_pandas()\r\n   5324 out_data = {\r\n-> 5325     i: col.to_pandas(\r\n   5326         index=out_index, nullable=nullable, arrow_type=arrow_type\r\n   5327     )\r\n   5328     for i, col in enumerate(self._data.columns)\r\n   5329 }\r\n   5331 out_df = pd.DataFrame(out_data, index=out_index)\r\n   5332 out_df.columns = self._data.to_pandas_index()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/string.py:5802](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/string.py#line=5801), in StringColumn.to_pandas(self, index, nullable, arrow_type)\r\n   5800     return pd.Series(pandas_array, copy=False, index=index)\r\n   5801 else:\r\n-> 5802     return super().to_pandas(index=index, nullable=nullable)\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/column.py:215](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/column.py#line=214), in ColumnBase.to_pandas(self, index, nullable, arrow_type)\r\n    211     return pd.Series(\r\n    212         pd.arrays.ArrowExtensionArray(pa_array), index=index\r\n    213     )\r\n    214 else:\r\n--> 215     pd_series = pa_array.to_pandas()\r\n    217     if index is not None:\r\n    218         pd_series.index = index\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:872](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=871), in pyarrow.lib._PandasConvertible.to_pandas()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:1517](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=1516), in pyarrow.lib.Array._to_pandas()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:1916](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=1915), in pyarrow.lib._array_like_to_pandas()\r\n\r\nFile [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/error.pxi:91](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/error.pxi#line=90), in pyarrow.lib.check_status()\r\n\r\nArrowException: Unknown error: Wrapping\r\n```\r\n\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2148404497/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2150827149",
        "html_url": "https://github.com/rapidsai/cudf/issues/13733#issuecomment-2150827149",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/13733",
        "id": 2150827149,
        "node_id": "IC_kwDOBWUGps6AMwSN",
        "user": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-05T19:43:00Z",
        "updated_at": "2024-06-06T13:03:02Z",
        "author_association": "MEMBER",
        "body": "From a local run of our Python test suite with large strings enabled, it seems like:\r\n- Enabling this doesn't break things when we've got < 2.1B characters\r\n- We don't test scenarios with >= 2.1B characters except when we intentionally trigger and catch a large string OverflowError (which we correctly _fail_ with this turned on), so passing doesn't give a strong signal about readiness \r\n\r\n@GregoryKimball @vyasr @davidwendt , what do you think is the right balance of exhaustiveness vs. practicality? I don't think we want to add a large string scenario to every Python unit test.. \r\n\r\n(Running the test suite with large strings enabled in https://github.com/rapidsai/cudf/pull/15932 so folks can review more easily)",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2150827149/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]