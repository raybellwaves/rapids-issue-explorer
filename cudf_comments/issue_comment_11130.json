[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1162531798",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1162531798",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1162531798,
        "node_id": "IC_kwDOBWUGps5FStPW",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T01:48:47Z",
        "updated_at": "2022-06-22T01:48:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "FWIW, there is a \"Pandas compatible\" way to do this today: https://github.com/rapidsai/cudf/issues/10967#issuecomment-1138590222. But I'd agree that a more explicit API would be desirable.\r\n\r\nI wouldn't have any objections to adding an `.offsets` accessor, other than I suppose it leaks some implementation detail (insofar as cuDF following the Arrow format is an \"implementation detail\").\r\n\r\nMy 2c here is that the ideal way to do this would be to zero copy to something like a GPU accelerated Awkward Array and back. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1162531798/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1162538893",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1162538893",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1162538893,
        "node_id": "IC_kwDOBWUGps5FSu-N",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T02:03:32Z",
        "updated_at": "2022-06-22T02:03:32Z",
        "author_association": "CONTRIBUTOR",
        "body": "@shwina That's very helpful, I did not consider `explode()`/`agg(list)`. To simplify and match this example:\r\n```python\r\ndef list_add(s1, s2):\r\n    return (s1.explode() - s2.explode()).groupby(level=0).agg(list)\r\n```\r\nI'm guessing that `explode()` returns a copy, unlike `Series.list.leaves`, and that `groupby(level=0).agg(list)` is nontrivial to compute compared to a constructor from offsets and values. Perhaps there would be good reasons for performance and flexibility to expose the offset accessor / list constructor primitives.\r\n\r\nAs to whether offsets are an implementation detail -- I considered this as well. My view is that offsets are helpful to expose and doing so does not make stronger promises about our data model than what we already make in other ways ([offsets are already exposed in the libcudf API](https://docs.rapids.ai/api/libcudf/nightly/classcudf_1_1lists__column__view.html#a3d738360310aad73666f1e3de3b7e50e), and cuDF has a stated aim to be Arrow-conformant to a large extent).\r\n\r\nI definitely agree that the ability to do this computation in a zero-copy way and compatibility with GPU Awkward Arrays would be desirable. Exposing the raw offsets and a way to rebuild a list from them seems like a good step in both of those directions.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1162538893/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163180300",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163180300",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163180300,
        "node_id": "IC_kwDOBWUGps5FVLkM",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T14:32:11Z",
        "updated_at": "2022-06-22T14:32:11Z",
        "author_association": "CONTRIBUTOR",
        "body": "> It's not clear to me where the name \"leaves\" came from. To align with PyArrow, we would rename \"leaves\" to Series.list.values.\r\n\r\nNote  that  `values` are distinct from `leaves`:\r\n\r\nThe `values` of a list array is what you get by removing \"one level of nesting\" from the array:\r\n\r\n```python\r\n>>> pa.array([[[[1, 2]]]]).values\r\n<pyarrow.lib.ListArray object at 0x7fe4de05df40>\r\n[\r\n  [\r\n    [\r\n      1,\r\n      2\r\n    ]\r\n  ]\r\n]\r\n```\r\n\r\nWhereas what we call `leaves` is what you get from removing _all_ levels of nesting:\r\n\r\n```python\r\nIn [7]: cudf.Series([[[[1, 2]]]]).list.leaves\r\nOut[7]:\r\n0    1\r\n1    2\r\ndtype: int64\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163180300/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163240656",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163240656",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163240656,
        "node_id": "IC_kwDOBWUGps5FVaTQ",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T15:14:20Z",
        "updated_at": "2022-06-22T15:14:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "@shwina Interesting. Would you consider exposing both `list.values` and `list.leaves`? It seems important to have a way to un-nest one level at a time (like with `list.offsets`).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163240656/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163269315",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163269315",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163269315,
        "node_id": "IC_kwDOBWUGps5FVhTD",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T15:33:48Z",
        "updated_at": "2022-06-22T15:34:07Z",
        "author_association": "CONTRIBUTOR",
        "body": ">  Would you consider exposing both list.values and list.leaves? It seems important to have a way to un-nest one level at a time (like with list.offsets).\r\n\r\nAgain, while I'm not _opposed_ to exposing these, I'm much more in favor of higher-level APIs that allow the user not to worry about how lists are actually implemented. For example, if we want to enable binary/unary ops involving list columns, perhaps a better API is something like `eval`?\r\n\r\n```python\r\ndf.list.eval(\"a + b * sin(c)\"`\r\n```\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163269315/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163292017",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163292017",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163292017,
        "node_id": "IC_kwDOBWUGps5FVm1x",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T15:51:30Z",
        "updated_at": "2022-06-22T15:55:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "I would expect eval\u2019s behavior with + to match the + operator\u2019s behavior, but we stated in a previous conversation (last week\u2019s standup, I think?) that we explicitly do not want to overload operators where array-like operator semantics could conflict with Python list operator semantics (concatenation vs. elementwise addition). I am opposed to making eval act elementwise on lists \u2014 I expect an error there. An explicit function like `array_add` makes it more clear how the lists are being interpreted.\r\n\r\nIn any case, I think the right move is to add offsets/values accessors for alignment with libcudf and PyArrow, and debate/implement the action of array-like operators separately.\r\n\r\nI think it is important to be able to construct lists from GPU resident arrays, but that may not be possible without relying on the implementation of offsets/values.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163292017/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163295984",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163295984",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163295984,
        "node_id": "IC_kwDOBWUGps5FVnzw",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T15:54:48Z",
        "updated_at": "2022-06-22T15:54:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "Right, which is why I'm suggesting a distinct `DataFrame.list.eval` API (note the namespace).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163295984/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163306549",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163306549",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163306549,
        "node_id": "IC_kwDOBWUGps5FVqY1",
        "user": {
            "login": "bdice",
            "id": 3943761,
            "node_id": "MDQ6VXNlcjM5NDM3NjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bdice",
            "html_url": "https://github.com/bdice",
            "followers_url": "https://api.github.com/users/bdice/followers",
            "following_url": "https://api.github.com/users/bdice/following{/other_user}",
            "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
            "organizations_url": "https://api.github.com/users/bdice/orgs",
            "repos_url": "https://api.github.com/users/bdice/repos",
            "events_url": "https://api.github.com/users/bdice/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bdice/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T16:03:05Z",
        "updated_at": "2022-06-22T16:06:02Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Right, which is why I'm suggesting a distinct `DataFrame.list.eval` API (note the namespace).\r\n\r\nI missed that namespace, thanks for the pointer. I have a lot of questions about how this would act and I don\u2019t think the answers are obvious. AST limitations could be harshly constraining here and no broadcasting would be possible. It also introduces an undesirable asymmetry between operators and eval, and is beyond the API scope of both Pandas and Arrow\u2026 but so is `array_add`. Let\u2019s table this for a separate discussion. @GregoryKimball might have insight on use cases that would motivate this but I don\u2019t think we have an urgent need for new APIs if we implement the accessors / constructor.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163306549/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163371849",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163371849",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1163371849,
        "node_id": "IC_kwDOBWUGps5FV6VJ",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-22T16:47:40Z",
        "updated_at": "2022-06-22T16:47:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "I agree - let's move the discussion relating to `eval` elsewhere.\r\n\r\nMy broader point though is that we shouldn't require the user to know or care about  `.values` and `.offsets` in order to do interesting things with lists in cuDF.\r\n\r\nIndeed, we could expose `values` and `offsets` and, with some effort, much of the existing list functionality could be implemented by the user knowing those.\r\n\r\nTwo questions I would ask are:\r\n\r\n1. What functionality do we want to ultimately unlock for users by exposing the `.offsets` and `.values` of an existing list column? Can/should we implement that functionality ourselves?\r\n\r\n3. Who/what is producing GPU-resident `offsets` and `values` arrays that requires a `from_arrays()` constructor? Can we have it return a list column instead?\r\n\r\nWe have been successful so far in totally hiding how strings, for instance, are implemented in cuDF. It'd be nice to do the same for lists.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1163371849/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173256997",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173256997",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1173256997,
        "node_id": "IC_kwDOBWUGps5F7nsl",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-04T02:02:21Z",
        "updated_at": "2022-07-04T02:02:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hello @shwina and @bdice, [bucketize](https://github.com/pytorch/torcharrow/blob/main/csrc/velox/functions/rec/bucketize.h) is a feature that we might unlock if we could construct a list column from offsets and values. \r\nBucketize is performed on leaves and uses the same offsets of the input columns.\r\n\r\n```\r\ndef bucketize(series, buckets):    \r\n    ans = cudf.Series([0] * len(series.list.leaves)) \r\n    for b in buckets:\r\n        ans += series.list.leaves > b\r\n    return cudf.Series.list.from_arrays(series.list.offsets, ans.list.leaves)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173256997/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173327156",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173327156",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1173327156,
        "node_id": "IC_kwDOBWUGps5F7400",
        "user": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-04T04:24:15Z",
        "updated_at": "2022-07-04T04:46:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "To my surprise the `explode` trick from #10967 works here as well:\r\n```\r\ndef bucketize(a, buckets):\r\n    a_x = a.explode()\r\n    b = a_x * 0\r\n    for k in buckets:\r\n        b += a_x > k\r\n    return b.groupby(level=0).agg(list)\r\n```\r\n```\r\nimport cudf\r\ndf = cudf.DataFrame({'a':[[1, 2, 3, 3],[1, 2, 1, 0, 1]]})\r\ndf['b'] = bucketize(df['a'], [1, 2])\r\n```\r\n```\r\n                 a                b\r\n0     [1, 2, 3, 3]     [0, 1, 2, 2]\r\n1  [1, 2, 1, 0, 1]  [0, 1, 0, 0, 0]\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173327156/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173838213",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173838213",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1173838213,
        "node_id": "IC_kwDOBWUGps5F91mF",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-04T13:42:31Z",
        "updated_at": "2022-07-04T13:42:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "Then `list.bucketize()` is an API we may want to consider adding, rather than having each user write their own version of it. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1173838213/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1203994450",
        "html_url": "https://github.com/rapidsai/cudf/issues/11130#issuecomment-1203994450",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
        "id": 1203994450,
        "node_id": "IC_kwDOBWUGps5Hw39S",
        "user": {
            "login": "github-actions[bot]",
            "id": 41898282,
            "node_id": "MDM6Qm90NDE4OTgyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/github-actions%5Bbot%5D",
            "html_url": "https://github.com/apps/github-actions",
            "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
            "type": "Bot",
            "site_admin": false
        },
        "created_at": "2022-08-03T14:03:11Z",
        "updated_at": "2022-08-03T14:03:11Z",
        "author_association": "NONE",
        "body": "This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1203994450/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]