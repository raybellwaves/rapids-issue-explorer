[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1300961342",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1300961342",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1300961342,
        "node_id": "IC_kwDOBWUGps5Nixg-",
        "user": {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-02T17:20:07Z",
        "updated_at": "2022-11-02T17:20:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "What a fantastic analysis. ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1300961342/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 2,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1302777325",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1302777325",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1302777325,
        "node_id": "IC_kwDOBWUGps5Nps3t",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-03T23:11:36Z",
        "updated_at": "2022-11-03T23:11:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "Just a comment about the `Lossy` classification:\r\n\r\nOne of the factors of `Lossy=\"Yes\"` is if: \r\n\r\n```\r\nexpect = (np.asarray if pandas else cupy.asarray)(\r\n    initial_values[:new_location], dtype=dtype\r\n)\r\noriginal_lost_info = (s.iloc[:new_location].astype(dtype) != expect).any()\r\n```\r\n\r\nAnd in this example from your table had `Lossy=\"Yes\"`:\r\n\r\n```\r\nIn [26]: ser = pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)\r\n\r\nIn [27]: ser\r\nOut[27]:\r\n0    9223372036854775798\r\n1    9223372036854775708\r\n2                      3\r\ndtype: int64\r\n\r\nIn [29]: ser.iloc[2] = 10.5\r\n\r\nIn [32]: ser\r\nOut[32]:\r\n0    9.223372e+18\r\n1    9.223372e+18\r\n2    1.050000e+01\r\ndtype: float64\r\n```\r\n\r\nI think this is \"lossy\" because of an `int64` -> `float64` -> `int64` conversion, not necessarily because there's a lossiness in value\r\n\r\n```\r\nIn [47]: ser.iloc[0] == 2 ** 63 - 10\r\nOut[47]: True\r\n\r\nIn [48]: ser.iloc[1] == 2 ** 63 - 100\r\nOut[48]: True\r\n\r\nIn [49]: ser.iloc[2] == 10.5\r\nOut[49]: True\r\n\r\nIn [50]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)\r\nOut[50]:\r\n0    9223372036854775798\r\n1    9223372036854775708\r\n2                      3\r\ndtype: int64\r\n\r\nIn [51]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)\r\nOut[51]:\r\n0   -9223372036854775808\r\n1   -9223372036854775808\r\n2                      3\r\ndtype: int64\r\n\r\nIn [52]: np.array([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)\r\nOut[52]: array([-9223372036854775808, -9223372036854775808,                    3])\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1302777325/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1302793797",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1302793797",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1302793797,
        "node_id": "IC_kwDOBWUGps5Npw5F",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-03T23:39:15Z",
        "updated_at": "2022-11-03T23:39:15Z",
        "author_association": "CONTRIBUTOR",
        "body": "> What a fantastic analysis.\r\n\r\nThis is easily one of the most detailed issues I have ever seen!",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1302793797/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1303216105",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1303216105",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1303216105,
        "node_id": "IC_kwDOBWUGps5NrX_p",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-04T10:15:37Z",
        "updated_at": "2022-11-04T10:15:37Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Just a comment about the `Lossy` classification:\r\n> \r\n> One of the factors of `Lossy=\"Yes\"` is if:\r\n> \r\n> ```\r\n> expect = (np.asarray if pandas else cupy.asarray)(\r\n>     initial_values[:new_location], dtype=dtype\r\n> )\r\n> original_lost_info = (s.iloc[:new_location].astype(dtype) != expect).any()\r\n> ```\r\n> \r\n> And in this example from your table had `Lossy=\"Yes\"`:\r\n> \r\n> ```\r\n> In [26]: ser = pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)\r\n> \r\n> In [27]: ser\r\n> Out[27]:\r\n> 0    9223372036854775798\r\n> 1    9223372036854775708\r\n> 2                      3\r\n> dtype: int64\r\n> \r\n> In [29]: ser.iloc[2] = 10.5\r\n> \r\n> In [32]: ser\r\n> Out[32]:\r\n> 0    9.223372e+18\r\n> 1    9.223372e+18\r\n> 2    1.050000e+01\r\n> dtype: float64\r\n> ```\r\n> \r\n> I think this is \"lossy\" because of an `int64` -> `float64` -> `int64` conversion, not necessarily because there's a lossiness in value\r\n\r\nDepends what you mean by lossy. float64 only has enough precision to exactly represent int53 (because the mantissa has 53 bits). Hence, mapping between int64 and float64 is neither surjective (you can't reach nan and inf) nor injective (multiple int64s can map to the same float64), so you can't roundtrip successfully.\r\n\r\n```python\r\nIn [36]: np.int64(2**63 - 10) == np.int64(2**63 - 100)\r\nOut[36]: False\r\n\r\nIn [37]: np.int64(2**63 - 10).astype(np.float64) == np.int64(2**63 - 100).astype(np.float64)\r\nOut[37]: True\r\n```\r\n> \r\n> ```\r\n> In [47]: ser.iloc[0] == 2 ** 63 - 10\r\n> Out[47]: True\r\n> \r\n> In [48]: ser.iloc[1] == 2 ** 63 - 100\r\n> Out[48]: True\r\n> \r\n> In [49]: ser.iloc[2] == 10.5\r\n> Out[49]: True\r\n\r\nThese are all true because the right operand of equality is promoted to `float64` before the comparison is performed.\r\n\r\n> In [50]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)\r\n> Out[50]:\r\n> 0    9223372036854775798\r\n> 1    9223372036854775708\r\n> 2                      3\r\n> dtype: int64\r\n> \r\n> In [51]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)\r\n> Out[51]:\r\n> 0   -9223372036854775808\r\n> 1   -9223372036854775808\r\n\r\nI characterise this as \"lossy\" because you didn't round-trip successfully. As noted, it isn't really a pandas issue per-se, but rather numpy (and thence promotion via C rules).\r\n\r\nI note that numpy doesn't _quite_ implement [C/C++ promotion rules](https://en.cppreference.com/w/c/language/conversion) for integer and floating point types. Since it widens floating point types in addition between ints and floats.\r\n\r\n[C++](https://gcc.godbolt.org/z/v9sPKbPE4):\r\n```\r\ntypeof(1 + 1.0f) => float32\r\ntypeof(1L + 1.0f) => float32\r\ntypeof(1 + 1.0d) => float64\r\ntypeof(1L + 1.0d) => float64\r\n```\r\nThese promotions are always in-range, since `max(float32) > max(int64)` but lossy since the mapping from integers to floating point types of the same width is not bijective.\r\n\r\nnumpy:\r\n```\r\n(np.int32(1) + np.float32(1)).dtype => float64\r\n(np.int64(1) + np.float32(1)).dtype => float64\r\n(np.int32(1) + np.float64(1)).dtype => float64\r\n(np.int64(1) + np.float64(1)).dtype => float64\r\n```\r\nThese promotions are bijective (if we ignore nan and inf) if the integer type is narrower than the floating point type. (So the int32 promotion can be undone losslessly).\r\n\r\nThese kind of automatic promotions are basically a fight I lost before I was born in old programming languages, though some more modern ones force you to always explicitly cast so that you're aware that you might be doing A Bad Thing.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1303216105/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1303938405",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1303938405",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1303938405,
        "node_id": "IC_kwDOBWUGps5NuIVl",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-04T17:43:45Z",
        "updated_at": "2022-11-04T17:43:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Updated the code to generate tables for a bunch of different scenarios. You can now run and it produces a separate file for each scenario, which you can diff against each other to see the points of difference.\r\n\r\nMostly things work (with #11904), except #12072 means that equality is busted.\r\n\r\nAnd, slice-based setitem is broken for length-one ranges if setting with an array rather than a scalar (that's #12073).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1303938405/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304063181",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304063181",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1304063181,
        "node_id": "IC_kwDOBWUGps5NumzN",
        "user": {
            "login": "seberg",
            "id": 61977,
            "node_id": "MDQ6VXNlcjYxOTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seberg",
            "html_url": "https://github.com/seberg",
            "followers_url": "https://api.github.com/users/seberg/followers",
            "following_url": "https://api.github.com/users/seberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
            "organizations_url": "https://api.github.com/users/seberg/orgs",
            "repos_url": "https://api.github.com/users/seberg/repos",
            "events_url": "https://api.github.com/users/seberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-04T19:27:40Z",
        "updated_at": "2022-11-04T20:03:13Z",
        "author_association": "CONTRIBUTOR",
        "body": "Sorry for the long post, I hope it doesn't derail or is off topic.  I will mainly try to explain the state of NumPy and what [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html) does.  Happy to re-read again without that in mind!\r\n(I will always make time to talk about these things, because just talking about it, even tangentially, helps me clear up things and move forward.)\r\n\r\nN.B. please avoid `np.find_common_type` it needs to be deprecated.  `np.result_type` (for array inputs or if you need the value-based or future NEP 50 behavior) and `np.promote_types` are the weapons of choice.\r\n\r\nFirst, there are three things that come together to understand the NumPy behavior:\r\n1. Integers are converted to `long -> long long -> unsigned long long -> object` by NumPy based on value.  This is what happens if you do `np.asarray(integer)` and in many other contexts.\r\n2. Storing values may or may not go via `np.asarray()`, if it does not, NumPy will be more strict sometimes.\r\n   In fact, I *just* deprecated storing out-of-bounds integers like to disallow `np.asarray([-1], dtype=np.uint8)`.  This will be part of the next NumPy release, unless someone complains (which could happen).\r\n3. *Promotion/Common DType:* i.e. what happens if you mix two dtypes\r\n   * NumPy promotion rules are wonky, they try to be \"safe\", but make an exception by promoting `in64 + float64 -> float64`  (and worse `int64 + uint64 -> float64`).  The reason for this is that they fall out of the \"safe casting\" concept.  I disagree with this nowadays, while related, I feel it is better to see promotion/common-dtype and safe/non-lossy casting as distinct.  For numerical dtypes, I do agree that round-tripping correctly implies that promotion is acceptable.  (NumPy is implemented that way now after NEP 42.)\r\n     The C promotion rules, etc. have the advantage of being e.g. strictly associative (EDIT) while ours are not: `(int16 + uint16) + float32 == int32 + float32 == float64 != float32 == (float32 + int16) + uint16`  (I/NumPy has a heuristic so that `np.result_type` finds `float32` if it is a single operation, it works always, but you can construct failures if you add new dtypes in the mix.)\r\n   * *Current* promotion inspects values (of \"scalars\" including 0-D arrays, but not when all are scalars).  This allows an integer to match any dtype that will fit its value, and floats also to be \"down-promoted\" so long they are not approximately out of range.\r\n    *NEP 50 is the proposal to remove this*.  Instead, NEP 50 proposes to insert the Python integer, float, complex as undefined/lowest precision.  For integers this means that `np.uint8(1) + 300` will error, because we try to do `uint8 + uint8 -> uint8` and that doesn't work.\r\n   NEP 50 tries to describe this, the [JAX diagram](https://jax.readthedocs.io/en/latest/type_promotion.html) also helps.  This makes the Python scalars \"weak\".\r\n\r\n---\r\n\r\nThere is discussion about *lossy* conversion of Python scalars.  Which touches something that I am currently struggling with to push NEP 50.  So bringing it up, because if you clearly want the notion of \"lossy\", it might inform how I do this for NEP 50 (it is not central to NEP 50, and doesn't have to be; but I need to settle on something).\r\n\r\nFor NumPy dtypes we have that defined through the \"casting safety\" (which can be \"no\", \"equiv\", \"safe\", \"same kind\", \"unsafe\".  For *values* we don't really define it, and I don't think the categories quite work.\r\n`int64 -> int8` is same-kind, but `10000 -> int8` seems \"unsafe\", or is it \"safe\" but fails when you try it?  Whether or not I should try to introduce the notion \"safety\" to scalar assignments in NumPy is one of the things I am struggling with, because the notion of cast-safety doesn't seem to cleanly apply (but NumPy exposes it a lot).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304063181/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304068455",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304068455",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1304068455,
        "node_id": "IC_kwDOBWUGps5NuoFn",
        "user": {
            "login": "seberg",
            "id": 61977,
            "node_id": "MDQ6VXNlcjYxOTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seberg",
            "html_url": "https://github.com/seberg",
            "followers_url": "https://api.github.com/users/seberg/followers",
            "following_url": "https://api.github.com/users/seberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
            "organizations_url": "https://api.github.com/users/seberg/orgs",
            "repos_url": "https://api.github.com/users/seberg/repos",
            "events_url": "https://api.github.com/users/seberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-04T19:32:39Z",
        "updated_at": "2022-11-04T19:32:39Z",
        "author_association": "CONTRIBUTOR",
        "body": "NEP 50 itself does not touch the annoying fact that `np.array([2**63, 2**61])` returns a float array.  But, since NEP 50 is likely a NumPy 2.0, I think it does make sense to stop doing it and only ever go to the default integer and otherwise raise an error.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304068455/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304284132",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304284132",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1304284132,
        "node_id": "IC_kwDOBWUGps5Nvcvk",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-04T21:43:29Z",
        "updated_at": "2022-11-04T21:43:29Z",
        "author_association": "CONTRIBUTOR",
        "body": "I think generally from the pandas point of view (with respect to `__setitem__`), I would say the general philosophy is \"the resulting dtype should be able to store the existing values & new value(s) without losing numeric precision\".\r\n\r\nHere are some examples (related to your original table) where we differ from numpy due to the above:\r\n\r\n\r\n1 . \"Don't truncate so upcast dtype\" example\r\n\r\n```\r\nIn [6]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)\r\n\r\nIn [7]: ser.iloc[2] = 10.5\r\n\r\nIn [8]: ser\r\nOut[8]:\r\n0    9.223372e+18\r\n1    9.223372e+18\r\n2    1.050000e+01\r\ndtype: float64\r\n\r\nIn [9]: np_arr = np.array([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)\r\n\r\nIn [10]: np_arr[2] = 10.5\r\n\r\nIn [11]: np_arr\r\nOut[11]: array([9223372036854775798, 9223372036854775708,                  10])\r\n\r\nIn [14]: print(np.__version__) ; print(pd.__version__)\r\n1.23.1\r\n2.0.0.dev0+577.g7e9ca6e8af\r\n``` \r\n\r\n\r\n2. \"Bend over backwards to accommodate the values\" examples\r\n```\r\nIn [5]: ser = pd.Series([1, 2, 3], dtype=np.int64)\r\n\r\nIn [6]: ser.iloc[2] = 2**80\r\n\r\nIn [7]: ser\r\nOut[7]:\r\n0                            1\r\n1                            2\r\n2    1208925819614629174706176\r\ndtype: object\r\n\r\nIn [8]: arr = np.array([1, 2, 3], dtype=np.int64)\r\n\r\nIn [9]: arr\r\nOut[9]: array([1, 2, 3])\r\n\r\nIn [10]: arr[2] = 1208925819614629174706176\r\na---------------------------------------------------------------------------\r\nOverflowError                             Traceback (most recent call last)\r\nInput In [10], in <cell line: 1>()\r\n----> 1 arr[2] = 1208925819614629174706176\r\n\r\nOverflowError: Python int too large to convert to C long\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1304284132/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305470520",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305470520",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1305470520,
        "node_id": "IC_kwDOBWUGps5Nz-Y4",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T11:29:04Z",
        "updated_at": "2022-11-07T11:29:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "> 2\\. \"Bend over backwards to accommodate the values\" examples\r\n\r\nUnless we want to implement bignums in libcudf, I think this is not something we can really contemplate.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305470520/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305473958",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305473958",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1305473958,
        "node_id": "IC_kwDOBWUGps5Nz_Om",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T11:32:51Z",
        "updated_at": "2022-11-07T11:32:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I think generally from the pandas point of view (with respect to `__setitem__`), I would say the general philosophy is \"the resulting dtype should be able to store the existing values & new value(s) without losing numeric precision\".\r\n\r\nThis is a reasonable philosophy, though it does rather depend on what you mean by \"losing numeric precision\". \r\n\r\n> 1 . \"Don't truncate so upcast dtype\" example\r\n> \r\n> ```\r\n> In [6]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)\r\n> \r\n> In [7]: ser.iloc[2] = 10.5\r\n> \r\n> In [8]: ser\r\n> Out[8]:\r\n> 0    9.223372e+18\r\n> 1    9.223372e+18\r\n> 2    1.050000e+01\r\n> dtype: float64\r\n> ```\r\n\r\nThis seems like a nice thing to do, except that it changes behaviour of the series:\r\n\r\n```\r\nIn [22]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)\r\n\r\nIn [23]: ser == ser.iloc[0]\r\nOut[23]: \r\n0     True\r\n1    False\r\n2    False\r\ndtype: bool\r\n\r\nIn [24]: ser.iloc[2] = 10.5\r\n\r\nIn [25]: ser == ser.iloc[0]\r\nOut[25]: \r\n0     True\r\n1     True\r\n2    False\r\ndtype: bool\r\n```\r\n\r\nI would argue that this choice _did_ lose numeric precision, and particularly in _existing_ values that weren't touched by the indexing.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305473958/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305614751",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305614751",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1305614751,
        "node_id": "IC_kwDOBWUGps5N0hmf",
        "user": {
            "login": "seberg",
            "id": 61977,
            "node_id": "MDQ6VXNlcjYxOTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/61977?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seberg",
            "html_url": "https://github.com/seberg",
            "followers_url": "https://api.github.com/users/seberg/followers",
            "following_url": "https://api.github.com/users/seberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/seberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seberg/subscriptions",
            "organizations_url": "https://api.github.com/users/seberg/orgs",
            "repos_url": "https://api.github.com/users/seberg/repos",
            "events_url": "https://api.github.com/users/seberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T13:25:40Z",
        "updated_at": "2022-11-07T13:25:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "So pandas (and cudf) use common DType to promote a column when necessary.  That leads to two things:\r\n* The special rule for going to float64 does lose precision for int64/uint64.\r\n* Pandas will even allow going to `object` dtype.\r\n\r\nThe first issue is independent of NEP 50 and I am not sure there is much to do about it.  You could consider disallowing it.  It probably means making a clearer distinction between \"common DType\" (for storing into a single column) and \"promotion\" (for operations).\r\nThat is, the promotion in `float_arr + int64_arr -> float_arr` (i.e. adding two arrays) seems fine, but maybe storing the two into one container is not?\r\nI make the distinction in NumPy, but not convenient to apply it broadly.  My gut feeling is that it is probably best to live with the way it is:  Yes, it loses precision, but it is usually OK.\r\n\r\nFor the second thing, NEP 50 might nudge towards making it an error in `pandas`:  If you apply NEP 50 promotion rules, the column should keep whatever `int` dtype it has, and if the Python integer cannot be assigned it should just error.  Auto-promoting to `object` dtype would then never work (which is also what will happen for `np.int64(1) + 2**500`).",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1305614751/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1306037301",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1306037301",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1306037301,
        "node_id": "IC_kwDOBWUGps5N2Iw1",
        "user": {
            "login": "mroeschke",
            "id": 10647082,
            "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/10647082?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mroeschke",
            "html_url": "https://github.com/mroeschke",
            "followers_url": "https://api.github.com/users/mroeschke/followers",
            "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
            "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
            "organizations_url": "https://api.github.com/users/mroeschke/orgs",
            "repos_url": "https://api.github.com/users/mroeschke/repos",
            "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mroeschke/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-07T18:45:54Z",
        "updated_at": "2022-11-07T18:45:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I would argue that this choice did lose numeric precision, and particularly in existing values that weren't touched by the indexing.\r\n\r\nThat's fair. Not 100% sure of the origin of promoting to `float64` in pandas for this case, but I would venture to guess the numpy behavior of keeping int64 and truncating the 10.5 to 10 was a more suprising & more significant loss in precision behavior to pandas users.\r\n\r\n> For the second thing, NEP 50 might nudge towards making it an error in pandas:\r\n\r\nThis is also fair. Maybe this is a case of pandas being too accomodating, but we can always nudge users to `astype(object)` in these cases.\r\n\r\n ",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1306037301/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1306911577",
        "html_url": "https://github.com/rapidsai/cudf/issues/12039#issuecomment-1306911577",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/12039",
        "id": 1306911577,
        "node_id": "IC_kwDOBWUGps5N5eNZ",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-11-08T09:37:20Z",
        "updated_at": "2022-11-08T09:37:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Not 100% sure of the origin of promoting to `float64` in pandas for this case,\r\n\r\nIf you're going to do integral to floating type promotion and want to maintain accuracy in the largest number of cases (and don't care too much about memory footprint) the promoting to float64 is a reasonable choice.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/1306911577/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]