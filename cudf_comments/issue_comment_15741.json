[
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2121402056",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2121402056",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2121402056,
        "node_id": "IC_kwDOBWUGps5-cgbI",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-20T23:34:13Z",
        "updated_at": "2024-05-20T23:34:13Z",
        "author_association": "CONTRIBUTOR",
        "body": "This kind of operations is not natively supported, unfortunately. The fundamental issue is that pandas allows you to put arbitrary objects into a Series/DataFrame and it will run Python operations on them. In this case, since you put numpy arrays in, pandas will happily just leave them as numpy arrays and use binary operations on numpy array so this works as expected. cudf does not support arbitrary objects in this way, so we have to be a bit more clever about rearranging the data ourselves to handle this kind of operation. Per-row array data is supported through the list dtype, which is what your'e getting in the `from_pandas` call in your snippet. To work with that in vectorized fashion, the typical approach is to use the [`explode` method, which flattens out the data](https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.dataframe.explode/). Here is a snippet that gives you an essentially equivalent result (slight differences in column names etc):\r\n```\r\nimport cudf\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Sample DataFrame with Pandas to cuDF conversion\r\ndata = {\r\n    'category': ['A', 'A', 'B', 'B'],\r\n    'values': [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9]), np.array([10, 11, 12])]\r\n}\r\npdf = pd.DataFrame(data)\r\ndf = cudf.DataFrame.from_pandas(pdf)\r\n\r\nprint(\"pandas result\")\r\nprint(pdf.groupby('category').agg({'values': ['sum', 'mean']}))\r\nprint()\r\n\r\nexploded_values = df[[\"values\"]].explode(\"values\")\r\ndf = df[[\"category\"]].merge(exploded_values, left_index=True, right_index=True)\r\ndf[\"index\"] = np.tile(np.arange(3), 4)\r\n\r\nprint(\"cudf result\")\r\nprint(df.groupby([\"category\", \"index\"]).agg({\"values\": [\"sum\", \"mean\"]}).groupby(\"category\").collect())\r\n```\r\n\r\nThis outputs:\r\n```\r\npandas result\r\n                values                  \r\n                   sum              mean\r\ncategory                                \r\nA            [5, 7, 9]   [2.5, 3.5, 4.5]\r\nB         [17, 19, 21]  [8.5, 9.5, 10.5]\r\n\r\ncudf result\r\n         (values, sum)    (values, mean)\r\ncategory                                \r\nA            [5, 9, 7]   [2.5, 4.5, 3.5]\r\nB         [19, 17, 21]  [9.5, 8.5, 10.5]\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2121402056/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2123811369",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2123811369",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2123811369,
        "node_id": "IC_kwDOBWUGps5-lsop",
        "user": {
            "login": "Rhett-Ying",
            "id": 85214957,
            "node_id": "MDQ6VXNlcjg1MjE0OTU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/85214957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rhett-Ying",
            "html_url": "https://github.com/Rhett-Ying",
            "followers_url": "https://api.github.com/users/Rhett-Ying/followers",
            "following_url": "https://api.github.com/users/Rhett-Ying/following{/other_user}",
            "gists_url": "https://api.github.com/users/Rhett-Ying/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Rhett-Ying/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Rhett-Ying/subscriptions",
            "organizations_url": "https://api.github.com/users/Rhett-Ying/orgs",
            "repos_url": "https://api.github.com/users/Rhett-Ying/repos",
            "events_url": "https://api.github.com/users/Rhett-Ying/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Rhett-Ying/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-22T03:44:02Z",
        "updated_at": "2024-05-22T03:44:02Z",
        "author_association": "NONE",
        "body": "@vyasr Thanks for your suggestion. The suggestion you gave above is equivalent to **splitting array into separate columns, then apply sum()/mean() on each column, and merge the output back into an array**?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2123811369/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2126158200",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2126158200",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2126158200,
        "node_id": "IC_kwDOBWUGps5-upl4",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-23T03:21:57Z",
        "updated_at": "2024-05-23T03:21:57Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yes, that is basically equivalent. You cannot operate on the numpy arrays directly, but assuming they are all of the same length you could split them into multiple columns if you have control of that on construction. Otherwise the list-based approach I showed is the way you could process it if you have to take the numpy array-based inputs from pandas as-is.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2126158200/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2138446565",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138446565",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2138446565,
        "node_id": "IC_kwDOBWUGps5_dhrl",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-30T00:13:25Z",
        "updated_at": "2024-05-30T00:13:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "@Rhett-Ying does the above solution address your needs?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2138446565/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2138461047",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138461047",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2138461047,
        "node_id": "IC_kwDOBWUGps5_dlN3",
        "user": {
            "login": "Rhett-Ying",
            "id": 85214957,
            "node_id": "MDQ6VXNlcjg1MjE0OTU3",
            "avatar_url": "https://avatars.githubusercontent.com/u/85214957?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rhett-Ying",
            "html_url": "https://github.com/Rhett-Ying",
            "followers_url": "https://api.github.com/users/Rhett-Ying/followers",
            "following_url": "https://api.github.com/users/Rhett-Ying/following{/other_user}",
            "gists_url": "https://api.github.com/users/Rhett-Ying/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Rhett-Ying/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Rhett-Ying/subscriptions",
            "organizations_url": "https://api.github.com/users/Rhett-Ying/orgs",
            "repos_url": "https://api.github.com/users/Rhett-Ying/repos",
            "events_url": "https://api.github.com/users/Rhett-Ying/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Rhett-Ying/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-05-30T00:31:20Z",
        "updated_at": "2024-05-30T00:31:20Z",
        "author_association": "NONE",
        "body": "@vyasr Thanks for your suggestion. One major concern for me is the performance. Especially when I want to apply more advanced operations on vector data such as K-Nearest-Neighbor Search. Should I leverage tools like [CUVS](https://github.com/rapidsai/cuvs) for operations on vector data?",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2138461047/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2145615702",
        "html_url": "https://github.com/rapidsai/cudf/issues/15741#issuecomment-2145615702",
        "issue_url": "https://api.github.com/repos/rapidsai/cudf/issues/15741",
        "id": 2145615702,
        "node_id": "IC_kwDOBWUGps5_439W",
        "user": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-06-03T16:14:13Z",
        "updated_at": "2024-06-03T16:14:13Z",
        "author_association": "CONTRIBUTOR",
        "body": "For more advanced operations, yes it will depend. If operators already exist in other libraries like cuVS those will almost certainly be faster than any apply-based solution you come up with in just cudf. In general, if you are trying to do vectorized operations on homogeneous vectors (i.e. something that would fit in a square matrix, or a higher-order tensor, and not needing a ragged list), you will likely have better luck implementing those types of operations performantly in cupy. That's also true on the host: you would probably get better performance using numpy operations than pandas operations for something like a manual kNN implementation since with numpy you can devolve directly to its vectorized operations (implemented in C) whereas with pandas you introduce some extra layers of Python.",
        "reactions": {
            "url": "https://api.github.com/repos/rapidsai/cudf/issues/comments/2145615702/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]