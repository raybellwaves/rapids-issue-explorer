{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12569",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12569/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12569/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12569/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12569",
    "id": 1538422041,
    "node_id": "I_kwDOBWUGps5bsnUZ",
    "number": 12569,
    "title": "[FEA] support datetime property in DataFrame.query",
    "user": {
        "login": "mattf",
        "id": 112653,
        "node_id": "MDQ6VXNlcjExMjY1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/112653?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattf",
        "html_url": "https://github.com/mattf",
        "followers_url": "https://api.github.com/users/mattf/followers",
        "following_url": "https://api.github.com/users/mattf/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattf/subscriptions",
        "organizations_url": "https://api.github.com/users/mattf/orgs",
        "repos_url": "https://api.github.com/users/mattf/repos",
        "events_url": "https://api.github.com/users/mattf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattf/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 0,
    "created_at": "2023-01-18T17:54:09Z",
    "updated_at": "2023-06-06T04:09:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nwriting code with `import cudf as pd`\r\n\r\n**Describe the solution you'd like**\r\n```\r\nIn [1]: import cudf as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '22.12.00'\r\n\r\nIn [3]: df = pd.DataFrame({'A': pd.date_range(start=\"2023-01-01\", periods=8, freq=\"D\")})\r\n\r\nIn [4]: df.query(\"A.dt.month == 1\")\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\nCell In[4], line 1\r\n----> 1 df.query(\"A.dt.month == 1\")\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/cudf/core/dataframe.py:4174, in DataFrame.query(self, expr, local_dict)\r\n   4168 callenv = {\r\n   4169     \"locals\": callframe.f_locals,\r\n   4170     \"globals\": callframe.f_globals,\r\n   4171     \"local_dict\": local_dict,\r\n   4172 }\r\n   4173 # Run query\r\n-> 4174 boolmask = queryutils.query_execute(self, expr, callenv)\r\n   4175 return self._apply_boolean_mask(boolmask)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/cudf/utils/queryutils.py:248, in query_execute(df, expr, callenv)\r\n    246 # run kernel\r\n    247 args = [out] + colarrays + envargs\r\n--> 248 kernel.forall(nrows)(*args)\r\n    249 out_mask = applyutils.make_aggregate_nullmask(df, columns=columns)\r\n    250 return out.set_mask(out_mask).fillna(False)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/cuda/dispatcher.py:438, in ForAll.__call__(self, *args)\r\n    436     specialized = self.dispatcher\r\n    437 else:\r\n--> 438     specialized = self.dispatcher.specialize(*args)\r\n    439 blockdim = self._compute_thread_per_block(specialized)\r\n    440 griddim = (self.ntasks + blockdim - 1) // blockdim\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/cuda/dispatcher.py:667, in CUDADispatcher.specialize(self, *args)\r\n    664 targetoptions = self.targetoptions\r\n    665 specialization = CUDADispatcher(self.py_func,\r\n    666                                 targetoptions=targetoptions)\r\n--> 667 specialization.compile(argtypes)\r\n    668 specialization.disable_compile()\r\n    669 specialization._specialized = True\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/cuda/dispatcher.py:794, in CUDADispatcher.compile(self, sig)\r\n    791 if not self._can_compile:\r\n    792     raise RuntimeError(\"Compilation disabled\")\r\n--> 794 kernel = _Kernel(self.py_func, argtypes, **self.targetoptions)\r\n    795 # We call bind to force codegen, so that there is a cubin to cache\r\n    796 kernel.bind()\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_lock.py:35, in _CompilerLock.__call__.<locals>._acquire_compile_lock(*args, **kwargs)\r\n     32 @functools.wraps(func)\r\n     33 def _acquire_compile_lock(*args, **kwargs):\r\n     34     with self:\r\n---> 35         return func(*args, **kwargs)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/cuda/dispatcher.py:75, in _Kernel.__init__(self, py_func, argtypes, link, debug, lineinfo, inline, fastmath, extensions, max_registers, opt, device)\r\n     66 self.extensions = extensions or []\r\n     68 nvvm_options = {\r\n     69     'debug': self.debug,\r\n     70     'lineinfo': self.lineinfo,\r\n     71     'fastmath': fastmath,\r\n     72     'opt': 3 if opt else 0\r\n     73 }\r\n---> 75 cres = compile_cuda(self.py_func, types.void, self.argtypes,\r\n     76                     debug=self.debug,\r\n     77                     lineinfo=self.lineinfo,\r\n     78                     inline=inline,\r\n     79                     fastmath=fastmath,\r\n     80                     nvvm_options=nvvm_options)\r\n     81 tgt_ctx = cres.target_context\r\n     82 code = self.py_func.__code__\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_lock.py:35, in _CompilerLock.__call__.<locals>._acquire_compile_lock(*args, **kwargs)\r\n     32 @functools.wraps(func)\r\n     33 def _acquire_compile_lock(*args, **kwargs):\r\n     34     with self:\r\n---> 35         return func(*args, **kwargs)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/cuda/compiler.py:212, in compile_cuda(pyfunc, return_type, args, debug, lineinfo, inline, fastmath, nvvm_options)\r\n    210 from numba.core.target_extension import target_override\r\n    211 with target_override('cuda'):\r\n--> 212     cres = compiler.compile_extra(typingctx=typingctx,\r\n    213                                   targetctx=targetctx,\r\n    214                                   func=pyfunc,\r\n    215                                   args=args,\r\n    216                                   return_type=return_type,\r\n    217                                   flags=flags,\r\n    218                                   locals={},\r\n    219                                   pipeline_class=CUDACompiler)\r\n    221 library = cres.library\r\n    222 library.finalize()\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler.py:716, in compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library, pipeline_class)\r\n    692 \"\"\"Compiler entry point\r\n    693 \r\n    694 Parameter\r\n   (...)\r\n    712     compiler pipeline\r\n    713 \"\"\"\r\n    714 pipeline = pipeline_class(typingctx, targetctx, library,\r\n    715                           args, return_type, flags, locals)\r\n--> 716 return pipeline.compile_extra(func)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler.py:452, in CompilerBase.compile_extra(self, func)\r\n    450 self.state.lifted = ()\r\n    451 self.state.lifted_from = None\r\n--> 452 return self._compile_bytecode()\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler.py:520, in CompilerBase._compile_bytecode(self)\r\n    516 \"\"\"\r\n    517 Populate and run pipeline for bytecode input\r\n    518 \"\"\"\r\n    519 assert self.state.func_ir is None\r\n--> 520 return self._compile_core()\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler.py:499, in CompilerBase._compile_core(self)\r\n    497         self.state.status.fail_reason = e\r\n    498         if is_final_pipeline:\r\n--> 499             raise e\r\n    500 else:\r\n    501     raise CompilerError(\"All available pipelines exhausted\")\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler.py:486, in CompilerBase._compile_core(self)\r\n    484 res = None\r\n    485 try:\r\n--> 486     pm.run(self.state)\r\n    487     if self.state.cr is not None:\r\n    488         break\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_machinery.py:368, in PassManager.run(self, state)\r\n    365 msg = \"Failed in %s mode pipeline (step: %s)\" % \\\r\n    366     (self.pipeline_name, pass_desc)\r\n    367 patched_exception = self._patch_error(msg, e)\r\n--> 368 raise patched_exception\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_machinery.py:356, in PassManager.run(self, state)\r\n    354 pass_inst = _pass_registry.get(pss).pass_inst\r\n    355 if isinstance(pass_inst, CompilerPass):\r\n--> 356     self._runPass(idx, pass_inst, state)\r\n    357 else:\r\n    358     raise BaseException(\"Legacy pass in use\")\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_lock.py:35, in _CompilerLock.__call__.<locals>._acquire_compile_lock(*args, **kwargs)\r\n     32 @functools.wraps(func)\r\n     33 def _acquire_compile_lock(*args, **kwargs):\r\n     34     with self:\r\n---> 35         return func(*args, **kwargs)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_machinery.py:311, in PassManager._runPass(self, index, pss, internal_state)\r\n    309     mutated |= check(pss.run_initialization, internal_state)\r\n    310 with SimpleTimer() as pass_time:\r\n--> 311     mutated |= check(pss.run_pass, internal_state)\r\n    312 with SimpleTimer() as finalize_time:\r\n    313     mutated |= check(pss.run_finalizer, internal_state)\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/compiler_machinery.py:273, in PassManager._runPass.<locals>.check(func, compiler_state)\r\n    272 def check(func, compiler_state):\r\n--> 273     mangled = func(compiler_state)\r\n    274     if mangled not in (True, False):\r\n    275         msg = (\"CompilerPass implementations should return True/False. \"\r\n    276                \"CompilerPass with name '%s' did not.\")\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/typed_passes.py:105, in BaseTypeInference.run_pass(self, state)\r\n     99 \"\"\"\r\n    100 Type inference and legalization\r\n    101 \"\"\"\r\n    102 with fallback_context(state, 'Function \"%s\" failed type inference'\r\n    103                       % (state.func_id.func_name,)):\r\n    104     # Type inference\r\n--> 105     typemap, return_type, calltypes, errs = type_inference_stage(\r\n    106         state.typingctx,\r\n    107         state.targetctx,\r\n    108         state.func_ir,\r\n    109         state.args,\r\n    110         state.return_type,\r\n    111         state.locals,\r\n    112         raise_errors=self._raise_errors)\r\n    113     state.typemap = typemap\r\n    114     # save errors in case of partial typing\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/typed_passes.py:83, in type_inference_stage(typingctx, targetctx, interp, args, return_type, locals, raise_errors)\r\n     81     infer.build_constraint()\r\n     82     # return errors in case of partial typing\r\n---> 83     errs = infer.propagate(raise_errors=raise_errors)\r\n     84     typemap, restype, calltypes = infer.unify(raise_errors=raise_errors)\r\n     86 # Output all Numba warnings\r\n\r\nFile /usr/local/lib/python3.8/dist-packages/numba/core/typeinfer.py:1086, in TypeInferer.propagate(self, raise_errors)\r\n   1083 force_lit_args = [e for e in errors\r\n   1084                   if isinstance(e, ForceLiteralArg)]\r\n   1085 if not force_lit_args:\r\n-> 1086     raise errors[0]\r\n   1087 else:\r\n   1088     raise reduce(operator.or_, force_lit_args)\r\n\r\nTypingError: Failed in cuda mode pipeline (step: nopython frontend)\r\nFailed in cuda mode pipeline (step: nopython frontend)\r\nUnknown attribute 'dt' of type datetime64[ns]\r\n\r\nFile \"<string>\", line 2:\r\n<source missing, REPL/exec in use?>\r\n\r\nDuring: typing of get attribute at <string> (2)\r\n\r\nFile \"<string>\", line 2:\r\n<source missing, REPL/exec in use?>\r\n\r\nDuring: resolving callee type: type(CUDADispatcher(<function queryexpr_a1b175044f595522 at 0x7f61a8bade50>))\r\nDuring: typing of call at <string> (6)\r\n\r\n\r\nFile \"<string>\", line 6:\r\n<source missing, REPL/exec in use?>\r\n\r\n\r\nIn [5]: df.to_pandas().query(\"A.dt.month == 1\")\r\nOut[5]: \r\n           A\r\n0 2023-01-01\r\n1 2023-01-02\r\n2 2023-01-03\r\n3 2023-01-04\r\n4 2023-01-05\r\n5 2023-01-06\r\n6 2023-01-07\r\n7 2023-01-08\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12569/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12569/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}