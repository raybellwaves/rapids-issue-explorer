{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12236",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12236/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12236/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12236/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12236",
    "id": 1462235143,
    "node_id": "I_kwDOBWUGps5XJ_AH",
    "number": 12236,
    "title": "[FEA] Add a new cuDF option stable_sort that provides ordering guarantees for otherwise nondeterministic APIs",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 5,
    "created_at": "2022-11-23T18:41:10Z",
    "updated_at": "2024-05-16T05:12:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nCurrently various cuDF APIs (examples include `merge`, `groupby`, and `drop_duplicates`) rely on libcudf APIs that do not promise stable ordering. libcudf will not (and should not) ever be forced to make such guarantees since requiring ordering hamstrings potential optimizations and can always be achieved by calling code with the addition of suitable index columns and sorts. However, the requirements of cuDF Python are different. In particular, for pandas users transitioning to cuDF the lack of stability may be confusing at best and workflow-breaking at worst. Since there are multiple APIs that may exhibit this API divergence, and these APIs may be invoked many times in any particular piece of code, the responsibility should not fall to users to wrap those calls in appropriate sorting logic every time.\r\n\r\n**Describe the solution you'd like**\r\ncuDF should leverage the options framework introduced in #11193 to add a new option `stable_sort` that, when True, will change the behavior of all cuDF APIs to guarantee that the input order will be preserve. The default value should be `False` to force users to opt in to performance-inhibiting changes. The implementation of this option will depend on the API; for instance, with `merge` it will require consistent ordering in both tables, whereas for `drop_duplicates` it only affects one. I would recommend implementing the option as `_stable_sort` at first to indicate that it is internal, then adding support to one algorithm at a time, then exposing the option publicly as `stable_sort` once we have sufficient algorithmic coverage.\r\n\r\n**Describe alternatives you've considered**\r\nWe have rejected similar requests in the past, in part because of the lack of clarity on how this should be handled in cuDF Python vs. libcudf, as well as because we did not wish to slow down all calls to these APIs by default. The use of `cudf.options` at the Python level provides an elegant and well-scoped solution to the problem that avoids these problems.\r\n\r\n**Additional context**\r\nAddressing this issue will close #1781 and #5286.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12236/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12236/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}