{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/8454",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/8454/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/8454/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/8454/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/8454",
    "id": 913979981,
    "node_id": "MDU6SXNzdWU5MTM5Nzk5ODE=",
    "number": 8454,
    "title": "[FEA] Better handling for nullable columns that do not have any null element",
    "user": {
        "login": "ttnghia",
        "id": 7416935,
        "node_id": "MDQ6VXNlcjc0MTY5MzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7416935?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ttnghia",
        "html_url": "https://github.com/ttnghia",
        "followers_url": "https://api.github.com/users/ttnghia/followers",
        "following_url": "https://api.github.com/users/ttnghia/following{/other_user}",
        "gists_url": "https://api.github.com/users/ttnghia/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ttnghia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ttnghia/subscriptions",
        "organizations_url": "https://api.github.com/users/ttnghia/orgs",
        "repos_url": "https://api.github.com/users/ttnghia/repos",
        "events_url": "https://api.github.com/users/ttnghia/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ttnghia/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 599626564,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjQ=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/question",
            "name": "question",
            "color": "D4C5F9",
            "default": true,
            "description": "Further information is requested"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2021-06-07T21:45:24Z",
    "updated_at": "2022-11-21T04:12:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently, many cudf's APIs (such as `copy_bitmask` or `valid_if` and many others) always generate an output bitmask if the input columns are nullable. However, the input columns may not have any null element. Thus, it may be a waste of time and memory to generate such a bitmask containing all valid bit. So, a good practice is to avoid generating a bitmask if the input does not contain any null element. Some APIs have already followed this practice, but not all.\r\n\r\nHowever, if not generating a bitmask for the output, there may be potential issues emerging from the inconsistency between the input and output. Consider an example that an algorithm processing data through several stages. One of the intermediate stages cuts out the bitmask from its output, but all the subsequent stages continue to use the nullable information from the first input. In such cases, the system may crash, or some stages throw an exception, or the final result is undefined. \r\n\r\nSo, the question here is, should we keep the consistency between the input and output column? (i.e., if the input column has a bitmask, should we always generate a bitmask for the output column even if it doesn't have any null?)\r\n\r\n---------\r\nI have observed a lot of bugs that emerged due to mixing `nullable()` and `null_count()` in the current cudf implementation. Thus, I think a good way to avoid (maybe) all potential issues is to totally remove the `nullable()` API and use `null_count()` all the time. Maybe this is a little bit more expensive for the users to execute the code, but it could definitely eliminate all the headaches from having unexpected bugs and make developers/users much happier.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/8454/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/8454/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}