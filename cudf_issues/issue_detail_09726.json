{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/9726",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/9726/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/9726/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/9726/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/9726",
    "id": 1057879284,
    "node_id": "MDU6SXNzdWUxMDU3ODc5Mjg0",
    "number": 9726,
    "title": "[FEA] `pack`/`unpack` functions to merge/split (multiple) `device_buffer`(s)",
    "user": {
        "login": "jakirkham",
        "id": 3019665,
        "node_id": "MDQ6VXNlcjMwMTk2NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jakirkham",
        "html_url": "https://github.com/jakirkham",
        "followers_url": "https://api.github.com/users/jakirkham/followers",
        "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
        "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
        "organizations_url": "https://api.github.com/users/jakirkham/orgs",
        "repos_url": "https://api.github.com/users/jakirkham/repos",
        "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jakirkham/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/25",
        "html_url": "https://github.com/rapidsai/cudf/milestone/25",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/25/labels",
        "id": 8693498,
        "node_id": "MI_kwDOBWUGps4AhKb6",
        "number": 25,
        "title": "Helps libcudf C++ integrations",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 14,
        "closed_issues": 7,
        "state": "open",
        "created_at": "2022-11-26T17:28:14Z",
        "updated_at": "2024-05-13T23:56:47Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 14,
    "created_at": "2020-03-01T22:37:33Z",
    "updated_at": "2023-01-13T09:21:31Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIt would be useful to have a `pack` function to merge multiple `device_buffer`s into a single `device_buffer`. This is helpful in situations where having one large `device_buffer` to read from is more performant. However it ultimately consists of many smaller data segments that would need to be merged together. Example use cases include sending data with UCX and spilling data from device to host.\r\n\r\nSimilarly it would be useful to have an `unpack` function to split a `device_buffer` into multiple `device_buffer`s. This is helpful in situations where having one large `device_buffer` to write into is more performant. However it ultimately consists of many smaller data segments that may need to be freed at different times. Example use cases include receiving data with UCX and unspilling data from host to device.\r\n\r\n**Describe the solution you'd like**\r\n\r\nFor `pack` it would be nice if it simply takes several `device_buffer`s in `vector` form and return a single one. Additionally it would be nice if `pack` could recognize when `device_buffer`s are contiguous in memory and avoid a copy. Though admittedly this last part is tricky (maybe less so if `unpack` is used regularly?). If we allow `pack` to change the order (to benefit from contiguous memory for example), we may want additional information about where the data segments live in the larger `device_buffer`.\r\n\r\nFor `unpack` it would be nice if it takes a single `device_buffer` and `size_t`s in `vector` form to split and return a `vector` of multiple `device_buffer`s. Additionally it would be nice if `unpack` did not perform any copies. Hopefully that is straightforward, but there may be things I'm not understanding.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nOne might consider using variadics in C++ for the arguments. While nice at the C++ level, this seems tricky to use from the Cython and Python levels. Hence the suggestion to just use `vector`.\r\n\r\n`pack` itself could be implemented by a user simply allocating a larger buffer and copying over. Would be nice to avoid the extra allocation when possible though (which may require knowledge that RMM has about the allocations).\r\n\r\n**Additional context**\r\n\r\nHaving `unpack` in particular would be helpful for aggregated receives. A natural extension of this would be to have `pack` for aggregated sends. All-in-all this should allow transmitting a larger amount of data at once with UCX and thus benefiting from this use case it is more honed for. PR  ( https://github.com/dask/distributed/pull/3453 ) provides a WIP implementation of aggregated receives for context.\r\n\r\nAlso having `pack` would be useful when spilling several `device_buffer`s from device to host as it would allow us to pack them into one `device_buffer` before transferring ( https://github.com/rapidsai/dask-cuda/issues/250 ). Having `unpack` would help us break up the allocation whenever the object is unspilled.\r\n\r\nThis need has also come up in downstream contexts ( https://github.com/rapidsai/cudf/issues/3793 ). Maybe they would benefit from an upstream solution as well?",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/9726/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/9726/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}