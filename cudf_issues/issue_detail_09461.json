{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/9461",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/9461/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/9461/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/9461/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/9461",
    "id": 1029398823,
    "node_id": "I_kwDOBWUGps49W2En",
    "number": 9461,
    "title": "[BUG] AST join slows down significantly with a small left table",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/21",
        "html_url": "https://github.com/rapidsai/cudf/milestone/21",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/21/labels",
        "id": 8576365,
        "node_id": "MI_kwDOBWUGps4Agt1t",
        "number": 21,
        "title": "Expression evaluation",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 22,
        "state": "open",
        "created_at": "2022-10-24T21:39:12Z",
        "updated_at": "2024-05-16T17:06:31Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 10,
    "created_at": "2021-10-18T17:27:37Z",
    "updated_at": "2022-11-23T18:01:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "We found an issue late in 21.10 (https://github.com/NVIDIA/spark-rapids/issues/3736) with the AST driven inner join where given a smaller left side table our performance would drop significantly with AST, as opposed to using an unconditional join + a separate filter. This issue is to discuss whether cuDF could detect this and adjust how it handles such a join.\r\n\r\nIf the larger table is on the left, AST is at least ~1.3x faster than join + filter approach. If the smaller table is on the left, AST can be 10x slower than the join + filter approach. We can work around this for inner joins specifically, since we can swap in the plugin the sides fairly easily (https://github.com/NVIDIA/spark-rapids/issues/3832), but this is hacky and seems like it is something cuDF should be able to handle, especially for all the other types of joins where we can't just swap sides like this.\r\n\r\nThe reason for the swap of tables in Spark, is that there is logic to build left or build right, depending on the byte sizes of the inputs. The spark-rapids plugin will split into smaller chunks the left side (if building right), or the right side (if building left), streaming these chunks against the side of the join that wasn't split (aka the build side). In this case we went from a build-left regime which was good for the AST since the left side was not split, to a build-right regime when the left side started to get split.\r\n\r\nThe reason why these kernels are so sensitive to the left side, is because that's what is getting used to compute the grid size:\r\n```\r\n  detail::grid_1d config(left_table->num_rows(), DEFAULT_JOIN_BLOCK_SIZE);\r\n```\r\n\r\nAnd in our example (https://github.com/NVIDIA/spark-rapids/issues/3736) the left table could be hundreds of rows, where the right table could be 1M rows.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/9461/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/9461/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}