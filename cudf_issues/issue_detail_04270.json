{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/4270",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/4270/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/4270/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/4270/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/4270",
    "id": 572261482,
    "node_id": "MDU6SXNzdWU1NzIyNjE0ODI=",
    "number": 4270,
    "title": "[FEA] Make `column_view` _actually_ be a view",
    "user": {
        "login": "jrhemstad",
        "id": 15221289,
        "node_id": "MDQ6VXNlcjE1MjIxMjg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrhemstad",
        "html_url": "https://github.com/jrhemstad",
        "followers_url": "https://api.github.com/users/jrhemstad/followers",
        "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
        "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
        "repos_url": "https://api.github.com/users/jrhemstad/repos",
        "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "jrhemstad",
        "id": 15221289,
        "node_id": "MDQ6VXNlcjE1MjIxMjg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrhemstad",
        "html_url": "https://github.com/jrhemstad",
        "followers_url": "https://api.github.com/users/jrhemstad/followers",
        "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
        "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
        "repos_url": "https://api.github.com/users/jrhemstad/repos",
        "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "jrhemstad",
            "id": 15221289,
            "node_id": "MDQ6VXNlcjE1MjIxMjg5",
            "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrhemstad",
            "html_url": "https://github.com/jrhemstad",
            "followers_url": "https://api.github.com/users/jrhemstad/followers",
            "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
            "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
            "repos_url": "https://api.github.com/users/jrhemstad/repos",
            "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-02-27T18:10:01Z",
    "updated_at": "2024-02-23T18:02:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\n`column_view` is so named because it is supposed to be a non-owning, \"view\" type. However, this is currently a half-truth because `column_view` _is_ an owning class! \r\n\r\n`column_view` stores a `vector<column_view>` internally for it's children. Since `vector` is an owning type, that makes `column_view` an owning type. \r\n\r\nThis has several ramifications. \r\n\r\nFirst of all `column_view` is not trivially copyable (which view types should be!).\r\n\r\nThe larger problem is more insidious. The fact that `column_view` contains a `vector` object is the ultimate cause of the many compiler errors that libcudf developers have seen about calling a `__host__` function from a `__host__ __device__` context. The full causal chain is complicated. \r\n\r\nAs @harrism described in https://github.com/rapidsai/rmm/pull/312:\r\n\r\n>Unfortunately, NVCC implicitly adds __host__ __device__ specifiers to explicitly defaulted functions that are called from both __host__ and __device__ (or __host__ __device__) functions. In libcudf, the type_dispatcher uses a __host__ __device__ function, so the above changed resulted in compiler errors since the default compiler-generated constructor necessarily invokes a host-only function. \r\n\r\nIn short, `column_view` has defaulted ctors. Since these ctors can be used within the context of the `type_dispatcher` (which is `__host__ __device__`), nvcc will implicitly add `__host__ __device__` to these ctors. These defaulted `column_view` ctors will invoke the member `vector` ctors (which are intrinsically `__host__` only). Thus, we end up with trying to call a `__host__` function (`vector` ctor/dtor) inside a `__host__ __device__` function (`column_view` ctor/dtor).\r\n\r\n**Describe the solution you'd like**\r\n\r\nRemove the `vector<column_view>` from `column_view` and instead replace it with `column_view* children` and `size_type num_children`:\r\n\r\n```c++\r\nclass column_view{\r\n\r\n   column_view(...., column_view * children, size_type num_children);\r\n\r\nprivate:\r\n   column_view * children; // pointer to array of child `column_view` objects\r\n   size_type num_children;\r\n};\r\n```\r\n\r\nThis will make `column_view` a true \"view\" type by being trivially copyable and eliminate any possibility for the host/device errors we've encountered numerous times in the past. \r\n\r\nBut what about the children!? \r\n\r\nThe catch is, someone has to own the children `column_view` objects, i.e., the `children` pointer in `column_view` has to point to `column_view` objects that are constructed/owned by someone else. There's two scenarios we have to consider:\r\n\r\n1. `column_view`s that view `cudf::column` objects\r\n2. `column_view`s that _do not_ view ` cudf::column` object (e.g., viewing a Python owned column)\r\n\r\nIn 1. the fix is pretty easy. We can just add a `vector<column_view>` to `cudf::column`:\r\n\r\n```c++\r\nclass column{\r\n\r\nprivate:\r\n   vector<unique_ptr<column>> children; // here's the owning child objects\r\n   vector<column_view> child_views; // non-owning views to the same children\r\n\r\npublic:\r\n   operator column_view(){\r\n       // pass pointer to the `child_view`s data when converting to a `column_view`\r\n       return column_view{..., child_views.data(), child_views.size()};\r\n   }\r\n};\r\n```\r\n\r\nSituation 2. shouldn't be too onerous either. The caller was already required to construct a `std::vector<column_view>` to pass the children to the `column_view` ctor. However, instead of copying that vector, we just take a pointer to it's contents. This does add the added responsibility of the user to ensure that the `column_view` does not outlive the `vector<column_view>` for the children. @shwina correct me if I'm wrong, but I don't anticipate this should be a problem from the Python/Cython side nor require significant changes? \r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/4270/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/4270/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}