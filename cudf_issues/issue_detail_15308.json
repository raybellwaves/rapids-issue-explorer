{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/15308",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/15308/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/15308/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/15308/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/15308",
    "id": 2187297466,
    "node_id": "I_kwDOBWUGps6CX4K6",
    "number": 15308,
    "title": "[FEA] Support a Scalar only column",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2024-03-14T21:27:50Z",
    "updated_at": "2024-03-15T22:16:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nIn an offline discussion with some people in CUDF we expressed how it could be a huge memory savings for the Spark team if we could get columns that we could put into a table/etc but they are really just a scalar with a count. We end up doing this all over the place in all kinds of different situations.\r\n\r\nWe don't currently use dictionary columns at all but we would be okay with that as an alternative if we could get dictionary columns working more broadly. But even then they still have issues.\r\n\r\nIn many cases they are more expensive to use for computation if they do work like concat two columns together requires merging the dictionary column instead of a simple memory operation. Yes, a concat of two scalar columns is going to likely be more expensive than two regular columns, but it should not be that bad, and might be faster than generating the fully columns and then concat-ing them.\r\n\r\nIt also is not always a win from a memory standpoint. With a DICTIONARY32 only values that are on average larger than a 32-bit value result in memory savings, for a scalar column replacement. This can get into really odd cases where an INT32 is not a win from a memory standpoint unless it is null (because the null would add 1 bit per row so 33 bits instead of just 32).\r\n\r\n**Describe the solution you'd like**\r\nIdeally https://github.com/rapidsai/cudf/blob/769c1bd6c05f3734044762c9efe3c65ef22cddbd/cpp/include/cudf/column/column_factories.hpp#L546 would just return this new type, or we could have a new API like is used to create a dictionary column from a scalar. \r\n\r\nEventually we might be able to automatically do some things with them, like if we are reading parquet and determine that all of the values in the column are a single thing (like from a dictionary), then we could automatically replace them with a scalar column.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/15308/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/15308/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}