{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/6276",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/6276/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/6276/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/6276/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/6276",
    "id": 705044917,
    "node_id": "MDU6SXNzdWU3MDUwNDQ5MTc=",
    "number": 6276,
    "title": "[FEA] rolling median()",
    "user": {
        "login": "ShashaankV",
        "id": 6562289,
        "node_id": "MDQ6VXNlcjY1NjIyODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6562289?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ShashaankV",
        "html_url": "https://github.com/ShashaankV",
        "followers_url": "https://api.github.com/users/ShashaankV/followers",
        "following_url": "https://api.github.com/users/ShashaankV/following{/other_user}",
        "gists_url": "https://api.github.com/users/ShashaankV/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ShashaankV/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ShashaankV/subscriptions",
        "organizations_url": "https://api.github.com/users/ShashaankV/orgs",
        "repos_url": "https://api.github.com/users/ShashaankV/repos",
        "events_url": "https://api.github.com/users/ShashaankV/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ShashaankV/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-09-20T04:50:18Z",
    "updated_at": "2023-04-06T05:28:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Use case: Run a sliding window robust z-score as part of standard EEG preprocessing step. Point is to denoise a non-stationary signal. This is a general outlier detection procedure that could have value outside EEG. \r\n\r\n(There was a previous request last year but seems to have stalled: https://github.com/rapidsai/cudf/issues/2135)\r\n\r\nThe robust z-score uses the **median** for the first (expectation) and second (variance, standard deviation) moments. This is instead of the average. \r\n\r\nCurrent operation takes about 30 minutes for 10^7x20 element data frame in pandas. cuDF could bring this down to seconds. \r\n\r\n**Describe the solution you'd like**\r\nLike to have a median() agg added to rolling or UDF for apply. \r\n\r\nFor robust z the function is:\r\n\r\n$$z_i = \\kappa\\frac{x_i-median(x)}{median(absolute\\{(x_i-median(x))\\})}$$\r\n$$\\text{where } \\kappa\\textrm{ := scaling factor}$$\r\n$$x \\subseteq X \\text{, }X\\text{ column vector in DF} $$\r\n\r\n\r\nSo, some possible solution to get the sliding robust z once we have the median working with apply are: 1) run the median twice (once of the original and then again on the median absolute values of the substracted residuals), and 2) right a custom UDF once the median function solution is known. \r\n\r\n**Describe alternatives you've considered**\r\nI have tried writing a UDF but the issue is the **sort()** needed for the median calculation. I tried a numba nopython pandas rolling.apply solution. This works if I copy the windowed array (x2 = x.copy()). It spits out an error when run with cuDF. I believe it's a memory and/or broadcasting issue (I've seen two kinds of errors). If I don't copy then the pandas numba code sorts the original array and propagates this corrupt data back to the original DF.   \r\n\r\n**Additional context**\r\nHere is an example of the numba solution that works (this is for example to test on cuDF, of course pandas has a rolling median() agg). \r\n\r\n>code\r\n\r\n```\r\n@nb.jit(nopython=True)\r\ndef udf_median(x):\r\n  ##version 0\r\n  #mu = np.median(x)\r\n  ##version 1\r\n  x2 = x.copy()\r\n  x2.sort()\r\n  n = len(x2)\r\n  k = int(n/2) \r\n  if n%2 == 0:\r\n    mu = (x2[k]+x2[k+1])/2\r\n  else:\r\n    mu = x2[k]\r\n  return mu\r\n\r\n\r\n\r\ndf = pd.DataFrame()\r\ndf['a'] = (-5,-3,-1,0.2,-2)\r\ndf['b'] = (5,-3,1,-0.2,-2)\r\nprint('original df')\r\nprint(df)\r\nrolling = df.rolling(window=3,axis=0)\r\nprint(\"panda call\\nwin=3 rolling median\")\r\nprint(rolling.apply(udf_median, engine='numba', raw=True))\r\nprint('df after rolling call - if copy is not done, then corrupted original df')\r\nprint(df)\r\n\r\nprint(\"\\ncuDF call\")\r\ndf = cudf.DataFrame()\r\ndf['a'] = (-5,-3,-1,0.2,-2)\r\ndf['b'] = (5,-3,1,-0.2,-2)\r\nrolling = df.rolling(window=3,axis=0)\r\nprint(rolling.apply(udf_median))\r\n\r\n```\r\n\r\n>output\r\noriginal df\r\n     a    b\r\n0 -5.0  5.0\r\n1 -3.0 -3.0\r\n2 -1.0  1.0\r\n3  0.2 -0.2\r\n4 -2.0 -2.0\r\npanda call\r\nwin=3 rolling median\r\n     a    b\r\n0  NaN  NaN\r\n1  NaN  NaN\r\n2 -3.0  1.0\r\n3 -1.0 -0.2\r\n4 -1.0 -0.2\r\ndf after rolling call - if copy is not done, then corrupted original df\r\n(in this case the df is intact due to the copy function, comment that out to see the error)\r\n     a    b\r\n0 -5.0  5.0\r\n1 -3.0 -3.0\r\n2 -1.0  1.0\r\n3  0.2 -0.2\r\n4 -2.0 -2.0\r\n\r\ncuDF call\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\n/usr/local/lib/python3.6/site-packages/numba/core/errors.py in new_error_context(fmt_, *args, **kwargs)\r\n    744     try:\r\n--> 745         yield\r\n    746     except NumbaError as e:\r\n\r\n40 frames\r\nRuntimeError: NRT required but not enabled\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nLoweringError                             Traceback (most recent call last)\r\ncudf/_lib/rolling.pyx in cudf._lib.rolling.rolling()\r\n\r\ncudf/_lib/aggregation.pyx in cudf._lib.aggregation.make_aggregation()\r\n\r\ncudf/_lib/aggregation.pyx in cudf._lib.aggregation._AggregationFactory.from_udf()\r\n\r\n/usr/local/lib/python3.6/site-packages/numba/core/utils.py in reraise(tp, value, tb)\r\n     79     if value.__traceback__ is not tb:\r\n     80         raise value.with_traceback(tb)\r\n---> 81     raise value\r\n     82 \r\n     83 \r\n\r\nLoweringError: Failed in nopython mode pipeline (step: nopython mode backend)\r\nNRT required but not enabled\r\n\r\nFile \"<ipython-input-16-2c1e7f32fcdd>\", line 6:\r\ndef udf_median(x):\r\n    <source elided>\r\n  ##version 1\r\n  x2 = x.copy()\r\n  ^\r\n\r\nDuring: lowering \"$0.3 = call $0.2(func=$0.2, args=[], kws=(), vararg=None)\" at <ipython-input-16-2c1e7f32fcdd> (6)\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/6276/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/6276/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}