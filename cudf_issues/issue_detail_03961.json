{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/3961",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/3961/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/3961/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/3961/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/3961",
    "id": 556160307,
    "node_id": "MDU6SXNzdWU1NTYxNjAzMDc=",
    "number": 3961,
    "title": "[BUG]Cannot query dataframes with categorical columns ",
    "user": {
        "login": "taureandyernv",
        "id": 46935140,
        "node_id": "MDQ6VXNlcjQ2OTM1MTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/46935140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/taureandyernv",
        "html_url": "https://github.com/taureandyernv",
        "followers_url": "https://api.github.com/users/taureandyernv/followers",
        "following_url": "https://api.github.com/users/taureandyernv/following{/other_user}",
        "gists_url": "https://api.github.com/users/taureandyernv/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/taureandyernv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/taureandyernv/subscriptions",
        "organizations_url": "https://api.github.com/users/taureandyernv/orgs",
        "repos_url": "https://api.github.com/users/taureandyernv/repos",
        "events_url": "https://api.github.com/users/taureandyernv/events{/privacy}",
        "received_events_url": "https://api.github.com/users/taureandyernv/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "galipremsagar",
        "id": 11664259,
        "node_id": "MDQ6VXNlcjExNjY0MjU5",
        "avatar_url": "https://avatars.githubusercontent.com/u/11664259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/galipremsagar",
        "html_url": "https://github.com/galipremsagar",
        "followers_url": "https://api.github.com/users/galipremsagar/followers",
        "following_url": "https://api.github.com/users/galipremsagar/following{/other_user}",
        "gists_url": "https://api.github.com/users/galipremsagar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/galipremsagar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/galipremsagar/subscriptions",
        "organizations_url": "https://api.github.com/users/galipremsagar/orgs",
        "repos_url": "https://api.github.com/users/galipremsagar/repos",
        "events_url": "https://api.github.com/users/galipremsagar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/galipremsagar/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "galipremsagar",
            "id": 11664259,
            "node_id": "MDQ6VXNlcjExNjY0MjU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/11664259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/galipremsagar",
            "html_url": "https://github.com/galipremsagar",
            "followers_url": "https://api.github.com/users/galipremsagar/followers",
            "following_url": "https://api.github.com/users/galipremsagar/following{/other_user}",
            "gists_url": "https://api.github.com/users/galipremsagar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/galipremsagar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/galipremsagar/subscriptions",
            "organizations_url": "https://api.github.com/users/galipremsagar/orgs",
            "repos_url": "https://api.github.com/users/galipremsagar/repos",
            "events_url": "https://api.github.com/users/galipremsagar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/galipremsagar/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-28T11:55:24Z",
    "updated_at": "2020-06-21T14:39:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nif i do a simple query on a categorical column, i get an error stating that  `This error is usually caused by passing an argument of a type that is unsupported by the named function.`\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nimport cudf\r\nimport pandas as pd\r\n\r\nfn = 'test.csv'\r\nlines = \"\"\"id1,id2\r\n1,45\r\n2,3\r\n3, 7\r\n1, 25\r\n\"\"\"\r\nwith open(fn, 'w') as fp:\r\n    fp.write(lines)\r\npdf = pd.read_csv(fn, header=0, dtype={\"id1\":\"category\", \"id2\":\"int32\"})\r\ncdf = cudf.read_csv(fn, header=0, dtype={\"id1\":\"int32\", \"id2\":\"int32\"}) #see #3960 for why i have to do this\r\ncdf['id1'] = cdf['id1'].astype(\"category\")\r\npdf.query(\"id1 == ['1'] and id2 == 45\")\r\ncdf.query(\"id1 == ['1'] and id2 == 45\")\r\n```\r\nThe cdf query outputs a rather large error\r\n```\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\n<ipython-input-27-28a794912e6e> in <module>\r\n----> 1 cdf2.query(\"id1 == ['1'] and id2 == 45\")\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/dataframe.py in query(self, expr, local_dict)\r\n   2893         }\r\n   2894         # Run query\r\n-> 2895         boolmask = queryutils.query_execute(self, expr, callenv)\r\n   2896 \r\n   2897         selected = Series(boolmask)\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/utils/queryutils.py in query_execute(df, expr, callenv)\r\n    223     # run kernel\r\n    224     args = [out] + colarrays + envargs\r\n--> 225     kernel.forall(nrows)(*args)\r\n    226     out_mask = applyutils.make_aggregate_nullmask(df, columns=columns)\r\n    227     if out_mask is not None:\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/cuda/compiler.py in __call__(self, *args)\r\n    264     def __call__(self, *args):\r\n    265         if isinstance(self.kernel, AutoJitCUDAKernel):\r\n--> 266             kernel = self.kernel.specialize(*args)\r\n    267         else:\r\n    268             kernel = self.kernel\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/cuda/compiler.py in specialize(self, *args)\r\n    808         argtypes = tuple(\r\n    809             [self.typingctx.resolve_argument_type(a) for a in args])\r\n--> 810         kernel = self.compile(argtypes)\r\n    811         return kernel\r\n    812 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/cuda/compiler.py in compile(self, sig)\r\n    824                 self.targetoptions['link'] = ()\r\n    825             kernel = compile_kernel(self.py_func, argtypes,\r\n--> 826                                     **self.targetoptions)\r\n    827             self.definitions[(cc, argtypes)] = kernel\r\n    828             if self.bind:\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_lock.py in _acquire_compile_lock(*args, **kwargs)\r\n     30         def _acquire_compile_lock(*args, **kwargs):\r\n     31             with self:\r\n---> 32                 return func(*args, **kwargs)\r\n     33         return _acquire_compile_lock\r\n     34 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/cuda/compiler.py in compile_kernel(pyfunc, args, link, debug, inline, fastmath, extensions, max_registers)\r\n     60 def compile_kernel(pyfunc, args, link, debug=False, inline=False,\r\n     61                    fastmath=False, extensions=[], max_registers=None):\r\n---> 62     cres = compile_cuda(pyfunc, types.void, args, debug=debug, inline=inline)\r\n     63     fname = cres.fndesc.llvm_func_name\r\n     64     lib, kernel = cres.target_context.prepare_cuda_kernel(cres.library, fname,\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_lock.py in _acquire_compile_lock(*args, **kwargs)\r\n     30         def _acquire_compile_lock(*args, **kwargs):\r\n     31             with self:\r\n---> 32                 return func(*args, **kwargs)\r\n     33         return _acquire_compile_lock\r\n     34 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/cuda/compiler.py in compile_cuda(pyfunc, return_type, args, debug, inline)\r\n     49                                   return_type=return_type,\r\n     50                                   flags=flags,\r\n---> 51                                   locals={})\r\n     52 \r\n     53     library = cres.library\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler.py in compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library, pipeline_class)\r\n    526     pipeline = pipeline_class(typingctx, targetctx, library,\r\n    527                               args, return_type, flags, locals)\r\n--> 528     return pipeline.compile_extra(func)\r\n    529 \r\n    530 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler.py in compile_extra(self, func)\r\n    324         self.state.lifted = ()\r\n    325         self.state.lifted_from = None\r\n--> 326         return self._compile_bytecode()\r\n    327 \r\n    328     def compile_ir(self, func_ir, lifted=(), lifted_from=None):\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler.py in _compile_bytecode(self)\r\n    383         \"\"\"\r\n    384         assert self.state.func_ir is None\r\n--> 385         return self._compile_core()\r\n    386 \r\n    387     def _compile_ir(self):\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler.py in _compile_core(self)\r\n    363                 self.state.status.fail_reason = e\r\n    364                 if is_final_pipeline:\r\n--> 365                     raise e\r\n    366         else:\r\n    367             raise CompilerError(\"All available pipelines exhausted\")\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler.py in _compile_core(self)\r\n    354             res = None\r\n    355             try:\r\n--> 356                 pm.run(self.state)\r\n    357                 if self.state.cr is not None:\r\n    358                     break\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_machinery.py in run(self, state)\r\n    326                     (self.pipeline_name, pass_desc)\r\n    327                 patched_exception = self._patch_error(msg, e)\r\n--> 328                 raise patched_exception\r\n    329 \r\n    330     def dependency_analysis(self):\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_machinery.py in run(self, state)\r\n    317                 pass_inst = _pass_registry.get(pss).pass_inst\r\n    318                 if isinstance(pass_inst, CompilerPass):\r\n--> 319                     self._runPass(idx, pass_inst, state)\r\n    320                 else:\r\n    321                     raise BaseException(\"Legacy pass in use\")\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_lock.py in _acquire_compile_lock(*args, **kwargs)\r\n     30         def _acquire_compile_lock(*args, **kwargs):\r\n     31             with self:\r\n---> 32                 return func(*args, **kwargs)\r\n     33         return _acquire_compile_lock\r\n     34 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_machinery.py in _runPass(self, index, pss, internal_state)\r\n    279             mutated |= check(pss.run_initialization, internal_state)\r\n    280         with SimpleTimer() as pass_time:\r\n--> 281             mutated |= check(pss.run_pass, internal_state)\r\n    282         with SimpleTimer() as finalize_time:\r\n    283             mutated |= check(pss.run_finalizer, internal_state)\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/compiler_machinery.py in check(func, compiler_state)\r\n    266 \r\n    267         def check(func, compiler_state):\r\n--> 268             mangled = func(compiler_state)\r\n    269             if mangled not in (True, False):\r\n    270                 msg = (\"CompilerPass implementations should return True/False. \"\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/typed_passes.py in run_pass(self, state)\r\n     92                 state.args,\r\n     93                 state.return_type,\r\n---> 94                 state.locals)\r\n     95             state.typemap = typemap\r\n     96             state.return_type = return_type\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/typed_passes.py in type_inference_stage(typingctx, interp, args, return_type, locals)\r\n     64 \r\n     65         infer.build_constraint()\r\n---> 66         infer.propagate()\r\n     67         typemap, restype, calltypes = infer.unify()\r\n     68 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numba/typeinfer.py in propagate(self, raise_errors)\r\n    949                                   if isinstance(e, ForceLiteralArg)]\r\n    950                 if not force_lit_args:\r\n--> 951                     raise errors[0]\r\n    952                 else:\r\n    953                     raise reduce(operator.or_, force_lit_args)\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nInvalid use of Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f914147a320>) with argument(s) of type(s): (int32, int32)\r\n * parameterized\r\nIn definition 0:\r\n    TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nInvalid use of Function(<built-in function eq>) with argument(s) of type(s): (int32, list(unicode_type))\r\nKnown signatures:\r\n * (bool, bool) -> bool\r\n * (int8, int8) -> bool\r\n * (int16, int16) -> bool\r\n * (int32, int32) -> bool\r\n * (int64, int64) -> bool\r\n * (uint8, uint8) -> bool\r\n * (uint16, uint16) -> bool\r\n * (uint32, uint32) -> bool\r\n * (uint64, uint64) -> bool\r\n * (float32, float32) -> bool\r\n * (float64, float64) -> bool\r\n * (complex64, complex64) -> bool\r\n * (complex128, complex128) -> bool\r\n * parameterized\r\nIn definition 0:\r\n    All templates rejected with literals.\r\nIn definition 1:\r\n    All templates rejected without literals.\r\nIn definition 2:\r\n    All templates rejected with literals.\r\nIn definition 3:\r\n    All templates rejected without literals.\r\nIn definition 4:\r\n    All templates rejected with literals.\r\nIn definition 5:\r\n    All templates rejected without literals.\r\nIn definition 6:\r\n    All templates rejected with literals.\r\nIn definition 7:\r\n    All templates rejected without literals.\r\nIn definition 8:\r\n    All templates rejected with literals.\r\nIn definition 9:\r\n    All templates rejected without literals.\r\nIn definition 10:\r\n    All templates rejected with literals.\r\nIn definition 11:\r\n    All templates rejected without literals.\r\nIn definition 12:\r\n    All templates rejected with literals.\r\nIn definition 13:\r\n    All templates rejected without literals.\r\nIn definition 14:\r\n    All templates rejected with literals.\r\nIn definition 15:\r\n    All templates rejected without literals.\r\nIn definition 16:\r\n    All templates rejected with literals.\r\nIn definition 17:\r\n    All templates rejected without literals.\r\nIn definition 18:\r\n    All templates rejected with literals.\r\nIn definition 19:\r\n    All templates rejected without literals.\r\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\r\n[1] During: typing of intrinsic-call at <string> (2)\r\n\r\nFile \"<string>\", line 2:\r\n<source missing, REPL/exec in use?>\r\n\r\n    raised from /opt/conda/envs/rapids/lib/python3.7/site-packages/numba/typeinfer.py:951\r\nIn definition 1:\r\n    TypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nInvalid use of Function(<built-in function eq>) with argument(s) of type(s): (int32, list(unicode_type))\r\nKnown signatures:\r\n * (bool, bool) -> bool\r\n * (int8, int8) -> bool\r\n * (int16, int16) -> bool\r\n * (int32, int32) -> bool\r\n * (int64, int64) -> bool\r\n * (uint8, uint8) -> bool\r\n * (uint16, uint16) -> bool\r\n * (uint32, uint32) -> bool\r\n * (uint64, uint64) -> bool\r\n * (float32, float32) -> bool\r\n * (float64, float64) -> bool\r\n * (complex64, complex64) -> bool\r\n * (complex128, complex128) -> bool\r\n * parameterized\r\nIn definition 0:\r\n    All templates rejected with literals.\r\nIn definition 1:\r\n    All templates rejected without literals.\r\nIn definition 2:\r\n    All templates rejected with literals.\r\nIn definition 3:\r\n    All templates rejected without literals.\r\nIn definition 4:\r\n    All templates rejected with literals.\r\nIn definition 5:\r\n    All templates rejected without literals.\r\nIn definition 6:\r\n    All templates rejected with literals.\r\nIn definition 7:\r\n    All templates rejected without literals.\r\nIn definition 8:\r\n    All templates rejected with literals.\r\nIn definition 9:\r\n    All templates rejected without literals.\r\nIn definition 10:\r\n    All templates rejected with literals.\r\nIn definition 11:\r\n    All templates rejected without literals.\r\nIn definition 12:\r\n    All templates rejected with literals.\r\nIn definition 13:\r\n    All templates rejected without literals.\r\nIn definition 14:\r\n    All templates rejected with literals.\r\nIn definition 15:\r\n    All templates rejected without literals.\r\nIn definition 16:\r\n    All templates rejected with literals.\r\nIn definition 17:\r\n    All templates rejected without literals.\r\nIn definition 18:\r\n    All templates rejected with literals.\r\nIn definition 19:\r\n    All templates rejected without literals.\r\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\r\n[1] During: typing of intrinsic-call at <string> (2)\r\n\r\nFile \"<string>\", line 2:\r\n<source missing, REPL/exec in use?>\r\n\r\n    raised from /opt/conda/envs/rapids/lib/python3.7/site-packages/numba/typeinfer.py:951\r\nThis error is usually caused by passing an argument of a type that is unsupported by the named function.\r\n[1] During: resolving callee type: Function(<numba.cuda.compiler.DeviceFunctionTemplate object at 0x7f914147a320>)\r\n[2] During: typing of call at <string> (6)\r\n\r\n\r\nFile \"<string>\", line 6:\r\n<source missing, REPL/exec in use?>\r\n```\r\n**Expected behavior**\r\nI expect it to output similar to the `pdf.query`, `pdf.query(\"id1 == ['1'] and id2 == 45\")`\r\n\r\nid1 | id2\r\n-- | --\r\n1 | 45\r\n\r\n**Environment overview (please complete the following information)**\r\n - Environment location: [Docker]\r\n - Method of cuDF install: [Docker]\r\n\r\n**Additional context**\r\nConverting from cudf to pandas to do the query also inexplicitly fails\r\n```\r\ntdf = cdf.to_pandas()\r\ntdf['id1']\r\n```\r\nwill output correctly with \r\n```\r\n0    1\r\n1    2\r\n2    3\r\n3    1\r\nName: id1, dtype: category\r\nCategories (3, int64): [1, 2, 3]\r\n```\r\nbut when you run the query...\r\n```\r\ntdf.query(\"id1 == ['1'] and id2 == 45\")\r\n```\r\nOutputs an empty table \r\n\r\n\u00a0 | id1 | id2\r\n-- | -- | --\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/3961/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/3961/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}