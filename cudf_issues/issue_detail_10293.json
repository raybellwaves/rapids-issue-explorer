{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/10293",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/10293/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/10293/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/10293/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/10293",
    "id": 1138833213,
    "node_id": "I_kwDOBWUGps5D4Tc9",
    "number": 10293,
    "title": "[FEA] Support dask correlation and covariance when columns include nulls",
    "user": {
        "login": "beckernick",
        "id": 8457388,
        "node_id": "MDQ6VXNlcjg0NTczODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/beckernick",
        "html_url": "https://github.com/beckernick",
        "followers_url": "https://api.github.com/users/beckernick/followers",
        "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
        "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
        "organizations_url": "https://api.github.com/users/beckernick/orgs",
        "repos_url": "https://api.github.com/users/beckernick/repos",
        "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/beckernick/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        },
        {
            "id": 1185240898,
            "node_id": "MDU6TGFiZWwxMTg1MjQwODk4",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/dask",
            "name": "dask",
            "color": "fcc25d",
            "default": false,
            "description": "Dask issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-02-15T15:20:11Z",
    "updated_at": "2024-02-23T18:42:55Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Currently, Dask's `{DataFrame, Series}.corr` [codepath](https://github.com/dask/dask/blob/20e924618999febeac706b20212104fe4f3ea61d/dask/dataframe/core.py#L6462-L6467) relies on calling `df.values` in `_cov_corr_chunk`. When cudf columns have null values, we throw an error trying to convert to cupy.\r\n\r\nI'd like to be able to do the following with Dask and have data containing nulls handled appropriately on GPUs and CPUs.\r\n\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\nimport dask_cudf\r\nimport cudf\r\n\u200b\r\ndf = pd.DataFrame({\r\n    \"a\":[0,0,1,1,1,0,1],\r\n    \"b\":[10,None,3,None,5,4,2],\r\n    \"c\":[10,-3,3,-6,5,4,-2]\r\n})\r\ngdf = cudf.from_pandas(df)\r\nddf = dd.from_pandas(df, 2)\r\ngddf = dask_cudf.from_dask_dataframe(ddf)\r\n\u200b\r\n\u200b\r\nprint(ddf.corr().compute())\r\nprint(gddf.corr().compute())\r\n          a         b         c\r\na  1.000000 -0.644831 -0.356138\r\nb -0.644831  1.000000  0.933122\r\nc -0.356138  0.933122  1.000000\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nInput In [51], in <module>\r\n     13 gddf = dask_cudf.from_dask_dataframe(ddf)\r\n     16 print(ddf.corr().compute())\r\n---> 17 print(gddf.corr().compute())\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/base.py:288, in DaskMethodsMixin.compute(self, **kwargs)\r\n    264 def compute(self, **kwargs):\r\n    265     \"\"\"Compute this dask collection\r\n    266 \r\n    267     This turns a lazy Dask collection into its in-memory equivalent.\r\n   (...)\r\n    286     dask.base.compute\r\n    287     \"\"\"\r\n--> 288     (result,) = compute(self, traverse=False, **kwargs)\r\n    289     return result\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/base.py:571, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    568     keys.append(x.__dask_keys__())\r\n    569     postcomputes.append(x.__dask_postcompute__())\r\n--> 571 results = schedule(dsk, keys, **kwargs)\r\n    572 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/threaded.py:79, in get(dsk, result, cache, num_workers, pool, **kwargs)\r\n     76     elif isinstance(pool, multiprocessing.pool.Pool):\r\n     77         pool = MultiprocessingPoolExecutor(pool)\r\n---> 79 results = get_async(\r\n     80     pool.submit,\r\n     81     pool._max_workers,\r\n     82     dsk,\r\n     83     result,\r\n     84     cache=cache,\r\n     85     get_id=_thread_get_id,\r\n     86     pack_exception=pack_exception,\r\n     87     **kwargs,\r\n     88 )\r\n     90 # Cleanup pools associated to dead threads\r\n     91 with pools_lock:\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/local.py:507, in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\r\n    505         _execute_task(task, data)  # Re-execute locally\r\n    506     else:\r\n--> 507         raise_exception(exc, tb)\r\n    508 res, worker_id = loads(res_info)\r\n    509 state[\"cache\"][key] = res\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/local.py:315, in reraise(exc, tb)\r\n    313 if exc.__traceback__ is not tb:\r\n    314     raise exc.with_traceback(tb)\r\n--> 315 raise exc\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/local.py:220, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    218 try:\r\n    219     task, data = loads(task_info)\r\n--> 220     result = _execute_task(task, data)\r\n    221     id = get_id()\r\n    222     result = dumps((result, id))\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/core.py:119, in _execute_task(arg, cache, dsk)\r\n    115     func, args = arg[0], arg[1:]\r\n    116     # Note: Don't assign the subtask results to a variable. numpy detects\r\n    117     # temporaries by their reference count and can execute certain\r\n    118     # operations in-place.\r\n--> 119     return func(*(_execute_task(a, cache) for a in args))\r\n    120 elif not ishashable(arg):\r\n    121     return arg\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/dask/dataframe/core.py:6440, in cov_corr_chunk(df, corr)\r\n   6438 shape = (df.shape[1], df.shape[1])\r\n   6439 df = df.astype(\"float64\", copy=False)\r\n-> 6440 sums = np.zeros_like(df.values, shape=shape)\r\n   6441 counts = np.zeros_like(df.values, shape=shape)\r\n   6442 for idx, col in enumerate(df):\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/frame.py:619, in Frame.values(self)\r\n    606 @property\r\n    607 def values(self):\r\n    608     \"\"\"\r\n    609     Return a CuPy representation of the DataFrame.\r\n    610 \r\n   (...)\r\n    617         The values of the DataFrame.\r\n    618     \"\"\"\r\n--> 619     return self.to_cupy()\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/contextlib.py:75, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)\r\n     72 @wraps(func)\r\n     73 def inner(*args, **kwds):\r\n     74     with self._recreate_cm():\r\n---> 75         return func(*args, **kwds)\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/frame.py:719, in Frame.to_cupy(self, dtype, copy, na_value)\r\n    693 @annotate(\"FRAME_TO_CUPY\", color=\"green\", domain=\"cudf_python\")\r\n    694 def to_cupy(\r\n    695     self,\r\n   (...)\r\n    698     na_value=None,\r\n    699 ) -> cupy.ndarray:\r\n    700     \"\"\"Convert the Frame to a CuPy array.\r\n    701 \r\n    702     Parameters\r\n   (...)\r\n    717     cupy.ndarray\r\n    718     \"\"\"\r\n--> 719     return self._to_array(\r\n    720         (lambda col: col.values.copy())\r\n    721         if copy\r\n    722         else (lambda col: col.values),\r\n    723         cupy.empty,\r\n    724         dtype,\r\n    725         na_value,\r\n    726     )\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/frame.py:684, in Frame._to_array(self, get_column_values, make_empty_matrix, dtype, na_value)\r\n    677 matrix = make_empty_matrix(\r\n    678     shape=(len(self), ncol), dtype=dtype, order=\"F\"\r\n    679 )\r\n    680 for i, col in enumerate(self._data.values()):\r\n    681     # TODO: col.values may fail if there is nullable data or an\r\n    682     # unsupported dtype. We may want to catch and provide a more\r\n    683     # suitable error.\r\n--> 684     matrix[:, i] = get_column_values_na(col)\r\n    685 return matrix\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/frame.py:663, in Frame._to_array.<locals>.get_column_values_na(col)\r\n    661 if na_value is not None:\r\n    662     col = col.fillna(na_value)\r\n--> 663 return get_column_values(col)\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/frame.py:722, in Frame.to_cupy.<locals>.<lambda>(col)\r\n    693 @annotate(\"FRAME_TO_CUPY\", color=\"green\", domain=\"cudf_python\")\r\n    694 def to_cupy(\r\n    695     self,\r\n   (...)\r\n    698     na_value=None,\r\n    699 ) -> cupy.ndarray:\r\n    700     \"\"\"Convert the Frame to a CuPy array.\r\n    701 \r\n    702     Parameters\r\n   (...)\r\n    717     cupy.ndarray\r\n    718     \"\"\"\r\n    719     return self._to_array(\r\n    720         (lambda col: col.values.copy())\r\n    721         if copy\r\n--> 722         else (lambda col: col.values),\r\n    723         cupy.empty,\r\n    724         dtype,\r\n    725         na_value,\r\n    726     )\r\n\r\nFile ~/conda/envs/rapids-22.04/lib/python3.8/site-packages/cudf/core/column/column.py:155, in ColumnBase.values(self)\r\n    152     return cupy.array([], dtype=self.dtype)\r\n    154 if self.has_nulls():\r\n--> 155     raise ValueError(\"Column must have no nulls.\")\r\n    157 return cupy.asarray(self.data_array_view)\r\n\r\nValueError: Column must have no nulls.\r\n```\r\n\r\nEnvironment: <details>\r\nconda list | grep \"rapids\\|dask\\|cupy\"\r\n# packages in environment at /home/nicholasb/conda/envs/rapids-22.04:\r\ncucim                     22.04.00a220215 cuda_11_py38_g12cc926_22    rapidsai-nightly\r\ncudf                      22.04.00a220215 cuda_11_py38_g8b0737d7a4_164    rapidsai-nightly\r\ncudf_kafka                22.04.00a220215 py38_g8b0737d7a4_164    rapidsai-nightly\r\ncugraph                   22.04.00a220215 cuda11_py38_g5f971fef_53    rapidsai-nightly\r\ncuml                      22.04.00a220215 cuda11_py38_g88e41e858_62    rapidsai-nightly\r\ncupy                      9.6.0            py38h177b0fd_0    conda-forge\r\ncusignal                  22.04.00a220215 py39_gc620d82_7    rapidsai-nightly\r\ncuspatial                 22.04.00a220215 py38_gc63083c_11    rapidsai-nightly\r\ncustreamz                 22.04.00a220215 py38_g8b0737d7a4_164    rapidsai-nightly\r\ncuxfilter                 22.04.00a220215 py38_g97fa691_8    rapidsai-nightly\r\ndask                      2022.1.0           pyhd8ed1ab_0    conda-forge\r\ndask-core                 2022.1.0           pyhd8ed1ab_0    conda-forge\r\ndask-cuda                 22.04.00a220215         py38_15    rapidsai-nightly\r\ndask-cudf                 22.04.00a220215 cuda_11_py38_g8b0737d7a4_164    rapidsai-nightly\r\ndask-sql                  2022.1.0         py38h578d9bd_0    conda-forge\r\nlibcucim                  22.04.00a220215 cuda11_g12cc926_22    rapidsai-nightly\r\nlibcudf                   22.04.00a220215 cuda11_g8b0737d7a4_164    rapidsai-nightly\r\nlibcudf_kafka             22.04.00a220215 g8b0737d7a4_164    rapidsai-nightly\r\nlibcugraph                22.04.00a220215 cuda11_g5f971fef_53    rapidsai-nightly\r\nlibcugraph_etl            22.04.00a220215 cuda11_g5f971fef_53    rapidsai-nightly\r\nlibcuml                   22.04.00a220215 cuda11_g88e41e858_62    rapidsai-nightly\r\nlibcumlprims              22.04.00a220207 cuda11_gde69bdf_11    rapidsai-nightly\r\nlibcuspatial              22.04.00a220215 cuda11_gc63083c_11    rapidsai-nightly\r\nlibrmm                    22.04.00a220215 cuda11_g653f331_23    rapidsai-nightly\r\nlibxgboost                1.5.2dev.rapidsai22.04      cuda11.2_0    rapidsai-nightly\r\nptxcompiler               0.2.0            py38h98f4b32_0    rapidsai-nightly\r\npy-xgboost                1.5.2dev.rapidsai22.04  cuda11.2py38_0    rapidsai-nightly\r\npylibcugraph              22.04.00a220215 cuda11_py38_g5f971fef_53    rapidsai-nightly\r\nrapids                    22.04.00a220215 cuda11_py38_g76071bf_87    rapidsai-nightly\r\nrapids-xgboost            22.04.00a220215 cuda11_py38_g76071bf_87    rapidsai-nightly\r\nrmm                       22.04.00a220203 cuda11_py38_g0515ca4_16_has_cma    rapidsai-nightly\r\nucx                       1.12.0+gd367332      cuda11.2_0    rapidsai-nightly\r\nucx-proc                  1.0.0                       gpu    rapidsai-nightly\r\nucx-py                    0.25.00a220205  py38_gd367332_4    rapidsai-nightly\r\nxgboost                   1.5.2dev.rapidsai22.04  cuda11.2py38_0    rapidsai-nightly\r\n</details>",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/10293/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/10293/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}