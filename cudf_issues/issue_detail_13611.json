{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13611",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13611/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13611/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13611/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13611",
    "id": 1771924769,
    "node_id": "I_kwDOBWUGps5pnW0h",
    "number": 13611,
    "title": "[FEA] Add support for timezone-aware data to `from_pandas`",
    "user": {
        "login": "charlesbluca",
        "id": 20627856,
        "node_id": "MDQ6VXNlcjIwNjI3ODU2",
        "avatar_url": "https://avatars.githubusercontent.com/u/20627856?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/charlesbluca",
        "html_url": "https://github.com/charlesbluca",
        "followers_url": "https://api.github.com/users/charlesbluca/followers",
        "following_url": "https://api.github.com/users/charlesbluca/following{/other_user}",
        "gists_url": "https://api.github.com/users/charlesbluca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/charlesbluca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/charlesbluca/subscriptions",
        "organizations_url": "https://api.github.com/users/charlesbluca/orgs",
        "repos_url": "https://api.github.com/users/charlesbluca/repos",
        "events_url": "https://api.github.com/users/charlesbluca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/charlesbluca/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-06-23T18:45:08Z",
    "updated_at": "2023-07-22T20:16:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSupport for timezone-aware datetimes is ongoing in https://github.com/rapidsai/cudf/issues/12813, and currently timezone-aware operations like `tz_convert` and `tz_localize` are supported.\r\n\r\nHowever, when trying to load in a pandas dataframe with timezone-aware data using `from_pandas`, we still error with a message that implies that timezone-aware datetimes aren't yet supported:\r\n\r\n```python\r\nimport cudf\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        \"d\": pd.date_range(\r\n            start=\"2014-08-01 09:00\", freq=\"8H\", periods=6, tz=\"UTC\"\r\n        ),\r\n    }\r\n)\r\n\r\ncudf.from_pandas(df)\r\n```\r\n\r\n```python-traceback\r\nNotImplementedError                       Traceback (most recent call last)\r\nCell In[1], line 12\r\n      2 import pandas as pd\r\n      4 df = pd.DataFrame(\r\n      5     {\r\n      6         \"d\": pd.date_range(\r\n   (...)\r\n      9     }\r\n     10 )\r\n---> 12 cudf.from_pandas(df)\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/cudf/core/dataframe.py:7491, in from_pandas(obj, nan_as_null)\r\n   7393 \"\"\"\r\n   7394 Convert certain Pandas objects into the cudf equivalent.\r\n   7395 \r\n   (...)\r\n   7488 <class 'pandas.core.indexes.multi.MultiIndex'>\r\n   7489 \"\"\"\r\n   7490 if isinstance(obj, pd.DataFrame):\r\n-> 7491     return DataFrame.from_pandas(obj, nan_as_null=nan_as_null)\r\n   7492 elif isinstance(obj, pd.Series):\r\n   7493     return Series.from_pandas(obj, nan_as_null=nan_as_null)\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/cudf/core/dataframe.py:5119, in DataFrame.from_pandas(cls, dataframe, nan_as_null)\r\n   5115 for col_name, col_value in dataframe.items():\r\n   5116     # necessary because multi-index can return multiple\r\n   5117     # columns for a single key\r\n   5118     if len(col_value.shape) == 1:\r\n-> 5119         data[col_name] = column.as_column(\r\n   5120             col_value.array, nan_as_null=nan_as_null\r\n   5121         )\r\n   5122     else:\r\n   5123         vals = col_value.values.T\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/cudf/core/column/column.py:2327, in as_column(arbitrary, nan_as_null, dtype, length)\r\n   2317         if cudf.get_option(\r\n   2318             \"default_float_bitwidth\"\r\n   2319         ) and infer_dtype(arbitrary) in (\r\n   2320             \"floating\",\r\n   2321             \"mixed-integer-float\",\r\n   2322         ):\r\n   2323             pa_type = np_to_pa_dtype(\r\n   2324                 _maybe_convert_to_default_type(\"float\")\r\n   2325             )\r\n-> 2327     data = as_column(\r\n   2328         pa.array(\r\n   2329             arbitrary,\r\n   2330             type=pa_type,\r\n   2331             from_pandas=True\r\n   2332             if nan_as_null is None\r\n   2333             else nan_as_null,\r\n   2334         ),\r\n   2335         dtype=dtype,\r\n   2336         nan_as_null=nan_as_null,\r\n   2337     )\r\n   2338 except (pa.ArrowInvalid, pa.ArrowTypeError, TypeError):\r\n   2339     if is_categorical_dtype(dtype):\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/cudf/core/column/column.py:1974, in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1968 if isinstance(arbitrary, pa.lib.HalfFloatArray):\r\n   1969     raise NotImplementedError(\r\n   1970         \"Type casting from `float16` to `float32` is not \"\r\n   1971         \"yet supported in pyarrow, see: \"\r\n   1972         \"https://issues.apache.org/jira/browse/ARROW-3802\"\r\n   1973     )\r\n-> 1974 col = ColumnBase.from_arrow(arbitrary)\r\n   1976 if isinstance(arbitrary, pa.NullArray):\r\n   1977     new_dtype = cudf.dtype(arbitrary.type.to_pandas_dtype())\r\n\r\nFile /datasets/charlesb/micromamba/envs/dask-sql-gpuci-py39/lib/python3.9/site-packages/cudf/core/column/column.py:340, in ColumnBase.from_arrow(cls, array)\r\n    334 data = pa.table([array], [None])\r\n    336 if (\r\n    337     isinstance(array.type, pa.TimestampType)\r\n    338     and array.type.tz is not None\r\n    339 ):\r\n--> 340     raise NotImplementedError(\r\n    341         \"cuDF does not yet support timezone-aware datetimes\"\r\n    342     )\r\n    343 if isinstance(array.type, pa.DictionaryType):\r\n    344     indices_table = pa.table(\r\n    345         {\r\n    346             \"None\": pa.chunked_array(\r\n   (...)\r\n    350         }\r\n    351     )\r\n\r\nNotImplementedError: cuDF does not yet support timezone-aware datetimes\r\n```\r\n\r\n**Describe the solution you'd like**\r\nEither adding support for timezone-aware data to `from_pandas`, or updating the error message to indicate to users workarounds they can use while support is in progress.\r\n\r\n**Describe alternatives you've considered**\r\nIt is generally possible to move timezone-aware data from pandas to cuDF by storing the timezone information somewhere, converting the data to timezone-naive (`dt.tz_localize(None)`) and then restoring the information once it's been read in with `from_pandas`.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13611/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13611/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}