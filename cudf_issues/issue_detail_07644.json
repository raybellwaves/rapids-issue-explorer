{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/7644",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/7644/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/7644/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/7644/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/7644",
    "id": 835309423,
    "node_id": "MDU6SXNzdWU4MzUzMDk0MjM=",
    "number": 7644,
    "title": "[FEA][INTERNALS] A `ColumnMeta` type to represent the column metadata of a `Frame`",
    "user": {
        "login": "shwina",
        "id": 3190405,
        "node_id": "MDQ6VXNlcjMxOTA0MDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shwina",
        "html_url": "https://github.com/shwina",
        "followers_url": "https://api.github.com/users/shwina/followers",
        "following_url": "https://api.github.com/users/shwina/following{/other_user}",
        "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
        "organizations_url": "https://api.github.com/users/shwina/orgs",
        "repos_url": "https://api.github.com/users/shwina/repos",
        "events_url": "https://api.github.com/users/shwina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shwina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-03-18T22:07:35Z",
    "updated_at": "2024-05-11T00:05:23Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "When we roundtrip a `Frame` between Python and libcudf, we potentially lose a bunch of metadata:\r\n\r\n1. Names of columns\r\n2. Whether the columns have multiple levels (i.e., the Frame has a MultiIndex as its columns(\r\n3. The level names\r\n\r\n## The problem\r\n\r\nlibcudf functions return a `unique_ptr<cudf::table>`, we  convert that `table` into a  `Frame` in the function [from_unique_ptr](https://github.com/rapidsai/cudf/blob/ec5364c2fc0a3c63583e648ec90efa8d3b5675bc/python/cudf/cudf/_lib/table.pyx#L82). Here, we pass the column names (1), but not the multiindex (2) or level_names (3) metadata.\r\n\r\nThis can lead to surprising behaviour in many situations. For example, consider the `loc` call below where we lose the `multiindex` part of our metadata:\r\n\r\n```python\r\nIn [10]: df\r\nOut[10]:\r\n    a       b\r\n  sum min max min\r\na\r\n2   4   2   5   4\r\n1   3   1   3   1\r\n\r\nIn [11]: df.loc[[2, 2, 1, 1], :]\r\nOut[11]:\r\n   (a, sum)  (a, min)  (b, max)  (b, min)\r\na\r\n2         4         2         5         4\r\n2         4         2         5         4\r\n1         3         1         3         1\r\n1         3         1         3         1\r\n\r\nIn [12]: df.to_pandas().loc[[2, 2, 1, 1], :]\r\nOut[12]:\r\n    a       b\r\n  sum min max min\r\na\r\n2   4   2   5   4\r\n2   4   2   5   4\r\n1   3   1   3   1\r\n1   3   1   3   1\r\n```\r\n\r\n## Proposed solution\r\n\r\nWe could introduce an internal `ColumnMeta` type:\r\n\r\n```python\r\nclass ColumnMeta:\r\n    names: Tuple[Any]\r\n    multiindex: bool\r\n    level_names: Optional[Tuple[Any]]\r\n```\r\n\r\nwhich could be a property of `Frame` objects for convenience:\r\n\r\n```python\r\nclass Frame:\r\n    @cached_property\r\n    def _column_meta(self):\r\n         ...\r\n```\r\n\r\nNow, instead of passing just the column names and index names to `from_unique_ptr`, we could pass the full metadata for both:\r\n\r\n```python\r\ncdef Table from_unique_ptr(\r\n    unique_ptr[table] c_tbl,\r\n    ColumnMeta data_meta,\r\n    ColumnMeta index_meta=None\r\n):\r\n```\r\n\r\nand it would construct the resulting `Frame` with the correct column metadata.\r\n\r\n--\r\n\r\nWith this, a typical Python wrapper around a libcudf API would be:\r\n\r\n```python\r\ndef py_func(Table foo, ...):\r\n    cdef table_view c_input = foo.view()\r\n    cdef unique_ptr[table] c_result\r\n    with nogil:\r\n        c_result = cpp_func(c_input)\r\n    return Table.from_unique_ptr(c_result, foo._column_meta, foo.index._column_meta)\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/7644/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/7644/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}