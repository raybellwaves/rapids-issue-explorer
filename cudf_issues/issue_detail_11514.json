{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/11514",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/11514/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/11514/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/11514/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/11514",
    "id": 1335726013,
    "node_id": "I_kwDOBWUGps5PnY-9",
    "number": 11514,
    "title": "[FEA] Interchange protocol between processes on the same device.",
    "user": {
        "login": "trivialfis",
        "id": 16746409,
        "node_id": "MDQ6VXNlcjE2NzQ2NDA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/16746409?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/trivialfis",
        "html_url": "https://github.com/trivialfis",
        "followers_url": "https://api.github.com/users/trivialfis/followers",
        "following_url": "https://api.github.com/users/trivialfis/following{/other_user}",
        "gists_url": "https://api.github.com/users/trivialfis/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/trivialfis/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trivialfis/subscriptions",
        "organizations_url": "https://api.github.com/users/trivialfis/orgs",
        "repos_url": "https://api.github.com/users/trivialfis/repos",
        "events_url": "https://api.github.com/users/trivialfis/events{/privacy}",
        "received_events_url": "https://api.github.com/users/trivialfis/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        },
        {
            "id": 1185244142,
            "node_id": "MDU6TGFiZWwxMTg1MjQ0MTQy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/cuIO",
            "name": "cuIO",
            "color": "fef2c0",
            "default": false,
            "description": "cuIO issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/25",
        "html_url": "https://github.com/rapidsai/cudf/milestone/25",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/25/labels",
        "id": 8693498,
        "node_id": "MI_kwDOBWUGps4AhKb6",
        "number": 25,
        "title": "Helps libcudf C++ integrations",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 14,
        "closed_issues": 7,
        "state": "open",
        "created_at": "2022-11-26T17:28:14Z",
        "updated_at": "2024-05-13T23:56:47Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 29,
    "created_at": "2022-08-11T09:52:09Z",
    "updated_at": "2023-04-02T22:40:32Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "A related issue: https://github.com/rapidsai/cudf/issues/11462\r\n\r\nWe would like to transfer a cuDF dataframe between a JVM process and a Python process without data copy . This is primarily used in PySpark environment where Spark can execute user-defined Python functions in JVM processes. The current solution in Spark is to serialize the dataframe into arrow format and perform an inter-process transfer on host. This is not efficient for both memory usage and computation time. Our proposed solution at the moment is to use the CUDA IPC mechanism for transferring metadata between 2 processes without actually copying data between host and device or between different processes. The message sent between 2 processes in our proposed method is a JSON document that describes some properties of the dataframe along with an encoded CUDA IPC handle.\r\n\r\n**Describe the solution you'd like**\r\nWe would like to add two roundtrip methods for generating an IPC message that describes the dataframe and reconstructs the dataframe from that message at the C++/C level along with wrappers in java/python.  \r\n\r\n``` python\r\ndf = cudf.DataFrame({\"a\": [1, 2, 3]})\r\nmsg = df.to_ipc()\r\n\r\n# in a different process but on the same CUDA device\r\ndf = cudf.DataFrame.from_ipc(msg)\r\n```\r\n\r\nAs for a quick design of the message, for the lack of a better term, we can jsonify the `__dataframe__` protocol along with the use of encoded CUDA IPC handle. The message sent between processes can be something similar to:\r\n``` json\r\n{\r\n  \"columns\": [\r\n    {\r\n      \"describe_categorical\": {\r\n        \"is_dictionary\": true,\r\n        \"is_ordered\": true,\r\n        \"mapping\": {\r\n          \"a\": 0\r\n        }\r\n      },\r\n      \"describe_null\": [\r\n        3,\r\n        null\r\n      ],\r\n      \"dtype\": [\r\n        0,\r\n        64,\r\n        \"i\",\r\n        \"=\"\r\n      ],\r\n      \"buffers\": [{\"ipc_handle\": \"aeb6df622e4d6ed84dac526c8815c52c5bb2a34855a765270d6e1a502dc6574b\"}],\r\n      \"metadata\": null,\r\n      \"null_count\": null,\r\n      \"offset\": 0,\r\n      \"size\": 128\r\n    },\r\n    {\r\n      ...\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nWe might be able to reuse some logic in the `df_protocol.py` module for implementing this feature.\r\n\r\n**Describe alternatives you've considered**\r\n- Suggested by @jakirkham , I looked into the serialize and deserialize methods. They are good starting points but not suitable for transferring ownership between 2 different language environments due to the use of pickle in type serialization.\r\n- Suggested by @shwina , I looked into the dataframe protocol, which is very close to what we want, except for its Python only interface and the use of a pointer.\r\n- `mapInArrow` method from PySpark, which still requires a full data transfer.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/11514/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/11514/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}