{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/7553",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/7553/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/7553/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/7553/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/7553",
    "id": 827955786,
    "node_id": "MDU6SXNzdWU4Mjc5NTU3ODY=",
    "number": 7553,
    "title": "[FEA] Improve performance of Java pinned memory pool at scale",
    "user": {
        "login": "jlowe",
        "id": 1360766,
        "node_id": "MDQ6VXNlcjEzNjA3NjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1360766?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlowe",
        "html_url": "https://github.com/jlowe",
        "followers_url": "https://api.github.com/users/jlowe/followers",
        "following_url": "https://api.github.com/users/jlowe/following{/other_user}",
        "gists_url": "https://api.github.com/users/jlowe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jlowe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jlowe/subscriptions",
        "organizations_url": "https://api.github.com/users/jlowe/orgs",
        "repos_url": "https://api.github.com/users/jlowe/repos",
        "events_url": "https://api.github.com/users/jlowe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jlowe/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1405145623,
            "node_id": "MDU6TGFiZWwxNDA1MTQ1NjIz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Java",
            "name": "Java",
            "color": "006b75",
            "default": false,
            "description": "Affects Java cuDF API."
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-03-10T15:56:45Z",
    "updated_at": "2022-02-07T21:13:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nWe have seen cases where allocating many thousands of pinned memory buffers causes very poor performance in the Java `PinnedMemoryPool` allocator.  That allocator currently performs a linear coalesce scan on free which performs decently when there aren't many allocations but does not scale well.\r\n\r\n**Describe the solution you'd like**\r\nThe pinned memory pool should minimally use a logarithmic, heap-like algorithm for managing the address space, or possibly a bucketing technique with hashing.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/7553/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/7553/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}