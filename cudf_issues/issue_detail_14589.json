{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14589",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14589/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14589/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14589/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14589",
    "id": 2029380103,
    "node_id": "I_kwDOBWUGps549eIH",
    "number": 14589,
    "title": "[FEA] Support canonical arrow extension types: FixedShapeTensorType and VariableShapeTensorType",
    "user": {
        "login": "rbavery",
        "id": 22258697,
        "node_id": "MDQ6VXNlcjIyMjU4Njk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/22258697?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rbavery",
        "html_url": "https://github.com/rbavery",
        "followers_url": "https://api.github.com/users/rbavery/followers",
        "following_url": "https://api.github.com/users/rbavery/following{/other_user}",
        "gists_url": "https://api.github.com/users/rbavery/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rbavery/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rbavery/subscriptions",
        "organizations_url": "https://api.github.com/users/rbavery/orgs",
        "repos_url": "https://api.github.com/users/rbavery/repos",
        "events_url": "https://api.github.com/users/rbavery/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rbavery/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 599626564,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjQ=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/question",
            "name": "question",
            "color": "D4C5F9",
            "default": true,
            "description": "Further information is requested"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-12-06T21:04:04Z",
    "updated_at": "2024-03-05T12:53:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nFeeding data from the CPU to the GPU is a bottleneck especially for computer vision. I'd like to store satellite images as parquet with georeferencing information in some columns and a column with Arrow's new FixedShapeTensorType extension array and then load it with cudf and get zero copy benefits when passing the tensor to the GPU and pytorch.\r\n\r\nHowever it looks like cudf can't interpret this type.\r\n```\r\nimport pyarrow as pa\r\n\r\ntensor_type = pa.fixed_shape_tensor(pa.int32(), (2, 2))\r\narr = [[1, 2, 3, 4], [10, 20, 30, 40], [100, 200, 300, 400]]\r\nstorage = pa.array(arr, pa.list_(pa.int32(), 4))\r\ntensor_array = pa.ExtensionArray.from_storage(tensor_type, storage)\r\n\r\ndata = [\r\n     pa.array([1, 2, 3]),\r\n     pa.array(['foo', 'bar', None]),\r\n     tensor_array,\r\n]\r\nmy_schema = pa.schema([('f0', pa.int8()),\r\n                        ('f1', pa.string()),\r\n                        ('tensors_int', tensor_type)])\r\ntable = pa.Table.from_arrays(data, schema=my_schema)\r\n\r\ntable.cast(table.schema)\r\n```\r\n\r\n```\r\nimport cudf\r\n\r\ncudf.DataFrame.from_arrow(table)\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\nCell In[2], line 3\r\n      1 import cudf\r\n----> 3 cudf.DataFrame.from_arrow(table)\r\n\r\nFile ~/miniforge3/envs/rapids-23.10/lib/python3.10/site-packages/nvtx/nvtx.py:115, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n    112 @wraps(func)\r\n    113 def inner(*args, **kwargs):\r\n    114     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 115     result = func(*args, **kwargs)\r\n    116     libnvtx_pop_range(self.domain.handle)\r\n    117     return result\r\n\r\nFile ~/miniforge3/envs/rapids-23.10/lib/python3.10/site-packages/cudf/core/dataframe.py:5322, in DataFrame.from_arrow(cls, table)\r\n   5319         for col_meta in table.schema.pandas_metadata[\"column_indexes\"]:\r\n   5320             col_index_names.append(col_meta[\"name\"])\r\n-> 5322 out = super().from_arrow(table)\r\n   5323 if col_index_names is not None:\r\n   5324     out._data._level_names = col_index_names\r\n\r\nFile ~/miniforge3/envs/rapids-23.10/lib/python3.10/site-packages/nvtx/nvtx.py:115, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n    112 @wraps(func)\r\n    113 def inner(*args, **kwargs):\r\n    114     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 115     result = func(*args, **kwargs)\r\n    116     libnvtx_pop_range(self.domain.handle)\r\n    117     return result\r\n\r\nFile ~/miniforge3/envs/rapids-23.10/lib/python3.10/site-packages/cudf/core/frame.py:1053, in Frame.from_arrow(cls, data)\r\n   1036     cudf_category_frame = {\r\n   1037         name: build_categorical_column(\r\n   1038             cudf_dictionaries_columns[name],\r\n   (...)\r\n   1046         )\r\n   1047     }\r\n   1049 # Handle non-dict arrays\r\n   1050 cudf_non_category_frame = {\r\n   1051     name: col\r\n   1052     for name, col in zip(\r\n-> 1053         data.column_names, libcudf.interop.from_arrow(data)\r\n   1054     )\r\n   1055 }\r\n   1057 result = {**cudf_non_category_frame, **cudf_category_frame}\r\n   1059 # There are some special cases that need to be handled\r\n   1060 # based on metadata.\r\n\r\nFile ~/miniforge3/envs/rapids-23.10/lib/python3.10/contextlib.py:79, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)\r\n     76 @wraps(func)\r\n     77 def inner(*args, **kwds):\r\n     78     with self._recreate_cm():\r\n---> 79         return func(*args, **kwds)\r\n\r\nFile interop.pyx:199, in cudf._lib.interop.from_arrow()\r\n\r\nRuntimeError: CUDF failure at:/opt/conda/conda-bld/work/cpp/src/interop/from_arrow.cu:87: Unsupported type_id conversion to cudf\r\n```\r\n\r\n\r\n**Describe the solution you'd like**\r\nI want to be able to load parquet files with cudf that contain a column with this tensor type and then easily hand it off from cudf to pytorch.\r\n\r\n**Describe alternatives you've considered**\r\nThere are other formats like zarr for N-D arrays and direct loading to gpu, but I don't think zero copy between cpu and gpu is supported https://xarray.dev/blog/xarray-kvikio\r\n\r\nOr I can continue loading parquet files with references to cloud optimized geotiff files, which is a lot slower.\r\n\r\n**Additional context**\r\ndocs for the type are here: https://arrow.apache.org/docs/python/generated/pyarrow.FixedShapeTensorArray.html\r\nand others are looking at implementing it for dataloading https://github.com/huggingface/datasets/issues/5272\r\nthere's also a variable shape equal dimension number type which would be very useful for efficiently loading satellite imagery time series where the time length can vary a lot depending on the sample, or the height and width can vary a lot depending on the sensor resolution: https://arrow.apache.org/docs/format/CanonicalExtensions.html#variable-shape-tensor\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14589/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14589/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}