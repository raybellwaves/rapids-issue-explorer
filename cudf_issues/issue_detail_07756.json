{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/7756",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/7756/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/7756/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/7756/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/7756",
    "id": 843934231,
    "node_id": "MDU6SXNzdWU4NDM5MzQyMzE=",
    "number": 7756,
    "title": "[FEA]: Match pandas ordering convention for idxmin/idxmax",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 2,
    "created_at": "2021-03-30T00:16:23Z",
    "updated_at": "2024-05-10T23:52:06Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nIn pandas, the `idxmin` and `idxmax` aggregations will always break ties in favor of the lower index. For instance, \r\n```\r\n>>> import pandas as pd\r\n>>> df = pd.DataFrame({'idx': [0, 0], 'x': [1, 1]})\r\n>>> df.groupby('idx').agg('idxmin')\r\n     x\r\nidx\r\n0    0\r\n```\r\ncan be relied upon to always return `0`. `cudf` does not make this promise, although it frequently gives the same result in practice. I have a dataset where I'm able to reproduce this discrepancy, but I haven't been able to generate a truly \"minimal\" example yet because various attempt to systematically reduce my column of size 100 have failed to consistently reproduce the problem. I can give this another shot if someone is interested.\r\n\r\n**Describe the solution you'd like**\r\nThe reason for this discrepancy is likely that (as pointed out by @shwina) `cudf` utilizes hash maps in the groupby->aggregation, which likely destroys any stability guarantees with respect to the input ordering for equal elements. Allowing calling code to specify an algorithm would be a poor API choice for `libcudf`, but it would be reasonable to expose an API to request stability in any internal sorting. This would allow `cudf` to match the `pandas` behavior.\r\n\r\n**Additional context**\r\nThe [pandas documentation of idxmin](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html) (and idxmax) does not actually promise this behavior. I suspect that the behavior is chosen to match that of `numpy`, which _does_ [promise this behavior](https://numpy.org/doc/stable/reference/generated/numpy.argmin.html) (see the Notes section). That being the case, we could simply choose not to support this in `cudf`, which would save us from having to reimplement alternative algorithms in `libcudf`. This could lead to problems for `pandas` conversions down the line, though.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/7756/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/7756/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}