{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/11040",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/11040/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/11040/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/11040/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/11040",
    "id": 1260043816,
    "node_id": "I_kwDOBWUGps5LGr4o",
    "number": 11040,
    "title": "[FEA] Alternate design for owning/non-owning comparators ",
    "user": {
        "login": "jrhemstad",
        "id": 15221289,
        "node_id": "MDQ6VXNlcjE1MjIxMjg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15221289?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrhemstad",
        "html_url": "https://github.com/jrhemstad",
        "followers_url": "https://api.github.com/users/jrhemstad/followers",
        "following_url": "https://api.github.com/users/jrhemstad/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrhemstad/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrhemstad/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrhemstad/subscriptions",
        "organizations_url": "https://api.github.com/users/jrhemstad/orgs",
        "repos_url": "https://api.github.com/users/jrhemstad/repos",
        "events_url": "https://api.github.com/users/jrhemstad/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrhemstad/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987921,
            "node_id": "MDU6TGFiZWwxMDEzOTg3OTIx",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/proposal",
            "name": "proposal",
            "color": "2a2c89",
            "default": false,
            "description": "Change current process or code"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/2",
        "html_url": "https://github.com/rapidsai/cudf/milestone/2",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/2/labels",
        "id": 6946310,
        "node_id": "MDk6TWlsZXN0b25lNjk0NjMxMA==",
        "number": 2,
        "title": "List and Struct data types and operations",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 19,
        "closed_issues": 49,
        "state": "open",
        "created_at": "2021-07-14T18:07:53Z",
        "updated_at": "2024-05-15T19:11:54Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 10,
    "created_at": "2022-06-03T15:24:33Z",
    "updated_at": "2024-02-23T18:42:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe new experimental row operators require non-trivial preprocessing that involves new allocations whose lifetime must be maintained while attempting to do any row-wise operations on the specified data. \r\n\r\nTo manage this, we introduced owning and non-owning comparator types.\r\n\r\nFor example, `self_comparator` is an owning type that handles doing row-wise operations on a single table. \r\n\r\n`self_comparator` is not a binary callable object (it doesn't have an `operator()`). Creating the actual non-owning callable object is currently done through a member factory function of the owning type (renamed in https://github.com/rapidsai/cudf/pull/10870).\r\n\r\n```\r\ntable_view input_table{...};\r\nself_comparator s{input_table}; // \"Expensive\" construction that does necessary pre-processing and allocations\r\nauto callable = s.less(); // \"Cheap\" factory that returns a binary callable suitable for passing to algorithms like thrust::sort\r\nthrust::sort(..., callable);\r\n```\r\nAfter reviewing code using this functionality I've noticed that the callable being returned from a member of the owning type is a bit awkward. For instance the `s.less()` call above isn't immediately obvious that this is actually a factory returning a callable function object. One way to remedy that could be to call it `s.make_less()` instead, but I think there's an all together better way. \r\n\r\n**Describe the solution you'd like**\r\nInspired by `std::` function objects like `std::less/std::equal_to`, I think we should make the callable objects currently being returned from functions like `less()/less_equivalent()/equal_to()` to instead be freestanding types that are _constructible from_ the owning types instead of being returned from a factory of the owning type. \r\n\r\nI think this would simplify the owning type as well as make the owner/viewer relationship more clear and explicit.\r\n\r\nFor example, the code above would become:\r\n```\r\ntable_view input_table{...};\r\nself_comparator s{input_table}; // \"Expensive\" construction that does necessary pre-processing and allocations\r\nauto callable = cudf::row::less{s}; // \"Cheap\" construction that _views_ the internals of self_comparator\r\nthrust::sort(..., callable);\r\n```\r\n\r\nHere's a high level sketch of how this idea could be implemented: https://godbolt.org/z/5fbK7PTb6\r\n\r\nSalient points:\r\n- `less` is a standalone type constructible from the `owning` type\r\n- `less` is a `friend` of the owning type to access internals\r\n- `less` deletes constructions from an r-value ref of the owning type to prevent construction from a temporary of the owning type. If allowed, this would lead to dangling references. \r\n- For simplicity, this sketch has `less::operator()` just invoke the `PhysicalComparator`. The actual implementation would have more layers. It would be roughly equivalent to what the internals of the `self_comparator::less` factory above does today. \r\n\r\n\r\n**Additional Thoughts**\r\n\r\nI've come to believe that \"comparator\" is probably an inappropriate name for the owning types. It's not a comparator (not invokable), it just preprocesses and holds data needed by the actual comparators.\r\n\r\nI don't have a good suggestion for a different name yet. ",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/11040/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/11040/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}