{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13490",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13490/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13490/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13490/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13490",
    "id": 1736751838,
    "node_id": "I_kwDOBWUGps5nhLre",
    "number": 13490,
    "title": "[FEA] Test more edge cases in bitmask operations",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1016342567,
            "node_id": "MDU6TGFiZWwxMDE2MzQyNTY3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/tests",
            "name": "tests",
            "color": "204ea3",
            "default": false,
            "description": "Unit testing for project"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-06-01T17:09:13Z",
    "updated_at": "2023-07-22T20:13:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nlibcudf has multiple functions (both internal and external) for manipulating bitmasks. These functions often make use of bitwise operations and CUDA intrinsics in kernels, which may have sharp edges around when bitmasks contain uninitialized bits or in other ways. We recently uncovered one in #13479, and it was only uncovered via intermittent failures from dask_cudf (Python) tests.\r\n\r\n**Describe the solution you'd like**\r\nWe should consider adding more tests that directly play with bitmasks, perhaps bitmasks containing invalid data in certain ways, to better understand the potential failure modes. In some cases these may be test cases that we do not need to support since libcudf generally follows a \"garbage in, garbage out\" approach, but in some cases the \"garbage in\" may be generated by libcudf itself and therefore something that we need to support.\r\n\r\nI will update this issue with specific tests cases that may prove relevant:\r\n- A bitmask with enough bits that we have > 1 CUDA block of data, and potentially with junk bits either at the beginning or the end.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13490/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13490/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}