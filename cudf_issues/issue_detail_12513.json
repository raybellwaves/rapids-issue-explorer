{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12513",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12513/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12513/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12513/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12513",
    "id": 1527399243,
    "node_id": "I_kwDOBWUGps5bCkNL",
    "number": 12513,
    "title": "[FEA] Allow keep='all' for nlargest/nsmallest",
    "user": {
        "login": "mattf",
        "id": 112653,
        "node_id": "MDQ6VXNlcjExMjY1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/112653?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattf",
        "html_url": "https://github.com/mattf",
        "followers_url": "https://api.github.com/users/mattf/followers",
        "following_url": "https://api.github.com/users/mattf/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattf/subscriptions",
        "organizations_url": "https://api.github.com/users/mattf/orgs",
        "repos_url": "https://api.github.com/users/mattf/repos",
        "events_url": "https://api.github.com/users/mattf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattf/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 0,
    "created_at": "2023-01-10T13:33:01Z",
    "updated_at": "2023-06-06T03:56:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nwriting code with `import cudf as pd`\r\n\r\n**Describe the solution you'd like**\r\n```\r\nIn [1]: import cudf as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '22.12.0'\r\n\r\nIn [3]: df = pd.DataFrame({'a': [1, 2, 3] * 2, 'b': list('abcdef')})\r\n\r\nIn [4]: df.nlargest(1, 'a', keep='all')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 df.nlargest(1, 'a', keep='all')\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:3624, in DataFrame.nlargest(self, n, columns, keep)\r\n   3558 @_cudf_nvtx_annotate\r\n   3559 def nlargest(self, n, columns, keep=\"first\"):\r\n   3560     \"\"\"Return the first *n* rows ordered by *columns* in descending order.\r\n   3561 \r\n   3562     Return the first *n* rows with the largest values in *columns*, in\r\n   (...)\r\n   3622     Brunei      434000    12128      BN\r\n   3623     \"\"\"\r\n-> 3624     return self._n_largest_or_smallest(True, n, columns, keep)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/indexed_frame.py:2156, in IndexedFrame._n_largest_or_smallest(self, largest, n, columns, keep)\r\n   2154     return self._gather(indices, keep_index=True, check_bounds=False)\r\n   2155 else:\r\n-> 2156     raise ValueError('keep must be either \"first\", \"last\"')\r\n\r\nValueError: keep must be either \"first\", \"last\"\r\n\r\nIn [5]: df.to_pandas().nlargest(1, 'a', keep='all')\r\nOut[5]: \r\n   a  b\r\n2  3  c\r\n5  3  f\r\n```\r\n\r\n**Additional context**\r\nhttps://github.com/pandas-dev/pandas/pull/21650",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12513/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12513/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}