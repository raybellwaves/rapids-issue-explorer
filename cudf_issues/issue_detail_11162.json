{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/11162",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/11162/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/11162/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/11162/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/11162",
    "id": 1287399108,
    "node_id": "I_kwDOBWUGps5MvCbE",
    "number": 11162,
    "title": "[FEA] Support segmented_sorted_order using an AST function for comparison or something similar",
    "user": {
        "login": "revans2",
        "id": 3441321,
        "node_id": "MDQ6VXNlcjM0NDEzMjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3441321?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/revans2",
        "html_url": "https://github.com/revans2",
        "followers_url": "https://api.github.com/users/revans2/followers",
        "following_url": "https://api.github.com/users/revans2/following{/other_user}",
        "gists_url": "https://api.github.com/users/revans2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/revans2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/revans2/subscriptions",
        "organizations_url": "https://api.github.com/users/revans2/orgs",
        "repos_url": "https://api.github.com/users/revans2/repos",
        "events_url": "https://api.github.com/users/revans2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/revans2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/21",
        "html_url": "https://github.com/rapidsai/cudf/milestone/21",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/21/labels",
        "id": 8576365,
        "node_id": "MI_kwDOBWUGps4Agt1t",
        "number": 21,
        "title": "Expression evaluation",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 22,
        "state": "open",
        "created_at": "2022-10-24T21:39:12Z",
        "updated_at": "2024-05-16T17:06:31Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 3,
    "created_at": "2022-06-28T14:00:41Z",
    "updated_at": "2022-10-24T22:05:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nSpark supports an `array_sort` SQL method that will sort arrays, but it takes a lambda function that calculates and returns the comparison between the elements of the array instead of going off of a config for doing the ordering.\r\n\r\nThe docs for this are at https://spark.apache.org/docs/latest/api/sql/index.html#array_sort\r\n\r\n```\r\nThe comparator will take two arguments representing two elements of the array. It returns -1, 0, or 1 as the first element is less than, equal to, or greater than the second element. If the comparator function returns other values (including null), the function will fail and raise an error.\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would love a segmented_sorted_order that takes an AST function similar to an inequality join and follows the rules described above. I am fine if it is more lenient than Spark requires and does not throw exceptions if the values do not fully conform to exactly what is requested here.\r\n\r\nWe may also need some extensions to what the AST can do.  Because of the tight rules that Spark has the implementations often use case/when and if/else expressions. We probably need to file a separate issue for this, but I wanted to call it out here because without it, there isn't a lot that we can do.\r\n\r\n**Describe alternatives you've considered**\r\nWe don't really have any other alternative. We could do some code analysis of the function and see if it matches some known patterns for ascending/descending and nulls preceding or following. But this is very limiting, and we would prefer to do it as a performance improvement instead.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/11162/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/11162/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}