{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/15130",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/15130/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/15130/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/15130/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/15130",
    "id": 2151974459,
    "node_id": "I_kwDOBWUGps6ARIY7",
    "number": 15130,
    "title": "[FEA] Simplify the pylibcudf groupby-aggregation API",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 7011038943,
            "node_id": "LA_kwDOBWUGps8AAAABoeP23w",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/pylibcudf",
            "name": "pylibcudf",
            "color": "e99695",
            "default": false,
            "description": "Issues specific to the pylibcudf package"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-02-24T00:05:41Z",
    "updated_at": "2024-05-28T23:33:42Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe current pylibcudf groupby-aggregation API maps to libcudf's. It is very expressive, allowing the specification of an arbitrary number of aggregations for every column to be aggregated, and an arbitrary number of aggregation columns per groupby table. However, this API is also fairly verbose and cumbersome to work with. Writing a groupby-aggregation in pylibcudf currently requires ~10 lines of code, as compared the concise single line version of the pandas API. Ideally we would like to offer the same level of convenience via a simpler API without sacrificing the flexibility and performance of the more general API where necessary.\r\n\r\n**Describe the solution you'd like**\r\nWe should consider making the following changes:\r\n1. Every aggregation should be default-constructible. That essentially means that every parameter should have a default parameter. This is true of most but not all aggregations already. Where appropriate, we may also want to push some of these defaults down to libcudf, but I would be OK with the small deviation of different default values if necessary.\r\n2. We should add an API roughly like `GroupBy.aggregate_simple` (name TBD) that accepts a `List[Tuple[Column, List[str]]]` and handles the construction of the GroupByRequest objects under the hood. This only works once every agg is default-constructible. It may not be terribly useful for the heavily parametrized aggregations, but it will simplify working with the most common unparametrized aggregations (sum, prod, min, max, etc).\r\n3. We should consider adding a functional API `groupby_agg(data: Table, group_columns : List[int], aggs : List[Tuple[Column, List[str]]])` that effectively functions as a simple one-line wrapper around step 2.\r\n\r\n**Describe alternatives you've considered**\r\nNone yet. I am not yet fully sold on the exact APIs that I proposed above, but I do think that the current API is too cumbersome for direct use most of the time except by other library developers and needs improvement. I do not want to lose the purity of mirroring libcudf APIs, especially not by replacing those APIs with higher-overhead alternatives, so the current API does need to exist. I've listed the three steps above in decreasing order of importance/quality, and we may go a completely different direction with 3. This issue is largely intended as a starting point for a discussion capturing the problems with the current API.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/15130/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/15130/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}