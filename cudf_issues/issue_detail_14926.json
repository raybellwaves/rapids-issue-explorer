{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14926",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14926/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14926/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14926/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14926",
    "id": 2106482544,
    "node_id": "I_kwDOBWUGps59jl9w",
    "number": 14926,
    "title": "[FEA] Produce and Consume ArrowDeviceArray struct from cudf::table / cudf::column",
    "user": {
        "login": "zeroshade",
        "id": 555095,
        "node_id": "MDQ6VXNlcjU1NTA5NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/555095?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zeroshade",
        "html_url": "https://github.com/zeroshade",
        "followers_url": "https://api.github.com/users/zeroshade/followers",
        "following_url": "https://api.github.com/users/zeroshade/following{/other_user}",
        "gists_url": "https://api.github.com/users/zeroshade/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zeroshade/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zeroshade/subscriptions",
        "organizations_url": "https://api.github.com/users/zeroshade/orgs",
        "repos_url": "https://api.github.com/users/zeroshade/repos",
        "events_url": "https://api.github.com/users/zeroshade/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zeroshade/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 39,
    "created_at": "2024-01-29T21:39:04Z",
    "updated_at": "2024-06-04T18:30:26Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to generate Arrow IPC payloads from a `cudf::table` without copying the data off of the GPU device. Currently the `to_arrow` and `from_arrow` functions explicitly perform copies to and from the GPU device. There is not currently any efficient way to generate Arrow IPC payloads from libcudf without copying all of the data off of the device.\r\n\r\n**Describe the solution you'd like**\r\nIn addition to the existing `to_arrow` and `from_arrow` functions, we could have a `to_arrow_device_arr` function that populates an `ArrowDeviceArray` struct from a `cudf::table` or `cudf::column`. We'd also create a `from_arrow_device_arr` function that could construct a `cudf::table` / `cudf::column` from an `ArrowDeviceArray` that describes Arrow data which is already on the device. Once you have the `ArrowDeviceArray` struct, the Arrow C++ library itself can be used to generate the IPC payloads without needing to copy the data off the device. This would also increase the interoperability options that libcudf has, as anything which produces or consumes `ArrowDeviceArray` structs could hand data off to libcudf and vice versa.\r\n\r\n**Describe alternatives you've considered**\r\nAn alternative would be to implement Arrow IPC creating inside of the libcudf library, but I saw that this was explicitly removed from libcudf due to the requirement of linking against `libarrow_cuda.so`. (https://github.com/rapidsai/cudf/issues/10994). Implementing conversions to and from `ArrowDeviceArray` wouldn't require linking against `libarrow_cuda.so` at all and would provide an easy way to allow any consumers to create Arrow IPC payloads, or whatever else they want to do with the resulting Arrow data. Such as leveraging CUDA IPC with the data.\r\n\r\n**Additional context**\r\nWhen designing the `ArrowDeviceArray` struct, I created https://github.com/zeroshade/arrow-non-cpu as a POC which used Python numba to generate and operate on some GPU data before handing it off to libcudf, and then getting it back without copying off the device. Using `ArrowDeviceArray` as the way it handed the data off.\r\n\r\nMore recently I've been working on creating a protocol for sending Arrow IPC data that is located on GPUs across high-performance transports like UCX. To this end, I created a POC using libcudf to pass the data. As a result I have a partial implementation of the `to_arrow_device_arr` which can be found [here](https://github.com/zeroshade/cudf-flight-ucx/blob/main/to_arrow.cc). There's likely better ways than what I'm doing in there, but at least for my POC it was working.\r\n\r\nThe contribution guidelines say I should file this issue first for discussion rather than just submitting a PR, so that's where I'm at. I plan on trying to create a full implementation that I can contribute but wanted to have this discussion and get feedback here first. \r\n\r\nThanks for hearing me out everyone!\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14926/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14926/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}