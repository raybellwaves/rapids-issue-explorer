{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13360",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13360/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13360/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13360/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13360",
    "id": 1712459741,
    "node_id": "I_kwDOBWUGps5mEg_d",
    "number": 13360,
    "title": "[FEA] Try using `__grid_constant__` in libcudf.",
    "user": {
        "login": "bdice",
        "id": 3943761,
        "node_id": "MDQ6VXNlcjM5NDM3NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bdice",
        "html_url": "https://github.com/bdice",
        "followers_url": "https://api.github.com/users/bdice/followers",
        "following_url": "https://api.github.com/users/bdice/following{/other_user}",
        "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
        "organizations_url": "https://api.github.com/users/bdice/orgs",
        "repos_url": "https://api.github.com/users/bdice/repos",
        "events_url": "https://api.github.com/users/bdice/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bdice/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-05-16T17:43:02Z",
    "updated_at": "2023-06-06T17:34:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nSome features in libcudf like the AST and nested comparators have pretty hefty kernels. The `__grid_constant__` annotation (available in CUDA 11.7 and higher) may help reduce local memory usage in these features. We build with CUDA >=11.8 so this would be supported in our builds.\r\n\r\nhttps://docs.nvidia.com/cuda/cuda-c-programming-guide/#grid-constant\r\n\r\nIn short:\r\n> If the address of a _global_ function parameter is taken, the compiler will ordinarily make a copy of the kernel parameter in thread local memory and use the address of the copy, to partially support C++ semantics, which allow each thread to modify its own local copy of function parameters. Annotating a _global_ function parameter with __grid_constant__ ensures that the compiler will not create a copy of the kernel parameter in thread local memory, but will instead use the generic address of the parameter itself. Avoiding the local copy may result in improved performance.\r\n\r\n@jrhemstad thinks a fair amount of the register/stack usage in AST and comparator code comes from thread local copies of those structs. @bdice agrees this is worth investigating.\r\n\r\n(Some issue text contributed by @jrhemstad.)\r\n\r\n**Describe the solution you'd like**\r\nTry adding `__grid_constant__` to AST kernels and nested comparators to see how the kernels' usage of local memory, registers, etc. changes.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13360/reactions",
        "total_count": 5,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 2
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13360/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}