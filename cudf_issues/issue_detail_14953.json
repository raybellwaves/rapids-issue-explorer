{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14953",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14953/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14953/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14953/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14953",
    "id": 2113266167,
    "node_id": "I_kwDOBWUGps599eH3",
    "number": 14953,
    "title": "[FEA] Implement a templated parquet decoding kernel suitable for reuse in micro-kernel optimization approach.",
    "user": {
        "login": "nvdbaranec",
        "id": 56695930,
        "node_id": "MDQ6VXNlcjU2Njk1OTMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/56695930?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvdbaranec",
        "html_url": "https://github.com/nvdbaranec",
        "followers_url": "https://api.github.com/users/nvdbaranec/followers",
        "following_url": "https://api.github.com/users/nvdbaranec/following{/other_user}",
        "gists_url": "https://api.github.com/users/nvdbaranec/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nvdbaranec/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nvdbaranec/subscriptions",
        "organizations_url": "https://api.github.com/users/nvdbaranec/orgs",
        "repos_url": "https://api.github.com/users/nvdbaranec/repos",
        "events_url": "https://api.github.com/users/nvdbaranec/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nvdbaranec/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1185244142,
            "node_id": "MDU6TGFiZWwxMTg1MjQ0MTQy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/cuIO",
            "name": "cuIO",
            "color": "fef2c0",
            "default": false,
            "description": "cuIO issue"
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "abellina",
            "id": 1901059,
            "node_id": "MDQ6VXNlcjE5MDEwNTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abellina",
            "html_url": "https://github.com/abellina",
            "followers_url": "https://api.github.com/users/abellina/followers",
            "following_url": "https://api.github.com/users/abellina/following{/other_user}",
            "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
            "organizations_url": "https://api.github.com/users/abellina/orgs",
            "repos_url": "https://api.github.com/users/abellina/repos",
            "events_url": "https://api.github.com/users/abellina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abellina/received_events",
            "type": "User",
            "site_admin": false
        },
        {
            "login": "gerashegalov",
            "id": 3187938,
            "node_id": "MDQ6VXNlcjMxODc5Mzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3187938?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gerashegalov",
            "html_url": "https://github.com/gerashegalov",
            "followers_url": "https://api.github.com/users/gerashegalov/followers",
            "following_url": "https://api.github.com/users/gerashegalov/following{/other_user}",
            "gists_url": "https://api.github.com/users/gerashegalov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gerashegalov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gerashegalov/subscriptions",
            "organizations_url": "https://api.github.com/users/gerashegalov/orgs",
            "repos_url": "https://api.github.com/users/gerashegalov/repos",
            "events_url": "https://api.github.com/users/gerashegalov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gerashegalov/received_events",
            "type": "User",
            "site_admin": false
        },
        {
            "login": "nvdbaranec",
            "id": 56695930,
            "node_id": "MDQ6VXNlcjU2Njk1OTMw",
            "avatar_url": "https://avatars.githubusercontent.com/u/56695930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nvdbaranec",
            "html_url": "https://github.com/nvdbaranec",
            "followers_url": "https://api.github.com/users/nvdbaranec/followers",
            "following_url": "https://api.github.com/users/nvdbaranec/following{/other_user}",
            "gists_url": "https://api.github.com/users/nvdbaranec/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nvdbaranec/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nvdbaranec/subscriptions",
            "organizations_url": "https://api.github.com/users/nvdbaranec/orgs",
            "repos_url": "https://api.github.com/users/nvdbaranec/repos",
            "events_url": "https://api.github.com/users/nvdbaranec/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nvdbaranec/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/22",
        "html_url": "https://github.com/rapidsai/cudf/milestone/22",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/22/labels",
        "id": 8672393,
        "node_id": "MI_kwDOBWUGps4AhFSJ",
        "number": 22,
        "title": "Parquet continuous improvement",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 38,
        "closed_issues": 37,
        "state": "open",
        "created_at": "2022-11-19T18:08:31Z",
        "updated_at": "2024-06-06T18:40:39Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 3,
    "created_at": "2024-02-01T19:09:50Z",
    "updated_at": "2024-04-11T20:56:42Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "As part of the drive towards implementing the micro-kernel parquet decoding strategy, we would like to start centralizing the core parquet decoding loop into a generic templated implementation that can be reused.  At the high level, all of various parquet kernels are structured similar to this:\r\n```\r\nkernel(PageInfo p)\r\n{\r\n    // page setup, bounds checking (for skip_rows/num_rows), etc\r\n    setup_code();\r\n\r\n   while(there are still values to decode in p){\r\n      def_levels = def_stream.decode(def_levels);\r\n      rep_levels = p.has_lists ? rep_stream.decode(rep_levels);\r\n      dict_indices = p.has_dict ? dict_stream.decode(dict_indices);\r\n      decode_general_outputs(def_levels, rep_levels, dict_indices);\r\n\r\n      PROCESS(p, def_levels, rep_levels, dict_indices);\r\n   }\r\n}\r\n```\r\nThe various *_stream.decode() functions are the key bottleneck in decoding parquet data. At the moment, the kernels we have mostly utilize the older/slower way of decoding these streams.  The `rle_stream` class was developed to do this in a more parallel (and more confiurable) way, but only a few kernels use it at the moment because it does not currently handle dictionaries.  The work for that is underway and very close to completion (https://github.com/rapidsai/cudf/issues/14950)\r\n\r\n`decode_general_outputs` is a function that produces validity, list offset information and the mapping of source data (location in the parquet data page) to destination data (location in the final cudf column).  The amount of work this function has to do varies greatly based on the characteristics of the input data - nullability, presence of lists, etc.\r\n\r\nPROCESS is something that varies from kernel-to-kernel.  Essentially, the user-provided function that actually does the final data decoding.\r\n\r\nWe would like to implement this high level loop as a templated function that can be tailored to produce multiple, more optimal kernels based on they key data characteristics. For example:\r\n\r\n```\r\ntemplate<// page data characteristics\r\n                bool nullable,\r\n                bool has_lists,\r\n                bool has_dictionary,\r\n                etc\r\n\r\n                // parameters which can be tuned \r\n                int decode_buffer_size,\r\n                int decode_warp_count,\r\n                etc,\r\n                \r\n                // user provided PROCESS functor\r\n                ProcessFunc Proc>\r\n```\r\n\r\nThere are several reasons to do this:\r\n- The `rle_stream` class uses shared memory, so it is a big advantage to be able to have kernels that don't need a given feature (say, list decoding) to be able to use less.\r\n- It is useful to be able to tune block size per kernel as they tend to get bottlenecked in different ways.  \r\n- It would allow us to eliminate the old level decoding path.\r\n\r\nThe first candidates for using this would be two new micro-kernels:  Fixed-width and fixed-width-with-dictionaries (the non-list case for both of them). We would like to get these in for 24.04 and then later on we can start refactoring the larger mass of existing kernels (especially the general-purpose `gpuDecodePageData` and `gpuDecodeStringPageData`",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14953/reactions",
        "total_count": 2,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14953/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}