{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14515",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14515/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14515/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14515/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14515",
    "id": 2014919776,
    "node_id": "I_kwDOBWUGps54GTxg",
    "number": 14515,
    "title": "[FEA] Allow control of mask state in return value of `cudf::contains`",
    "user": {
        "login": "wence-",
        "id": 1126981,
        "node_id": "MDQ6VXNlcjExMjY5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wence-",
        "html_url": "https://github.com/wence-",
        "followers_url": "https://api.github.com/users/wence-/followers",
        "following_url": "https://api.github.com/users/wence-/following{/other_user}",
        "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
        "organizations_url": "https://api.github.com/users/wence-/orgs",
        "repos_url": "https://api.github.com/users/wence-/repos",
        "events_url": "https://api.github.com/users/wence-/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wence-/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-11-28T17:13:09Z",
    "updated_at": "2024-02-23T17:56:33Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\n`cudf::contains`, specifically the column overload, searches for a bunch of needles in a haystack. If any of the needles are null, the return value has nulls in the same location. The detail API has finer-grained control over whether nulls should compare equal (so that if the haystack contains a null and one of needles is null, the output column has a `true` value in that slot).\r\n\r\nIt would be nice to be able to control whether the bitmask is copied from the needles to the result or not. In Python cudf, we use `contains` to implement `Series.isin` where the semantics are that nulls are just treated as any other value. So if the needles contain a null, the result is true or false depending on whether the haystack also has a null. Right now, we call contains, and then must perform some post-processing to obtain a result that internally has already been computed.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA flag specifying whether `contains` masks its output.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAbove-board, I do this in Python with:\r\n\r\n```\r\nif needles.null_count > 0:\r\n    result.fillna(haystack.null_count > 0)\r\n```\r\nThis is an extra allocation + kernel launch.\r\n\r\nThe cheap way of doing it is to obtain the result, and then drop the mask on the floor. This happens to work due to the way `cudf::contains` is implemented. However, I would rather not do this because libcudf explicitly does not guarantee that the masked out entries of a column contain valid data, so I am relying on an implementation detail which could change.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14515/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14515/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}