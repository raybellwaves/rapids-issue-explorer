{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/7905",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/7905/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/7905/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/7905/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/7905",
    "id": 852967780,
    "node_id": "MDU6SXNzdWU4NTI5Njc3ODA=",
    "number": 7905,
    "title": "[FEA] Support string concatenation of a Series and something array-like into a Series ",
    "user": {
        "login": "Nicholas-7",
        "id": 74741000,
        "node_id": "MDQ6VXNlcjc0NzQxMDAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/74741000?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Nicholas-7",
        "html_url": "https://github.com/Nicholas-7",
        "followers_url": "https://api.github.com/users/Nicholas-7/followers",
        "following_url": "https://api.github.com/users/Nicholas-7/following{/other_user}",
        "gists_url": "https://api.github.com/users/Nicholas-7/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Nicholas-7/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Nicholas-7/subscriptions",
        "organizations_url": "https://api.github.com/users/Nicholas-7/orgs",
        "repos_url": "https://api.github.com/users/Nicholas-7/repos",
        "events_url": "https://api.github.com/users/Nicholas-7/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Nicholas-7/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        },
        {
            "id": 1515616253,
            "node_id": "MDU6TGFiZWwxNTE1NjE2MjUz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/strings",
            "name": "strings",
            "color": "0e8a16",
            "default": false,
            "description": "strings issues (C++ and Python)"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 3,
    "created_at": "2021-04-08T01:26:40Z",
    "updated_at": "2024-02-23T18:43:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I\u2019d like for cuDF to support concatenating a series and something array-like into a series similarly to how Pandas functions.\r\n\r\n# Example:\r\n```\r\ncudfArray = cudf.concat([cudfSeriesB, cudfSeries], axis=1)\r\ncudfSeries\r\ncudfArray\r\ncudfSeries.str.cat(cudfArray, na_rep=\"-\")\r\n```\r\n\r\n# Result:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1950             data = as_column(\r\n-> 1951                 memoryview(arbitrary), dtype=dtype, nan_as_null=nan_as_null\r\n   1952             )\r\n\r\nTypeError: memoryview: a bytes-like object is required, not 'DataFrame'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1987                         if nan_as_null is None\r\n-> 1988                         else nan_as_null,\r\n   1989                     ),\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pyarrow/array.pxi in pyarrow.lib.array()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/dataframe.py in __arrow_array__(self, type)\r\n   1018         raise TypeError(\r\n-> 1019             \"Implicit conversion to a host PyArrow Table via __arrow_array__ \"\r\n   1020             \"is not allowed, To explicitly construct a PyArrow Table, \"\r\n\r\nTypeError: Implicit conversion to a host PyArrow Table via __arrow_array__ is not allowed, To explicitly construct a PyArrow Table, consider using .to_arrow()\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-64-9046cb089696> in <module>\r\n      2 cudfSeries\r\n      3 cudfArray\r\n----> 4 cudfSeries.str.cat(cudfArray, na_rep=\"-\")\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/string.py in cat(self, others, sep, na_rep)\r\n    441             )\r\n    442         else:\r\n--> 443             other_cols = _get_cols_list(self._parent, others)\r\n    444             all_cols = [self._column] + other_cols\r\n    445             data = cpp_concatenate(\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/string.py in _get_cols_list(parent_obj, others)\r\n   5198             others = others.reindex(parent_index)\r\n   5199 \r\n-> 5200         return [column.as_column(others, dtype=\"str\")]\r\n   5201     else:\r\n   5202         raise TypeError(\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1996                     data = as_column(sr, nan_as_null=nan_as_null, dtype=dtype)\r\n   1997                 elif np_type == np.str_:\r\n-> 1998                     sr = pd.Series(arbitrary, dtype=\"str\")\r\n   1999                     data = as_column(sr, nan_as_null=nan_as_null)\r\n   2000                 else:\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)\r\n    325                     data = data.copy()\r\n    326             else:\r\n--> 327                 data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\r\n    328 \r\n    329                 data = SingleBlockManager.from_array(data, index)\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/construction.py in sanitize_array(data, index, dtype, copy, raise_cast_failure)\r\n    461         subarr = construct_1d_arraylike_from_scalar(data, len(index), dtype)\r\n    462     else:\r\n--> 463         subarr = _try_cast(data, dtype, copy, raise_cast_failure)\r\n    464 \r\n    465     # scalar like, GH\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/construction.py in _try_cast(arr, dtype, copy, raise_cast_failure)\r\n    566             subarr = construct_1d_object_array_from_listlike(subarr)\r\n    567         elif not is_extension_array_dtype(subarr):\r\n--> 568             subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\r\n    569     except OutOfBoundsDatetime:\r\n    570         # in case of out of bound datetime64 -> always raise\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/dtypes/cast.py in construct_1d_ndarray_preserving_na(values, dtype, copy)\r\n   1621 \r\n   1622     if dtype is not None and dtype.kind == \"U\":\r\n-> 1623         subarr = lib.ensure_string_array(values, convert_na_value=False, copy=copy)\r\n   1624     else:\r\n   1625         subarr = np.array(values, dtype=dtype, copy=copy)\r\n\r\npandas/_libs/lib.pyx in pandas._libs.lib.ensure_string_array()\r\n\r\npandas/_libs/lib.pyx in pandas._libs.lib.ensure_string_array()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numpy/core/_asarray.py in asarray(a, dtype, order)\r\n     81 \r\n     82     \"\"\"\r\n---> 83     return array(a, dtype, copy=False, order=order)\r\n     84 \r\n     85 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/dataframe.py in __array__(self, dtype)\r\n   1009     def __array__(self, dtype=None):\r\n   1010         raise TypeError(\r\n-> 1011             \"Implicit conversion to a host NumPy array via __array__ is not \"\r\n   1012             \"allowed, To explicitly construct a GPU matrix, consider using \"\r\n   1013             \".as_gpu_matrix()\\nTo explicitly construct a host \"\r\n\r\nTypeError: Implicit conversion to a host NumPy array via __array__ is not allowed, To explicitly construct a GPU matrix, consider using .as_gpu_matrix()\r\nTo explicitly construct a host matrix, consider using .as_matrix()\r\n```\r\n\r\n**Pandas does this by Concatenating a series and something array-like (dataframe) into a series.:**\r\n \r\n```\r\npandasArray = pd.concat([pandasSeriesB, pandasSeries], axis=1)\r\npandasSeries\r\npandasArray\r\npandasSeries.str.cat(pandasArray, na_rep=\"-\")\r\n\r\n```\r\n**A cudf workaround was found doing the following:**\r\n\r\n```\r\ncudfArray = cudf.concat([cudfSeriesB, cudfSeries], axis=1)\r\nprint(cudfSeries)\r\nprint(cudfArray)\r\nprint(cudfSeriesB)\r\n#cudfArray = cudfArray.as_matrix()\r\ncudfArray[1].str.cat(cudfArray[0], na_rep=\"-\").str.cat(cudfSeries, na_rep=\"-\")\r\n```\r\n\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/7905/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/7905/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}