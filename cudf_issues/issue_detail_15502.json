{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/15502",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/15502/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/15502/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/15502/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/15502",
    "id": 2235938525,
    "node_id": "I_kwDOBWUGps6FRbbd",
    "number": 15502,
    "title": "[FEA] Improve occupancy during hash table build",
    "user": {
        "login": "tgujar",
        "id": 23545205,
        "node_id": "MDQ6VXNlcjIzNTQ1MjA1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23545205?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgujar",
        "html_url": "https://github.com/tgujar",
        "followers_url": "https://api.github.com/users/tgujar/followers",
        "following_url": "https://api.github.com/users/tgujar/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgujar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgujar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgujar/subscriptions",
        "organizations_url": "https://api.github.com/users/tgujar/orgs",
        "repos_url": "https://api.github.com/users/tgujar/repos",
        "events_url": "https://api.github.com/users/tgujar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgujar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2024-04-10T15:57:18Z",
    "updated_at": "2024-05-13T23:18:42Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\ncuco insert kernel has poor occupancy due to high register usage during hash table build operation executed by cuDF. If I disable some of the code paths for complex types(commenting out dict, string, list, struct, decimal) in https://github.com/rapidsai/cudf/blob/434df44d9fe1c94e8047bcc37266ae663eae8a8d/cpp/include/cudf/utilities/type_dispatcher.hpp#L456 the type dispatcher, then the register usage per thread drops from 75 -> 46 and leads to a significant occupancy bump. It seems that the insert kernel has to pay the cost of high register usage even for simpler types since the compiler has to account for all code paths.\r\n\r\nI did some experiments by disabling different subsets of types, list has types I disable -> register count for insert kernel\r\n- decimal -> 72\r\n- struct -> 73\r\n- list -> 73\r\n- string -> 73\r\n- dict -> 68\r\n- struct, list -> 64\r\n- list, decimal, struct -> 63\r\n- dict, string, list, struct -> 58\r\n- string, dict, struct, list, decimal -> 46\r\n\r\nHere is the speedup I see on mixed semi join kernel by improving occupancy for int32 keys obtained by disabling complex types\r\n![image](https://github.com/rapidsai/cudf/assets/23545205/553e66bc-0fce-4954-868b-cd8a7163eedf)\r\n\r\n**Describe the solution you'd like**\r\nImprove occupancy by disabling codepaths for complex types.\r\n\r\n**Describe alternatives you've considered**\r\n1. Add more template params to the hasher/comparator which allow us to separate codepaths for complex types and simpler types, or \r\n2. Add JIT compilation to only consider the types necessary for hasher/comparator for a row\r\n\r\n**Additional context**\r\nAdd any other context, code examples, or references to existing implementations about the feature request here.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/15502/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/15502/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}