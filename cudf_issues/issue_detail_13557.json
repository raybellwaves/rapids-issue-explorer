{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13557",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13557/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13557/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13557/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13557",
    "id": 1754609162,
    "node_id": "I_kwDOBWUGps5olTYK",
    "number": 13557,
    "title": "[ENH] Audit `argsort + gather/scatter` patterns for missing performance",
    "user": {
        "login": "wence-",
        "id": 1126981,
        "node_id": "MDQ6VXNlcjExMjY5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wence-",
        "html_url": "https://github.com/wence-",
        "followers_url": "https://api.github.com/users/wence-/followers",
        "following_url": "https://api.github.com/users/wence-/following{/other_user}",
        "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
        "organizations_url": "https://api.github.com/users/wence-/orgs",
        "repos_url": "https://api.github.com/users/wence-/repos",
        "events_url": "https://api.github.com/users/wence-/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wence-/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-06-13T10:57:12Z",
    "updated_at": "2023-11-23T17:53:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "During review of #13419 we noted a few places where there is a pattern like:\r\n\r\n```python\r\nsome_frame = ...\r\nindices = some_frame.some_column.argsort()\r\nnew_frame = some_frame.take(indices)\r\n```\r\n\r\nAs well as the unnecessary bounds-check (see #13456), this is a pattern that is captured by libcudf's [`sort_by_key`](https://docs.rapids.ai/api/libcudf/stable/group__column__sort.html#ga6db0403a43150b3bca0fbb9b2fbd68a3) and [`stable_sort_by_key`](https://docs.rapids.ai/api/libcudf/stable/group__column__sort.html#gaea04f441fe246b5a7e4f6420864024d4) functions (we would want to use the latter in pandas-compat mode).\r\n\r\nAt present, libcudf implements this as a `argsort` of the key columns followed by a gather. But that's an implementation detail (there may in the future be updates to that implementation). In the Python layer we should \"say what we mean\" and call into the appropriate libcudf API.\r\n\r\nA cursory search shows:\r\n\r\n```\r\n/usr/bin/rg -U -e argsort.\\*'     \r\n'.\\*take\r\n\r\ncore/_base_index.py\r\n1305:        indices = self.argsort(ascending=ascending, na_position=na_position)\r\n1306:        index_sorted = self.take(indices)\r\n\r\ncore/indexed_frame.py\r\n2464:                # double-argsort to map back from sorted to unsorted positions\r\n2465:                df = df.take(index.argsort(ascending=True).argsort())\r\n\r\ncore/column/column.py\r\n1382:        order = order.take(left_gather_map, check_bounds=False).argsort()\r\n1383:        codes = codes.take(order)\r\n\r\ncore/groupby/groupby.py\r\n686:            gather_map = ordering.take(to_take).argsort()\r\n687:            return result.take(gather_map)\r\n```\r\n\r\nOf these, the calls in `_base_index.py`, `_column.py`, and `groupby.py` can definitely be replaced by `sort_by_key`. Note also that none of these calls pass `check_bounds=False` to `take` so incur an unnecessary kernel launch to check in-boundsness for something that is guaranteed in bounds.\r\n\r\nThe `take(argsort().argsort())` pattern is not a `sort_by_key`, however, we can elide one of the argsorts by noticing that `take` is a gather operation and for a permutation, the dual to gather is scatter. So this should be implemented as `df.scatter(index.argsort())` instead...\r\n\r\nThese are just the cases where an argsort is _immediately_ followed by a take, probably more diligent searching would find more.\r\n```[tasklist]\r\n### Tasks\r\n- [ ] `RollingGroupby.__init__`\r\n- [ ] `Groupby._head_tail`\r\n- [ ] `IndexedFrame.interpolate`\r\n- [ ] `IndexedFrame.sort_index`\r\n- [ ] `IndexedFrame._reindex`\r\n- [ ] `IndexedFrame.sort_values`\r\n- [ ] `IndexedFrame._n_largest_or_smallest`\r\n- [ ] `BaseIndex.sort_values`\r\n- [ ] `MultiIndex.__repr__`\r\n```\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13557/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13557/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}