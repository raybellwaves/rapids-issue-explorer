{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13839",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13839/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13839/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13839/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13839",
    "id": 1843275733,
    "node_id": "I_kwDOBWUGps5t3ifV",
    "number": 13839,
    "title": "[FEA] Support floating dtypes for `corr` aggregations in JIT GroupBy Apply",
    "user": {
        "login": "brandon-b-miller",
        "id": 53796099,
        "node_id": "MDQ6VXNlcjUzNzk2MDk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/53796099?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandon-b-miller",
        "html_url": "https://github.com/brandon-b-miller",
        "followers_url": "https://api.github.com/users/brandon-b-miller/followers",
        "following_url": "https://api.github.com/users/brandon-b-miller/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandon-b-miller/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandon-b-miller/subscriptions",
        "organizations_url": "https://api.github.com/users/brandon-b-miller/orgs",
        "repos_url": "https://api.github.com/users/brandon-b-miller/repos",
        "events_url": "https://api.github.com/users/brandon-b-miller/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandon-b-miller/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1016320727,
            "node_id": "MDU6TGFiZWwxMDE2MzIwNzI3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/numba",
            "name": "numba",
            "color": "9c2cdd",
            "default": false,
            "description": "Numba issue"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-08-09T13:42:41Z",
    "updated_at": "2023-08-09T13:42:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nCurrently only [integer dtypes](https://github.com/rapidsai/cudf/blob/branch-23.10/python/cudf/cudf/core/udf/groupby_typing.py#L257-L258) are supported when applying a correlation aggregation between columns in JIT GroupBy apply. This is mainly lacking due to requiring special treatment to match pandas treatment for special values. A note in the [pandas docs](https://pandas.pydata.org/docs/reference/api/pandas.Series.corr.html) says:\r\n\r\n```\r\nCompute correlation with other Series, excluding missing values.\r\n```\r\n\r\nIn general, JIT groupby apply does not support nulls, but it seems that nans are covered under this umbrella as well. By \"excluding\" missing values, pandas means that the final correlation coefficient is the same as one which would have been computed if all pairs of datapoints where either value is nan is excluded from the inner sum of the algorithm. This can be seen as follows:\r\n\r\n```python\r\n>>> sr1 = pd.Series([1.0, 2.0, float('nan'), 4.0, float('nan'), 6.0])\r\n>>> sr2 = pd.Series([1.1, 1.9, 3.0, float('nan'), float('nan'), 6.7])\r\n>>> mask = ~(sr1.isna() | sr2.isna())\r\n>>> sr1.corr(sr2)\r\n0.9983374884595826\r\n>>> sr1[mask].corr(sr2[mask])\r\n0.9983374884595826\r\n```\r\n\r\n\r\n\r\n**Describe the solution you'd like**\r\nI'd like this to work and return the same value as pandas. This requires some additional engineering inside of our shim library to support this kind of element deletion on the c++ side. Currently `corr` leverages various other block level functions such as covariance to compute the pearson correlation. We'd have to figure out if we can adapt those functions to support this case or if we'd have to do something more involved for `corr` specifically. ",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13839/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13839/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}