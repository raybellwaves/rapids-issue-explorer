{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/11648",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/11648/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/11648/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/11648/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/11648",
    "id": 1360681745,
    "node_id": "I_kwDOBWUGps5RGlsR",
    "number": 11648,
    "title": "Optimize `to_cupy` and `values`",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        },
        {
            "id": 2546521024,
            "node_id": "MDU6TGFiZWwyNTQ2NTIxMDI0",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/improvement",
            "name": "improvement",
            "color": "bfd4f2",
            "default": false,
            "description": "Improvement / enhancement to an existing function"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/6",
        "html_url": "https://github.com/rapidsai/cudf/milestone/6",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/6/labels",
        "id": 6996925,
        "node_id": "MI_kwDOBWUGps4AasO9",
        "number": 6,
        "title": "cuDF Python Refactoring",
        "description": "Refactor Python layers to improve performance, robustness, and extensibility. Ongoing development is being guided by the roadmap and evolving development guide.",
        "creator": {
            "login": "vyasr",
            "id": 1538165,
            "node_id": "MDQ6VXNlcjE1MzgxNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vyasr",
            "html_url": "https://github.com/vyasr",
            "followers_url": "https://api.github.com/users/vyasr/followers",
            "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
            "organizations_url": "https://api.github.com/users/vyasr/orgs",
            "repos_url": "https://api.github.com/users/vyasr/repos",
            "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vyasr/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 14,
        "closed_issues": 101,
        "state": "open",
        "created_at": "2021-07-22T17:26:09Z",
        "updated_at": "2024-05-17T14:59:01Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 2,
    "created_at": "2022-09-02T23:24:22Z",
    "updated_at": "2024-05-17T15:22:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently `series.values` and especially `series.to_cupy()` are substantially slower than `cupy.asarray(series)`. \r\n```\r\nIn [2]: s = cudf.Series(range(10000))\r\n\r\nIn [3]: %timeit s.values\r\n81.4 \u00b5s \u00b1 1.68 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [4]: %timeit cp.asarray(s)\r\n19.1 \u00b5s \u00b1 168 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\r\n\r\nIn [5]: %timeit s.to_cupy()\r\n349 \u00b5s \u00b1 75.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n```\r\n\r\nThere are at least two obvious potential culprits in `Frame._to_array` (the underlying method for `to_cupy`):\r\n- [It always performs an extra allocation](https://github.com/rapidsai/cudf/blob/branch-22.10/python/cudf/cudf/core/frame.py#L484), even when `copy=False`.\r\n- [It performs dtype inference using `find_common_dtype`](https://github.com/rapidsai/cudf/blob/branch-22.10/python/cudf/cudf/core/frame.py#L479), which is _slow_ (and slower for `DataFrame`s with many columns):\r\n```\r\nIn [11]: df = cudf.DataFrame({'a': [1], 'b': [3.], 'c': ['a']})\r\n\r\nIn [12]: %timeit cudf.utils.dtypes.find_common_type([col.dtype for col in df._data.values()])\r\n53.6 \u00b5s \u00b1 530 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [13]: df = cudf.DataFrame({'a': [1], 'b': [3.]})\r\n\r\nIn [14]: %timeit cudf.utils.dtypes.find_common_type([col.dtype for col in df._data.values()])\r\n39.8 \u00b5s \u00b1 1.01 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n```\r\n\r\nThe implementation of `values` drops down to `ColumnBase.values` and requires some deeper consideration. However, since we use `.values` frequently internally (and we occasionally use `to_cupy`) we are likely giving up a lot of performance. We should profile these functions to determine the bottlenecks, and if there are valid reasons for them we should establish some policies on how to select the right function to use when performing these conversions to arrays internally. While this exact analogy does not hold for `DataFrame` (because that doesn't support the conversion to an array), any optimization that we make for `Series` will likely also help speed up `DataFrame` operations.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/11648/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/11648/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}