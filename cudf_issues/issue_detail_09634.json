{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/9634",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/9634/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/9634/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/9634/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/9634",
    "id": 1047947226,
    "node_id": "I_kwDOBWUGps4-dmfa",
    "number": 9634,
    "title": "[FEA] Series and DataFrame between_time",
    "user": {
        "login": "beckernick",
        "id": 8457388,
        "node_id": "MDQ6VXNlcjg0NTczODg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/beckernick",
        "html_url": "https://github.com/beckernick",
        "followers_url": "https://api.github.com/users/beckernick/followers",
        "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
        "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
        "organizations_url": "https://api.github.com/users/beckernick/orgs",
        "repos_url": "https://api.github.com/users/beckernick/repos",
        "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
        "received_events_url": "https://api.github.com/users/beckernick/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1016332948,
            "node_id": "MDU6TGFiZWwxMDE2MzMyOTQ4",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/good%20first%20issue",
            "name": "good first issue",
            "color": "7057ff",
            "default": true,
            "description": "Good for newcomers"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 1,
    "created_at": "2021-11-08T21:40:22Z",
    "updated_at": "2022-06-04T13:51:35Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "For pandas API compatibility, we can implement [Series](https://pandas.pydata.org/docs/reference/api/pandas.Series.between_time.html) and [DataFrame.between_time](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.between_time.html). `between_time` \"select[s] values between particular times of the day (e.g., 9:00-9:30 AM). By setting start_time to be later than end_time, you can get the times that are not between the two times.\"\r\n\r\nIf the index is not a DatetimeIndex, this method throws a TypeError. DateTimes without time components are considered as if the time component were \"0:00:00\". Valid `{start, end}_time` must be in the interval [0:00 and 24:00).\r\n\r\nThe API documentation does not indicate what resolutions are valid or invalid for `{start, end}_time`, but it is documented as only including granularity down to seconds in the [utility function](https://github.com/pandas-dev/pandas/blob/d9488016443ccd81a02321797c491eab7b404863/pandas/core/indexes/datetimes.py#L819-L833):\r\n```\r\n        Return index locations of values between particular times of day\r\n        (e.g., 9:00-9:30AM).\r\n        Parameters\r\n        ----------\r\n        start_time, end_time : datetime.time, str\r\n            Time passed either as object (datetime.time) or as string in\r\n            appropriate format (\"%H:%M\", \"%H%M\", \"%I:%M%p\", \"%I%M%p\",\r\n            \"%H:%M:%S\", \"%H%M%S\", \"%I:%M:%S%p\",\"%I%M%S%p\").\r\n        include_start : bool, default True\r\n        include_end : bool, default True\r\n```\r\n\r\n```python\r\nimport pandas as pd\r\n\u200b\r\ni = pd.date_range('2018-04-09', periods=4, freq='1D20min')\r\nts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\r\n\u200b\r\nprint(ts)\r\nprint(ts.between_time('0:15', '0:45'))\r\nprint(ts.between_time('0:45', '0:15'))\r\n                     A\r\n2018-04-09 00:00:00  1\r\n2018-04-10 00:20:00  2\r\n2018-04-11 00:40:00  3\r\n2018-04-12 01:00:00  4\r\n                     A\r\n2018-04-10 00:20:00  2\r\n2018-04-11 00:40:00  3\r\n                     A\r\n2018-04-09 00:00:00  1\r\n2018-04-12 01:00:00  4\r\n```\r\n\r\n```python\r\ni = pd.Series([\"2021-01-01\", \"2021-02-10\"], dtype=\"datetime64[ns]\")\r\ns = pd.Series([0,1], index=i)\r\nprint(s, \"\\n\")\r\nprint(s.between_time(\"0:00:01\", \"23:59:59\"), \"\\n\")\r\nprint(s.between_time(\"0:00\", \"0:15\"))\r\n2021-01-01    0\r\n2021-02-10    1\r\ndtype: int64 \r\n\r\nSeries([], dtype: int64) \r\n\r\n2021-01-01    0\r\n2021-02-10    1\r\ndtype: int64\r\n```\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/9634/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/9634/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}