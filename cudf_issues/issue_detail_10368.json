{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/10368",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/10368/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/10368/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/10368/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/10368",
    "id": 1154466677,
    "node_id": "I_kwDOBWUGps5Ez8N1",
    "number": 10368,
    "title": "Use \"ranger\" to prevent grid stride loop overflow",
    "user": {
        "login": "nvdbaranec",
        "id": 56695930,
        "node_id": "MDQ6VXNlcjU2Njk1OTMw",
        "avatar_url": "https://avatars.githubusercontent.com/u/56695930?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nvdbaranec",
        "html_url": "https://github.com/nvdbaranec",
        "followers_url": "https://api.github.com/users/nvdbaranec/followers",
        "following_url": "https://api.github.com/users/nvdbaranec/following{/other_user}",
        "gists_url": "https://api.github.com/users/nvdbaranec/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nvdbaranec/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nvdbaranec/subscriptions",
        "organizations_url": "https://api.github.com/users/nvdbaranec/orgs",
        "repos_url": "https://api.github.com/users/nvdbaranec/repos",
        "events_url": "https://api.github.com/users/nvdbaranec/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nvdbaranec/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1013987417,
            "node_id": "MDU6TGFiZWwxMDEzOTg3NDE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/1%20-%20On%20Deck",
            "name": "1 - On Deck",
            "color": "bfd4f2",
            "default": false,
            "description": "To be worked on next"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/20",
        "html_url": "https://github.com/rapidsai/cudf/milestone/20",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/20/labels",
        "id": 8568142,
        "node_id": "MI_kwDOBWUGps4Agr1O",
        "number": 20,
        "title": "Stabilizing large workflows (OOM, spilling, partitioning)",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 16,
        "closed_issues": 3,
        "state": "open",
        "created_at": "2022-10-21T19:29:07Z",
        "updated_at": "2024-05-22T23:20:04Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 15,
    "created_at": "2022-02-28T19:30:02Z",
    "updated_at": "2024-02-23T17:56:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "(updated Aug 2023)\r\n\r\n### Background\r\n\r\nWe found a kernel indexing overflow issue, first discovered in the `fused_concatenate` kernels (https://github.com/rapidsai/cudf/issues/10333) and this issue is present in a number of our CUDA kernels that take the following form:\r\n\r\n```\r\nsize_type output_index = threadIdx.x + blockIdx.x * blockDim.x;  \r\nwhile (output_index < output_size) {\r\n  output_index += blockDim.x * gridDim.x;\r\n}\r\n```\r\n\r\nIf we have an output_size of say 1.2 billion and a grid size that's the same, the following happens:  Some late thread id, say 1.19 billion attempts to add 1.2 billion (blockDim.x * gridDim.x) and overflows the size_type (signed 32 bits). \r\n\r\nWe made a round of fixes in #10448, and then later found another instance of this error in #13838. Our first pass of investigation was not adequate to contain the issue, so we need to take another close look.\r\n\r\n\r\n### Part 1 - First pass fix kernels with this issue\r\n\r\n| Source file | Kernels | Status | \r\n|---|---|---|\r\n| `copying/concatenate.cu` | `fused_concatenate_kernel` |  #10448 |\r\n| `valid_if.cuh` | `valid_if_kernel` |  #10448 |\r\n| `scatter.cu` | `marking_bitmask_kernel` |  #10448 |\r\n| `replace/nulls.cu` | `replace_nulls_strings` | #10448 |\r\n| `replace/nulls.cu` | `replace_nulls` |  #10448 |\r\n| `rolling/rolling_detail.cuh` | `gpu_rolling` |  #10448 |\r\n| `rolling/jit/kernel.cu` | `gpu_rolling_new` | #10448 |\r\n| `transform/compute_column.cu` | `compute_column_kernel`  | #10448 |\r\n|`copying/concatenate.cu` | `fused_concatenate_string_offset_kernel` |  #13838 |\r\n| `replace/replace.cu` |   `replace_strings_first_pass` <br>   `replace_strings_second_pass` <br>  `replace_kernel` | #13905 |\r\n| `copying/concatenate.cu` |   `concatenate_masks_kernel` <br>   `fused_concatenate_string_offset_kernel` <br>   `fused_concatenate_string_chars_kernel` <br>  `fused_concatenate_kernel` (int64) | #13906 | | \r\n| `hash/helper_functions.cuh` |   `init_hashtbl` | #13895  |\r\n| `null_mask.cu` |  `set_null_mask_kernel` <br>   `copy_offset_bitmask` <br>   `count_set_bits_kernel` | #13895  | \r\n| `transform/row_bit_count.cu` |   `compute_row_sizes` | #13895  | \r\n| `multibyte_split.cu` |   `multibyte_split_init_kernel` <br>   `multibyte_split_seed_kernel` (auto??) <br>   `multibyte_split_kernel`  | #13910 | \r\n| IO modules: parquet, orc, json | | #13910 | \r\n| `io/utilities/parsing_utils.cu` |   `count_and_set_positions` (uint64_t)  | #13910 |  \r\n| `conditional_join_kernels.cuh` |   `compute_conditional_join_output_size` <br>   `conditional_join` | #13971 | \r\n| `merge.cu` |   `materialize_merged_bitmask_kernel`  | #13972 | \r\n| `partitioning.cu` |   `compute_row_partition_numbers`  <br>  `compute_row_output_locations` <br>   `copy_block_partitions`  | #13973  | \r\n| `json_path.cu` |  `get_json_object_kernel`  | #13962 | \r\n | `tdigest` |   `compute_percentiles_kernel` (int)  | #13962 | \r\n| `strings/attributes.cu` |   `count_characters_parallel_fn`  | #13968 |  \r\n| `strings/convert/convert_urls.cu` |   `url_decode_char_counter` (int) <br>   `url_decode_char_replacer` (int)  | #13968 |  \r\n| `text/subword/data_normalizer.cu` |   `kernel_data_normalizer` (uint32_t)  |  #13915  | \r\n| `text/subword/subword_tokenize.cu`  |  `kernel_compute_tensor_metadata` (uint32_t)  |  #13915 | \r\n| `text/subword/wordpiece_tokenizer.cu` |  `init_data_and_mark_word_start_and_ends` (uint32_t) <br>   `mark_string_start_and_ends` (uint32_t) <br>   `kernel_wordpiece_tokenizer` (uint32_t) | #13915  | \r\n\r\n### Part 2 - Take another pass over more challenging kernels\r\n\r\n\r\n| Source file | Kernels | Status | \r\n|---|---|---|\r\n| null_mash.cuh | [subtract_set_bits_range_boundaries_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/null_mask.cuh#L215) | |\r\n| valid_if.cuh | [valid_if_n_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/valid_if.cuh#L154) | |\r\n|copy_if_else.cuh | [copy_if_else_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/copy_if_else.cuh#L41) | |\r\n| gather.cuh | [gather_chars_fn_string_parallel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/strings/detail/gather.cuh#L78) | |\r\n| more? | search `gridDim.x` or `blockDim.x` to find more examples | | \r\n\r\n\r\n\r\n\r\n### Part 3 - Use [ranger](https://github.com/harrism/ranger) to prevent grid stride loop overflow\r\n* incorporate the ranger header as a libcudf utility\r\n* use ranger instead of manual indexing in libcudf kernels\r\n\r\n\r\n### Additional information\r\n\r\nThere are also a number of kernels that have this pattern but probably don't ever overflow because they are indexing by bitmask words.  ([Example](https://github.com/rapidsai/cudf/blob/4c9ef5161268e2486938546deef00f7fc84c9a95/cpp/include/cudf/detail/copy_range.cuh#L41))\r\nAdditional, In this kernel, `source_idx` probably overflows, but harmlessly.\r\n\r\nA snippet of code to see this in action:\r\n```\r\nsize_type const size = 1200000000;\r\nauto big = cudf::make_fixed_width_column(data_type{type_id::INT32}, size, mask_state::UNALLOCATED);  \r\nauto x = cudf::rolling_window(*big, 1, 1, 1, cudf::detail::sum_aggregation{}); \r\n```\r\n\r\nNote:  rmm may mask out of bounds accesses in some cases, so it's helpful to run with the plain cuda allocator.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/10368/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/10368/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}