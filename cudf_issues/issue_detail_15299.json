{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/15299",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/15299/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/15299/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/15299/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/15299",
    "id": 2185183492,
    "node_id": "I_kwDOBWUGps6CP0EE",
    "number": 15299,
    "title": "[FEA] Convert attribute access of pylibcudf objects from getters to properties",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 7011038943,
            "node_id": "LA_kwDOBWUGps8AAAABoeP23w",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/pylibcudf",
            "name": "pylibcudf",
            "color": "e99695",
            "default": false,
            "description": "Issues specific to the pylibcudf package"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-03-14T01:09:13Z",
    "updated_at": "2024-05-28T23:33:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\nCurrently most pylibcudf object attributes are accessed via nullary getter methods that return attributes. The main reason for this is that it allows typing of these functions for convenience in Cython, but also because there is a small performance penalty associated with both the loss of typing and the use of a `def` function to make it a property. However, the tradeoff is that it results in unpythonic code when actually using pylibcudf, e.g. you have to do write things like `table.columns()[i]` instead of `table.columns[i]`. The tradeoff is almost certainly not worthwhile, especially since from a performance perspective the two should be nearly equivalent since Cython should handle properties fairly intelligently for us up to the actual function call. Note that for setters there would be some additional overhead for unboxing the value, but that's not relevant since essentially all properties in pylibcudf will be getters only.\n\n**Describe the solution you'd like**\nWe should replace the getters with properties where appropriate.\n\nIf we are concerned with the performance difference in Cython, the other alternative would be to expose these members directly as `readonly` attributes. That would have the same effect in Python as making them properties with only setters, not getters. In Cython the attributes would still be freely writeable, but that is already true and the only \"protection\" we would be losing is the naming convention of an underscore indicating an internal value.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/15299/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/15299/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}