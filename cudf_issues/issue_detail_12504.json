{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12504",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12504/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12504/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12504/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12504",
    "id": 1526336963,
    "node_id": "I_kwDOBWUGps5a-g3D",
    "number": 12504,
    "title": "[BUG] IndexError during assignment through loc[]",
    "user": {
        "login": "mattf",
        "id": 112653,
        "node_id": "MDQ6VXNlcjExMjY1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/112653?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mattf",
        "html_url": "https://github.com/mattf",
        "followers_url": "https://api.github.com/users/mattf/followers",
        "following_url": "https://api.github.com/users/mattf/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mattf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattf/subscriptions",
        "organizations_url": "https://api.github.com/users/mattf/orgs",
        "repos_url": "https://api.github.com/users/mattf/repos",
        "events_url": "https://api.github.com/users/mattf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mattf/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 0,
    "created_at": "2023-01-09T21:16:15Z",
    "updated_at": "2023-06-06T03:54:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\nrewriting code with `import cudf as pd`\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nIn [1]: import cudf as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '22.12.0'\r\n\r\nIn [3]: df = pd.DataFrame(columns=['a'])\r\n\r\nIn [4]: df.loc[0] = [1]\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 df.loc[0] = [1]\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:149, in _DataFrameIndexer.__setitem__(self, key, value)\r\n    147 if not isinstance(key, tuple):\r\n    148     key = (key, slice(None))\r\n--> 149 return self._setitem_tuple_arg(key, value)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:393, in _DataFrameLocIndexer._setitem_tuple_arg(self, key, value)\r\n    386 # Otherwise, there are two situations. The key on row axis\r\n    387 # can be a scalar or 1d. In either of the situation, the\r\n    388 # ith element in value corresponds to the ith row in\r\n    389 # the indexed object.\r\n    390 # If the key is 1d, a broadcast will happen.\r\n    391 else:\r\n    392     for i, col in enumerate(columns_df._column_names):\r\n--> 393         self._frame[col].loc[key[0]] = value[i]\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/series.py:285, in _SeriesLocIndexer.__setitem__(self, key, value)\r\n    283     value = cudf.Series(value)\r\n    284     value = value._align_to_index(self._frame.index, how=\"right\")\r\n--> 285 self._frame.iloc[key] = value\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/series.py:236, in _SeriesIlocIndexer.__setitem__(self, key, value)\r\n    231     if to_dtype != self._frame._column.dtype:\r\n    232         self._frame._column._mimic_inplace(\r\n    233             self._frame._column.astype(to_dtype), inplace=True\r\n    234         )\r\n--> 236 self._frame._column[key] = value\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/column/column.py:496, in ColumnBase.__setitem__(self, key, value)\r\n    494     if not isinstance(key, cudf.core.column.NumericalColumn):\r\n    495         raise ValueError(f\"Invalid scatter map type {key.dtype}.\")\r\n--> 496     out = self._scatter_by_column(key, value_normalized)\r\n    498 if out:\r\n    499     self._mimic_inplace(out, inplace=True)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/column/column.py:580, in ColumnBase._scatter_by_column(self, key, value)\r\n    576     return libcudf.copying.boolean_mask_scatter([value], [self], key)[\r\n    577         0\r\n    578     ]._with_type_metadata(self.dtype)\r\n    579 else:\r\n--> 580     return libcudf.copying.scatter([value], key, [self])[\r\n    581         0\r\n    582     ]._with_type_metadata(self.dtype)\r\n\r\nFile /usr/lib/python3.9/contextlib.py:79, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)\r\n     76 @wraps(func)\r\n     77 def inner(*args, **kwds):\r\n     78     with self._recreate_cm():\r\n---> 79         return func(*args, **kwds)\r\n\r\nFile copying.pyx:265, in cudf._lib.copying.scatter()\r\n\r\nIndexError: index out of bounds for column of size 0\r\n\r\nIn [5]: pdf = df.to_pandas()\r\n\r\nIn [6]: pdf\r\nOut[6]: \r\nEmpty DataFrame\r\nColumns: [a]\r\nIndex: []\r\n\r\nIn [7]: pdf.loc[0] = [1]\r\n\r\nIn [8]: pdf\r\nOut[8]: \r\n   a\r\n0  1\r\n```\r\n\r\n\r\n**Expected behavior**\r\nsame behavior as `import pandas as pd`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12504/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12504/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}