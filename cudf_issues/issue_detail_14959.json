{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14959",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14959/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14959/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14959/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14959",
    "id": 2115822087,
    "node_id": "I_kwDOBWUGps5-HOIH",
    "number": 14959,
    "title": "[FEA] Zero-copy nested types with other GPU libraries (like Awkward array)",
    "user": {
        "login": "shwina",
        "id": 3190405,
        "node_id": "MDQ6VXNlcjMxOTA0MDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shwina",
        "html_url": "https://github.com/shwina",
        "followers_url": "https://api.github.com/users/shwina/followers",
        "following_url": "https://api.github.com/users/shwina/following{/other_user}",
        "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
        "organizations_url": "https://api.github.com/users/shwina/orgs",
        "repos_url": "https://api.github.com/users/shwina/repos",
        "events_url": "https://api.github.com/users/shwina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shwina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "shwina",
        "id": 3190405,
        "node_id": "MDQ6VXNlcjMxOTA0MDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shwina",
        "html_url": "https://github.com/shwina",
        "followers_url": "https://api.github.com/users/shwina/followers",
        "following_url": "https://api.github.com/users/shwina/following{/other_user}",
        "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
        "organizations_url": "https://api.github.com/users/shwina/orgs",
        "repos_url": "https://api.github.com/users/shwina/repos",
        "events_url": "https://api.github.com/users/shwina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shwina/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "shwina",
            "id": 3190405,
            "node_id": "MDQ6VXNlcjMxOTA0MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3190405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shwina",
            "html_url": "https://github.com/shwina",
            "followers_url": "https://api.github.com/users/shwina/followers",
            "following_url": "https://api.github.com/users/shwina/following{/other_user}",
            "gists_url": "https://api.github.com/users/shwina/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shwina/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shwina/subscriptions",
            "organizations_url": "https://api.github.com/users/shwina/orgs",
            "repos_url": "https://api.github.com/users/shwina/repos",
            "events_url": "https://api.github.com/users/shwina/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shwina/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2024-02-02T21:21:47Z",
    "updated_at": "2024-03-21T23:23:39Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "In a conversation with @martindurant and @jpivarski, it came up that there's no supported way to exchange data zero copy between cuDF and [Awkward Array](https://awkward-array.org/doc/main/) (which has GPU support).\r\n\r\nThe standard 0-copy mechanisms like dlpack and `__cuda_array_interface__` don't support nested types like lists or structs. And our `to/from_arrow()` methods convert to and from _host_ data so they're not useful when we want to 0-copy _device_ data.\r\n\r\n## Option 1\r\n\r\nWe support a `gpu=True` (or similar) keyword argument in `to_arrow()` which would then return a PyArrow array backed by device data. Now, PyArrow does not seemingly support it, but it's _possible_ to create a PyArrow array backed by device data:\r\n\r\n```python\r\nIn [5]: a = cp.asarray([1, 2, 3])\r\n\r\nIn [6]: buf = pa.foreign_buffer(a.data.ptr, a.nbytes, a)\r\n\r\nIn [7]: type(buf)\r\nOut[7]: pyarrow.lib.Buffer\r\n\r\nIn [8]: print(buf)\r\n<pyarrow.Buffer address=0x7f2f6fa00200 size=24 is_cpu=True is_mutable=False>\r\n```\r\n\r\nThe problem (as can be seen above) is that PyArrow thinks this is a CPU-backed buffer. So attempting to do anything with it segfaults:\r\n\r\n```python\r\nIn [9]: arr = pa.Array.from_buffers(pa.int64(), len(a), buffers=[None, buf])\r\n\r\nIn [10]: print(arr)  # segfault\r\n```\r\n\r\n## Option 2\r\n\r\nWe could expose new `Series.to_buffers()` and `Series.from_buffers()` functions that would produce and consume GPU buffers (along with a schema), presumably in the same order as arrow's [from_buffers](https://arrow.apache.org/docs/python/generated/pyarrow.Array.html#pyarrow.Array.from_buffers) and [buffers](https://arrow.apache.org/docs/python/generated/pyarrow.Array.html#pyarrow.Array.buffers) methods. We could use CuPy arrays to represent the buffers.\r\n\r\n---\r\n\r\nCurious what folks think? Interested also in @kkraus14's thoughts here if any.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14959/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14959/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}