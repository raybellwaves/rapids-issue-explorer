{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14594",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14594",
    "id": 2031359275,
    "node_id": "I_kwDOBWUGps55FBUr",
    "number": 14594,
    "title": "[FEA] Tighten up promotion when merging with non-equal key column dtypes",
    "user": {
        "login": "wence-",
        "id": 1126981,
        "node_id": "MDQ6VXNlcjExMjY5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wence-",
        "html_url": "https://github.com/wence-",
        "followers_url": "https://api.github.com/users/wence-/followers",
        "following_url": "https://api.github.com/users/wence-/following{/other_user}",
        "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
        "organizations_url": "https://api.github.com/users/wence-/orgs",
        "repos_url": "https://api.github.com/users/wence-/repos",
        "events_url": "https://api.github.com/users/wence-/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wence-/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-12-07T19:04:54Z",
    "updated_at": "2024-03-04T15:41:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nTo date, cudf has attempted to match pandas semantics when matching join keys in a merge. libcudf does not perform merges between mismatching table dtypes. Consequently, the first step of a merge in cudf is to determine a \"common\" dtype for each pair of columns used as keys in the merge.\r\n\r\nThe pandas rules are mostly (though not completely since there is some under the table work that happens in the join algorithm) encoded in https://github.com/pandas-dev/pandas/blob/f7c73a5f1aaf0724598e60c0cc5732604ec842a8/pandas/core/reshape/merge.py#L1340\r\n\r\nThere are a few problems when trying to match these in cudf:\r\n\r\n- not all column types in pandas can be represented in cudf (we do not have an `object` column for example)\r\n- it is difficult to unambiguously determine the type promotion rules since they are not written down anywhere\r\n    - for example, promotion rules for categorical columns differ depending on whether the categorical is the left or right key.\r\n\r\nMoreover, there are other, correctness, problems. The current type promotion rules admit lossy conversions that can result in false positive matches in merges.\r\n\r\nExample:\r\n```\r\nleft = cudf.DataFrame({\"key\": [1, 2, 2**53]})\r\nright = cudf.DataFrame({\"key\": [2**53 + 1, 10]})\r\nright[\"key\"] = right.key.astype(\"uint64\")\r\nleft.merge(right, on=\"key\", how=\"inner\")\r\n#            key\r\n# 0  9.007199e+15\r\nleft\r\n#                key\r\n# 0                 1\r\n# 1                 2\r\n# 2  9007199254740992\r\nright\r\n#                key\r\n# 0  9007199254740993\r\n# 1                10\r\n```\r\n\r\nPandas is also susceptible to this, but produces a different wrong result.\r\n\r\nI would like to tighten up the rules in cudf, so that it is impossible for the user to get a \"surprising\" result without some explicit intervention on their behalf. We would also try and match pandas more closely where that is possible, but my preference is to be correct in a subset of cases over dubiously correct in a larger set.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere are, I think, three levels of things we could do:\r\n\r\n1. Push the burden of dtype matching completely on to the user: complain (raise) if merge keys do not match dtypes _exactly_\r\n2. Promote keys whose dtypes allow so safely (without needing to inspect values), and raise for cases where that is not possible. The user can still perform the merge by intentionally casting to matching types. But then they must know that it is safe.\r\n3. Try and match pandas promotions as closely as possible and accept that there might be false positives.\r\n\r\nI would like to go for (2). (1) is easiest; (3) is difficult, probably a moving target and can result in false positives without the user explicitly \"requesting\" them.\r\n\r\nWith cudf-pandas (2), I think, skates the line between ease of use and correctness reasonably well. We can run as much on the GPU as possible and raise (possibly providing a warning in pandas-compat mode) with fallback to CPU. When using cudf directly, users will hopefully be willing to accept a few more edge cases in the name of consistency. \r\n\r\n\r\nConcretely this would mean:\r\n\r\n- No casting for strings\r\n- No casting for lists\r\n- No casting for structs\r\n- Categoricals:\r\n    - if both columns are categorical and match, no casting\r\n    - if both columns are categorical and _do not_ match, raise[^1]\r\n    - if one column is categorical, unwrap, and go round again[^2]\r\n - No casting for decimals\r\n - No casting for datetimes[^3]\r\n - For numeric types, use a type promotion lattice that has lossless least upper bounds for all types[^4]\r\n\r\nFor numeric types, that means that we would only promote pairs of types where there exists a wider type whose values are uniquely and unambiguously mapped onto from the narrower types.\r\n\r\nFor example `(int32, uint32) -> int64` would be allowed, but merging a pair `(int32, uint64)` would raise (since there is no signed 128bit int that we could use). Similarly, we would safely be able to promote `(intX, floatY)` pairs (and similarly with `uintX`) as long as the integer type is 32 or fewer bits wide[^5].\r\n\r\n\r\n\r\n[^1]: I could also be convinced to unwrap and go round again, but that would lose information about the categorical nature of the inputs\r\n[^2]: Pandas behaviour in this case depends on whether the left or right key is categorical (and which merge type it is): it casts the non-categorical to object, and the categorical to its underlying dtype, then imperfectly goes through its matching process again\r\n[^3]: I haven't looked at what pandas does here, but I guess the other thing one could do is promote when one can losslessly convert\r\n[^4]: See, for example https://jax.readthedocs.io/en/latest/jep/9407-type-promotion.html though I disagree with their approach of selecting a \"weak\" float64 as the least upper bound for `(int64, uint64)`\r\n[^5]: Merging between float and int columns is kind of weird, so I could also be convinced to raise when merging between mismatching numeric kinds.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14594/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14594/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}