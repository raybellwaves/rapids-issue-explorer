{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/11130",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/11130",
    "id": 1279087624,
    "node_id": "I_kwDOBWUGps5MPVQI",
    "number": 11130,
    "title": "[FEA] Get Series.list offsets / Construct Series of lists from offsets and values",
    "user": {
        "login": "bdice",
        "id": 3943761,
        "node_id": "MDQ6VXNlcjM5NDM3NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3943761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bdice",
        "html_url": "https://github.com/bdice",
        "followers_url": "https://api.github.com/users/bdice/followers",
        "following_url": "https://api.github.com/users/bdice/following{/other_user}",
        "gists_url": "https://api.github.com/users/bdice/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bdice/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bdice/subscriptions",
        "organizations_url": "https://api.github.com/users/bdice/orgs",
        "repos_url": "https://api.github.com/users/bdice/repos",
        "events_url": "https://api.github.com/users/bdice/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bdice/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/2",
        "html_url": "https://github.com/rapidsai/cudf/milestone/2",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/2/labels",
        "id": 6946310,
        "node_id": "MDk6TWlsZXN0b25lNjk0NjMxMA==",
        "number": 2,
        "title": "List and Struct data types and operations",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 19,
        "closed_issues": 49,
        "state": "open",
        "created_at": "2021-07-14T18:07:53Z",
        "updated_at": "2024-05-15T19:11:54Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 13,
    "created_at": "2022-06-21T21:05:08Z",
    "updated_at": "2024-02-23T18:42:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI would like to be able to access the offsets of a Series of lists. That would allow me to implement a function like `list_add` that takes two \"awkward arrays,\" Series of lists of numbers that have the same list shape, and adds them together. The binary operation can be straightforwardly applied to the \"leaves\" of each list column, which is the child column containing the data. However, to do this, I need a way to access indices and rebuild the list structure. For example, if `Series.list.offsets` and `cudf.Series.list.from_arrays(offsets, values)` existed, I could run something like:\r\n\r\n```python\r\ndef list_add(s1, s2):\r\n    \"\"\"Take two Series of lists of numerical data and add them.\"\"\"\r\n    # Ignore nested lists for simplicity -- this only works for a single level of lists\r\n    if s1.list.offsets!= s2.list.offsets:\r\n        raise ValueError(\"List columns must have corresponding offsets.\")\r\n    return cudf.Series.list.from_arrays(s1.list.offsets, s1.list.leaves + s2.list.leaves)\r\n```\r\n\r\n**Describe the solution you'd like**\r\n- Implement a property `Series.list.offsets` that exposes the offset array, similar to [PyArrow's `pyarrow.ListArray.offsets`](https://arrow.apache.org/docs/python/generated/pyarrow.ListArray.html#pyarrow.ListArray.offsets) but returning a GPU-resident array.\r\n\r\n- Implement a constructor `Series.list.from_arrays(offsets, values)` that builds a Series of lists from input offsets and values, similar to [PyArrow's `pyarrow.ListArray.from_arrays`](https://arrow.apache.org/docs/python/generated/pyarrow.ListArray.html#pyarrow.ListArray.from_arrays) but enabling construction from GPU-resident arrays.\r\n\r\n**Describe alternatives you've considered**\r\nI strongly prefer this approach over implementing binops directly on list types because it allows for precise control of what APIs are exposed and how they behave. Implementing binops for lists would allow for operators like `+` to be used, which is prone to error because it overloads the Python-like list semantics of \"adding is list concatenation\" with the array-like semantics of normal addition.\r\n\r\n**Additional context**\r\nIt's not clear to me where the name \"leaves\" came from. To align with PyArrow, we would rename \"leaves\" to `Series.list.values`.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/11130/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/11130/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}