{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13371",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13371/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13371/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13371/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13371",
    "id": 1714529171,
    "node_id": "I_kwDOBWUGps5mMaOT",
    "number": 13371,
    "title": "[FEA] Support self comparisons in `cudf::experimental::row::lexicographic::two_table_comparator`",
    "user": {
        "login": "divyegala",
        "id": 14876585,
        "node_id": "MDQ6VXNlcjE0ODc2NTg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/14876585?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/divyegala",
        "html_url": "https://github.com/divyegala",
        "followers_url": "https://api.github.com/users/divyegala/followers",
        "following_url": "https://api.github.com/users/divyegala/following{/other_user}",
        "gists_url": "https://api.github.com/users/divyegala/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/divyegala/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/divyegala/subscriptions",
        "organizations_url": "https://api.github.com/users/divyegala/orgs",
        "repos_url": "https://api.github.com/users/divyegala/repos",
        "events_url": "https://api.github.com/users/divyegala/events{/privacy}",
        "received_events_url": "https://api.github.com/users/divyegala/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987417,
            "node_id": "MDU6TGFiZWwxMDEzOTg3NDE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/1%20-%20On%20Deck",
            "name": "1 - On Deck",
            "color": "bfd4f2",
            "default": false,
            "description": "To be worked on next"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2023-05-17T19:21:59Z",
    "updated_at": "2023-06-07T21:12:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "As showcased in https://github.com/rapidsai/cudf/pull/13347, there's a need for `{lhs, lhs}` and `{rhs, rhs}` comparisons in an instance of `two_table_comparator`.\r\n\r\nThis can't simply be achieved by adding more overloads because `left` and `right` terminology is [baked into the comparator](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L1141-L1157) when it's constructed at the host-side. In a device function, the [strongly typed indices](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L1012-L1039) now work with the assumption that a `comp(i, j)` that is called in a device function operates on `{lhs, rhs}` or `{rhs, lhs}`.\r\n\r\nWe need to settle on a design that lets us refactor the row operators such that the assumption of working on two different tables can be removed.\r\n\r\nDo we strongly type `device_row_comparator::operator()` [over here](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L541-L542) such that we can decide which columns of which tables to pass along to the `element_comparator` over [here](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L568-L575)?\r\n\r\nI see the design looking something like this:\r\n```\r\nclass device_row_comparator {\r\n  class element_comparator {\r\n    operator() (size_type lhs_index, size_type rhs_index);\r\n  };\r\n  dispatch_element_operator(lhs_col, rhs_col, lhs_index, rhs_index);\r\n\r\n  // these call dispatch_element_operator with the correct columns and indices\r\n  operator() (lhs_index_type lhs_index, rhs_index_type rhs_index);\r\n  operator() (lhs_index_type lhs_index, lhs_index_type rhs_index);\r\n  operator() (rhs_index_type lhs_index, rhs_index_type rhs_index);\r\n};\r\n\r\n// the template `Comparator` here and below will be an instance of `device_row_comparator`,\r\n// such that the strongly type indices can be passed along directly\r\ntemplate <typename Comparator, weak_ordering... values>\r\nclass single_table_ordering {\r\n  operator() (size_type lhs_index, size_type rhs_index) {\r\n    return comparator(lhs_index_type{lhs_index}, lhs_index_type{rhs_index});\r\n};\r\n\r\ntemplate <typename Comparator, weak_ordering... values>\r\nclass two_table_ordering {\r\n// same as current version of strong_index_comparator with added overloads for {lhs, lhs} and {rhs, rhs}\r\n};\r\n\r\nclass self_comparator {\r\n  auto less() {\r\n    return less_comparator{single_table_ordering{device_row_comparator{...}}};\r\n  }\r\n};\r\n\r\nclass two_table_comparator {\r\n  auto less() {\r\n    return less_comparator{two_table_ordering{device_row_comparator{...}}};\r\n  }\r\n};\r\n```\r\nNote: In this example, [weak_ordering_comparator_impl](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L612-L626) will be removed and it's functionality will instead be baked into `single_table_ordering` and `two_table_ordering`. [less_comparator](https://github.com/rapidsai/cudf/blob/76ec53fae9dad71398c115bc405317a918036e52/cpp/include/cudf/table/experimental/row_operators.cuh#L634-L644) will then be reworked with CRTP such that:\r\n```\r\ntemplate <typename Comparator>\r\nclass less_comparator : Comparator<weak_ordering::LESS>\r\n```\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13371/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 1,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13371/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}