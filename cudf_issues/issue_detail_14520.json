{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/14520",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/14520/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/14520/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/14520/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/14520",
    "id": 2015189986,
    "node_id": "I_kwDOBWUGps54HVvi",
    "number": 14520,
    "title": "[BUG] IPython magic reset does not always sufficiently clear pandas objects to enable using cuDF via `cudf.pandas`",
    "user": {
        "login": "galipremsagar",
        "id": 11664259,
        "node_id": "MDQ6VXNlcjExNjY0MjU5",
        "avatar_url": "https://avatars.githubusercontent.com/u/11664259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/galipremsagar",
        "html_url": "https://github.com/galipremsagar",
        "followers_url": "https://api.github.com/users/galipremsagar/followers",
        "following_url": "https://api.github.com/users/galipremsagar/following{/other_user}",
        "gists_url": "https://api.github.com/users/galipremsagar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/galipremsagar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/galipremsagar/subscriptions",
        "organizations_url": "https://api.github.com/users/galipremsagar/orgs",
        "repos_url": "https://api.github.com/users/galipremsagar/repos",
        "events_url": "https://api.github.com/users/galipremsagar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/galipremsagar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        },
        {
            "id": 6815620706,
            "node_id": "LA_kwDOBWUGps8AAAABlj4eYg",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/cudf.pandas",
            "name": "cudf.pandas",
            "color": "984DFB",
            "default": false,
            "description": "Issues specific to cudf.pandas"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/36",
        "html_url": "https://github.com/rapidsai/cudf/milestone/36",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/36/labels",
        "id": 10812623,
        "node_id": "MI_kwDOBWUGps4ApPzP",
        "number": 36,
        "title": "cudf.pandas API coverage",
        "description": "",
        "creator": {
            "login": "galipremsagar",
            "id": 11664259,
            "node_id": "MDQ6VXNlcjExNjY0MjU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/11664259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/galipremsagar",
            "html_url": "https://github.com/galipremsagar",
            "followers_url": "https://api.github.com/users/galipremsagar/followers",
            "following_url": "https://api.github.com/users/galipremsagar/following{/other_user}",
            "gists_url": "https://api.github.com/users/galipremsagar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/galipremsagar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/galipremsagar/subscriptions",
            "organizations_url": "https://api.github.com/users/galipremsagar/orgs",
            "repos_url": "https://api.github.com/users/galipremsagar/repos",
            "events_url": "https://api.github.com/users/galipremsagar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/galipremsagar/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 19,
        "closed_issues": 27,
        "state": "open",
        "created_at": "2024-04-12T16:53:53Z",
        "updated_at": "2024-05-21T01:04:59Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 1,
    "created_at": "2023-11-28T19:49:04Z",
    "updated_at": "2024-05-16T05:09:17Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "When we've already imported cuDF, the Ipython magic `%reset -f --aggressive` is no longer enough to clear the environment/sys modules of all pandas objects so that we can `%load_ext cudf.pandas` and use cuDF under the hood,\r\n\r\n```python\r\n\r\nIn [1]: import cudf\r\n\r\nIn [2]: %reset -f --aggressive\r\nculling sys module...\r\n\r\nIn [3]: %load_ext cudf.pandas\r\n/nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/numba/__init__.py:34: UserWarning: The NumPy module was reloaded (imported a second time). This can in some cases result in small but subtle issues and is discouraged.\r\n  import numpy as np\r\n---------------------------------------------------------------------------\r\nArrowKeyError                             Traceback (most recent call last)\r\nCell In[3], line 1\r\n----> 1 get_ipython().run_line_magic('load_ext', 'cudf.pandas')\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/IPython/core/interactiveshell.py:2456, in InteractiveShell.run_line_magic(self, magic_name, line, _stack_depth)\r\n   2454     kwargs['local_ns'] = self.get_local_scope(stack_depth)\r\n   2455 with self.builtin_trap:\r\n-> 2456     result = fn(*args, **kwargs)\r\n   2458 # The code below prevents the output from being displayed\r\n   2459 # when using magics with decorator @output_can_be_silenced\r\n   2460 # when the last Python token in the expression is a ';'.\r\n   2461 if getattr(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, False):\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/IPython/core/magics/extension.py:33, in ExtensionMagics.load_ext(self, module_str)\r\n     31 if not module_str:\r\n     32     raise UsageError('Missing module name.')\r\n---> 33 res = self.shell.extension_manager.load_extension(module_str)\r\n     35 if res == 'already loaded':\r\n     36     print(\"The %s extension is already loaded. To reload it, use:\" % module_str)\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/IPython/core/extensions.py:76, in ExtensionManager.load_extension(self, module_str)\r\n     69 \"\"\"Load an IPython extension by its module name.\r\n     70 \r\n     71 Returns the string \"already loaded\" if the extension is already loaded,\r\n     72 \"no load function\" if the module doesn't have a load_ipython_extension\r\n     73 function, or None if it succeeded.\r\n     74 \"\"\"\r\n     75 try:\r\n---> 76     return self._load_extension(module_str)\r\n     77 except ModuleNotFoundError:\r\n     78     if module_str in BUILTINS_EXTS:\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/IPython/core/extensions.py:91, in ExtensionManager._load_extension(self, module_str)\r\n     89 with self.shell.builtin_trap:\r\n     90     if module_str not in sys.modules:\r\n---> 91         mod = import_module(module_str)\r\n     92     mod = sys.modules[module_str]\r\n     93     if self._call_load_ipython_extension(mod):\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/importlib/__init__.py:126, in import_module(name, package)\r\n    124             break\r\n    125         level += 1\r\n--> 126 return _bootstrap._gcd_import(name[level:], package, level)\r\n\r\nFile <frozen importlib._bootstrap>:1050, in _gcd_import(name, package, level)\r\n\r\nFile <frozen importlib._bootstrap>:1027, in _find_and_load(name, import_)\r\n\r\nFile <frozen importlib._bootstrap>:992, in _find_and_load_unlocked(name, import_)\r\n\r\nFile <frozen importlib._bootstrap>:241, in _call_with_frames_removed(f, *args, **kwds)\r\n\r\nFile <frozen importlib._bootstrap>:1050, in _gcd_import(name, package, level)\r\n\r\nFile <frozen importlib._bootstrap>:1027, in _find_and_load(name, import_)\r\n\r\nFile <frozen importlib._bootstrap>:1006, in _find_and_load_unlocked(name, import_)\r\n\r\nFile <frozen importlib._bootstrap>:688, in _load_unlocked(spec)\r\n\r\nFile <frozen importlib._bootstrap_external>:883, in exec_module(self, module)\r\n\r\nFile <frozen importlib._bootstrap>:241, in _call_with_frames_removed(f, *args, **kwds)\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/cudf/__init__.py:19\r\n     16 from rmm.allocators.cupy import rmm_cupy_allocator\r\n     17 from rmm.allocators.numba import RMMNumbaManager\r\n---> 19 from cudf import api, core, datasets, testing\r\n     20 from cudf._version import __git_commit__, __version__\r\n     21 from cudf.api.extensions import (\r\n     22     register_dataframe_accessor,\r\n     23     register_index_accessor,\r\n     24     register_series_accessor,\r\n     25 )\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/cudf/api/__init__.py:3\r\n      1 # Copyright (c) 2021, NVIDIA CORPORATION.\r\n----> 3 from cudf.api import extensions, types\r\n      5 __all__ = [\"extensions\", \"types\"]\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/cudf/api/types.py:18\r\n     15 from pandas.api import types as pd_types\r\n     17 import cudf\r\n---> 18 from cudf.core.dtypes import (  # noqa: F401\r\n     19     _BaseDtype,\r\n     20     dtype,\r\n     21     is_categorical_dtype,\r\n     22     is_decimal32_dtype,\r\n     23     is_decimal64_dtype,\r\n     24     is_decimal128_dtype,\r\n     25     is_decimal_dtype,\r\n     26     is_interval_dtype,\r\n     27     is_list_dtype,\r\n     28     is_struct_dtype,\r\n     29 )\r\n     32 def is_numeric_dtype(obj):\r\n     33     \"\"\"Check whether the provided array or dtype is of a numeric dtype.\r\n     34 \r\n     35     Parameters\r\n   (...)\r\n     43         Whether or not the array or dtype is of a numeric dtype.\r\n     44     \"\"\"\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/cudf/core/dtypes.py:28\r\n     25 from cudf.utils.docutils import doc_apply\r\n     27 if PANDAS_GE_150:\r\n---> 28     from pandas.core.arrays.arrow.extension_types import ArrowIntervalType\r\n     29 else:\r\n     30     from pandas.core.arrays._arrow_utils import ArrowIntervalType\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/pandas/core/arrays/arrow/extension_types.py:49\r\n     47 # register the type with a dummy instance\r\n     48 _period_type = ArrowPeriodType(\"D\")\r\n---> 49 pyarrow.register_extension_type(_period_type)\r\n     52 class ArrowIntervalType(pyarrow.ExtensionType):\r\n     53     def __init__(self, subtype, closed: IntervalClosedType) -> None:\r\n     54         # attributes need to be set first before calling\r\n     55         # super init (as that calls serialize)\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/pyarrow/types.pxi:1836, in pyarrow.lib.register_extension_type()\r\n\r\nFile /nvme/0/pgali/envs/cudfdev/lib/python3.10/site-packages/pyarrow/error.pxi:91, in pyarrow.lib.check_status()\r\n\r\nArrowKeyError: A type extension with name pandas.period already defined\r\n```\r\n\r\nInstead, we need to explicitly restart the kernel to use `cudf.pandas` , which we can do via in IPython via `get_ipython().kernel.do_shutdown(restart=True)`.\r\n\r\nThis isn't a big deal, as we shouldn't rely on this kind of `reset` based behavior anyway. But, I believe this is a change in behavior and we may want to look into it down the road.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/14520/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/14520/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}