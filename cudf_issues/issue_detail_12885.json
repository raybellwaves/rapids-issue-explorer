{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12885",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12885/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12885/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12885/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12885",
    "id": 1611994225,
    "node_id": "I_kwDOBWUGps5gFRRx",
    "number": 12885,
    "title": "[FEA] Throw more specific exceptions in libcudf",
    "user": {
        "login": "vyasr",
        "id": 1538165,
        "node_id": "MDQ6VXNlcjE1MzgxNjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1538165?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vyasr",
        "html_url": "https://github.com/vyasr",
        "followers_url": "https://api.github.com/users/vyasr/followers",
        "following_url": "https://api.github.com/users/vyasr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vyasr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vyasr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vyasr/subscriptions",
        "organizations_url": "https://api.github.com/users/vyasr/orgs",
        "repos_url": "https://api.github.com/users/vyasr/repos",
        "events_url": "https://api.github.com/users/vyasr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vyasr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987503,
            "node_id": "MDU6TGFiZWwxMDEzOTg3NTAz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/2%20-%20In%20Progress",
            "name": "2 - In Progress",
            "color": "fef2c0",
            "default": false,
            "description": "Currently a work in progress"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-03-06T18:26:52Z",
    "updated_at": "2024-03-15T16:41:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nThe discussion in #10200 demonstrated a general desire to have libcudf provide more useful diagnostics of failure modes to users by throwing more informative exceptions for different types of failures instead of always throwing `cudf::logic_error`. #12426 implemented the necessary scaffolding in cuDF Python and the libcudf JNI to allow libcudf to use any C++ exception -- including custom exceptions defined within libcudf -- and have these mapped to appropriate Java or Python exceptions. #12426 also demonstrated how such a custom exception could be defined, introducing `cudf::data_type_error`. The purpose of this issue is to serve as tracking for the task of systematically converting libcudf to throw better exceptions.\r\n\r\n**Describe the solution you'd like**\r\nI propose that we tackle this task on a file-by-file basis. This issue can serve as a tracker for which files have been updated as well as the definitive source of what exceptions libcudf throws under what circumstances. For each file, a developer would go through each CUDF_EXPECTS/CUDF_FAIL call and see if there is a suitable alternative to `cudf::logic_error`. If none currently exists, developers should propose a new exception and explain situations in which it should be used in a new issue. If the proposal is accepted, the table of exceptions below should be updated.\r\n\r\nTable of exceptions:\r\n\r\n| Exception        | Description           | Issue    | Status    |\r\n| ------------- |:-------------:|:-------------:|:-------------:|\r\n| std::invalid_argument      | A function parameter is provided a value that is invalid in the given context. | https://github.com/rapidsai/cudf/issues/10632 | \u2705 by https://github.com/rapidsai/cudf/pull/12426 |\r\n| cudf::data_type_error      | A function is called with a column or scalar with a `data_type` for which the function is invalid. A common example is in the default SFINAE overloads of type-dispatched functions. | https://github.com/rapidsai/cudf/issues/10632 | \u2705 by https://github.com/rapidsai/cudf/pull/12426 |\r\n| std::overflow_error | The output column corresponding to the input has size exceeds cudf limit. | https://github.com/rapidsai/cudf/issues/12925 | #13323 |\r\n| std::out_of_range | An index argument or range includes indices that are out of bounds for the column being selected | #15315 | Some work in #15319 |\r\n\r\nList of files to be updated (please add new lines to the task list when a file is updated):",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12885/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12885/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}