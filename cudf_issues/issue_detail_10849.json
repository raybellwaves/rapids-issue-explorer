{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/10849",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/10849/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/10849/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/10849/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/10849",
    "id": 1235278577,
    "node_id": "I_kwDOBWUGps5JoNrx",
    "number": 10849,
    "title": "[ENH] Support more input data layouts in `cudf.from_dlpack`",
    "user": {
        "login": "wence-",
        "id": 1126981,
        "node_id": "MDQ6VXNlcjExMjY5ODE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/wence-",
        "html_url": "https://github.com/wence-",
        "followers_url": "https://api.github.com/users/wence-/followers",
        "following_url": "https://api.github.com/users/wence-/following{/other_user}",
        "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
        "organizations_url": "https://api.github.com/users/wence-/orgs",
        "repos_url": "https://api.github.com/users/wence-/repos",
        "events_url": "https://api.github.com/users/wence-/events{/privacy}",
        "received_events_url": "https://api.github.com/users/wence-/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-05-13T13:56:20Z",
    "updated_at": "2024-02-23T18:42:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Related to #10754, the current implementation of `from_dlpack` requires unit-stride fortran order, and produces appropriate error messages in the unsupported cases\r\n\r\nConsider\r\n\r\n```python\r\nimport cudf\r\nimport cupy\r\na = cupy.arange(10)\r\nb = a[::2]\r\nc = cudf.from_dlpack(b.__dlpack__())\r\n=> RuntimeError: from_dlpack of 1D DLTensor only for unit-stride data\r\nb = cupy.broadcast_to(a[1], (10,)) # b is stride-0\r\n=> RuntimeError: from_dlpack of 1D DLTensor only for unit-stride data\r\n\r\na = cupy.arange(12).reshape(3, 4).copy(order=\"F\")\r\nb = a[::2, :]\r\nc = cudf.from_dlpack(b.__dlpack__())\r\n=> RuntimeError: from_dlpack of 2D DLTensor only for column-major unit-stride data\r\n```\r\n\r\nSince `from_dlpack` copies in all cases right now, I think that things can be handled like so:\r\n\r\n1. Non-fortran-order: useful error\r\n2. unit-stride: current `cudaMemcpyAsync` one column at a time\r\n3. fastest-dimension is stride-0 (broadcasted arrays): `std::fill` for the 1D case, just getting the strides right for the 2D case\r\n4. fastest-dimension is stride-N (sliced arrays): `cudaMemcpy2DAsync` with appropriate choices of pitch and stride for the source array\r\n\r\nHowever, I'm not really sure of the performance implications of these choices, and if the current approach of producing an error and requiring that the caller copy to contiguous fortran-order first before calling `from_dlpack` is not better. For example, for case 4 is it faster to copy to a contiguous buffer first rather than copying column by column?",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/10849/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/10849/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}