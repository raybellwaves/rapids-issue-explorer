{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/13509",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/13509/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/13509/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/13509/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/13509",
    "id": 1742023363,
    "node_id": "I_kwDOBWUGps5n1SrD",
    "number": 13509,
    "title": "[FEA] Improve cudf::gather scalability as number of columns increases",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1013987352,
            "node_id": "MDU6TGFiZWwxMDEzOTg3MzUy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/0%20-%20Backlog",
            "name": "0 - Backlog",
            "color": "d4c5f9",
            "default": false,
            "description": "In queue waiting for assignment"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1322252617,
            "node_id": "MDU6TGFiZWwxMzIyMjUyNjE3",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Performance",
            "name": "Performance",
            "color": "C2E0C6",
            "default": false,
            "description": "Performance related issue"
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/20",
        "html_url": "https://github.com/rapidsai/cudf/milestone/20",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/20/labels",
        "id": 8568142,
        "node_id": "MI_kwDOBWUGps4Agr1O",
        "number": 20,
        "title": "Stabilizing large workflows (OOM, spilling, partitioning)",
        "description": "",
        "creator": {
            "login": "GregoryKimball",
            "id": 12725111,
            "node_id": "MDQ6VXNlcjEyNzI1MTEx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12725111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GregoryKimball",
            "html_url": "https://github.com/GregoryKimball",
            "followers_url": "https://api.github.com/users/GregoryKimball/followers",
            "following_url": "https://api.github.com/users/GregoryKimball/following{/other_user}",
            "gists_url": "https://api.github.com/users/GregoryKimball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GregoryKimball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GregoryKimball/subscriptions",
            "organizations_url": "https://api.github.com/users/GregoryKimball/orgs",
            "repos_url": "https://api.github.com/users/GregoryKimball/repos",
            "events_url": "https://api.github.com/users/GregoryKimball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GregoryKimball/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 16,
        "closed_issues": 3,
        "state": "open",
        "created_at": "2022-10-21T19:29:07Z",
        "updated_at": "2024-05-22T23:20:04Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 3,
    "created_at": "2023-06-05T15:24:45Z",
    "updated_at": "2023-06-29T21:52:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "As the number of columns increases for `cudf::gather` with the same gather map, we see the number of kernels called increase proportionally and the runtime increases linearly. We are wondering if there are better ways to group or \"batch\" these calls so we perform less kernel invocations that can do more work all at once, in hopes of amortizing some of the cost with many columns or deeply nested schemas.\r\n\r\nA very simple example is below. This creates a column of 10 `int32_t` rows and adds it to a struct N times (where `N` is between 2 and 1024):\r\n\r\n```\r\n#include <cudf/table/table.hpp>\r\n#include <cudf_test/column_wrapper.hpp>\r\n\r\n#include <rmm/mr/device/cuda_memory_resource.hpp>\r\n#include <rmm/mr/device/device_memory_resource.hpp>\r\n#include <rmm/mr/device/pool_memory_resource.hpp>\r\n\r\n#include <memory>\r\n#include <string>\r\n#include <vector>\r\n#include <nvtx3/nvToolsExt.h>\r\n\r\nint main(int argc, char** argv)\r\n{\r\n  rmm::mr::cuda_memory_resource cuda_mr{};\r\n  rmm::mr::pool_memory_resource mr{&cuda_mr};\r\n  rmm::mr::set_current_device_resource(&mr);\r\n  using col_t = cudf::test::fixed_width_column_wrapper<int32_t>;\r\n\r\n  auto const values = std::vector<int32_t>{1,2,3,4,5,6,7,8,9,10};\r\n  for (int num_cols = 2; num_cols <= 1024; num_cols *= 2) {\r\n    std::vector<std::unique_ptr<cudf::column>> members(num_cols);\r\n    for (auto i = 0; i < num_cols; ++i) {\r\n      auto wrapper = col_t(values.begin(), values.end());\r\n      members[i] = wrapper.release();\r\n    }\r\n    auto struct_col = cudf::test::structs_column_wrapper(std::move(members));\r\n    auto gather_map = std::vector<cudf::offset_type>{1}; // gather 1 row\r\n    std::stringstream msg;\r\n    nvtxRangePush(msg.str().c_str()); \r\n    auto result = cudf::gather(\r\n      cudf::table_view{{struct_col}}, \r\n      cudf::test::fixed_width_column_wrapper<int32_t>(gather_map.begin(), gather_map.end()),\r\n      cudf::out_of_bounds_policy::NULLIFY);\r\n    nvtxRangePop();\r\n    std::cout << \"Result: rows: \" << result->num_rows() << \" cols: \" << result->num_columns() << std::endl;\r\n\r\n  }\r\n  return 0;\r\n}\r\n```\r\nAs the column count increases by 2x, the gather kernel takes 2x longer:\r\n\r\n![Screenshot from 2023-06-05 10-18-52](https://github.com/rapidsai/cudf/assets/1901059/500ac308-9ab3-494c-97fa-1ffec7ac875a)\r\n\r\nA similar argument can be made for columns that have nested things like arrays of structs (each with array members). The number of calls to underlying cub calls can increase drastically.\r\n\r\nI am filing this issue to solicit comments/patches to see how we could improve this behavior.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/13509/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/13509/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}