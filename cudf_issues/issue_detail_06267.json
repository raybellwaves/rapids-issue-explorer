{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/6267",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/6267/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/6267/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/6267/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/6267",
    "id": 704645517,
    "node_id": "MDU6SXNzdWU3MDQ2NDU1MTc=",
    "number": 6267,
    "title": "[BUG] Rolling window's apply function throws `TypingError`",
    "user": {
        "login": "Salonijain27",
        "id": 25236093,
        "node_id": "MDQ6VXNlcjI1MjM2MDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/25236093?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Salonijain27",
        "html_url": "https://github.com/Salonijain27",
        "followers_url": "https://api.github.com/users/Salonijain27/followers",
        "following_url": "https://api.github.com/users/Salonijain27/following{/other_user}",
        "gists_url": "https://api.github.com/users/Salonijain27/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Salonijain27/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Salonijain27/subscriptions",
        "organizations_url": "https://api.github.com/users/Salonijain27/orgs",
        "repos_url": "https://api.github.com/users/Salonijain27/repos",
        "events_url": "https://api.github.com/users/Salonijain27/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Salonijain27/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-09-18T20:42:53Z",
    "updated_at": "2024-02-23T18:42:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "On running the apply function for `rolling` and trying to analyze array or any other variable type other than a single value I get the following error:\r\n`TypingError: Failed in nopython mode pipeline (step: nopython frontend)`\r\n\r\nCode to reproduce the error:\r\n```\r\nimport cudf\r\nimport numpy as np\r\nimport math\r\ndef groll_sort(x):\r\n    t = x.median() #np.median(x.values)\r\n    return t\r\ndf = cudf.DataFrame()\r\ndf['a'] = (0.25, 0.3, 0.5,1,3,1,-1,3,-2)\r\nrolling = df.rolling(window=3).apply(groll_sort)\r\nprint(rolling)\r\n```\r\nNote: I also tried using `t = np.median(x.values)` in the function\r\nOn running the above code i get the following error:\r\n```\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\n<ipython-input-6-99e3758f2d02> in <module>\r\n      7 df = cudf.DataFrame()\r\n      8 df['a'] = (0.25, 0.3, 0.5,1,3,1,-1,3,-2)\r\n----> 9 rolling = df.rolling(window=3).apply(groll_sort)\r\n     10 print(rolling)\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/cudf/core/window/rolling.py in apply(self, func, *args, **kwargs)\r\n    276                 \"Handling UDF with null values is not yet supported\"\r\n    277             )\r\n--> 278         return self._apply_agg(func)\r\n    279\r\n    280     def _normalize(self):\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/cudf/core/window/rolling.py in _apply_agg(self, agg_name)\r\n    236             return self._apply_agg_series(self.obj, agg_name)\r\n    237         else:\r\n--> 238             return self._apply_agg_dataframe(self.obj, agg_name)\r\n    239\r\n    240     def sum(self):\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/cudf/core/window/rolling.py in _apply_agg_dataframe(self, df, agg_name)\r\n    225         result_df = cudf.DataFrame({})\r\n    226         for i, col_name in enumerate(df.columns):\r\n--> 227             result_col = self._apply_agg_series(df[col_name], agg_name)\r\n    228             result_df.insert(i, col_name, result_col)\r\n    229         result_df.index = df.index\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/cudf/core/window/rolling.py in _apply_agg_series(self, sr, agg_name)\r\n    201     def _apply_agg_series(self, sr, agg_name):\r\n    202         if isinstance(self.window, int):\r\n--> 203             result_col = libcudf.rolling.rolling(\r\n    204                 sr._column,\r\n    205                 None,\r\n\r\ncudf/_lib/rolling.pyx in cudf._lib.rolling.rolling()\r\n\r\ncudf/_lib/aggregation.pyx in cudf._lib.aggregation.make_aggregation()\r\n\r\ncudf/_lib/aggregation.pyx in cudf._lib.aggregation._AggregationFactory.from_udf()\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/cudf/utils/cudautils.py in compile_udf(udf, type_signature)\r\n    287     \"\"\"\r\n    288     decorated_udf = cuda.jit(udf, device=True)\r\n--> 289     compiled = decorated_udf.compile(type_signature)\r\n    290     ptx_code = decorated_udf.inspect_ptx(type_signature).decode(\"utf-8\")\r\n    291     output_type = numpy_support.as_dtype(compiled.signature.return_type)\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/cuda/compiler.py in compile(self, args)\r\n    162         \"\"\"\r\n    163         if args not in self._compileinfos:\r\n--> 164             cres = compile_cuda(self.py_func, None, args, debug=self.debug,\r\n    165                                 inline=self.inline)\r\n    166             first_definition = not self._compileinfos\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_lock.py in _acquire_compile_lock(*args, **kwargs)\r\n     30         def _acquire_compile_lock(*args, **kwargs):\r\n     31             with self:\r\n---> 32                 return func(*args, **kwargs)\r\n     33         return _acquire_compile_lock\r\n     34\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/cuda/compiler.py in compile_cuda(pyfunc, return_type, args, debug, inline)\r\n     36         flags.set('forceinline')\r\n     37     # Run compilation pipeline\r\n---> 38     cres = compiler.compile_extra(typingctx=typingctx,\r\n     39                                   targetctx=targetctx,\r\n     40                                   func=pyfunc,\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler.py in compile_extra(typingctx, targetctx, func, args, return_type, flags, locals, library, pipeline_class)\r\n    601     pipeline = pipeline_class(typingctx, targetctx, library,\r\n    602                               args, return_type, flags, locals)\r\n--> 603     return pipeline.compile_extra(func)\r\n    604\r\n    605\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler.py in compile_extra(self, func)\r\n    337         self.state.lifted = ()\r\n    338         self.state.lifted_from = None\r\n--> 339         return self._compile_bytecode()\r\n    340\r\n    341     def compile_ir(self, func_ir, lifted=(), lifted_from=None):\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler.py in _compile_bytecode(self)\r\n    399         \"\"\"\r\n    400         assert self.state.func_ir is None\r\n--> 401         return self._compile_core()\r\n    402\r\n    403     def _compile_ir(self):\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler.py in _compile_core(self)\r\n    379                 self.state.status.fail_reason = e\r\n    380                 if is_final_pipeline:\r\n--> 381                     raise e\r\n    382         else:\r\n    383             raise CompilerError(\"All available pipelines exhausted\")\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler.py in _compile_core(self)\r\n    370             res = None\r\n    371             try:\r\n--> 372                 pm.run(self.state)\r\n    373                 if self.state.cr is not None:\r\n    374                     break\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_machinery.py in run(self, state)\r\n    339                     (self.pipeline_name, pass_desc)\r\n    340                 patched_exception = self._patch_error(msg, e)\r\n--> 341                 raise patched_exception\r\n    342\r\n    343     def dependency_analysis(self):\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_machinery.py in run(self, state)\r\n    330                 pass_inst = _pass_registry.get(pss).pass_inst\r\n    331                 if isinstance(pass_inst, CompilerPass):\r\n--> 332                     self._runPass(idx, pass_inst, state)\r\n    333                 else:\r\n    334                     raise BaseException(\"Legacy pass in use\")\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_lock.py in _acquire_compile_lock(*args, **kwargs)\r\n     30         def _acquire_compile_lock(*args, **kwargs):\r\n     31             with self:\r\n---> 32                 return func(*args, **kwargs)\r\n     33         return _acquire_compile_lock\r\n     34\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_machinery.py in _runPass(self, index, pss, internal_state)\r\n    289             mutated |= check(pss.run_initialization, internal_state)\r\n    290         with SimpleTimer() as pass_time:\r\n--> 291             mutated |= check(pss.run_pass, internal_state)\r\n    292         with SimpleTimer() as finalize_time:\r\n    293             mutated |= check(pss.run_finalizer, internal_state)\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/compiler_machinery.py in check(func, compiler_state)\r\n    262\r\n    263         def check(func, compiler_state):\r\n--> 264             mangled = func(compiler_state)\r\n    265             if mangled not in (True, False):\r\n    266                 msg = (\"CompilerPass implementations should return True/False. \"\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/typed_passes.py in run_pass(self, state)\r\n     90                               % (state.func_id.func_name,)):\r\n     91             # Type inference\r\n---> 92             typemap, return_type, calltypes = type_inference_stage(\r\n     93                 state.typingctx,\r\n     94                 state.func_ir,\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/typed_passes.py in type_inference_stage(typingctx, interp, args, return_type, locals, raise_errors)\r\n     68\r\n     69         infer.build_constraint()\r\n---> 70         infer.propagate(raise_errors=raise_errors)\r\n     71         typemap, restype, calltypes = infer.unify(raise_errors=raise_errors)\r\n     72\r\n\r\n~/miniconda3/envs/branch15/lib/python3.8/site-packages/numba/core/typeinfer.py in propagate(self, raise_errors)\r\n    992                                   if isinstance(e, ForceLiteralArg)]\r\n    993                 if not force_lit_args:\r\n--> 994                     raise errors[0]\r\n    995                 else:\r\n    996                     raise reduce(operator.or_, force_lit_args)\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nUnknown attribute 'median' of type array(float64, 1d, A)\r\n\r\nFile \"<ipython-input-6-99e3758f2d02>\", line 5:\r\ndef groll_sort(x):\r\n    t = x.median() #np.median(x.values)\r\n    ^\r\n\r\nDuring: typing of get attribute at <ipython-input-6-99e3758f2d02> (5)\r\n\r\nFile \"<ipython-input-6-99e3758f2d02>\", line 5:\r\ndef groll_sort(x):\r\n    t = x.median() #np.median(x.values)\r\n```\r\n\r\nThe same code runs on pandas and gives the following output:\r\nI/P:\r\n```\r\nimport pandas\r\nimport numpy as np\r\ndef groll_sort(x):\r\n    t = x.median()\r\n    return t\r\ndf = pandas.DataFrame()\r\ndf['a'] = (0.25, 0.3, 0.5,1,3,1,-1,3,-2)\r\nrolling = df.rolling(window=3).apply(groll_sort)\r\nprint(rolling)\r\n```\r\nO/P:\r\n```\r\n     a\r\n0  NaN\r\n1  NaN\r\n2  0.3\r\n3  0.5\r\n4  1.0\r\n5  1.0\r\n6  1.0\r\n7  1.0\r\n8 -1.0\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/6267/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/6267/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}