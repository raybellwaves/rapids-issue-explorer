{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/6187",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/6187/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/6187/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/6187/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/6187",
    "id": 697047357,
    "node_id": "MDU6SXNzdWU2OTcwNDczNTc=",
    "number": 6187,
    "title": "[FEA] cuio: allow datasource and data_sink to decide how device/host read/write/copies are handled.",
    "user": {
        "login": "cwharris",
        "id": 1445368,
        "node_id": "MDQ6VXNlcjE0NDUzNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1445368?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cwharris",
        "html_url": "https://github.com/cwharris",
        "followers_url": "https://api.github.com/users/cwharris/followers",
        "following_url": "https://api.github.com/users/cwharris/following{/other_user}",
        "gists_url": "https://api.github.com/users/cwharris/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cwharris/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cwharris/subscriptions",
        "organizations_url": "https://api.github.com/users/cwharris/orgs",
        "repos_url": "https://api.github.com/users/cwharris/repos",
        "events_url": "https://api.github.com/users/cwharris/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cwharris/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139740666,
            "node_id": "MDU6TGFiZWwxMTM5NzQwNjY2",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/libcudf",
            "name": "libcudf",
            "color": "c5def5",
            "default": false,
            "description": "Affects libcudf (C++/CUDA) code."
        },
        {
            "id": 1185244142,
            "node_id": "MDU6TGFiZWwxMTg1MjQ0MTQy",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/cuIO",
            "name": "cuIO",
            "color": "fef2c0",
            "default": false,
            "description": "cuIO issue"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-09-09T18:28:07Z",
    "updated_at": "2022-11-26T17:41:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Reader and writer implementations have multiple paths for reading and writing, depending whether data is read-from/written-to the host or the device. This logic could be delegated to `datasource` and `data_sink`, potentially sharing the functionality between all `datasource`s and `data_sink`s.\r\n\r\nThis would eliminate the need for `supports_device_write` and `supports_device_read`, which could also reduce the surface area of testing.\r\n\r\nnote: `supports_device_read` is currently unused.\r\n\r\nExamples:\r\nhttps://github.com/rapidsai/cudf/blob/f4735c7f658da4a157dc09391da899b072878305/cpp/src/io/csv/writer_impl.cu#L412-L442\r\nhttps://github.com/rapidsai/cudf/blob/f4735c7f658da4a157dc09391da899b072878305/cpp/src/io/parquet/writer_impl.cu#L882-L913\r\n\r\nLooks like ORC doesn't have this logic at all, which might be a bug?\r\nhttps://github.com/rapidsai/cudf/blob/f4735c7f658da4a157dc09391da899b072878305/cpp/src/io/orc/writer_impl.cu#L1246\r\n\r\nHypothetical Source/Sink APIs\r\n-\r\n`data_kind` is used to describe the caller-owned buffer.\r\n```C++\r\n// note: data_kind is not used to determine the sink/source buffer's kind.\r\n//       the sink/source buffer kind is an implementation detail of the given sink/source.\r\nenum class data_kind {\r\n  host,  // used when the caller is writing data from host, or reading data to host\r\n  device // used when the caller is writing data from device, or reading data to device\r\n};\r\n```\r\nAn API such as this delegates the read/write logic to the source/sink, but gives enough information for the source/sink to determine how data should be copied, and whether or not a sync is necessary to perform the copies. For instance, if the specific source implementation is reading data on device, and the `read(...)` call is made with `data_kind::device`, then the source has enough information to execute a device-to-device copy, without or without syncing the stream (perhaps an API an optional method should be added to ensure sync has taken place).\r\n```C++\r\nclass base_source_context {\r\n  base_source_context(cudaStream_t stream) : stream(stream) {}\r\n\r\n  virtual size_t read(uint8_t const* data, size_t size, data_kind kind) = 0;\r\n\r\n private:\r\n  cudaStream_t stream;\r\n};\r\n\r\nclass base_source {\r\n public:\r\n  virtual unique_ptr<base_source_context> begin_read(cudaStream_t stream) = 0;\r\n};\r\n```\r\n```C++\r\nclass base_sink_context {\r\n public:\r\n  base_sink_context(cudaStream_t stream) : stream(stream) {}\r\n\r\n  virtual void write(uint8_t const* data, size_t size, data_kind kind) = 0;\r\n\r\n private:\r\n  cudaStream_t stream;\r\n};\r\n\r\nclass base_sink {\r\n public:\r\n  virtual unique_ptr<base_sink_context> begin_write(cudaStream_t stream) = 0;\r\n};\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/6187/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/6187/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}