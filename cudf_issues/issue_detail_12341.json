{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/12341",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/12341/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/12341/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/12341/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/12341",
    "id": 1484894740,
    "node_id": "I_kwDOBWUGps5YgbIU",
    "number": 12341,
    "title": "[BUG][JNI] Research reasons for the JNI pinned pool becoming very slow",
    "user": {
        "login": "abellina",
        "id": 1901059,
        "node_id": "MDQ6VXNlcjE5MDEwNTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1901059?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/abellina",
        "html_url": "https://github.com/abellina",
        "followers_url": "https://api.github.com/users/abellina/followers",
        "following_url": "https://api.github.com/users/abellina/following{/other_user}",
        "gists_url": "https://api.github.com/users/abellina/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/abellina/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abellina/subscriptions",
        "organizations_url": "https://api.github.com/users/abellina/orgs",
        "repos_url": "https://api.github.com/users/abellina/repos",
        "events_url": "https://api.github.com/users/abellina/events{/privacy}",
        "received_events_url": "https://api.github.com/users/abellina/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626559,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NTk=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/bug",
            "name": "bug",
            "color": "d73a4a",
            "default": true,
            "description": "Something isn't working"
        },
        {
            "id": 1405145623,
            "node_id": "MDU6TGFiZWwxNDA1MTQ1NjIz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Java",
            "name": "Java",
            "color": "006b75",
            "default": false,
            "description": "Affects Java cuDF API."
        },
        {
            "id": 1405146975,
            "node_id": "MDU6TGFiZWwxNDA1MTQ2OTc1",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Spark",
            "name": "Spark",
            "color": "7400ff",
            "default": false,
            "description": "Functionality that helps Spark RAPIDS"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-12-08T15:36:30Z",
    "updated_at": "2024-02-23T17:57:31Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I have seen in jobs that have a lot of host memory usage, cases where executors looked to be hanging while trying to satisfy an allocation from the pinned pool in the java side of things:\r\n\r\n```\r\nThread 25389: (state = IN_JAVA)\r\n - java.util.TreeMap.successor(java.util.TreeMap$Entry) @bci=30, line=2154 (Compiled frame; information may be imprecise)\r\n - java.util.TreeMap$KeySpliterator.tryAdvance(java.util.function.Consumer) @bci=45, line=2769 (Compiled frame)\r\n - java.util.stream.ReferencePipeline.forEachWithCancel(java.util.Spliterator, java.util.stream.Sink) @bci=11, line=126 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.copyIntoWithCancel(java.util.stream.Sink, java.util.Spliterator) @bci=32, line=499 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.copyInto(java.util.stream.Sink, java.util.Spliterator) @bci=49, line=486 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.wrapAndCopyInto(java.util.stream.Sink, java.util.Spliterator) @bci=13, line=472 (Compiled frame)\r\n - java.util.stream.FindOps$FindOp.evaluateSequential(java.util.stream.PipelineHelper, java.util.Spliterator) @bci=14, line=152 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.evaluate(java.util.stream.TerminalOp) @bci=88, line=234 (Compiled frame)\r\n - java.util.stream.ReferencePipeline.findFirst() @bci=5, line=531 (Compiled frame)\r\n - ai.rapids.cudf.PinnedMemoryPool.tryAllocateInternal(long) @bci=60, line=283 (Compiled frame)\r\n - ai.rapids.cudf.PinnedMemoryPool.tryAllocate(long) @bci=12, line=224 (Compiled frame)\r\n```\r\n\r\n```\r\nThread 22565: (state = IN_JAVA)\r\n - java.util.stream.ReferencePipeline.forEachWithCancel(java.util.Spliterator, java.util.stream.Sink) @bci=16, line=126 (Compiled frame; information may be imprecise)\r\n - java.util.stream.AbstractPipeline.copyIntoWithCancel(java.util.stream.Sink, java.util.Spliterator) @bci=32, line=499 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.copyInto(java.util.stream.Sink, java.util.Spliterator) @bci=49, line=486 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.wrapAndCopyInto(java.util.stream.Sink, java.util.Spliterator) @bci=13, line=472 (Compiled frame)\r\n - java.util.stream.FindOps$FindOp.evaluateSequential(java.util.stream.PipelineHelper, java.util.Spliterator) @bci=14, line=152 (Compiled frame)\r\n - java.util.stream.AbstractPipeline.evaluate(java.util.stream.TerminalOp) @bci=88, line=234 (Compiled frame)\r\n - java.util.stream.ReferencePipeline.findFirst() @bci=5, line=531 (Compiled frame)\r\n - ai.rapids.cudf.PinnedMemoryPool.tryAllocateInternal(long) @bci=60, line=283 (Compiled frame)\r\n - ai.rapids.cudf.PinnedMemoryPool.tryAllocate(long) @bci=12, line=224 (Compiled frame)\r\n\r\n```\r\n\r\nI don't have a repro case yet and that's part of this task. I have seen this happen after the spark-plugin has spilled a lot of memory to the host, and it seems we should have exhausted this pool. Theories could go from this pool structure being somehow corrupted, or there being an insane number of blocks in this pool that it is just taking a lot of time for it to find free blocks.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/12341/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/12341/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}