{
    "url": "https://api.github.com/repos/rapidsai/cudf/issues/8743",
    "repository_url": "https://api.github.com/repos/rapidsai/cudf",
    "labels_url": "https://api.github.com/repos/rapidsai/cudf/issues/8743/labels{/name}",
    "comments_url": "https://api.github.com/repos/rapidsai/cudf/issues/8743/comments",
    "events_url": "https://api.github.com/repos/rapidsai/cudf/issues/8743/events",
    "html_url": "https://github.com/rapidsai/cudf/issues/8743",
    "id": 944817017,
    "node_id": "MDU6SXNzdWU5NDQ4MTcwMTc=",
    "number": 8743,
    "title": "[FEA] Adding support for categorical column indexes",
    "user": {
        "login": "charlesbluca",
        "id": 20627856,
        "node_id": "MDQ6VXNlcjIwNjI3ODU2",
        "avatar_url": "https://avatars.githubusercontent.com/u/20627856?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/charlesbluca",
        "html_url": "https://github.com/charlesbluca",
        "followers_url": "https://api.github.com/users/charlesbluca/followers",
        "following_url": "https://api.github.com/users/charlesbluca/following{/other_user}",
        "gists_url": "https://api.github.com/users/charlesbluca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/charlesbluca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/charlesbluca/subscriptions",
        "organizations_url": "https://api.github.com/users/charlesbluca/orgs",
        "repos_url": "https://api.github.com/users/charlesbluca/repos",
        "events_url": "https://api.github.com/users/charlesbluca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/charlesbluca/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 599626561,
            "node_id": "MDU6TGFiZWw1OTk2MjY1NjE=",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/feature%20request",
            "name": "feature request",
            "color": "a2eeef",
            "default": false,
            "description": "New feature or request"
        },
        {
            "id": 1139741213,
            "node_id": "MDU6TGFiZWwxMTM5NzQxMjEz",
            "url": "https://api.github.com/repos/rapidsai/cudf/labels/Python",
            "name": "Python",
            "color": "1d76db",
            "default": false,
            "description": "Affects Python cuDF API."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
        "url": "https://api.github.com/repos/rapidsai/cudf/milestones/5",
        "html_url": "https://github.com/rapidsai/cudf/milestone/5",
        "labels_url": "https://api.github.com/repos/rapidsai/cudf/milestones/5/labels",
        "id": 6955120,
        "node_id": "MI_kwDOBWUGps4AaiBw",
        "number": 5,
        "title": "Pandas API Alignment and Coverage",
        "description": "",
        "creator": {
            "login": "beckernick",
            "id": 8457388,
            "node_id": "MDQ6VXNlcjg0NTczODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8457388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/beckernick",
            "html_url": "https://github.com/beckernick",
            "followers_url": "https://api.github.com/users/beckernick/followers",
            "following_url": "https://api.github.com/users/beckernick/following{/other_user}",
            "gists_url": "https://api.github.com/users/beckernick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/beckernick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/beckernick/subscriptions",
            "organizations_url": "https://api.github.com/users/beckernick/orgs",
            "repos_url": "https://api.github.com/users/beckernick/repos",
            "events_url": "https://api.github.com/users/beckernick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/beckernick/received_events",
            "type": "User",
            "site_admin": false
        },
        "open_issues": 114,
        "closed_issues": 124,
        "state": "open",
        "created_at": "2021-07-16T17:49:59Z",
        "updated_at": "2024-06-03T17:45:11Z",
        "due_on": null,
        "closed_at": null
    },
    "comments": 1,
    "created_at": "2021-07-14T21:38:56Z",
    "updated_at": "2024-02-23T18:42:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Is your feature request related to a problem? Please describe.**\r\nCategorical column indexes exists in a weird place of quasi-support in cuDF; while it is possible to set a dataframe's column index to be a `pd.CategoricalIndex` without any error or warning, it isn't actually possible for the index to be recreated with `df.columns`, which contrasts the behavior of Pandas:\r\n\r\n```python\r\nimport cudf\r\nimport pandas as pd\r\n\r\npdf = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\r\npdf.columns = pdf.columns.astype(\"category\")\r\n\r\ngdf = cudf.from_pandas(pdf)\r\n\r\nprint(pdf.columns)  # CategoricalIndex(['a', 'b'], categories=['a', 'b'], ordered=False, dtype='category')\r\nprint(gdf.columns)  # Index(['a', 'b'], dtype='object')\r\n```\r\n\r\nThis means that while there are user-facing issues which come as a result of using cuDF's \"categorical\" column indexes (such as #7365), the ability to test for them is limited in that we cannot do the standard comparison to Pandas dataframes here:\r\n\r\n```python\r\nfrom cudf.testing._utils import assert_eq\r\n\r\nassert_eq(pdf, gdf)  # AssertionError: DataFrame.columns are different\r\n```\r\n\r\n**Describe the solution you'd like**\r\nAfter chatting with @shwina, it seems like an ideal solution that *can't* be done here is to use the individual categorical scalars instead of their string names as data when constructing the `ColumnAccessor` in the [columns setter method](https://github.com/rapidsai/cudf/blob/0e2a448e15eec4b6d5d20f469a6f79be2f31b923/python/cudf/cudf/core/dataframe.py#L2676-L2704). However, this isn't possible, as neither Pandas nor cuDF offer categorical scalars.\r\n\r\nAn alternative to this would be to have a boolean attribute either of the dataframe or `ColumnAccessor` saying whether or not the column index is categorical; this could then be used by `ColumnAccessor.to_pandas_index()`to properly reconstruct the index with categories if needed. This would come with its own consequences, specifically either\r\n\r\n- a relatively niche param/attribute of `ColumnAccessor` that is only used for dataframes\r\n- an attribute of dataframes that now must be explicitly copied from one to another in the case of copies\r\n\r\n**Describe alternatives you've considered**\r\nA possible alternative that @shwina and I explored, but were unable to get working, is to pass specific kwargs to `assert_eq` such that it would only check the column index names, but not the index type. Passing different combos of `check_categorical=False`, `check_column_type=False`, etc. we were unable to get a passing test when comparing these indexes.\r\n\r\n**Additional context**\r\nThis issue came up while working on #8560, where added test cases would require this feature and needed to be xfailed.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/rapidsai/cudf/issues/8743/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/rapidsai/cudf/issues/8743/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}