,url,html_url,issue_url,id,node_id,comment_created_at,comment_updated_at,author_association,comment_text,performed_via_github_app,comment_user.login,user.id,user.node_id,user.avatar_url,user.gravatar_id,user.url,user.html_url,user.followers_url,user.following_url,user.gists_url,user.starred_url,user.subscriptions_url,user.organizations_url,user.repos_url,user.events_url,user.received_events_url,user.type,user.site_admin,reactions.url,comment_reactions.total_count,comment_reactions.+1,comment_reactions.-1,comment_reactions.laugh,comment_reactions.hooray,comment_reactions.confused,comment_reactions.heart,comment_reactions.rocket,comment_reactions.eyes,number
0,https://api.github.com/repos/rapidsai/cudf/issues/comments/314139551,https://github.com/rapidsai/cudf/issues/28#issuecomment-314139551,https://api.github.com/repos/rapidsai/cudf/issues/28,314139551,MDEyOklzc3VlQ29tbWVudDMxNDEzOTU1MQ==,2017-07-10T15:21:31Z,2017-07-10T15:21:31Z,CONTRIBUTOR,"We are only doing CI testing and building on Linux.  The currently tested platforms are Linux and OSX (my development machine).  The Linux CI builds are uploading from TravisCI.  To provide windows CI builds, we can use AppVeyor.  However, we are planning to address the windows support later once we get more of the basic feature done.",,sklam,1929845,MDQ6VXNlcjE5Mjk4NDU=,https://avatars.githubusercontent.com/u/1929845?v=4,,https://api.github.com/users/sklam,https://github.com/sklam,https://api.github.com/users/sklam/followers,https://api.github.com/users/sklam/following{/other_user},https://api.github.com/users/sklam/gists{/gist_id},https://api.github.com/users/sklam/starred{/owner}{/repo},https://api.github.com/users/sklam/subscriptions,https://api.github.com/users/sklam/orgs,https://api.github.com/users/sklam/repos,https://api.github.com/users/sklam/events{/privacy},https://api.github.com/users/sklam/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/314139551/reactions,0,0,0,0,0,0,0,0,0,28
1,https://api.github.com/repos/rapidsai/cudf/issues/comments/383682524,https://github.com/rapidsai/cudf/issues/28#issuecomment-383682524,https://api.github.com/repos/rapidsai/cudf/issues/28,383682524,MDEyOklzc3VlQ29tbWVudDM4MzY4MjUyNA==,2018-04-23T18:49:42Z,2018-04-23T18:49:42Z,NONE,Hey - really fantastic project. I was just wondering if there was any update on windows support?,,M00NSH0T,30039978,MDQ6VXNlcjMwMDM5OTc4,https://avatars.githubusercontent.com/u/30039978?v=4,,https://api.github.com/users/M00NSH0T,https://github.com/M00NSH0T,https://api.github.com/users/M00NSH0T/followers,https://api.github.com/users/M00NSH0T/following{/other_user},https://api.github.com/users/M00NSH0T/gists{/gist_id},https://api.github.com/users/M00NSH0T/starred{/owner}{/repo},https://api.github.com/users/M00NSH0T/subscriptions,https://api.github.com/users/M00NSH0T/orgs,https://api.github.com/users/M00NSH0T/repos,https://api.github.com/users/M00NSH0T/events{/privacy},https://api.github.com/users/M00NSH0T/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/383682524/reactions,0,0,0,0,0,0,0,0,0,28
2,https://api.github.com/repos/rapidsai/cudf/issues/comments/383778404,https://github.com/rapidsai/cudf/issues/28#issuecomment-383778404,https://api.github.com/repos/rapidsai/cudf/issues/28,383778404,MDEyOklzc3VlQ29tbWVudDM4Mzc3ODQwNA==,2018-04-24T01:58:37Z,2018-04-24T01:58:37Z,NONE,@sklam extremely needed support for windows,,yutiansut,11537812,MDQ6VXNlcjExNTM3ODEy,https://avatars.githubusercontent.com/u/11537812?v=4,,https://api.github.com/users/yutiansut,https://github.com/yutiansut,https://api.github.com/users/yutiansut/followers,https://api.github.com/users/yutiansut/following{/other_user},https://api.github.com/users/yutiansut/gists{/gist_id},https://api.github.com/users/yutiansut/starred{/owner}{/repo},https://api.github.com/users/yutiansut/subscriptions,https://api.github.com/users/yutiansut/orgs,https://api.github.com/users/yutiansut/repos,https://api.github.com/users/yutiansut/events{/privacy},https://api.github.com/users/yutiansut/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/383778404/reactions,0,0,0,0,0,0,0,0,0,28
3,https://api.github.com/repos/rapidsai/cudf/issues/comments/497961507,https://github.com/rapidsai/cudf/issues/28#issuecomment-497961507,https://api.github.com/repos/rapidsai/cudf/issues/28,497961507,MDEyOklzc3VlQ29tbWVudDQ5Nzk2MTUwNw==,2019-06-01T17:06:39Z,2019-06-01T17:06:39Z,NONE,"do you guys have windows support now>?
",,SteffenRoe,28121652,MDQ6VXNlcjI4MTIxNjUy,https://avatars.githubusercontent.com/u/28121652?v=4,,https://api.github.com/users/SteffenRoe,https://github.com/SteffenRoe,https://api.github.com/users/SteffenRoe/followers,https://api.github.com/users/SteffenRoe/following{/other_user},https://api.github.com/users/SteffenRoe/gists{/gist_id},https://api.github.com/users/SteffenRoe/starred{/owner}{/repo},https://api.github.com/users/SteffenRoe/subscriptions,https://api.github.com/users/SteffenRoe/orgs,https://api.github.com/users/SteffenRoe/repos,https://api.github.com/users/SteffenRoe/events{/privacy},https://api.github.com/users/SteffenRoe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/497961507/reactions,0,0,0,0,0,0,0,0,0,28
4,https://api.github.com/repos/rapidsai/cudf/issues/comments/497968228,https://github.com/rapidsai/cudf/issues/28#issuecomment-497968228,https://api.github.com/repos/rapidsai/cudf/issues/28,497968228,MDEyOklzc3VlQ29tbWVudDQ5Nzk2ODIyOA==,2019-06-01T18:40:04Z,2019-06-01T18:40:04Z,NONE,"@SteffenRoe I asked that question 2 weeks ago in the RAPIDS-GoAi slack community and Keith Kraus and Mark Harris said that 1. if/when windows supports is added, that conversation would happen here, and 2. it's a big undertaking and they'd have to get window dev boxes.  I'm also excited/anxious to try it out too, but I think for now, the best we can do (or at least what I've done) is up vote this request (to show interest in numbers) and subscribe to it (and remain hopeful). HTH",,dlasusa,36902797,MDQ6VXNlcjM2OTAyNzk3,https://avatars.githubusercontent.com/u/36902797?v=4,,https://api.github.com/users/dlasusa,https://github.com/dlasusa,https://api.github.com/users/dlasusa/followers,https://api.github.com/users/dlasusa/following{/other_user},https://api.github.com/users/dlasusa/gists{/gist_id},https://api.github.com/users/dlasusa/starred{/owner}{/repo},https://api.github.com/users/dlasusa/subscriptions,https://api.github.com/users/dlasusa/orgs,https://api.github.com/users/dlasusa/repos,https://api.github.com/users/dlasusa/events{/privacy},https://api.github.com/users/dlasusa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/497968228/reactions,0,0,0,0,0,0,0,0,0,28
5,https://api.github.com/repos/rapidsai/cudf/issues/comments/521822259,https://github.com/rapidsai/cudf/issues/28#issuecomment-521822259,https://api.github.com/repos/rapidsai/cudf/issues/28,521822259,MDEyOklzc3VlQ29tbWVudDUyMTgyMjI1OQ==,2019-08-15T22:40:22Z,2019-08-15T22:40:22Z,NONE,Whats the ETA for windows support?,,marcodelmoral,11341835,MDQ6VXNlcjExMzQxODM1,https://avatars.githubusercontent.com/u/11341835?v=4,,https://api.github.com/users/marcodelmoral,https://github.com/marcodelmoral,https://api.github.com/users/marcodelmoral/followers,https://api.github.com/users/marcodelmoral/following{/other_user},https://api.github.com/users/marcodelmoral/gists{/gist_id},https://api.github.com/users/marcodelmoral/starred{/owner}{/repo},https://api.github.com/users/marcodelmoral/subscriptions,https://api.github.com/users/marcodelmoral/orgs,https://api.github.com/users/marcodelmoral/repos,https://api.github.com/users/marcodelmoral/events{/privacy},https://api.github.com/users/marcodelmoral/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/521822259/reactions,9,8,0,0,0,0,0,0,1,28
6,https://api.github.com/repos/rapidsai/cudf/issues/comments/536476713,https://github.com/rapidsai/cudf/issues/28#issuecomment-536476713,https://api.github.com/repos/rapidsai/cudf/issues/28,536476713,MDEyOklzc3VlQ29tbWVudDUzNjQ3NjcxMw==,2019-09-30T09:16:05Z,2019-09-30T09:16:05Z,NONE,"> Whats the ETA for windows support?

Would also like to know...",,onacrame,11838381,MDQ6VXNlcjExODM4Mzgx,https://avatars.githubusercontent.com/u/11838381?v=4,,https://api.github.com/users/onacrame,https://github.com/onacrame,https://api.github.com/users/onacrame/followers,https://api.github.com/users/onacrame/following{/other_user},https://api.github.com/users/onacrame/gists{/gist_id},https://api.github.com/users/onacrame/starred{/owner}{/repo},https://api.github.com/users/onacrame/subscriptions,https://api.github.com/users/onacrame/orgs,https://api.github.com/users/onacrame/repos,https://api.github.com/users/onacrame/events{/privacy},https://api.github.com/users/onacrame/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/536476713/reactions,4,4,0,0,0,0,0,0,0,28
7,https://api.github.com/repos/rapidsai/cudf/issues/comments/536771670,https://github.com/rapidsai/cudf/issues/28#issuecomment-536771670,https://api.github.com/repos/rapidsai/cudf/issues/28,536771670,MDEyOklzc3VlQ29tbWVudDUzNjc3MTY3MA==,2019-09-30T22:03:45Z,2019-09-30T22:03:45Z,COLLABORATOR,"There is currently no plans for Windows support, if someone would like to try it and contribute fixes to enable Windows support we would be happy to support.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/536771670/reactions,27,1,24,0,0,2,0,0,0,28
8,https://api.github.com/repos/rapidsai/cudf/issues/comments/561567577,https://github.com/rapidsai/cudf/issues/28#issuecomment-561567577,https://api.github.com/repos/rapidsai/cudf/issues/28,561567577,MDEyOklzc3VlQ29tbWVudDU2MTU2NzU3Nw==,2019-12-04T10:05:15Z,2019-12-04T10:05:15Z,NONE,"Hi, speaking of the devil, I am trying to compile Rapids CuDF in Windows 10 and I ran into some troubles. First of all my configuration:
- Windows 10 LTSC Enterprise (1809)
- CUDA 10.2.89 (working nvcc wich uses cl.exe for x64 from Visual Studio 2017 )
- gcc 7.4.0
- boost libraries on path version 1.7.0
- I do not use conda (I prefer to build a virtual environement with pip)
- I use CygWin with cmake 3.14.5-1

When I run `cmake .. -DCMAKE_CXX11_ABI=ON` inside the newly created **build** folder of **cudf** I have the following error :
`Determining if the CUDA compiler works failed with the following output:
Change Dir: /cygdrive/c/cudf/cpp/build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make.exe cmTC_bd22e/fast 
/usr/bin/make -f CMakeFiles/cmTC_bd22e.dir/build.make CMakeFiles/cmTC_bd22e.dir/build
make[1]Â : on entre dans le répertoire C:/cygdrive/c/cudf/cpp/build/CMakeFiles/CMakeTmpÂ Â»
Building CUDA object CMakeFiles/cmTC_bd22e.dir/main.cu.o
""/cygdrive/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/bin/nvcc.exe""     -x cu -c /cygdrive/c/cudf/cpp/build/CMakeFiles/CMakeTmp/main.cu -o CMakeFiles/cmTC_bd22e.dir/main.cu.o
c1xx: fatal error C1083: Impossible d'ouvrir le fichier source : 'C:/cygdrive/c/cudf/cpp/build/CMakeFiles/CMakeTmp/main.cu' : No such file or directory
main.cu
make[1]: *** [CMakeFiles/cmTC_bd22e.dir/build.make:66: CMakeFiles/cmTC_bd22e.dir/main.cu.o] Error 2
make[1]Â : on quitte le répertoire C:/cygdrive/c/cudf/cpp/build/CMakeFiles/CMakeTmpÂ Â»
make: *** [Makefile:121: cmTC_bd22e/fast] Error 2`

... Well I am french sorry for the language barrier. But basically from what I understood, during the compilation process, **nvcc** has to compile a file created by compilation in _cudf/build/CMakeFiles/CmakeTmp/main.cu_ but does not find it. Actually, I checked the folder is empty...

Would someone please help me ? 
Thanks in advance, ",,eidalex,46104119,MDQ6VXNlcjQ2MTA0MTE5,https://avatars.githubusercontent.com/u/46104119?v=4,,https://api.github.com/users/eidalex,https://github.com/eidalex,https://api.github.com/users/eidalex/followers,https://api.github.com/users/eidalex/following{/other_user},https://api.github.com/users/eidalex/gists{/gist_id},https://api.github.com/users/eidalex/starred{/owner}{/repo},https://api.github.com/users/eidalex/subscriptions,https://api.github.com/users/eidalex/orgs,https://api.github.com/users/eidalex/repos,https://api.github.com/users/eidalex/events{/privacy},https://api.github.com/users/eidalex/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/561567577/reactions,0,0,0,0,0,0,0,0,0,28
9,https://api.github.com/repos/rapidsai/cudf/issues/comments/562634883,https://github.com/rapidsai/cudf/issues/28#issuecomment-562634883,https://api.github.com/repos/rapidsai/cudf/issues/28,562634883,MDEyOklzc3VlQ29tbWVudDU2MjYzNDg4Mw==,2019-12-06T16:09:36Z,2019-12-06T16:09:36Z,COLLABORATOR,"I'm unfortunately not familiar enough with cygwin to be able to help here, but the `main.cu` is essentially a CMake test file to ensure that the CUDA compiler is working as expected before actually trying to tackle something in the real project.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/562634883/reactions,0,0,0,0,0,0,0,0,0,28
10,https://api.github.com/repos/rapidsai/cudf/issues/comments/570788226,https://github.com/rapidsai/cudf/issues/28#issuecomment-570788226,https://api.github.com/repos/rapidsai/cudf/issues/28,570788226,MDEyOklzc3VlQ29tbWVudDU3MDc4ODIyNg==,2020-01-04T14:06:56Z,2020-01-04T14:06:56Z,NONE,@eidalex were you able to resolve the main.cu error? ,,grv1207,14009730,MDQ6VXNlcjE0MDA5NzMw,https://avatars.githubusercontent.com/u/14009730?v=4,,https://api.github.com/users/grv1207,https://github.com/grv1207,https://api.github.com/users/grv1207/followers,https://api.github.com/users/grv1207/following{/other_user},https://api.github.com/users/grv1207/gists{/gist_id},https://api.github.com/users/grv1207/starred{/owner}{/repo},https://api.github.com/users/grv1207/subscriptions,https://api.github.com/users/grv1207/orgs,https://api.github.com/users/grv1207/repos,https://api.github.com/users/grv1207/events{/privacy},https://api.github.com/users/grv1207/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/570788226/reactions,0,0,0,0,0,0,0,0,0,28
11,https://api.github.com/repos/rapidsai/cudf/issues/comments/576346503,https://github.com/rapidsai/cudf/issues/28#issuecomment-576346503,https://api.github.com/repos/rapidsai/cudf/issues/28,576346503,MDEyOklzc3VlQ29tbWVudDU3NjM0NjUwMw==,2020-01-20T16:26:48Z,2020-01-20T16:26:48Z,NONE,"1. `cudf` doesn't support windows
2. docker for windows doesn't support GPU
3. WSL1 and WSL2 do not support GPU

Am I right that there is no way to use `cudf` on windows? 

",,anki-code,1708680,MDQ6VXNlcjE3MDg2ODA=,https://avatars.githubusercontent.com/u/1708680?v=4,,https://api.github.com/users/anki-code,https://github.com/anki-code,https://api.github.com/users/anki-code/followers,https://api.github.com/users/anki-code/following{/other_user},https://api.github.com/users/anki-code/gists{/gist_id},https://api.github.com/users/anki-code/starred{/owner}{/repo},https://api.github.com/users/anki-code/subscriptions,https://api.github.com/users/anki-code/orgs,https://api.github.com/users/anki-code/repos,https://api.github.com/users/anki-code/events{/privacy},https://api.github.com/users/anki-code/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/576346503/reactions,5,0,0,0,0,5,0,0,0,28
12,https://api.github.com/repos/rapidsai/cudf/issues/comments/576348850,https://github.com/rapidsai/cudf/issues/28#issuecomment-576348850,https://api.github.com/repos/rapidsai/cudf/issues/28,576348850,MDEyOklzc3VlQ29tbWVudDU3NjM0ODg1MA==,2020-01-20T16:32:16Z,2020-01-20T16:32:16Z,NONE,Whats the status on windows support?,,marcodelmoral,11341835,MDQ6VXNlcjExMzQxODM1,https://avatars.githubusercontent.com/u/11341835?v=4,,https://api.github.com/users/marcodelmoral,https://github.com/marcodelmoral,https://api.github.com/users/marcodelmoral/followers,https://api.github.com/users/marcodelmoral/following{/other_user},https://api.github.com/users/marcodelmoral/gists{/gist_id},https://api.github.com/users/marcodelmoral/starred{/owner}{/repo},https://api.github.com/users/marcodelmoral/subscriptions,https://api.github.com/users/marcodelmoral/orgs,https://api.github.com/users/marcodelmoral/repos,https://api.github.com/users/marcodelmoral/events{/privacy},https://api.github.com/users/marcodelmoral/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/576348850/reactions,0,0,0,0,0,0,0,0,0,28
13,https://api.github.com/repos/rapidsai/cudf/issues/comments/576350255,https://github.com/rapidsai/cudf/issues/28#issuecomment-576350255,https://api.github.com/repos/rapidsai/cudf/issues/28,576350255,MDEyOklzc3VlQ29tbWVudDU3NjM1MDI1NQ==,2020-01-20T16:35:42Z,2020-01-20T16:35:42Z,COLLABORATOR,"As of now cuDF does not support windows and there's currently no plans to support windows at this time. If WSL would support GPUs and CUDA that would be ideal for us as we could ""just work"".

Unfortunately we do not have the infrastructure or development expertise to support Windows, but if someone would like to explore compiling and running on Windows, we'd be more than happy to support.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/576350255/reactions,14,0,11,0,0,3,0,0,0,28
14,https://api.github.com/repos/rapidsai/cudf/issues/comments/576562458,https://github.com/rapidsai/cudf/issues/28#issuecomment-576562458,https://api.github.com/repos/rapidsai/cudf/issues/28,576562458,MDEyOklzc3VlQ29tbWVudDU3NjU2MjQ1OA==,2020-01-21T08:00:10Z,2020-01-21T08:00:10Z,NONE,@grv1207 I am sorry I did not have time to test again... I'll up someday but right now I have given up on the idea to use it on Windows...,,eidalex,46104119,MDQ6VXNlcjQ2MTA0MTE5,https://avatars.githubusercontent.com/u/46104119?v=4,,https://api.github.com/users/eidalex,https://github.com/eidalex,https://api.github.com/users/eidalex/followers,https://api.github.com/users/eidalex/following{/other_user},https://api.github.com/users/eidalex/gists{/gist_id},https://api.github.com/users/eidalex/starred{/owner}{/repo},https://api.github.com/users/eidalex/subscriptions,https://api.github.com/users/eidalex/orgs,https://api.github.com/users/eidalex/repos,https://api.github.com/users/eidalex/events{/privacy},https://api.github.com/users/eidalex/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/576562458/reactions,0,0,0,0,0,0,0,0,0,28
15,https://api.github.com/repos/rapidsai/cudf/issues/comments/630357741,https://github.com/rapidsai/cudf/issues/28#issuecomment-630357741,https://api.github.com/repos/rapidsai/cudf/issues/28,630357741,MDEyOklzc3VlQ29tbWVudDYzMDM1Nzc0MQ==,2020-05-18T18:25:00Z,2020-05-18T18:25:00Z,NONE,Any update regarding the Windows support?,,rmozart,35969610,MDQ6VXNlcjM1OTY5NjEw,https://avatars.githubusercontent.com/u/35969610?v=4,,https://api.github.com/users/rmozart,https://github.com/rmozart,https://api.github.com/users/rmozart/followers,https://api.github.com/users/rmozart/following{/other_user},https://api.github.com/users/rmozart/gists{/gist_id},https://api.github.com/users/rmozart/starred{/owner}{/repo},https://api.github.com/users/rmozart/subscriptions,https://api.github.com/users/rmozart/orgs,https://api.github.com/users/rmozart/repos,https://api.github.com/users/rmozart/events{/privacy},https://api.github.com/users/rmozart/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/630357741/reactions,4,4,0,0,0,0,0,0,0,28
16,https://api.github.com/repos/rapidsai/cudf/issues/comments/630483717,https://github.com/rapidsai/cudf/issues/28#issuecomment-630483717,https://api.github.com/repos/rapidsai/cudf/issues/28,630483717,MDEyOklzc3VlQ29tbWVudDYzMDQ4MzcxNw==,2020-05-18T23:17:29Z,2020-05-18T23:17:29Z,COLLABORATOR,"> Any update regarding the Windows support?

There are still no plans to support Windows at this time.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/630483717/reactions,4,0,4,0,0,0,0,0,0,28
17,https://api.github.com/repos/rapidsai/cudf/issues/comments/631047761,https://github.com/rapidsai/cudf/issues/28#issuecomment-631047761,https://api.github.com/repos/rapidsai/cudf/issues/28,631047761,MDEyOklzc3VlQ29tbWVudDYzMTA0Nzc2MQ==,2020-05-19T19:56:06Z,2020-05-19T19:56:06Z,COLLABORATOR,"Since information is now public, our plan for Windows support is to rely on WSL 2.0 which will support running CUDA and GPU computing.

You can see the announcement blog from Microsoft here: https://devblogs.microsoft.com/commandline/the-windows-subsystem-for-linux-build-2020-summary/#wsl-gpu",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/631047761/reactions,10,10,0,0,0,0,0,0,0,28
18,https://api.github.com/repos/rapidsai/cudf/issues/comments/631051362,https://github.com/rapidsai/cudf/issues/28#issuecomment-631051362,https://api.github.com/repos/rapidsai/cudf/issues/28,631051362,MDEyOklzc3VlQ29tbWVudDYzMTA1MTM2Mg==,2020-05-19T20:02:57Z,2020-05-19T20:02:57Z,NONE,Rapids was my very first thought upon seeing the WSL 2.0 announcement earlier today :),,dlasusa,36902797,MDQ6VXNlcjM2OTAyNzk3,https://avatars.githubusercontent.com/u/36902797?v=4,,https://api.github.com/users/dlasusa,https://github.com/dlasusa,https://api.github.com/users/dlasusa/followers,https://api.github.com/users/dlasusa/following{/other_user},https://api.github.com/users/dlasusa/gists{/gist_id},https://api.github.com/users/dlasusa/starred{/owner}{/repo},https://api.github.com/users/dlasusa/subscriptions,https://api.github.com/users/dlasusa/orgs,https://api.github.com/users/dlasusa/repos,https://api.github.com/users/dlasusa/events{/privacy},https://api.github.com/users/dlasusa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/631051362/reactions,0,0,0,0,0,0,0,0,0,28
19,https://api.github.com/repos/rapidsai/cudf/issues/comments/644062226,https://github.com/rapidsai/cudf/issues/28#issuecomment-644062226,https://api.github.com/repos/rapidsai/cudf/issues/28,644062226,MDEyOklzc3VlQ29tbWVudDY0NDA2MjIyNg==,2020-06-15T11:07:15Z,2020-06-15T11:07:15Z,NONE,"@kkraus14 any instructions on how to proceed to get this to work with CUDA and condas?  Besides installing the update, what else do I need to do?
",,achapkowski,5131271,MDQ6VXNlcjUxMzEyNzE=,https://avatars.githubusercontent.com/u/5131271?v=4,,https://api.github.com/users/achapkowski,https://github.com/achapkowski,https://api.github.com/users/achapkowski/followers,https://api.github.com/users/achapkowski/following{/other_user},https://api.github.com/users/achapkowski/gists{/gist_id},https://api.github.com/users/achapkowski/starred{/owner}{/repo},https://api.github.com/users/achapkowski/subscriptions,https://api.github.com/users/achapkowski/orgs,https://api.github.com/users/achapkowski/repos,https://api.github.com/users/achapkowski/events{/privacy},https://api.github.com/users/achapkowski/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/644062226/reactions,1,1,0,0,0,0,0,0,0,28
20,https://api.github.com/repos/rapidsai/cudf/issues/comments/644172526,https://github.com/rapidsai/cudf/issues/28#issuecomment-644172526,https://api.github.com/repos/rapidsai/cudf/issues/28,644172526,MDEyOklzc3VlQ29tbWVudDY0NDE3MjUyNg==,2020-06-15T14:33:19Z,2020-06-15T14:33:19Z,COLLABORATOR,"> @kkraus14 any instructions on how to proceed to get this to work with CUDA and condas? Besides installing the update, what else do I need to do?

I don't believe the update is publicly available quite yet, you can track it here: https://developer.nvidia.com/cuda/wsl. Once it's available you'll basically have a full fledged linux installation so you can just use the normal conda installation commands that you normally would.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/644172526/reactions,0,0,0,0,0,0,0,0,0,28
21,https://api.github.com/repos/rapidsai/cudf/issues/comments/649903112,https://github.com/rapidsai/cudf/issues/28#issuecomment-649903112,https://api.github.com/repos/rapidsai/cudf/issues/28,649903112,MDEyOklzc3VlQ29tbWVudDY0OTkwMzExMg==,2020-06-26T01:49:11Z,2020-06-26T01:49:11Z,NONE,"Here, showing Windows support too. I hope the update comes soon. ",,maulberto3,22672781,MDQ6VXNlcjIyNjcyNzgx,https://avatars.githubusercontent.com/u/22672781?v=4,,https://api.github.com/users/maulberto3,https://github.com/maulberto3,https://api.github.com/users/maulberto3/followers,https://api.github.com/users/maulberto3/following{/other_user},https://api.github.com/users/maulberto3/gists{/gist_id},https://api.github.com/users/maulberto3/starred{/owner}{/repo},https://api.github.com/users/maulberto3/subscriptions,https://api.github.com/users/maulberto3/orgs,https://api.github.com/users/maulberto3/repos,https://api.github.com/users/maulberto3/events{/privacy},https://api.github.com/users/maulberto3/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/649903112/reactions,0,0,0,0,0,0,0,0,0,28
22,https://api.github.com/repos/rapidsai/cudf/issues/comments/649936565,https://github.com/rapidsai/cudf/issues/28#issuecomment-649936565,https://api.github.com/repos/rapidsai/cudf/issues/28,649936565,MDEyOklzc3VlQ29tbWVudDY0OTkzNjU2NQ==,2020-06-26T03:26:03Z,2020-06-26T03:26:03Z,COLLABORATOR,"I believe the public beta is available now, instructions for setting up WSL 2 with CUDA support are available here: https://developer.nvidia.com/cuda/wsl

Once that's working you have a full fledged linux environment within Windows in which you can install and use RAPIDS",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/649936565/reactions,0,0,0,0,0,0,0,0,0,28
23,https://api.github.com/repos/rapidsai/cudf/issues/comments/657677241,https://github.com/rapidsai/cudf/issues/28#issuecomment-657677241,https://api.github.com/repos/rapidsai/cudf/issues/28,657677241,MDEyOklzc3VlQ29tbWVudDY1NzY3NzI0MQ==,2020-07-13T17:01:37Z,2020-07-13T17:01:37Z,NONE,"I did just this, but it appears the CUDA JIT compiler is not included at this point.  See the #5 of the limitations [here](https://docs.nvidia.com/cuda/wsl-user-guide/index.html).  I ran into this issue running the average tip example for cuDF.",,stevemarin,11840348,MDQ6VXNlcjExODQwMzQ4,https://avatars.githubusercontent.com/u/11840348?v=4,,https://api.github.com/users/stevemarin,https://github.com/stevemarin,https://api.github.com/users/stevemarin/followers,https://api.github.com/users/stevemarin/following{/other_user},https://api.github.com/users/stevemarin/gists{/gist_id},https://api.github.com/users/stevemarin/starred{/owner}{/repo},https://api.github.com/users/stevemarin/subscriptions,https://api.github.com/users/stevemarin/orgs,https://api.github.com/users/stevemarin/repos,https://api.github.com/users/stevemarin/events{/privacy},https://api.github.com/users/stevemarin/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/657677241/reactions,0,0,0,0,0,0,0,0,0,28
24,https://api.github.com/repos/rapidsai/cudf/issues/comments/657691585,https://github.com/rapidsai/cudf/issues/28#issuecomment-657691585,https://api.github.com/repos/rapidsai/cudf/issues/28,657691585,MDEyOklzc3VlQ29tbWVudDY1NzY5MTU4NQ==,2020-07-13T17:30:41Z,2020-07-13T17:30:41Z,CONTRIBUTOR,"> I did just this, but it appears the CUDA JIT compiler is not included at this point. See the #5 of the limitations [here](https://docs.nvidia.com/cuda/wsl-user-guide/index.html). I ran into this issue running the average tip example for cuDF.

The CUDA JIT compiler should not be needed to run cuDF. We explicitly build for supported architectures and do not rely on runtime PTX compilation. 

How did this issue manifest for you? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/657691585/reactions,0,0,0,0,0,0,0,0,0,28
25,https://api.github.com/repos/rapidsai/cudf/issues/comments/657696453,https://github.com/rapidsai/cudf/issues/28#issuecomment-657696453,https://api.github.com/repos/rapidsai/cudf/issues/28,657696453,MDEyOklzc3VlQ29tbWVudDY1NzY5NjQ1Mw==,2020-07-13T17:40:41Z,2020-07-13T17:40:41Z,COLLABORATOR,@jrhemstad nvRTC isn't supported in WSL2 CUDA yet it seems like which causes Jitify to blow up.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/657696453/reactions,0,0,0,0,0,0,0,0,0,28
26,https://api.github.com/repos/rapidsai/cudf/issues/comments/657697669,https://github.com/rapidsai/cudf/issues/28#issuecomment-657697669,https://api.github.com/repos/rapidsai/cudf/issues/28,657697669,MDEyOklzc3VlQ29tbWVudDY1NzY5NzY2OQ==,2020-07-13T17:43:07Z,2020-07-13T17:43:07Z,NONE,"Here's what I did and the trace:

```
Python 3.7.7 (default, May  7 2020, 21:25:33)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.16.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import cudf, io, requests
   ...: from io import StringIO
   ...:
   ...: url = ""https://github.com/plotly/datasets/raw/master/tips.csv""
   ...: content = requests.get(url).content.decode('utf-8')
   ...:
   ...: tips_df = cudf.read_csv(StringIO(content))
   ...: tips_df['tip_percentage'] = tips_df['tip'] / tips_df['total_bill'] * 100
   ...:
   ...: # display average tip by dining party size
   ...: print(tips_df.groupby('size').tip_percentage.mean())
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-1-31e0c4338384> in <module>
      6
      7 tips_df = cudf.read_csv(StringIO(content))
----> 8 tips_df['tip_percentage'] = tips_df['tip'] / tips_df['total_bill'] * 100
      9
     10 # display average tip by dining party size

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/site-packages/cudf/core/series.py in __truediv__(self, other)
   1238
   1239     def __truediv__(self, other):
-> 1240         return self._binaryop(other, ""truediv"")
   1241
   1242     def rtruediv(self, other, fill_value=None, axis=0):

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/contextlib.py in inner(*args, **kwds)
     72         def inner(*args, **kwds):
     73             with self._recreate_cm():
---> 74                 return func(*args, **kwds)
     75         return inner
     76

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/site-packages/cudf/core/series.py in _binaryop(self, other, fn, fill_value, reflect)
   1000                     rhs = rhs.fillna(fill_value)
   1001
-> 1002         outcol = lhs._column.binary_operator(fn, rhs, reflect=reflect)
   1003         result = lhs._copy_construct(data=outcol, name=result_name)
   1004         return result

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/site-packages/cudf/core/column/numerical.py in binary_operator(self, binop, rhs, reflect)
     93             raise TypeError(msg.format(binop, type(self), type(rhs)))
     94         return _numeric_column_binop(
---> 95             lhs=self, rhs=rhs, op=binop, out_dtype=out_dtype, reflect=reflect
     96         )
     97

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/contextlib.py in inner(*args, **kwds)
     72         def inner(*args, **kwds):
     73             with self._recreate_cm():
---> 74                 return func(*args, **kwds)
     75         return inner
     76

/mnt/c/Users/steve/dev/rapids/conda-env-37-ubuntu/lib/python3.7/site-packages/cudf/core/column/numerical.py in _numeric_column_binop(lhs, rhs, op, out_dtype, reflect)
    432         out_dtype = ""bool""
    433
--> 434     out = libcudf.binaryop.binaryop(lhs, rhs, op, out_dtype)
    435
    436     if is_op_comparison:

cudf/_lib/binaryop.pyx in cudf._lib.binaryop.binaryop()

cudf/_lib/binaryop.pyx in cudf._lib.binaryop.binaryop_v_v()

RuntimeError: CUDA_ERROR_JIT_COMPILER_NOT_FOUND
```

Please let me know if there's any further information you'd like.",,stevemarin,11840348,MDQ6VXNlcjExODQwMzQ4,https://avatars.githubusercontent.com/u/11840348?v=4,,https://api.github.com/users/stevemarin,https://github.com/stevemarin,https://api.github.com/users/stevemarin/followers,https://api.github.com/users/stevemarin/following{/other_user},https://api.github.com/users/stevemarin/gists{/gist_id},https://api.github.com/users/stevemarin/starred{/owner}{/repo},https://api.github.com/users/stevemarin/subscriptions,https://api.github.com/users/stevemarin/orgs,https://api.github.com/users/stevemarin/repos,https://api.github.com/users/stevemarin/events{/privacy},https://api.github.com/users/stevemarin/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/657697669/reactions,0,0,0,0,0,0,0,0,0,28
27,https://api.github.com/repos/rapidsai/cudf/issues/comments/657702647,https://github.com/rapidsai/cudf/issues/28#issuecomment-657702647,https://api.github.com/repos/rapidsai/cudf/issues/28,657702647,MDEyOklzc3VlQ29tbWVudDY1NzcwMjY0Nw==,2020-07-13T17:53:34Z,2020-07-13T17:53:34Z,CONTRIBUTOR,"> @jrhemstad nvRTC isn't supported in WSL2 CUDA yet it seems like which causes Jitify to blow up.

Ah, okay. That's a different statement than what is in the docs:

>PTX JIT is not supported (so PTX code will not be loaded from CUDA binaries for runtime compilation).

@stevemarin I misunderstood what the docs were saying about the restriction. You are indeed hitting this limitation. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/657702647/reactions,0,0,0,0,0,0,0,0,0,28
28,https://api.github.com/repos/rapidsai/cudf/issues/comments/692821833,https://github.com/rapidsai/cudf/issues/28#issuecomment-692821833,https://api.github.com/repos/rapidsai/cudf/issues/28,692821833,MDEyOklzc3VlQ29tbWVudDY5MjgyMTgzMw==,2020-09-15T16:16:27Z,2020-09-15T16:16:27Z,COLLABORATOR,"Just to update folks following this issue, the latest CUDA WSL beta now supports PTX JIT compilation so everything in cuDF (single GPU) should work in it. You can find the updated install instructions here: https://docs.nvidia.com/cuda/wsl-user-guide/index.html

I'm going to leave this issue open for the community to continue discuss native Windows support.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692821833/reactions,7,7,0,0,0,0,0,0,0,28
29,https://api.github.com/repos/rapidsai/cudf/issues/comments/713868199,https://github.com/rapidsai/cudf/issues/28#issuecomment-713868199,https://api.github.com/repos/rapidsai/cudf/issues/28,713868199,MDEyOklzc3VlQ29tbWVudDcxMzg2ODE5OQ==,2020-10-21T20:47:31Z,2020-10-21T20:47:31Z,NONE,Does cuDF WSL support require a special developer preview version of Windows? Or does it work with any WSL2 instance in Windows?,,pretzelpy,63033012,MDQ6VXNlcjYzMDMzMDEy,https://avatars.githubusercontent.com/u/63033012?v=4,,https://api.github.com/users/pretzelpy,https://github.com/pretzelpy,https://api.github.com/users/pretzelpy/followers,https://api.github.com/users/pretzelpy/following{/other_user},https://api.github.com/users/pretzelpy/gists{/gist_id},https://api.github.com/users/pretzelpy/starred{/owner}{/repo},https://api.github.com/users/pretzelpy/subscriptions,https://api.github.com/users/pretzelpy/orgs,https://api.github.com/users/pretzelpy/repos,https://api.github.com/users/pretzelpy/events{/privacy},https://api.github.com/users/pretzelpy/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713868199/reactions,0,0,0,0,0,0,0,0,0,28
30,https://api.github.com/repos/rapidsai/cudf/issues/comments/433257255,https://github.com/rapidsai/cudf/issues/581#issuecomment-433257255,https://api.github.com/repos/rapidsai/cudf/issues/581,433257255,MDEyOklzc3VlQ29tbWVudDQzMzI1NzI1NQ==,2018-10-26T01:31:56Z,2018-10-26T01:31:56Z,MEMBER,Do the clang tools work with nvcc? Much of our template time is in nvcc. You can use `nvcc --time foo.csv` to dump timing for different nvcc phases.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/433257255/reactions,0,0,0,0,0,0,0,0,0,581
31,https://api.github.com/repos/rapidsai/cudf/issues/comments/433259031,https://github.com/rapidsai/cudf/issues/581#issuecomment-433259031,https://api.github.com/repos/rapidsai/cudf/issues/581,433259031,MDEyOklzc3VlQ29tbWVudDQzMzI1OTAzMQ==,2018-10-26T01:43:53Z,2018-10-26T01:43:53Z,CONTRIBUTOR,"I'm not sure. You can technically get Clang to compile device code, so that may be a path worth exploring using Clang + these tools.",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/433259031/reactions,0,0,0,0,0,0,0,0,0,581
32,https://api.github.com/repos/rapidsai/cudf/issues/comments/643120167,https://github.com/rapidsai/cudf/issues/581#issuecomment-643120167,https://api.github.com/repos/rapidsai/cudf/issues/581,643120167,MDEyOklzc3VlQ29tbWVudDY0MzEyMDE2Nw==,2020-06-12T07:34:21Z,2020-06-12T07:34:21Z,CONTRIBUTOR,Any updates on this? I'd love to use precompiled headers with CUDA projects.,,hcho3,2532981,MDQ6VXNlcjI1MzI5ODE=,https://avatars.githubusercontent.com/u/2532981?v=4,,https://api.github.com/users/hcho3,https://github.com/hcho3,https://api.github.com/users/hcho3/followers,https://api.github.com/users/hcho3/following{/other_user},https://api.github.com/users/hcho3/gists{/gist_id},https://api.github.com/users/hcho3/starred{/owner}{/repo},https://api.github.com/users/hcho3/subscriptions,https://api.github.com/users/hcho3/orgs,https://api.github.com/users/hcho3/repos,https://api.github.com/users/hcho3/events{/privacy},https://api.github.com/users/hcho3/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/643120167/reactions,0,0,0,0,0,0,0,0,0,581
33,https://api.github.com/repos/rapidsai/cudf/issues/comments/643846503,https://github.com/rapidsai/cudf/issues/581#issuecomment-643846503,https://api.github.com/repos/rapidsai/cudf/issues/581,643846503,MDEyOklzc3VlQ29tbWVudDY0Mzg0NjUwMw==,2020-06-15T00:34:27Z,2020-06-15T00:34:27Z,MEMBER,"Compile time continues to grow, but that is largely because our supported feature set and supported types continue to grow.  In 0.15 we are aiming to add at least 10 new types (4 unsigned int types, 4 timestamp types, list column type, decimal fixed-point type). Naturally this will increase compile time and binary size.

Meanwhile, in 0.14 we dropped all of the legacy APIs that were previously deprecated, which reduced compile time a bit, and significantly reduced binary size.  There have been and will continue to be various efforts to reduce compile time  of  certain components. We are investigating possibly splitting libcudf into multiple libraries.

We have not discussed precompiled headers. ",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/643846503/reactions,0,0,0,0,0,0,0,0,0,581
34,https://api.github.com/repos/rapidsai/cudf/issues/comments/885801315,https://github.com/rapidsai/cudf/issues/581#issuecomment-885801315,https://api.github.com/repos/rapidsai/cudf/issues/581,885801315,IC_kwDOBWUGps40zEFj,2021-07-23T17:50:02Z,2021-07-23T17:50:02Z,MEMBER,"@jrhemstad @harrism , is this still a relevant issue?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/885801315/reactions,0,0,0,0,0,0,0,0,0,581
35,https://api.github.com/repos/rapidsai/cudf/issues/comments/885952051,https://github.com/rapidsai/cudf/issues/581#issuecomment-885952051,https://api.github.com/repos/rapidsai/cudf/issues/581,885952051,IC_kwDOBWUGps40zo4z,2021-07-23T22:56:00Z,2021-07-23T22:56:00Z,CONTRIBUTOR,"Our compile time is worse than ever, so I guess its still relevant. We could benefit from someone putting in a concerted effort to eliminate unnecessary includes across the library. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/885952051/reactions,0,0,0,0,0,0,0,0,0,581
36,https://api.github.com/repos/rapidsai/cudf/issues/comments/1358745046,https://github.com/rapidsai/cudf/issues/581#issuecomment-1358745046,https://api.github.com/repos/rapidsai/cudf/issues/581,1358745046,IC_kwDOBWUGps5Q_M3W,2022-12-20T02:12:26Z,2022-12-21T04:41:25Z,CONTRIBUTOR,"> I'm not sure. You can technically get Clang to compile device code, so that may be a path worth exploring using Clang + these tools.

Out of curiosity I gave this a quick shot. (Unsurprisingly) clang does not currently support the experimental CUDA features that we have enabled (`--expt-extended-lambda --expt-relaxed-constexpr`) so the compilation terminates pretty quickly. Not sure if there are other downstream issues that we would face if we attempted this after stripping those out (not suggesting that we should, although #7795 remains open so maybe it is worth pursuing).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1358745046/reactions,0,0,0,0,0,0,0,0,0,581
37,https://api.github.com/repos/rapidsai/cudf/issues/comments/1361630988,https://github.com/rapidsai/cudf/issues/581#issuecomment-1361630988,https://api.github.com/repos/rapidsai/cudf/issues/581,1361630988,IC_kwDOBWUGps5RKNcM,2022-12-21T16:34:21Z,2022-12-21T16:34:21Z,CONTRIBUTOR,"> clang does not currently support the experimental CUDA features that we have enabled (--expt-extended-lambda --expt-relaxed-constexpr)

Pretty sure clang supports those features natively without the need for any extra compile flags. I'm guessing the error was caused by clang not recognizing those flags. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1361630988/reactions,0,0,0,0,0,0,0,0,0,581
38,https://api.github.com/repos/rapidsai/cudf/issues/comments/1361907257,https://github.com/rapidsai/cudf/issues/581#issuecomment-1361907257,https://api.github.com/repos/rapidsai/cudf/issues/581,1361907257,IC_kwDOBWUGps5RLQ45,2022-12-21T18:58:41Z,2023-01-09T21:57:28Z,CONTRIBUTOR,"You're right, it does. I removed those and made some progress, but not nearly enough for a working build with clang yet. Here's a list of necessary changes so far:
- Remove all `CUDF_CUDA_FLAGS` set in ConfigureCUDA.cmake. Most are either unsupported or ignored (including some of the warnings flags), so the blanket removal is easiest.
- Remove `[[nodiscard]]` attributes, which don't appear to be supported in clang device code yet.
- Set `-D__STRICT_ANSI__` as a CUDA compiler flag. Otherwise it tries to compile float128 code, which is not yet supported in clang.
- Pass `-fcuda-allow-variadic-functions` to the clang compiler (or via the CMake configure CLI `-DCMAKE_CUDA_FLAGS=""-Xclang -fcuda-allow-variadic-functions""`

At this point I start seeing failures like this:
```
...type_traits:2777:5: error: no type named 'type' in 'std::invoke_result<cudf::detail::indexalator_factory::nullable_index_accessor, int>'
```
and 
```
error: type 'thrust::transform_iterator<(lambda at ...gather.cu:49:26), cudf::detail::input_indexalator>::super_t' (aka 'iterator_adaptor<transform_iterator<(lambda at ...gather.cu:49:26), cudf::detail::input_indexalator, thrust::use_default, thrust::use_default>, cudf::detail::input_indexalator, int, thrust::use_default, std::random_access_iterator_tag, int>') is not a direct or virtual base of 'thrust::transform_iterator<(lambda at ...gather.cu:49:26), cudf::detail::input_indexalator>'
```
I need to track this down a bit further, but it looks like some aspect of how thrust SFINAEs different code paths isn't supported in clang device code yet either.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1361907257/reactions,0,0,0,0,0,0,0,0,0,581
39,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362133285,https://github.com/rapidsai/cudf/issues/581#issuecomment-1362133285,https://api.github.com/repos/rapidsai/cudf/issues/581,1362133285,IC_kwDOBWUGps5RMIEl,2022-12-21T21:46:13Z,2022-12-21T22:25:49Z,MEMBER,"I tried to build cuco with clang about a year ago and was blocked by its dependencies like thrust or libcudacxx that cannot be built with clang. To find how much effort is required to build device code with clang, I would suggest starting with a smaller library like cuco and see how it goes from there.

Related issues:

- https://github.com/NVIDIA/cccl/issues/991
- https://github.com/NVIDIA/cuCollections/issues/128",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362133285/reactions,0,0,0,0,0,0,0,0,0,581
40,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362178669,https://github.com/rapidsai/cudf/issues/581#issuecomment-1362178669,https://api.github.com/repos/rapidsai/cudf/issues/581,1362178669,IC_kwDOBWUGps5RMTJt,2022-12-21T22:24:41Z,2022-12-21T22:27:01Z,CONTRIBUTOR,"Well then... looks like we've got to work our way all the way up the stack for this. For the purpose of something like clang-tidy we might be able to get some partial results based on the discussion in https://github.com/rapidsai/raft/pull/424, but that's probably only partial support at best and I don't know if that will work with the other tools of interest like IWYU.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362178669/reactions,0,0,0,0,0,0,0,0,0,581
41,https://api.github.com/repos/rapidsai/cudf/issues/comments/449155853,https://github.com/rapidsai/cudf/issues/584#issuecomment-449155853,https://api.github.com/repos/rapidsai/cudf/issues/584,449155853,MDEyOklzc3VlQ29tbWVudDQ0OTE1NTg1Mw==,2018-12-20T22:27:58Z,2018-12-20T22:27:58Z,CONTRIBUTOR,Duplicate https://github.com/rapidsai/cudf/issues/479,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/449155853/reactions,0,0,0,0,0,0,0,0,0,584
42,https://api.github.com/repos/rapidsai/cudf/issues/comments/893868368,https://github.com/rapidsai/cudf/issues/584#issuecomment-893868368,https://api.github.com/repos/rapidsai/cudf/issues/584,893868368,IC_kwDOBWUGps41R1lQ,2021-08-05T22:45:20Z,2021-08-05T22:45:20Z,CONTRIBUTOR,"@jrhemstad @harrism Now that we've merged rapidsai#6695 I think there is interest in enabling clang-tidy on the libcudf code base so I'm reopening this issue. If we'd prefer to consolidate discussion on #479 we can close this again and reopen that, but offhand it seems like #479 grew into a much more involved discussion about defining a style guide and enabling clang-tidy with some minimal configuration seems like a simpler goal to start with.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/893868368/reactions,0,0,0,0,0,0,0,0,0,584
43,https://api.github.com/repos/rapidsai/cudf/issues/comments/896525904,https://github.com/rapidsai/cudf/issues/584#issuecomment-896525904,https://api.github.com/repos/rapidsai/cudf/issues/584,896525904,IC_kwDOBWUGps41b-ZQ,2021-08-11T06:01:03Z,2021-08-11T06:01:03Z,MEMBER,Agree! @teju85 is interested in having a shared cross-rapids clang-tidy config. This makes sense as we have more or less converged on a shared RAPIDS clang-format config. ,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/896525904/reactions,0,0,0,0,0,0,0,0,0,584
44,https://api.github.com/repos/rapidsai/cudf/issues/comments/896535229,https://github.com/rapidsai/cudf/issues/584#issuecomment-896535229,https://api.github.com/repos/rapidsai/cudf/issues/584,896535229,IC_kwDOBWUGps41cAq9,2021-08-11T06:21:52Z,2021-08-11T06:21:52Z,MEMBER,"Thank you Mark for adding me to this discussion. Yes, I'm certainly interested in a more uniform tidy config across RAPIDS!

BTW, we already have clang-tidy running as part of CI for cuml for almost a year now (though not super stringent, yet). cuML CI is [here](https://github.com/rapidsai/cuml/blob/branch-21.10/ci/checks/style.sh#L92). However, when it was introduced, we were at clang v8.0.1 which wasn't particularly great with .cu/.cuh files! So, the [tidy wrapper script](https://github.com/rapidsai/cuml/blob/branch-21.10/cpp/scripts/run-clang-tidy.py) had to take in a bunch of hacks :(. If someone can pick up this flow, improve and generalize it for RAPIDS-wide usage, that'd be awesome.

Finally, I'm not particularly attached to these scripts or a particular style (eg: google, cpp-core, etc) and will happily accept if there's a better solution for RAPIDS. However, I'd like for atleast all the key devs to be involved and their requirements heard before finalizing on a tidy style guide. Because in my personal opinion, tidying has a bigger benefit in terms of code uniformity and readability, especially for folks working across RAPIDS projects.",,teju85,532947,MDQ6VXNlcjUzMjk0Nw==,https://avatars.githubusercontent.com/u/532947?v=4,,https://api.github.com/users/teju85,https://github.com/teju85,https://api.github.com/users/teju85/followers,https://api.github.com/users/teju85/following{/other_user},https://api.github.com/users/teju85/gists{/gist_id},https://api.github.com/users/teju85/starred{/owner}{/repo},https://api.github.com/users/teju85/subscriptions,https://api.github.com/users/teju85/orgs,https://api.github.com/users/teju85/repos,https://api.github.com/users/teju85/events{/privacy},https://api.github.com/users/teju85/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/896535229/reactions,1,1,0,0,0,0,0,0,0,584
45,https://api.github.com/repos/rapidsai/cudf/issues/comments/896535895,https://github.com/rapidsai/cudf/issues/584#issuecomment-896535895,https://api.github.com/repos/rapidsai/cudf/issues/584,896535895,IC_kwDOBWUGps41cA1X,2021-08-11T06:23:15Z,2021-08-11T06:23:15Z,MEMBER,"JFYI, there's a similar [wrapper script in raft](https://github.com/rapidsai/raft/blob/branch-21.10/cpp/scripts/run-clang-tidy.py), but has not yet been added to CI workflow.",,teju85,532947,MDQ6VXNlcjUzMjk0Nw==,https://avatars.githubusercontent.com/u/532947?v=4,,https://api.github.com/users/teju85,https://github.com/teju85,https://api.github.com/users/teju85/followers,https://api.github.com/users/teju85/following{/other_user},https://api.github.com/users/teju85/gists{/gist_id},https://api.github.com/users/teju85/starred{/owner}{/repo},https://api.github.com/users/teju85/subscriptions,https://api.github.com/users/teju85/orgs,https://api.github.com/users/teju85/repos,https://api.github.com/users/teju85/events{/privacy},https://api.github.com/users/teju85/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/896535895/reactions,0,0,0,0,0,0,0,0,0,584
46,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181038091,https://github.com/rapidsai/cudf/issues/584#issuecomment-1181038091,https://api.github.com/repos/rapidsai/cudf/issues/584,1181038091,IC_kwDOBWUGps5GZTYL,2022-07-11T23:11:46Z,2022-07-11T23:11:46Z,CONTRIBUTOR,"@codereport would #10064 close this? We can always add more rules a la #10174 later as we decide that they are useful. Is there a reason we closed those PRs, or are they worth someone picking up?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181038091/reactions,0,0,0,0,0,0,0,0,0,584
47,https://api.github.com/repos/rapidsai/cudf/issues/comments/1324116921,https://github.com/rapidsai/cudf/issues/584#issuecomment-1324116921,https://api.github.com/repos/rapidsai/cudf/issues/584,1324116921,IC_kwDOBWUGps5O7Gu5,2022-11-22T18:58:09Z,2022-11-22T18:58:09Z,CONTRIBUTOR,I would like to pick up the work in #10064 after we've completed #12002,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1324116921/reactions,2,2,0,0,0,0,0,0,0,584
48,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325462625,https://github.com/rapidsai/cudf/issues/584#issuecomment-1325462625,https://api.github.com/repos/rapidsai/cudf/issues/584,1325462625,IC_kwDOBWUGps5PAPRh,2022-11-23T18:02:49Z,2022-11-23T18:02:49Z,CONTRIBUTOR,"As a first step I would prioritize finding a way to run clang-tidy in CI. PRs that fix clang-tidy errors are nice, but we inevitably accumulate more without CI checking for us.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325462625/reactions,0,0,0,0,0,0,0,0,0,584
49,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371646273,https://github.com/rapidsai/cudf/issues/584#issuecomment-1371646273,https://api.github.com/repos/rapidsai/cudf/issues/584,1371646273,IC_kwDOBWUGps5RwalB,2023-01-05T01:48:02Z,2023-01-05T01:53:36Z,CONTRIBUTOR,"Based on what I found in #581, I think getting this working is going to first involve expending significant effort in ensuring that all of our dependencies compile with clang to start with. I know that cuML is already running clang-tidy, but they also have significant logic built around wrapping the clang-tidy invocation so I assume that they are also doing some preprocessing to only lint the files that they can compile. I could be wrong, though, and perhaps there's a simpler path here.

EDIT: It looks like [cuML is skipping cu files altogether](https://github.com/rapidsai/cuml/blob/branch-23.02/cpp/scripts/run-clang-tidy.py#L43).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371646273/reactions,0,0,0,0,0,0,0,0,0,584
50,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401320271,https://github.com/rapidsai/cudf/issues/584#issuecomment-1401320271,https://api.github.com/repos/rapidsai/cudf/issues/584,1401320271,IC_kwDOBWUGps5ThnNP,2023-01-24T02:31:10Z,2023-01-24T02:31:10Z,MEMBER,Clang can compile .cu files. Otherwise clangd intellisense wouldn't work.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401320271/reactions,0,0,0,0,0,0,0,0,0,584
51,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401453047,https://github.com/rapidsai/cudf/issues/584#issuecomment-1401453047,https://api.github.com/repos/rapidsai/cudf/issues/584,1401453047,IC_kwDOBWUGps5TiHn3,2023-01-24T06:31:01Z,2023-01-24T06:31:01Z,CONTRIBUTOR,"Clang can compile cu files, but there are various headers in libcu++/thrust/cuco/etc that compile under nvcc but not clang (for various reasons). I don't use Intellisense so I can't say exactly what is currently working and what isn't, perhaps it just skips TUs that don't compile.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401453047/reactions,1,1,0,0,0,0,0,0,0,584
52,https://api.github.com/repos/rapidsai/cudf/issues/comments/466549076,https://github.com/rapidsai/cudf/issues/627#issuecomment-466549076,https://api.github.com/repos/rapidsai/cudf/issues/627,466549076,MDEyOklzc3VlQ29tbWVudDQ2NjU0OTA3Ng==,2019-02-22T21:10:40Z,2019-02-22T21:10:40Z,COLLABORATOR,"Increasing

```python
In [1]: %time import cudf
CPU times: user 556 ms, sys: 204 ms, total: 760 ms
Wall time: 3.39 s
```",,mrocklin,306380,MDQ6VXNlcjMwNjM4MA==,https://avatars.githubusercontent.com/u/306380?v=4,,https://api.github.com/users/mrocklin,https://github.com/mrocklin,https://api.github.com/users/mrocklin/followers,https://api.github.com/users/mrocklin/following{/other_user},https://api.github.com/users/mrocklin/gists{/gist_id},https://api.github.com/users/mrocklin/starred{/owner}{/repo},https://api.github.com/users/mrocklin/subscriptions,https://api.github.com/users/mrocklin/orgs,https://api.github.com/users/mrocklin/repos,https://api.github.com/users/mrocklin/events{/privacy},https://api.github.com/users/mrocklin/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/466549076/reactions,0,0,0,0,0,0,0,0,0,627
53,https://api.github.com/repos/rapidsai/cudf/issues/comments/466549362,https://github.com/rapidsai/cudf/issues/627#issuecomment-466549362,https://api.github.com/repos/rapidsai/cudf/issues/627,466549362,MDEyOklzc3VlQ29tbWVudDQ2NjU0OTM2Mg==,2019-02-22T21:11:40Z,2019-02-22T21:11:40Z,COLLABORATOR,"Looking at the profile it looks like we're doing a lot of odd things at import time

```
         367424 function calls (356126 primitive calls) in 3.046 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      572    0.610    0.001    0.621    0.001 <frozen importlib._bootstrap_external>:914(get_data)
     3250    0.605    0.000    0.605    0.000 {built-in method posix.stat}
        3    0.573    0.191    0.573    0.191 {method 'read' of '_io.BufferedReader' objects}
      599    0.296    0.000    0.296    0.000 {built-in method io.open}
      597    0.256    0.000    0.256    0.000 {method 'close' of '_io.BufferedReader' objects}
    74/73    0.079    0.001    0.082    0.001 {built-in method _imp.create_dynamic}
      572    0.076    0.000    0.076    0.000 {built-in method marshal.loads}
        1    0.040    0.040    0.041    0.041 nvvm.py:106(__new__)
       82    0.039    0.000    0.039    0.000 {built-in method posix.listdir}
2000/1992    0.028    0.000    0.075    0.000 {built-in method builtins.__build_class__}
      547    0.019    0.000    0.019    0.000 ffi.py:106(__call__)
        2    0.017    0.008    0.017    0.008 {method 'dlopen' of 'CompiledFFI' objects}
    74/59    0.015    0.000    0.901    0.015 {built-in method _imp.exec_dynamic}
      921    0.015    0.000    0.015    0.000 {method 'sub' of 're.Pattern' objects}
      613    0.013    0.000    0.013    0.000 {method 'findall' of 're.Pattern' objects}
      572    0.011    0.000    0.011    0.000 {method 'read' of '_io.FileIO' objects}
     1093    0.010    0.000    0.400    0.000 <frozen importlib._bootstrap_external>:1356(find_spec)
        7    0.009    0.001    0.009    0.001 {built-in method posix.read}
        4    0.009    0.002    0.009    0.002 {built-in method _posixsubprocess.fork_exec}
      572    0.009    0.000    0.732    0.001 <frozen importlib._bootstrap_external>:793(get_code)
        1    0.008    0.008    0.008    0.008 {method 'dot' of 'numpy.ndarray' objects}
      211    0.008    0.000    0.008    0.000 sre_compile.py:276(_optimize_charset)
      820    0.007    0.000    0.421    0.001 <frozen importlib._bootstrap>:882(_find_spec)
      592    0.006    0.000    0.586    0.001 __init__.py:78(open_resource)
        4    0.006    0.001    0.006    0.001 {built-in method _ctypes.dlopen}
     8994    0.006    0.000    0.006    0.000 {built-in method builtins.hasattr}
```",,mrocklin,306380,MDQ6VXNlcjMwNjM4MA==,https://avatars.githubusercontent.com/u/306380?v=4,,https://api.github.com/users/mrocklin,https://github.com/mrocklin,https://api.github.com/users/mrocklin/followers,https://api.github.com/users/mrocklin/following{/other_user},https://api.github.com/users/mrocklin/gists{/gist_id},https://api.github.com/users/mrocklin/starred{/owner}{/repo},https://api.github.com/users/mrocklin/subscriptions,https://api.github.com/users/mrocklin/orgs,https://api.github.com/users/mrocklin/repos,https://api.github.com/users/mrocklin/events{/privacy},https://api.github.com/users/mrocklin/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/466549362/reactions,0,0,0,0,0,0,0,0,0,627
54,https://api.github.com/repos/rapidsai/cudf/issues/comments/610422968,https://github.com/rapidsai/cudf/issues/627#issuecomment-610422968,https://api.github.com/repos/rapidsai/cudf/issues/627,610422968,MDEyOklzc3VlQ29tbWVudDYxMDQyMjk2OA==,2020-04-07T14:34:12Z,2020-04-07T14:34:12Z,CONTRIBUTOR,Profiled this a bit today and on my end it seems like the issue is inside `cudf._cuda.gpu.getDeviceCount()`. ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/610422968/reactions,0,0,0,0,0,0,0,0,0,627
55,https://api.github.com/repos/rapidsai/cudf/issues/comments/610445094,https://github.com/rapidsai/cudf/issues/627#issuecomment-610445094,https://api.github.com/repos/rapidsai/cudf/issues/627,610445094,MDEyOklzc3VlQ29tbWVudDYxMDQ0NTA5NA==,2020-04-07T15:12:23Z,2020-04-07T15:12:23Z,CONTRIBUTOR,"> Profiled this a bit today and on my end it seems like the issue is inside `cudf._cuda.gpu.getDeviceCount()`.

I doubt that problem is with that function. My guess is that's just the first function that invokes a CUDA runtime API which initializes the context and other first time setup stuff. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/610445094/reactions,3,3,0,0,0,0,0,0,0,627
56,https://api.github.com/repos/rapidsai/cudf/issues/comments/610448068,https://github.com/rapidsai/cudf/issues/627#issuecomment-610448068,https://api.github.com/repos/rapidsai/cudf/issues/627,610448068,MDEyOklzc3VlQ29tbWVudDYxMDQ0ODA2OA==,2020-04-07T15:17:40Z,2020-04-07T15:17:40Z,COLLABORATOR,"> Profiled this a bit today and on my end it seems like the issue is inside `cudf._cuda.gpu.getDeviceCount()`.

Could you dump the profile here by any chance?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/610448068/reactions,0,0,0,0,0,0,0,0,0,627
57,https://api.github.com/repos/rapidsai/cudf/issues/comments/610474111,https://github.com/rapidsai/cudf/issues/627#issuecomment-610474111,https://api.github.com/repos/rapidsai/cudf/issues/627,610474111,MDEyOklzc3VlQ29tbWVudDYxMDQ3NDExMQ==,2020-04-07T16:02:22Z,2020-04-07T16:05:05Z,CONTRIBUTOR,"Here's the top piece of the profile.

```
         785450 function calls (763821 primitive calls) in 5.156 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    3.047    3.047    3.047    3.047 {cudf._cuda.gpu.getDeviceCount}
      120    0.358    0.003    0.358    0.003 {method 'read' of '_io.BufferedReader' objects}
      945    0.293    0.000    0.307    0.000 <frozen importlib._bootstrap_external>:914(get_data)
     5895    0.280    0.000    0.280    0.000 {built-in method posix.stat}
  204/202    0.143    0.001    0.146    0.001 {built-in method _imp.create_dynamic}
      945    0.109    0.000    0.109    0.000 {built-in method marshal.loads}
      506    0.089    0.000    0.089    0.000 {built-in method posix.listdir}
  204/130    0.045    0.000    0.161    0.001 {built-in method _imp.exec_dynamic}
2851/2818    0.038    0.000    0.133    0.000 {built-in method builtins.__build_class__}
        4    0.025    0.006    0.025    0.006 {built-in method _ctypes.dlopen}
      518    0.024    0.000    0.024    0.000 {built-in method builtins.compile}
     1826    0.016    0.000    0.312    0.000 <frozen importlib._bootstrap_external>:1356(find_spec)
      561    0.015    0.000    0.015    0.000 ffi.py:112(__call__)
      132    0.015    0.000    0.015    0.000 {built-in method io.open}
     1145    0.014    0.000    0.014    0.000 {method 'sub' of 're.Pattern' objects}
      945    0.014    0.000    0.014    0.000 {method 'read' of '_io.FileIO' objects}
        8    0.013    0.002    0.013    0.002 {built-in method posix.read}
  805/193    0.013    0.000    0.035    0.000 sre_parse.py:469(_parse)
        5    0.012    0.002    0.012    0.002 {built-in method _posixsubprocess.fork_exec}
      945    0.011    0.000    0.460    0.000 <frozen importlib._bootstrap_external>:793(get_code)
      614    0.010    0.000    0.012    0.000 sre_compile.py:276(_optimize_charset)
      501    0.010    0.000    0.010    0.000 {method 'findall' of 're.Pattern' objects}
     1215    0.009    0.000    0.333    0.000 <frozen importlib._bootstrap>:882(_find_spec)
16074/16069    0.008    0.000    0.008    0.000 {built-in method builtins.hasattr}
    10147    0.008    0.000    0.020    0.000 <frozen importlib._bootstrap_external>:56(_path_join)
    18447    0.008    0.000    0.009    0.000 {built-in method builtins.getattr}
   1343/1    0.007    0.000    5.158    5.158 {built-in method builtins.exec}
     1578    0.007    0.000    0.021    0.000 version.py:198(__init__)
      114    0.007    0.000    0.021    0.000 __init__.py:1617(_get)
     3039    0.007    0.000    0.010    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)
        5    0.007    0.001    0.007    0.001 {built-in method posix.waitpid}
        3    0.007    0.002    0.008    0.003 six.py:1(<module>)
    51125    0.007    0.000    0.008    0.000 {built-in method builtins.isinstance}
     1890    0.007    0.000    0.015    0.000 <frozen importlib._bootstrap_external>:271(cache_from_source)
15643/15615    0.007    0.000    0.011    0.000 abstract.py:121(__hash__)
    10147    0.007    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:58(<listcomp>)
     2850    0.006    0.000    0.006    0.000 {built-in method __new__ of type object at 0x55ed34c9f240}
      349    0.006    0.000    0.007    0.000 templates.py:614(make_overload_template)
   1239/1    0.006    0.000    5.158    5.158 <frozen importlib._bootstrap>:978(_find_and_load)
     3039    0.006    0.000    0.006    0.000 <frozen importlib._bootstrap>:78(acquire)
   1173/1    0.006    0.000    5.157    5.157 <frozen importlib._bootstrap>:663(_load_unlocked)
    18919    0.006    0.000    0.006    0.000 sre_parse.py:233(__next)
     1161    0.005    0.000    0.026    0.000 <frozen importlib._bootstrap>:504(_init_module_attrs)
 1337/180    0.005    0.000    0.018    0.000 sre_compile.py:71(_compile)
   1239/1    0.005    0.000    5.158    5.158 <frozen importlib._bootstrap>:948(_find_and_load_unlocked)
14699/14694    0.005    0.000    0.006    0.000 {method 'join' of 'str' objects}
       40    0.005    0.000    0.023    0.001 castgraph.py:94(propagate)
     3039    0.005    0.000    0.005    0.000 <frozen importlib._bootstrap>:103(release)
     1149    0.005    0.000    0.006    0.000 <frozen importlib._bootstrap_external>:574(spec_from_file_location)
 6132/741    0.004    0.000    1.570    0.002 <frozen importlib._bootstrap>:1009(_handle_fromlist)
    31763    0.004    0.000    0.004    0.000 {method 'startswith' of 'str' objects}
    10345    0.004    0.000    0.004    0.000 <frozen importlib._bootstrap>:222(_verbose_message)
     1208    0.004    0.000    0.317    0.000 <frozen importlib._bootstrap_external>:1240(_get_spec)
    16689    0.004    0.000    0.009    0.000 sre_parse.py:254(get)
       42    0.004    0.000    0.008    0.000 enum.py:135(__new__)
       77    0.004    0.000    0.009    0.000 __init__.py:316(namedtuple)
      790    0.003    0.000    0.004    0.000 version.py:343(_cmpkey)
     1607    0.003    0.000    0.003    0.000 {method 'search' of 're.Pattern' objects}
      945    0.003    0.000    0.005    0.000 <frozen importlib._bootstrap_external>:438(_classify_pyc)
    10024    0.003    0.000    0.003    0.000 {method 'rpartition' of 'str' objects}
    945/1    0.003    0.000    5.157    5.157 <frozen importlib._bootstrap_external>:722(exec_module)
      945    0.003    0.000    0.115    0.000 <frozen importlib._bootstrap_external>:523(_compile_bytecode)
     2487    0.003    0.000    0.227    0.000 <frozen importlib._bootstrap_external>:84(_path_is_mode_type)
    13657    0.003    0.000    0.006    0.000 {method 'get' of 'dict' objects}
23704/22175    0.003    0.000    0.003    0.000 {built-in method builtins.len}
2986/2855    0.003    0.000    0.004    0.000 {method 'format' of 'str' objects}
      680    0.003    0.000    0.150    0.000 __init__.py:2126(distributions_from_metadata)
    22762    0.003    0.000    0.003    0.000 {method 'rstrip' of 'str' objects}
     9152    0.003    0.000    0.004    0.000 sre_parse.py:164(__getitem__)
     5258    0.003    0.000    0.250    0.000 <frozen importlib._bootstrap_external>:74(_path_stat)
      689    0.003    0.000    0.003    0.000 functions.py:87(__init__)
     1149    0.003    0.000    0.010    0.000 <frozen importlib._bootstrap_external>:1351(_get_spec)
     1161    0.003    0.000    0.005    0.000 <frozen importlib._bootstrap>:318(__exit__)
    29445    0.003    0.000    0.003    0.000 {method 'append' of 'list' objects}
    17714    0.003    0.000    0.003    0.000 abstract.py:99(key)
1161/1158    0.003    0.000    0.177    0.000 <frozen importlib._bootstrap>:576(module_from_spec)
      346    0.003    0.000    0.063    0.000 __init__.py:2585(from_location)
 1568/435    0.003    0.000    0.003    0.000 sre_parse.py:174(getwidth)
      501    0.003    0.000    0.029    0.000 textwrap.py:414(dedent)
     1154    0.003    0.000    0.069    0.000 re.py:271(_compile)
        2    0.002    0.001    0.002    0.001 {method 'poll' of 'select.poll' objects}
     3626    0.002    0.000    0.004    0.000 typing.py:704(__setattr__)
      776    0.002    0.000    0.004    0.000 functools.py:37(update_wrapper)
     7138    0.002    0.000    0.003    0.000 {built-in method builtins.setattr}
      788    0.002    0.000    0.006    0.000 version.py:131(_legacy_cmpkey)
     1800    0.002    0.000    0.010    0.000 <frozen importlib._bootstrap>:194(_lock_unlock_module)
      131    0.002    0.000    0.003    0.000 templates.py:816(make_overload_attribute_template)
      923    0.002    0.000    0.003    0.000 posixpath.py:75(join)
18763/18019    0.002    0.000    0.002    0.000 {built-in method builtins.hash}
     1149    0.002    0.000    0.012    0.000 <frozen importlib._bootstrap_external>:369(_get_cached)
      150    0.002    0.000    0.005    0.000 <frozen importlib._bootstrap_external>:1190(_path_hooks)
      945    0.002    0.000    0.002    0.000 {built-in method _imp._fix_co_filename}
     3092    0.002    0.000    0.003    0.000 {built-in method builtins.any}
     2519    0.002    0.000    0.003    0.000 <frozen importlib._bootstrap>:416(parent)
     4454    0.002    0.000    0.002    0.000 {method 'match' of 're.Pattern' objects}
     1890    0.002    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:62(_path_split)
     2032    0.002    0.000    0.007    0.000 castgraph.py:41(insert)
  580/180    0.002    0.000    0.036    0.000 sre_parse.py:411(_parse_sub)
      481    0.002    0.000    0.007    0.000 typing.py:603(__init__)
     3434    0.002    0.000    0.003    0.000 version.py:114(_parse_version_parts)
     8269    0.002    0.000    0.002    0.000 {method 'group' of 're.Match' objects}
     2835    0.002    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:51(_r_long)
     2094    0.002    0.000    0.014    0.000 <frozen importlib._bootstrap>:403(cached)
      454    0.002    0.000    0.019    0.000 __init__.py:1327(safe_version)
     1226    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:176(cb)
2306/2299    0.002    0.000    0.002    0.000 abstract.py:124(__eq__)
     3816    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:859(__exit__)
      960    0.001    0.000    0.004    0.000 typing.py:113(_type_check)
      612    0.001    0.000    0.002    0.000 _inspect.py:67(getargs)
     4435    0.001    0.000    0.001    0.000 {method 'endswith' of 'str' objects}
     2215    0.001    0.000    0.227    0.000 <frozen importlib._bootstrap_external>:93(_path_isfile)
   706/50    0.001    0.000    1.575    0.031 {built-in method builtins.__import__}
     1226    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap>:58(__init__)
  680/342    0.001    0.000    0.002    0.000 {built-in method _abc._abc_subclasscheck}
     1025    0.001    0.000    0.001    0.000 {method 'split' of 're.Pattern' objects}
       75    0.001    0.000    1.800    0.024 __init__.py:1(<module>)
     1239    0.001    0.000    0.012    0.000 <frozen importlib._bootstrap>:147(__enter__)
  152/132    0.001    0.000    0.023    0.000 {built-in method builtins.sorted}
1410/1302    0.001    0.000    0.018    0.000 typing.py:248(inner)
     4300    0.001    0.000    0.002    0.000 version.py:65(_compare)
  818/815    0.001    0.000    0.009    0.000 abstract.py:63(__call__)
      945    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:471(_validate_timestamp_pyc)
     6786    0.001    0.000    0.001    0.000 {built-in method posix.fspath}
     5184    0.001    0.000    0.001    0.000 {built-in method builtins.min}
     8223    0.001    0.000    0.001    0.000 {built-in method _imp.acquire_lock}
     1910    0.001    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:1203(_path_importer_cache)
     1388    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:369(__init__)
      346    0.001    0.000    0.003    0.000 __init__.py:686(add)
      279    0.001    0.000    0.001    0.000 {built-in method _abc._abc_init}
     1208    0.001    0.000    0.318    0.000 <frozen importlib._bootstrap_external>:1272(find_spec)
      950    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:35(_new_module)
     3118    0.001    0.000    0.001    0.000 version.py:207(<genexpr>)
      454    0.001    0.000    0.003    0.000 version.py:236(__str__)
      886    0.001    0.000    0.002    0.000 __init__.py:2644(key)
     2921    0.001    0.000    0.001    0.000 {built-in method from_bytes}
      286    0.001    0.000    0.005    0.000 overrides.py:72(verify_matching_signatures)
   1768/1    0.001    0.000    5.156    5.156 <frozen importlib._bootstrap>:211(_call_with_frames_removed)
     8223    0.001    0.000    0.001    0.000 {built-in method _imp.release_lock}
      818    0.001    0.000    0.004    0.000 abstract.py:51(_intern)
      945    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:401(_check_name_wrapper)
      590    0.001    0.000    0.041    0.000 __init__.py:2772(_get_metadata)
      496    0.001    0.000    0.002    0.000 posixpath.py:154(dirname)
      349    0.001    0.000    0.002    0.000 extending.py:57(overload)
      584    0.001    0.000    0.002    0.000 enum.py:70(__setitem__)
  344/238    0.001    0.000    0.009    0.000 typing.py:340(__getitem__)
     3626    0.001    0.000    0.002    0.000 typing.py:590(_is_dunder)
       66    0.001    0.000    0.001    0.000 templates.py:667(make_intrinsic_template)
     3816    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:855(__enter__)
      349    0.001    0.000    0.012    0.000 extending.py:111(decorate)
     1124    0.001    0.000    0.015    0.000 version.py:24(parse)
       62    0.001    0.000    0.001    0.000 {built-in method cupy.core._kernel.create_ufunc}
      360    0.001    0.000    0.180    0.000 __init__.py:2039(find_on_path)
     1708    0.001    0.000    0.002    0.000 __init__.py:2071(dist_factory)
      180    0.001    0.000    0.064    0.000 sre_compile.py:759(compile)
      945    0.001    0.000    0.011    0.000 <frozen importlib._bootstrap_external>:951(path_stats)
1533/1102    0.001    0.000    0.001    0.000 typing.py:664(__hash__)
     6095    0.001    0.000    0.001    0.000 {built-in method _thread.get_ident}
     1161    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:311(__enter__)
      471    0.001    0.000    0.002    0.000 copy.py:268(_reconstruct)
     2268    0.001    0.000    0.001    0.000 {method 'split' of 'str' objects}
      150    0.001    0.000    0.025    0.000 <frozen importlib._bootstrap_external>:1404(_fill_cache)
        8    0.001    0.000    0.001    0.000 {method 'read' of '_io.TextIOWrapper' objects}
     2032    0.001    0.000    0.003    0.000 castgraph.py:50(get)
      686    0.001    0.000    0.001    0.000 genericpath.py:121(_splitext)
     2044    0.001    0.000    0.002    0.000 castgraph.py:67(__getitem__)
     4297    0.001    0.000    0.001    0.000 sre_parse.py:249(match)
     1239    0.001    0.000    0.004    0.000 <frozen importlib._bootstrap>:151(__exit__)
      472    0.001    0.000    0.003    0.000 copy.py:66(copy)
      316    0.001    0.000    0.026    0.000 overrides.py:166(decorator)
      180    0.001    0.000    0.006    0.000 sre_compile.py:536(_compile_info)
     1766    0.001    0.000    0.001    0.000 {method 'update' of 'dict' objects}
     2247    0.001    0.000    0.001    0.000 {method 'rfind' of 'str' objects}
     3058    0.001    0.000    0.002    0.000 {method 'add' of 'set' objects}
     1208    0.001    0.000    0.001    0.000 {built-in method _imp.is_frozen}
      807    0.001    0.000    0.002    0.000 ffi.py:56(__getattr__)
     2229    0.001    0.000    0.003    0.000 abstract.py:127(__ne__)
      355    0.001    0.000    0.001    0.000 ntpath.py:122(splitdrive)
      686    0.001    0.000    0.002    0.000 posixpath.py:121(splitext)
      213    0.001    0.000    0.001    0.000 {method 'splitlines' of 'str' objects}
      335    0.001    0.000    0.001    0.000 pyparsing.py:1144(__init__)
     4642    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:321(<genexpr>)
        4    0.001    0.000    0.001    0.000 {method 'readlines' of '_io._IOBase' objects}
     1239    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:143(__init__)
      630    0.001    0.000    0.001    0.000 enum.py:376(__setattr__)
     1080    0.001    0.000    0.001    0.000 {method 'extend' of 'list' objects}
      355    0.001    0.000    0.003    0.000 __init__.py:1494(_validate_resource_path)
      150    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:1319(__init__)
      614    0.001    0.000    0.001    0.000 sre_compile.py:249(_compile_charset)
     2172    0.001    0.000    0.001    0.000 posixpath.py:41(_get_sep)
      353    0.001    0.000    0.001    0.000 posixpath.py:144(basename)
      945    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:884(__init__)
     2594    0.001    0.000    0.001    0.000 sre_parse.py:172(append)
      616    0.001    0.000    0.003    0.000 _inspect.py:98(getargspec)

```
 ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/610474111/reactions,0,0,0,0,0,0,0,0,0,627
58,https://api.github.com/repos/rapidsai/cudf/issues/comments/613937750,https://github.com/rapidsai/cudf/issues/627#issuecomment-613937750,https://api.github.com/repos/rapidsai/cudf/issues/627,613937750,MDEyOklzc3VlQ29tbWVudDYxMzkzNzc1MA==,2020-04-15T09:48:32Z,2020-04-15T09:48:32Z,MEMBER,"Was this on a DGX-1 as previously reported?

The first CUDA call will initialise the context, as Jake pointed out. The time will be higher on multiGPU machines. There is also a cost that is proportional to the sysmem size, I believe. 

Loading all the libcudf device code (currently near 300MB) to *each* GPU is also a substantial startup cost. Eliminating legacy should help this. Also we could either move to device-side dispatch where it makes sense (binops, reductions), and/or do more JIT.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/613937750/reactions,0,0,0,0,0,0,0,0,0,627
59,https://api.github.com/repos/rapidsai/cudf/issues/comments/614079725,https://github.com/rapidsai/cudf/issues/627#issuecomment-614079725,https://api.github.com/repos/rapidsai/cudf/issues/627,614079725,MDEyOklzc3VlQ29tbWVudDYxNDA3OTcyNQ==,2020-04-15T14:39:23Z,2020-04-15T14:39:23Z,COLLABORATOR,@harrism running `import cudf` doesn't actually initialize a CUDA context or copy the device code to device memory. It does initialize the driver in validating the GPU architecture / driver version / toolkit version and it looks like that's taking ~3s per above. There's an additional ~2s just in Python imports but I'm not seeing anything stick out in the profile above that's immediately actionable.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614079725/reactions,0,0,0,0,0,0,0,0,0,627
60,https://api.github.com/repos/rapidsai/cudf/issues/comments/614450538,https://github.com/rapidsai/cudf/issues/627#issuecomment-614450538,https://api.github.com/repos/rapidsai/cudf/issues/627,614450538,MDEyOklzc3VlQ29tbWVudDYxNDQ1MDUzOA==,2020-04-16T06:53:22Z,2020-04-16T06:53:22Z,MEMBER,What does `getDeviceCount` call?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614450538/reactions,0,0,0,0,0,0,0,0,0,627
61,https://api.github.com/repos/rapidsai/cudf/issues/comments/614741341,https://github.com/rapidsai/cudf/issues/627#issuecomment-614741341,https://api.github.com/repos/rapidsai/cudf/issues/627,614741341,MDEyOklzc3VlQ29tbWVudDYxNDc0MTM0MQ==,2020-04-16T15:59:05Z,2020-04-16T15:59:35Z,COLLABORATOR,"> What does `getDeviceCount` call?

`cudaGetDeviceCount`: https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g18808e54893cfcaafefeab31a73cc55f

This apparently doesn't actually create a context though.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614741341/reactions,0,0,0,0,0,0,0,0,0,627
62,https://api.github.com/repos/rapidsai/cudf/issues/comments/614754708,https://github.com/rapidsai/cudf/issues/627#issuecomment-614754708,https://api.github.com/repos/rapidsai/cudf/issues/627,614754708,MDEyOklzc3VlQ29tbWVudDYxNDc1NDcwOA==,2020-04-16T16:23:00Z,2020-04-16T16:23:00Z,CONTRIBUTOR,"This was on a DGX-1. I have noticed that subsequent imports don't take nearly as long. Excluding the three seconds up front to call that cuda function, my profile looks fairly similar to the original one in this thread. So I'm actually not sure if 3 seconds spent inside `getDeviceCount` is what the issue was originally raised about, it might have been the rest of the time spent modulo the cuda work.  ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614754708/reactions,0,0,0,0,0,0,0,0,0,627
63,https://api.github.com/repos/rapidsai/cudf/issues/comments/614982675,https://github.com/rapidsai/cudf/issues/627#issuecomment-614982675,https://api.github.com/repos/rapidsai/cudf/issues/627,614982675,MDEyOklzc3VlQ29tbWVudDYxNDk4MjY3NQ==,2020-04-17T01:21:47Z,2020-04-17T01:21:47Z,MEMBER,"> This apparently doesn't actually create a context though.

Where do the docs say that?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614982675/reactions,0,0,0,0,0,0,0,0,0,627
64,https://api.github.com/repos/rapidsai/cudf/issues/comments/614989232,https://github.com/rapidsai/cudf/issues/627#issuecomment-614989232,https://api.github.com/repos/rapidsai/cudf/issues/627,614989232,MDEyOklzc3VlQ29tbWVudDYxNDk4OTIzMg==,2020-04-17T01:42:48Z,2020-04-17T01:42:48Z,COLLABORATOR,"> > This apparently doesn't actually create a context though.
> 
> Where do the docs say that?

They don't, an internal slack thread @jrhemstad had with CUDA developers confirmed it though. I can try to dig up a link if you're interested.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614989232/reactions,0,0,0,0,0,0,0,0,0,627
65,https://api.github.com/repos/rapidsai/cudf/issues/comments/614989815,https://github.com/rapidsai/cudf/issues/627#issuecomment-614989815,https://api.github.com/repos/rapidsai/cudf/issues/627,614989815,MDEyOklzc3VlQ29tbWVudDYxNDk4OTgxNQ==,2020-04-17T01:44:30Z,2020-04-17T01:44:30Z,MEMBER,"OK, then next question: can we find out if all of the 3s in the profile for that call are in the CUDA runtime/driver? (i.e. is there any Numba overhead?)",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614989815/reactions,0,0,0,0,0,0,0,0,0,627
66,https://api.github.com/repos/rapidsai/cudf/issues/comments/614992272,https://github.com/rapidsai/cudf/issues/627#issuecomment-614992272,https://api.github.com/repos/rapidsai/cudf/issues/627,614992272,MDEyOklzc3VlQ29tbWVudDYxNDk5MjI3Mg==,2020-04-17T01:51:27Z,2020-04-17T01:51:27Z,COLLABORATOR,"> OK, then next question: can we find out if all of the 3s in the profile for that call are in the CUDA runtime/driver? (i.e. is there any Numba overhead?)

These aren't called via Numba, we wrote our own Cython bindings here where there should be basically zero overhead.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614992272/reactions,0,0,0,0,0,0,0,0,0,627
67,https://api.github.com/repos/rapidsai/cudf/issues/comments/614999668,https://github.com/rapidsai/cudf/issues/627#issuecomment-614999668,https://api.github.com/repos/rapidsai/cudf/issues/627,614999668,MDEyOklzc3VlQ29tbWVudDYxNDk5OTY2OA==,2020-04-17T02:15:17Z,2020-04-17T02:15:17Z,MEMBER,"Sorry, misunderstood. Well, I'm guessing the runtime is doing some sort of initialization at that  call...",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/614999668/reactions,0,0,0,0,0,0,0,0,0,627
68,https://api.github.com/repos/rapidsai/cudf/issues/comments/615000770,https://github.com/rapidsai/cudf/issues/627#issuecomment-615000770,https://api.github.com/repos/rapidsai/cudf/issues/627,615000770,MDEyOklzc3VlQ29tbWVudDYxNTAwMDc3MA==,2020-04-17T02:19:25Z,2020-04-17T02:19:25Z,COLLABORATOR,"> Sorry, misunderstood. Well, I'm guessing the runtime is doing some sort of initialization at that call...

From my understanding it does the driver API initialization that happens implicitly when a context is created. Basically a `cuInit(0)` call. https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__INITIALIZE.html",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/615000770/reactions,0,0,0,0,0,0,0,0,0,627
69,https://api.github.com/repos/rapidsai/cudf/issues/comments/615005448,https://github.com/rapidsai/cudf/issues/627#issuecomment-615005448,https://api.github.com/repos/rapidsai/cudf/issues/627,615005448,MDEyOklzc3VlQ29tbWVudDYxNTAwNTQ0OA==,2020-04-17T02:36:51Z,2020-04-17T02:36:51Z,MEMBER,"Can you try compiling this? Compile this code:

```
#include <stdio.h>
#include <chrono>

int main()
{
  int numgpus=0;
  printf(""starting\n"");
  for (int i = 0;  i < 2; i++) {
    auto start = std::chrono::high_resolution_clock::now();
    cudaGetDeviceCount(&numgpus);
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed_seconds = end-start;

    printf(""iter: %d: GPUs: %d, elapsed time: %lf\n"", i, numgpus, elapsed_seconds.count());
  }
  return 0;
}
```

Using `nvcc test.cu`

When I run on a DGX I get the following. Second result is limiting visible devices to a single GPU (it's faster).

```
(base) mharris@dgx02:~$ ./a.out
starting
iter: 0: GPUs: 8, elapsed time: 0.394263
iter: 1: GPUs: 8, elapsed time: 0.000000
(base) mharris@dgx02:~$ CUDA_VISIBLE_DEVICES=3 ./a.out
starting
iter: 0: GPUs: 1, elapsed time: 0.079943
iter: 1: GPUs: 1, elapsed time: 0.000000
```

So with 8 GPUs it takes .39s -- not 3s, but still significant. And the second time it takes less than a microsecond. It must be doing something. I think that something is initializing the driver context. And if libcudf is linked into the module, then its 300MB fatbin is probably being loaded.

You can try on your DGX to see if its different.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/615005448/reactions,0,0,0,0,0,0,0,0,0,627
70,https://api.github.com/repos/rapidsai/cudf/issues/comments/615007732,https://github.com/rapidsai/cudf/issues/627#issuecomment-615007732,https://api.github.com/repos/rapidsai/cudf/issues/627,615007732,MDEyOklzc3VlQ29tbWVudDYxNTAwNzczMg==,2020-04-17T02:46:02Z,2020-04-17T02:46:02Z,COLLABORATOR,"> And if libcudf is linked into the module, then its 300MB fatbin is probably being loaded.

`libcudf` is absolutely linked into the module.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/615007732/reactions,0,0,0,0,0,0,0,0,0,627
71,https://api.github.com/repos/rapidsai/cudf/issues/comments/615028461,https://github.com/rapidsai/cudf/issues/627#issuecomment-615028461,https://api.github.com/repos/rapidsai/cudf/issues/627,615028461,MDEyOklzc3VlQ29tbWVudDYxNTAyODQ2MQ==,2020-04-17T04:02:18Z,2020-04-17T04:02:18Z,MEMBER,"There were some untyped variables in those Cython bindings. Doubt that matters much, but it may affect this a little bit and is easy to fix. Sent PR ( https://github.com/rapidsai/cudf/pull/4925 ) to type them.",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/615028461/reactions,0,0,0,0,0,0,0,0,0,627
72,https://api.github.com/repos/rapidsai/cudf/issues/comments/615559190,https://github.com/rapidsai/cudf/issues/627#issuecomment-615559190,https://api.github.com/repos/rapidsai/cudf/issues/627,615559190,MDEyOklzc3VlQ29tbWVudDYxNTU1OTE5MA==,2020-04-18T04:49:51Z,2020-04-18T04:49:51Z,MEMBER,Reworked the original proposal as there were some device functions that needed some changes to handle their errors respectively. Otherwise largely the same idea. Submitted as PR ( https://github.com/rapidsai/cudf/pull/4943 ).,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/615559190/reactions,0,0,0,0,0,0,0,0,0,627
73,https://api.github.com/repos/rapidsai/cudf/issues/comments/624295658,https://github.com/rapidsai/cudf/issues/627#issuecomment-624295658,https://api.github.com/repos/rapidsai/cudf/issues/627,624295658,MDEyOklzc3VlQ29tbWVudDYyNDI5NTY1OA==,2020-05-05T20:43:53Z,2020-05-05T20:43:53Z,MEMBER,Retested this and it appears to be ~2s now. Longer or shorter depending on the run. Occasionally see an outlier.,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/624295658/reactions,0,0,0,0,0,0,0,0,0,627
74,https://api.github.com/repos/rapidsai/cudf/issues/comments/624321177,https://github.com/rapidsai/cudf/issues/627#issuecomment-624321177,https://api.github.com/repos/rapidsai/cudf/issues/627,624321177,MDEyOklzc3VlQ29tbWVudDYyNDMyMTE3Nw==,2020-05-05T21:40:05Z,2020-05-05T21:40:05Z,COLLABORATOR,"> Retested this and it appears to be ~2s now. Longer or shorter depending on the run. Occasionally see an outlier.

What kind of machine did you test this on? I suspect this scales somewhat linearly with the number of visible GPUs due to the driver initialization.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/624321177/reactions,0,0,0,0,0,0,0,0,0,627
75,https://api.github.com/repos/rapidsai/cudf/issues/comments/624324231,https://github.com/rapidsai/cudf/issues/627#issuecomment-624324231,https://api.github.com/repos/rapidsai/cudf/issues/627,624324231,MDEyOklzc3VlQ29tbWVudDYyNDMyNDIzMQ==,2020-05-05T21:47:11Z,2020-05-05T21:47:11Z,MEMBER,DGX-1. Were the previous measurements all on DGX-1s or did some of them use other machines?,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/624324231/reactions,0,0,0,0,0,0,0,0,0,627
76,https://api.github.com/repos/rapidsai/cudf/issues/comments/624354595,https://github.com/rapidsai/cudf/issues/627#issuecomment-624354595,https://api.github.com/repos/rapidsai/cudf/issues/627,624354595,MDEyOklzc3VlQ29tbWVudDYyNDM1NDU5NQ==,2020-05-05T23:14:36Z,2020-05-05T23:14:36Z,MEMBER,"FWIW the import time appears to be the same if I restrict to a single device. Tested the following on a DGX-1.

All GPUs:

```python
$ ipython
Python 3.7.6 | packaged by conda-forge | (default, Mar 23 2020, 23:03:20) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.14.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: %time import cudf                                                       
CPU times: user 4.28 s, sys: 4.02 s, total: 8.29 s
Wall time: 2.12 s

In [2]: cudf._cuda.gpu.getDeviceCount()                                         
Out[2]: 8
```

One GPU:

```python
$ CUDA_VISIBLE_DEVICES=0 ipython
Python 3.7.6 | packaged by conda-forge | (default, Mar 23 2020, 23:03:20) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.14.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: %time import cudf                                                       
CPU times: user 4.28 s, sys: 3.57 s, total: 7.85 s
Wall time: 2.14 s

In [2]: cudf._cuda.gpu.getDeviceCount()                                         
Out[2]: 1
```

Again there is some variability above and below 2s. However this is representative of what I'm seeing.",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/624354595/reactions,0,0,0,0,0,0,0,0,0,627
77,https://api.github.com/repos/rapidsai/cudf/issues/comments/635104068,https://github.com/rapidsai/cudf/issues/627#issuecomment-635104068,https://api.github.com/repos/rapidsai/cudf/issues/627,635104068,MDEyOklzc3VlQ29tbWVudDYzNTEwNDA2OA==,2020-05-28T05:07:43Z,2020-05-28T05:07:43Z,MEMBER,"WIth 0.14 and legacy removed, I thought this might have improved... I tried on my linux desktop with a single V100 GPU and importing cudf took 776 ms.  But I also tried running in a container on a DGX-1 with only one of the V100s visible and it took 15.5s!  Could being in a container make it slow?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/635104068/reactions,0,0,0,0,0,0,0,0,0,627
78,https://api.github.com/repos/rapidsai/cudf/issues/comments/635384293,https://github.com/rapidsai/cudf/issues/627#issuecomment-635384293,https://api.github.com/repos/rapidsai/cudf/issues/627,635384293,MDEyOklzc3VlQ29tbWVudDYzNTM4NDI5Mw==,2020-05-28T14:28:12Z,2020-05-28T14:28:12Z,COLLABORATOR,"> WIth 0.14 and legacy removed, I thought this might have improved... I tried on my linux desktop with a single V100 GPU and importing cudf took 776 ms. But I also tried running in a container on a DGX-1 with only one of the V100s visible and it took 15.5s! Could being in a container make it slow?

That may be that the DGX didn't have persistence mode enabled and it took a long time for the driver to initialize because the GPUs had to ""wake up"".",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/635384293/reactions,0,0,0,0,0,0,0,0,0,627
79,https://api.github.com/repos/rapidsai/cudf/issues/comments/635700089,https://github.com/rapidsai/cudf/issues/627#issuecomment-635700089,https://api.github.com/repos/rapidsai/cudf/issues/627,635700089,MDEyOklzc3VlQ29tbWVudDYzNTcwMDA4OQ==,2020-05-29T01:13:24Z,2020-05-29T01:13:24Z,MEMBER,"Persistence mode is on.
",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/635700089/reactions,0,0,0,0,0,0,0,0,0,627
80,https://api.github.com/repos/rapidsai/cudf/issues/comments/635702248,https://github.com/rapidsai/cudf/issues/627#issuecomment-635702248,https://api.github.com/repos/rapidsai/cudf/issues/627,635702248,MDEyOklzc3VlQ29tbWVudDYzNTcwMjI0OA==,2020-05-29T01:20:46Z,2020-05-29T01:20:56Z,MEMBER,"More data points:
1. `%time from numba import cuda`: 1.04s
2. `%time import rmm`: 1.29s

I tried importing cudf on the same DGX outside of my rapids-compose container, but presumably my installation isn't quite right because I'm building from source, and it couldn't find a numba submodule. HOWEVER, before it hit that error, I counted for about 12 seconds. That numba loading was inside RMM, which is imported at the beginning of cuDF's `__init__.py`.  

Not sure if that tells us anything.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/635702248/reactions,0,0,0,0,0,0,0,0,0,627
81,https://api.github.com/repos/rapidsai/cudf/issues/comments/1019417913,https://github.com/rapidsai/cudf/issues/627#issuecomment-1019417913,https://api.github.com/repos/rapidsai/cudf/issues/627,1019417913,IC_kwDOBWUGps48wxU5,2022-01-23T05:40:35Z,2022-01-23T05:44:47Z,NONE,"It adds up on real rapids codes, e.g., `4s` for an empty cudf df

Some observations:

* `pandas` is `1+ s` on its own and maintainers seem disinterested: https://github.com/pandas-dev/pandas/issues/7282#issuecomment-442637703

* `cudf` is now `2.7+ s` import, and add another `1-2s` for even an empty df . So `1s` blameable on pandas, but the other ~ `3s+` seems fair game..

* `dask_cudf` adds another `0.5+ s` for import, and I didn't measure importing a client and connecting to an existing cluster, but presumably much more

We've been chasing down why we're seeing 20s-60s starts for a boring rapids web app init that is just setting up routes and running some cudf + udf warmup routines, so thought this may help. It's been frustrating for production b/c slows down first start + autorestarts. More nice-to-have for us, but maybe more important for others, are of course local dev + testing, and longer-term, precluding fast cold starts for GPU FaaS.

---

A few more numbers:

```
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""1""

real	0m0.047s
user	0m0.043s
sys	0m0.004s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import logging""

real	0m0.080s
user	0m0.068s
sys	0m0.012s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import pandas""

real	0m1.011s
user	0m1.059s
sys	0m0.626s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import cudf""

real	0m2.692s
user	0m2.607s
sys	0m0.811s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import cudf; cudf.DataFrame({'x': []})""

real	0m3.558s
user	0m3.211s
sys	0m1.060s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import dask_cudf; import cudf; cudf.DataFrame({'x': []})""

real	0m4.015s
user	0m3.547s
sys	0m0.794s
```

--- 

And related to the above:

```
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""from numba import cuda""

real	0m1.233s
user	0m1.218s
sys	0m0.757s
(rapids) root@8128f9b31ecd:/opt/graphistry/apps/forge/etl-server-python# time python -c ""import rmm""

real	0m1.678s
user	0m1.688s
sys	0m0.738s
```
",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1019417913/reactions,0,0,0,0,0,0,0,0,0,627
82,https://api.github.com/repos/rapidsai/cudf/issues/comments/459503964,https://github.com/rapidsai/cudf/issues/715#issuecomment-459503964,https://api.github.com/repos/rapidsai/cudf/issues/715,459503964,MDEyOklzc3VlQ29tbWVudDQ1OTUwMzk2NA==,2019-01-31T20:58:42Z,2019-01-31T20:58:57Z,CONTRIBUTOR,"It seems like quoting only has the true/false value in cudf (unlike Panda's 0/1/2/3), but it seems that supporting escapechar to escape the delimiter when outside a quote would be relatively straightforward (escaping end-of-line would have much bigger ramifications)",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/459503964/reactions,0,0,0,0,0,0,0,0,0,715
83,https://api.github.com/repos/rapidsai/cudf/issues/comments/508344321,https://github.com/rapidsai/cudf/issues/715#issuecomment-508344321,https://api.github.com/repos/rapidsai/cudf/issues/715,508344321,MDEyOklzc3VlQ29tbWVudDUwODM0NDMyMQ==,2019-07-04T05:32:38Z,2019-07-04T05:32:38Z,MEMBER,@mjsamoht is this still an issue?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/508344321/reactions,0,0,0,0,0,0,0,0,0,715
84,https://api.github.com/repos/rapidsai/cudf/issues/comments/509362959,https://github.com/rapidsai/cudf/issues/715#issuecomment-509362959,https://api.github.com/repos/rapidsai/cudf/issues/715,509362959,MDEyOklzc3VlQ29tbWVudDUwOTM2Mjk1OQ==,2019-07-08T19:38:59Z,2019-07-08T19:38:59Z,CONTRIBUTOR,"> @mjsamoht is this still an issue?

Yes, this is still open.  We never implemented escape character support in CSV reader.  But I believe this is very low priority since nobody asked for it.",,mjsamoht,44478121,MDQ6VXNlcjQ0NDc4MTIx,https://avatars.githubusercontent.com/u/44478121?v=4,,https://api.github.com/users/mjsamoht,https://github.com/mjsamoht,https://api.github.com/users/mjsamoht/followers,https://api.github.com/users/mjsamoht/following{/other_user},https://api.github.com/users/mjsamoht/gists{/gist_id},https://api.github.com/users/mjsamoht/starred{/owner}{/repo},https://api.github.com/users/mjsamoht/subscriptions,https://api.github.com/users/mjsamoht/orgs,https://api.github.com/users/mjsamoht/repos,https://api.github.com/users/mjsamoht/events{/privacy},https://api.github.com/users/mjsamoht/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/509362959/reactions,0,0,0,0,0,0,0,0,0,715
85,https://api.github.com/repos/rapidsai/cudf/issues/comments/508346584,https://github.com/rapidsai/cudf/issues/1263#issuecomment-508346584,https://api.github.com/repos/rapidsai/cudf/issues/1263,508346584,MDEyOklzc3VlQ29tbWVudDUwODM0NjU4NA==,2019-07-04T05:44:16Z,2019-07-04T05:44:16Z,MEMBER,@yidong72 @randerzander @beckernick What are the specific aggregations needed to implement this on top of the new rolling window functionality?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/508346584/reactions,0,0,0,0,0,0,0,0,0,1263
86,https://api.github.com/repos/rapidsai/cudf/issues/comments/650861996,https://github.com/rapidsai/cudf/issues/1263#issuecomment-650861996,https://api.github.com/repos/rapidsai/cudf/issues/1263,650861996,MDEyOklzc3VlQ29tbWVudDY1MDg2MTk5Ng==,2020-06-29T01:59:41Z,2020-06-29T01:59:41Z,NONE,"Hello, any plan in merging this or other implementation/s of EWM function? Or any temp fix that I could use for now? 
Appreciated.",,rouniuyizu,7133753,MDQ6VXNlcjcxMzM3NTM=,https://avatars.githubusercontent.com/u/7133753?v=4,,https://api.github.com/users/rouniuyizu,https://github.com/rouniuyizu,https://api.github.com/users/rouniuyizu/followers,https://api.github.com/users/rouniuyizu/following{/other_user},https://api.github.com/users/rouniuyizu/gists{/gist_id},https://api.github.com/users/rouniuyizu/starred{/owner}{/repo},https://api.github.com/users/rouniuyizu/subscriptions,https://api.github.com/users/rouniuyizu/orgs,https://api.github.com/users/rouniuyizu/repos,https://api.github.com/users/rouniuyizu/events{/privacy},https://api.github.com/users/rouniuyizu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/650861996/reactions,0,0,0,0,0,0,0,0,0,1263
87,https://api.github.com/repos/rapidsai/cudf/issues/comments/652776652,https://github.com/rapidsai/cudf/issues/1263#issuecomment-652776652,https://api.github.com/repos/rapidsai/cudf/issues/1263,652776652,MDEyOklzc3VlQ29tbWVudDY1Mjc3NjY1Mg==,2020-07-02T04:38:20Z,2020-07-02T04:38:20Z,MEMBER,@kkraus14 @yidong72 @beckernick need help understanding what is needed from libcudf.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/652776652/reactions,0,0,0,0,0,0,0,0,0,1263
88,https://api.github.com/repos/rapidsai/cudf/issues/comments/652779183,https://github.com/rapidsai/cudf/issues/1263#issuecomment-652779183,https://api.github.com/repos/rapidsai/cudf/issues/1263,652779183,MDEyOklzc3VlQ29tbWVudDY1Mjc3OTE4Mw==,2020-07-02T04:48:50Z,2020-07-02T04:48:50Z,COLLABORATOR,We haven't scoped this function as of yet from the cuDF Python side so we can't guide libcudf as of yet. I don't think this is currently a high priority for us.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/652779183/reactions,0,0,0,0,0,0,0,0,0,1263
89,https://api.github.com/repos/rapidsai/cudf/issues/comments/653209945,https://github.com/rapidsai/cudf/issues/1263#issuecomment-653209945,https://api.github.com/repos/rapidsai/cudf/issues/1263,653209945,MDEyOklzc3VlQ29tbWVudDY1MzIwOTk0NQ==,2020-07-02T20:37:41Z,2020-07-02T20:38:12Z,NONE,@harrism. The implementation I have is just adding a weight term to the time series items in the rolling window fun. So it should be straight forward implementation on top of rolling window fun ,,yidong72,43824965,MDQ6VXNlcjQzODI0OTY1,https://avatars.githubusercontent.com/u/43824965?v=4,,https://api.github.com/users/yidong72,https://github.com/yidong72,https://api.github.com/users/yidong72/followers,https://api.github.com/users/yidong72/following{/other_user},https://api.github.com/users/yidong72/gists{/gist_id},https://api.github.com/users/yidong72/starred{/owner}{/repo},https://api.github.com/users/yidong72/subscriptions,https://api.github.com/users/yidong72/orgs,https://api.github.com/users/yidong72/repos,https://api.github.com/users/yidong72/events{/privacy},https://api.github.com/users/yidong72/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/653209945/reactions,0,0,0,0,0,0,0,0,0,1263
90,https://api.github.com/repos/rapidsai/cudf/issues/comments/672936248,https://github.com/rapidsai/cudf/issues/1263#issuecomment-672936248,https://api.github.com/repos/rapidsai/cudf/issues/1263,672936248,MDEyOklzc3VlQ29tbWVudDY3MjkzNjI0OA==,2020-08-12T15:16:05Z,2020-08-12T15:16:05Z,NONE,"We have seen some folks at FSI who are interested in the official EWM function. Check this issue we got from gQuant project. I can fix it in a hacky way but it is nice to have official support from cudf.

https://github.com/rapidsai/gQuant/issues/100

Please increase the priority of this issue.

",,yidong72,43824965,MDQ6VXNlcjQzODI0OTY1,https://avatars.githubusercontent.com/u/43824965?v=4,,https://api.github.com/users/yidong72,https://github.com/yidong72,https://api.github.com/users/yidong72/followers,https://api.github.com/users/yidong72/following{/other_user},https://api.github.com/users/yidong72/gists{/gist_id},https://api.github.com/users/yidong72/starred{/owner}{/repo},https://api.github.com/users/yidong72/subscriptions,https://api.github.com/users/yidong72/orgs,https://api.github.com/users/yidong72/repos,https://api.github.com/users/yidong72/events{/privacy},https://api.github.com/users/yidong72/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/672936248/reactions,0,0,0,0,0,0,0,0,0,1263
91,https://api.github.com/repos/rapidsai/cudf/issues/comments/879987364,https://github.com/rapidsai/cudf/issues/1263#issuecomment-879987364,https://api.github.com/repos/rapidsai/cudf/issues/1263,879987364,MDEyOklzc3VlQ29tbWVudDg3OTk4NzM2NA==,2021-07-14T15:24:40Z,2021-07-14T15:26:27Z,MEMBER,"In pandas, EWM provides various exponential weighted functions including mean, variance, standard deviation, and more. I'm going to update the issue to include a task-list of the various functions.

Exponential weighted mean is the canonical usage, which makes it a good starting point for the next release.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/879987364/reactions,0,0,0,0,0,0,0,0,0,1263
92,https://api.github.com/repos/rapidsai/cudf/issues/comments/888461519,https://github.com/rapidsai/cudf/issues/1263#issuecomment-888461519,https://api.github.com/repos/rapidsai/cudf/issues/1263,888461519,IC_kwDOBWUGps409NjP,2021-07-28T16:47:39Z,2021-07-28T16:47:39Z,CONTRIBUTOR,"I've scoped this out and there's a couple of design caveats I would like to discuss before proceeding with an implementation. 

TL;DR: I am not sure how to do this in a way that is actually performant. 

This function in pandas behaves more like a single large window over the entire data than a rolling window function like what is normally envisioned. That is to say that by default, each element of the result is the weighted average of *all* of those that come before it in the sequence.

The formula for a single result is quite clear from the [pandas documentation:](https://pandas.pydata.org/docs/user_guide/window.html#window-exponentially-weighted)

<img width=""461"" alt=""Screen Shot 2021-07-28 at 11 32 12 AM"" src=""https://user-images.githubusercontent.com/53796099/127361239-d11574d7-2308-44e9-9f9a-3e8db4cf3582.png"">

There's really two straightforward ways of computing this sequence and neither of them seem to really help us very much. 

1. Compute all the `y`s in parallel (each processing element is responsible for a single `y`). This doesn't help us because the work is very uneven, with the worst off thread (the last one) still needing to compute coefficients for the entire sequence and then reduce the result into a weighted average. 
2. Generate the results sequentially, keeping track of the numerator and denominator of the equation, and recognizing that each time we advance we need only multiply the numerator by a factor of `(1 - α)`, and multiply the denominator by the same `(1 - α)` and add `1` to get the next result. This is indeed how [pandas](https://github.com/pandas-dev/pandas/blob/f72c19b5db8773708d0cd384e8f3467163cd819b/pandas/_libs/window/aggregations.pyx#L1555-L1556) makes the calculation tractable. 

In the case where we really are using this within a window function, this problem goes away, as long as the window size is small relative to the data size (each thread applies the above sequential algorithm for its window). We could thus implement this on top of rolling *technically*, but we can't just wrap that functionality with `window=len(data)` otherwise the performance will be abysmal. 

It seems like what is needed here is a truly parallel algorithm that properly balances the work each computing element is doing across the moving average calculation. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/888461519/reactions,0,0,0,0,0,0,0,0,0,1263
93,https://api.github.com/repos/rapidsai/cudf/issues/comments/888697670,https://github.com/rapidsai/cudf/issues/1263#issuecomment-888697670,https://api.github.com/repos/rapidsai/cudf/issues/1263,888697670,IC_kwDOBWUGps40-HNG,2021-07-29T00:02:04Z,2021-07-29T00:02:41Z,MEMBER,"This can be computed efficiently in parallel using two scans (one for the numerator, one for the denominator) and a binop (divide).  ",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/888697670/reactions,0,0,0,0,0,0,0,0,0,1263
94,https://api.github.com/repos/rapidsai/cudf/issues/comments/889446383,https://github.com/rapidsai/cudf/issues/1263#issuecomment-889446383,https://api.github.com/repos/rapidsai/cudf/issues/1263,889446383,IC_kwDOBWUGps41A9_v,2021-07-29T20:50:13Z,2021-07-29T20:50:13Z,CONTRIBUTOR,"Unless I am misunderstanding that works for getting one of the datapoints we need (any single one) but not the entire sequence. Each element of the result is the result of dividing two things, but those things are the sums of sequences and those sequences are different for each element in question. Consider the first few denominators `d_i` and let `beta = (1 - alpha)`:

`d_0 = 1`
`d_1 = 1 + beta`
`d_2 = 1 + beta + beta ** 2`

In general `d_n = sum(k = 0:n [beta ** n])` which is a finite series for which I do not think there is a closed form solution in terms of simple arithmetic operations. That said, one can see that 

`d_1 = beta * (1) + 1 = (beta * d_0) + 1`
`d_2 = beta * (1 + beta) + 1 = (beta * d_1) + 1`

Meaning each successive term is related to the last by 

`d_this = (beta * d_previous) + 1`

Which makes for an efficient *serial* algorithm for computing these terms without having to actually sum over an entirely new set of numbers. Unfortunately this doesn't seem to help us towards a thrust implementation because if we were trying to do an inclusive scan, we'd have this as our binary_op:

```python
def f(d_previous, d_this):
    return (beta * d_previous) + 1
beta = 0.1
f(1, f(2,3))
# 1.11
f(f(1,2), 3)
# 1.1
```

I believe this breaks the associativity needed for an inclusive scan.
",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/889446383/reactions,0,0,0,0,0,0,0,0,0,1263
95,https://api.github.com/repos/rapidsai/cudf/issues/comments/889496683,https://github.com/rapidsai/cudf/issues/1263#issuecomment-889496683,https://api.github.com/repos/rapidsai/cudf/issues/1263,889496683,IC_kwDOBWUGps41BKRr,2021-07-29T22:15:52Z,2021-07-29T22:15:52Z,CONTRIBUTOR,"Is this the naive implementation, or is this totally wrong?
```
std::vector<double> input(...);
std::vector<double> output(...);
double alpha = 0.5;
auto running_sum = 0;

for (auto i = 0; i < input.size(); i++) {
  running_sum = input[i] + running_sum * (1 - alpha);
  output[i] = running_sum;
}
```",,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/889496683/reactions,0,0,0,0,0,0,0,0,0,1263
96,https://api.github.com/repos/rapidsai/cudf/issues/comments/889531465,https://github.com/rapidsai/cudf/issues/1263#issuecomment-889531465,https://api.github.com/repos/rapidsai/cudf/issues/1263,889531465,IC_kwDOBWUGps41BSxJ,2021-07-29T23:52:37Z,2021-07-29T23:56:35Z,MEMBER,"Solving recurrence equations is in Guy Bleloch's classic paper ""Prefix Sums and their applications"". http://www.cs.cmu.edu/~blelloch/papers/Ble93.pdf (Section 1.4)

The trick is to maintain the intermediates as pairs, rather than as individual values. Let `b = 1-alpha`. For the numerator, the input is a list of pairs [(b, x_0), (b, x_1), (b, x_2), ...]. The numerator operator (in Python), is:  

```
def f(pair_i, pair_j):
    return (pair_i[0]*pair_j[0], pair_i[1]*pair_j[0] + pair_j[1])
```

Test input demonstrates associativity: 
```
>>> beta=0.1
>>> a=(beta, 1)
>>> b=(beta, 2)
>>> c=(beta, 3)
>>> f(a, f(b, c))
(0.0010000000000000002, 3.21)
>>> f(f(a, b), c)
(0.0010000000000000002, 3.21)
```

To get the numerator out of the scan, after performing the inclusive scan, just extract all the second elements of the pairs.

Intuitively, we are propagating the product of the `1-alpha`s separately from the summation.  This is a really simple recurrence, for which Blelloch gives a comprehensive proof and requirements on the operator. He also proves that higher order recurrences can be reduced and implemented with scans the same way, with the appropriate operator.

This paper is required reading, IMO. You will see scans everywhere once you start seeing them. :) 

(Note, implementation with Thrust is pretty simple -- just use a zip iterator with a constant iterator (1-alpha) and the input iterator and use a lambda that returns the modified pair as in the Python `f`.)",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/889531465/reactions,8,3,0,0,0,0,3,2,0,1263
97,https://api.github.com/repos/rapidsai/cudf/issues/comments/890092049,https://github.com/rapidsai/cudf/issues/1263#issuecomment-890092049,https://api.github.com/repos/rapidsai/cudf/issues/1263,890092049,IC_kwDOBWUGps41DboR,2021-07-30T18:59:38Z,2021-07-30T18:59:38Z,CONTRIBUTOR,"I stumbled on this paper this morning while Googling ""Prefix sums recursion relations"" after a few of us met to discuss this problem yesterday. It's so elegant how separating the current power of the prefactor makes the recursion operator associative! Thanks for pointing us in the right direction.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/890092049/reactions,0,0,0,0,0,0,0,0,0,1263
98,https://api.github.com/repos/rapidsai/cudf/issues/comments/891079085,https://github.com/rapidsai/cudf/issues/1263#issuecomment-891079085,https://api.github.com/repos/rapidsai/cudf/issues/1263,891079085,IC_kwDOBWUGps41HMmt,2021-08-02T14:35:22Z,2021-08-02T14:35:22Z,CONTRIBUTOR,"thanks @harrism this works perfectly using thrust in my experiments. It's a little hard to for me to tell if this really belongs as a rolling aggregation, should that still be the plan or is there a more appropriate place for this to live inside of libcudf?",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/891079085/reactions,0,0,0,0,0,0,0,0,0,1263
99,https://api.github.com/repos/rapidsai/cudf/issues/comments/891517434,https://github.com/rapidsai/cudf/issues/1263#issuecomment-891517434,https://api.github.com/repos/rapidsai/cudf/issues/1263,891517434,IC_kwDOBWUGps41I3n6,2021-08-03T04:37:09Z,2021-08-03T04:37:09Z,MEMBER,"My pleasure. I don't know the answer to your question. Is it different from a rolling aggregation in some way? Does it have finite window extents, or does every element depend on all preceding elements over the entire series?  CC @jrhemstad ",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/891517434/reactions,0,0,0,0,0,0,0,0,0,1263
100,https://api.github.com/repos/rapidsai/cudf/issues/comments/891779651,https://github.com/rapidsai/cudf/issues/1263#issuecomment-891779651,https://api.github.com/repos/rapidsai/cudf/issues/1263,891779651,IC_kwDOBWUGps41J3pD,2021-08-03T11:46:05Z,2021-08-03T11:46:05Z,CONTRIBUTOR,"The particular pandas API is the version where every element depends on all the previous ones. 

pandas does support a windowed version of this via different API. But I am not sure our version, were we ever to support it, would need to actually parallelize within the windows -  at least for small window sizes relative to the data the normal recurrence relation might perform fine on its own within the windows. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/891779651/reactions,0,0,0,0,0,0,0,0,0,1263
101,https://api.github.com/repos/rapidsai/cudf/issues/comments/893028911,https://github.com/rapidsai/cudf/issues/1263#issuecomment-893028911,https://api.github.com/repos/rapidsai/cudf/issues/1263,893028911,IC_kwDOBWUGps41Ooov,2021-08-04T23:00:53Z,2021-08-04T23:00:53Z,MEMBER,"For the one where every element depends on all previous ones, it may be best to add this as an operator to our existing scan API.

The windowed version sounds like rolling. Or could be done as an operator to the segmented scan API.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/893028911/reactions,0,0,0,0,0,0,0,0,0,1263
102,https://api.github.com/repos/rapidsai/cudf/issues/comments/1452193990,https://github.com/rapidsai/cudf/issues/1263#issuecomment-1452193990,https://api.github.com/repos/rapidsai/cudf/issues/1263,1452193990,IC_kwDOBWUGps5WjrjG,2023-03-02T16:51:40Z,2023-03-02T16:51:40Z,NONE,Dose it i supported in 23.02? ,,Haidow,35024180,MDQ6VXNlcjM1MDI0MTgw,https://avatars.githubusercontent.com/u/35024180?v=4,,https://api.github.com/users/Haidow,https://github.com/Haidow,https://api.github.com/users/Haidow/followers,https://api.github.com/users/Haidow/following{/other_user},https://api.github.com/users/Haidow/gists{/gist_id},https://api.github.com/users/Haidow/starred{/owner}{/repo},https://api.github.com/users/Haidow/subscriptions,https://api.github.com/users/Haidow/orgs,https://api.github.com/users/Haidow/repos,https://api.github.com/users/Haidow/events{/privacy},https://api.github.com/users/Haidow/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1452193990/reactions,0,0,0,0,0,0,0,0,0,1263
103,https://api.github.com/repos/rapidsai/cudf/issues/comments/1456211109,https://github.com/rapidsai/cudf/issues/1263#issuecomment-1456211109,https://api.github.com/repos/rapidsai/cudf/issues/1263,1456211109,IC_kwDOBWUGps5WzASl,2023-03-06T14:13:02Z,2023-03-06T14:13:02Z,CONTRIBUTOR,"Hi @Haidow ,
We've been focusing on some other priorities for a while since we last looked at this, but there's been some more interest recently, so I'll start a conversation about finishing this up in the next few releases.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1456211109/reactions,0,0,0,0,0,0,0,0,0,1263
104,https://api.github.com/repos/rapidsai/cudf/issues/comments/1636708907,https://github.com/rapidsai/cudf/issues/1263#issuecomment-1636708907,https://api.github.com/repos/rapidsai/cudf/issues/1263,1636708907,IC_kwDOBWUGps5hjjIr,2023-07-15T08:26:30Z,2023-07-15T08:26:30Z,NONE,@brandon-b-miller Yes plz!,,felixmccuaig,18746636,MDQ6VXNlcjE4NzQ2NjM2,https://avatars.githubusercontent.com/u/18746636?v=4,,https://api.github.com/users/felixmccuaig,https://github.com/felixmccuaig,https://api.github.com/users/felixmccuaig/followers,https://api.github.com/users/felixmccuaig/following{/other_user},https://api.github.com/users/felixmccuaig/gists{/gist_id},https://api.github.com/users/felixmccuaig/starred{/owner}{/repo},https://api.github.com/users/felixmccuaig/subscriptions,https://api.github.com/users/felixmccuaig/orgs,https://api.github.com/users/felixmccuaig/repos,https://api.github.com/users/felixmccuaig/events{/privacy},https://api.github.com/users/felixmccuaig/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1636708907/reactions,0,0,0,0,0,0,0,0,0,1263
105,https://api.github.com/repos/rapidsai/cudf/issues/comments/1823721547,https://github.com/rapidsai/cudf/issues/1263#issuecomment-1823721547,https://api.github.com/repos/rapidsai/cudf/issues/1263,1823721547,IC_kwDOBWUGps5ss8hL,2023-11-23T01:28:09Z,2023-11-23T01:28:09Z,NONE,"Thanks @brandon-b-miller, any update on this? ",,cpowr,20941426,MDQ6VXNlcjIwOTQxNDI2,https://avatars.githubusercontent.com/u/20941426?v=4,,https://api.github.com/users/cpowr,https://github.com/cpowr,https://api.github.com/users/cpowr/followers,https://api.github.com/users/cpowr/following{/other_user},https://api.github.com/users/cpowr/gists{/gist_id},https://api.github.com/users/cpowr/starred{/owner}{/repo},https://api.github.com/users/cpowr/subscriptions,https://api.github.com/users/cpowr/orgs,https://api.github.com/users/cpowr/repos,https://api.github.com/users/cpowr/events{/privacy},https://api.github.com/users/cpowr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1823721547/reactions,0,0,0,0,0,0,0,0,0,1263
106,https://api.github.com/repos/rapidsai/cudf/issues/comments/538139683,https://github.com/rapidsai/cudf/issues/1267#issuecomment-538139683,https://api.github.com/repos/rapidsai/cudf/issues/1267,538139683,MDEyOklzc3VlQ29tbWVudDUzODEzOTY4Mw==,2019-10-03T21:38:50Z,2019-10-03T21:41:13Z,MEMBER,Updating this to explicitly refer to a libcuDF implementation now that #2719 has merged (providing Series.corr),,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/538139683/reactions,0,0,0,0,0,0,0,0,0,1267
107,https://api.github.com/repos/rapidsai/cudf/issues/comments/569696196,https://github.com/rapidsai/cudf/issues/1267#issuecomment-569696196,https://api.github.com/repos/rapidsai/cudf/issues/1267,569696196,MDEyOklzc3VlQ29tbWVudDU2OTY5NjE5Ng==,2019-12-30T14:39:13Z,2019-12-30T14:39:13Z,MEMBER,Updating this to also refer to DataFrame level correlation,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/569696196/reactions,0,0,0,0,0,0,0,0,0,1267
108,https://api.github.com/repos/rapidsai/cudf/issues/comments/585967005,https://github.com/rapidsai/cudf/issues/1267#issuecomment-585967005,https://api.github.com/repos/rapidsai/cudf/issues/1267,585967005,MDEyOklzc3VlQ29tbWVudDU4NTk2NzAwNQ==,2020-02-13T20:54:53Z,2020-02-13T20:54:53Z,CONTRIBUTOR,"@beckernick Can we now apply `corr()` after `groupby`? Basically, I want to be able to do the following with `gdf`.

```
ans = pdf[['id2', 'id4' ,'v1', 'v2']].groupby(['id2', 'id4']).apply(lambda x: pd.Series({'r2': x.corr()['v1']['v2']}))
```

Thanks.",,rnyak,16246900,MDQ6VXNlcjE2MjQ2OTAw,https://avatars.githubusercontent.com/u/16246900?v=4,,https://api.github.com/users/rnyak,https://github.com/rnyak,https://api.github.com/users/rnyak/followers,https://api.github.com/users/rnyak/following{/other_user},https://api.github.com/users/rnyak/gists{/gist_id},https://api.github.com/users/rnyak/starred{/owner}{/repo},https://api.github.com/users/rnyak/subscriptions,https://api.github.com/users/rnyak/orgs,https://api.github.com/users/rnyak/repos,https://api.github.com/users/rnyak/events{/privacy},https://api.github.com/users/rnyak/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/585967005/reactions,0,0,0,0,0,0,0,0,0,1267
109,https://api.github.com/repos/rapidsai/cudf/issues/comments/585988942,https://github.com/rapidsai/cudf/issues/1267#issuecomment-585988942,https://api.github.com/repos/rapidsai/cudf/issues/1267,585988942,MDEyOklzc3VlQ29tbWVudDU4NTk4ODk0Mg==,2020-02-13T21:50:30Z,2020-02-13T21:50:30Z,MEMBER,"Assuming you mean once #4140 merges , we cannot. Groupby correlation via the standard API will require a libcuDF implementation.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/585988942/reactions,0,0,0,0,0,0,0,0,0,1267
110,https://api.github.com/repos/rapidsai/cudf/issues/comments/876589573,https://github.com/rapidsai/cudf/issues/1267#issuecomment-876589573,https://api.github.com/repos/rapidsai/cudf/issues/1267,876589573,MDEyOklzc3VlQ29tbWVudDg3NjU4OTU3Mw==,2021-07-08T16:45:41Z,2021-07-08T16:45:41Z,MEMBER,"@jrhemstad discussed this today in the context of groupbys. Supporting correlation (and implicitly covariance) in the groupby machinery would require additional design, as the aggregation takes more than one input. I'm going to file a new issue to summarize and consolidate further discussion for the groupby aggregation",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/876589573/reactions,0,0,0,0,0,0,0,0,0,1267
111,https://api.github.com/repos/rapidsai/cudf/issues/comments/483837623,https://github.com/rapidsai/cudf/issues/1437#issuecomment-483837623,https://api.github.com/repos/rapidsai/cudf/issues/1437,483837623,MDEyOklzc3VlQ29tbWVudDQ4MzgzNzYyMw==,2019-04-16T20:49:22Z,2019-04-16T20:49:22Z,MEMBER,We probably need to create a set of microbenchmarks in order to do this... :),,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/483837623/reactions,0,0,0,0,0,0,0,0,0,1437
112,https://api.github.com/repos/rapidsai/cudf/issues/comments/483838304,https://github.com/rapidsai/cudf/issues/1437#issuecomment-483838304,https://api.github.com/repos/rapidsai/cudf/issues/1437,483838304,MDEyOklzc3VlQ29tbWVudDQ4MzgzODMwNA==,2019-04-16T20:51:13Z,2019-04-16T20:51:13Z,CONTRIBUTOR,"> We probably need to create a set of microbenchmarks in order to do this... :)

Probably. I was hoping to at least start with the ASV benchmarks that Kevin has created. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/483838304/reactions,0,0,0,0,0,0,0,0,0,1437
113,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192997143,https://github.com/rapidsai/cudf/issues/1437#issuecomment-1192997143,https://api.github.com/repos/rapidsai/cudf/issues/1437,1192997143,IC_kwDOBWUGps5HG7EX,2022-07-22T23:12:26Z,2022-07-22T23:12:26Z,CONTRIBUTOR,"@jrhemstad @robertmaynard @harrism I've been doing some archaeology and I see that a number of discussions have taken place on the topics of RDC (with and without LTO). Did we ever successfully collect any benchmarks? Is this still something that we want to consider, or do we expect that RDC will always have an unacceptable performance cost for RAPIDS, even with LTO?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192997143/reactions,0,0,0,0,0,0,0,0,0,1437
114,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193167048,https://github.com/rapidsai/cudf/issues/1437#issuecomment-1193167048,https://api.github.com/repos/rapidsai/cudf/issues/1437,1193167048,IC_kwDOBWUGps5HHkjI,2022-07-23T18:16:37Z,2022-07-23T18:16:37Z,CONTRIBUTOR,"> Did we ever successfully collect any benchmarks? 

No.

> Is this still something that we want to consider, 

Sure.

> do we expect that RDC will always have an unacceptable performance cost for RAPIDS, even with LTO?

Never know until we try and see! ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193167048/reactions,0,0,0,0,0,0,0,0,0,1437
115,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192903784,https://github.com/rapidsai/cudf/issues/1480#issuecomment-1192903784,https://api.github.com/repos/rapidsai/cudf/issues/1480,1192903784,IC_kwDOBWUGps5HGkRo,2022-07-22T20:15:04Z,2022-07-22T20:15:04Z,CONTRIBUTOR,"This is also desired for SQL `COALESCE` support in dask-sql (cc: @randerzander). One possible solution in pure Python is something like this (suggested by @GregoryKimball):

```python
import cudf 

ser1 = [1,2,3,4]
ser2 = [1,2,3,None]
df = cudf.DataFrame({'a':ser1, 'b':ser2})

print('first_valid_index', df.b.dropna().index[0])
print('last_valid_index', df.b.dropna().index[-1])
```

However, `dropna()` is going to allocate an entirely new column and copy all non-null results just to fetch a single value. The best performance would be achieved if this were implemented in libcudf using a combination of `thrust::lower_bound` for `first_valid_index` (`thrust::upper_bound` for `last_valid_index`) with a validity iterator over the null mask. This might be a reasonable scope for a small function in libcudf, perhaps defined in `cpp/include/cudf/search.hpp`.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192903784/reactions,0,0,0,0,0,0,0,0,0,1480
116,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192930858,https://github.com/rapidsai/cudf/issues/1480#issuecomment-1192930858,https://api.github.com/repos/rapidsai/cudf/issues/1480,1192930858,IC_kwDOBWUGps5HGq4q,2022-07-22T20:59:38Z,2022-07-22T20:59:38Z,CONTRIBUTOR,Since #3754 requests `COALESCE` support for Spark I think we want a libcudf implementation that can be used by both.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192930858/reactions,0,0,0,0,0,0,0,0,0,1480
117,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577255513,https://github.com/rapidsai/cudf/issues/1480#issuecomment-1577255513,https://api.github.com/repos/rapidsai/cudf/issues/1480,1577255513,IC_kwDOBWUGps5eAwJZ,2023-06-05T18:15:25Z,2023-06-05T18:15:25Z,CONTRIBUTOR,I closed #3754 because Spark-RAPIDS is happy to use `replace_nulls` and no longer needs a dedicated `coalesce` function. I would be happy to solve this with either a cuDF-python change or a small libcudf function.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577255513/reactions,0,0,0,0,0,0,0,0,0,1480
118,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105388045,https://github.com/rapidsai/cudf/issues/1480#issuecomment-2105388045,https://api.github.com/repos/rapidsai/cudf/issues/1480,2105388045,IC_kwDOBWUGps59fawN,2024-05-10T23:47:09Z,2024-05-10T23:47:09Z,CONTRIBUTOR,cf #6759 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105388045/reactions,0,0,0,0,0,0,0,0,0,1480
119,https://api.github.com/repos/rapidsai/cudf/issues/comments/507687015,https://github.com/rapidsai/cudf/issues/2135#issuecomment-507687015,https://api.github.com/repos/rapidsai/cudf/issues/2135,507687015,MDEyOklzc3VlQ29tbWVudDUwNzY4NzAxNQ==,2019-07-02T13:53:14Z,2019-07-02T13:53:14Z,NONE,"can we add the rolling apply here too? a side question, is there a way/example to do GPU rolling apply in the rapid? I don't see apply implemented in the cudf rolling yet. Thanks.",,javy-kong,37323695,MDQ6VXNlcjM3MzIzNjk1,https://avatars.githubusercontent.com/u/37323695?v=4,,https://api.github.com/users/javy-kong,https://github.com/javy-kong,https://api.github.com/users/javy-kong/followers,https://api.github.com/users/javy-kong/following{/other_user},https://api.github.com/users/javy-kong/gists{/gist_id},https://api.github.com/users/javy-kong/starred{/owner}{/repo},https://api.github.com/users/javy-kong/subscriptions,https://api.github.com/users/javy-kong/orgs,https://api.github.com/users/javy-kong/repos,https://api.github.com/users/javy-kong/events{/privacy},https://api.github.com/users/javy-kong/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/507687015/reactions,0,0,0,0,0,0,0,0,0,2135
120,https://api.github.com/repos/rapidsai/cudf/issues/comments/507689110,https://github.com/rapidsai/cudf/issues/2135#issuecomment-507689110,https://api.github.com/repos/rapidsai/cudf/issues/2135,507689110,MDEyOklzc3VlQ29tbWVudDUwNzY4OTExMA==,2019-07-02T13:58:08Z,2019-07-02T13:58:08Z,COLLABORATOR,"@javy-kong there isn't quite yet, but we will work on it and add it in the future!",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/507689110/reactions,0,0,0,0,0,0,0,0,0,2135
121,https://api.github.com/repos/rapidsai/cudf/issues/comments/507698314,https://github.com/rapidsai/cudf/issues/2135#issuecomment-507698314,https://api.github.com/repos/rapidsai/cudf/issues/2135,507698314,MDEyOklzc3VlQ29tbWVudDUwNzY5ODMxNA==,2019-07-02T14:19:28Z,2019-07-02T14:19:28Z,NONE,@kkraus14 Thanks for the quick response! Any suggestions on what's currently the best way to achieve this function if cudf is not ready yet?,,javy-kong,37323695,MDQ6VXNlcjM3MzIzNjk1,https://avatars.githubusercontent.com/u/37323695?v=4,,https://api.github.com/users/javy-kong,https://github.com/javy-kong,https://api.github.com/users/javy-kong/followers,https://api.github.com/users/javy-kong/following{/other_user},https://api.github.com/users/javy-kong/gists{/gist_id},https://api.github.com/users/javy-kong/starred{/owner}{/repo},https://api.github.com/users/javy-kong/subscriptions,https://api.github.com/users/javy-kong/orgs,https://api.github.com/users/javy-kong/repos,https://api.github.com/users/javy-kong/events{/privacy},https://api.github.com/users/javy-kong/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/507698314/reactions,0,0,0,0,0,0,0,0,0,2135
122,https://api.github.com/repos/rapidsai/cudf/issues/comments/508292951,https://github.com/rapidsai/cudf/issues/2135#issuecomment-508292951,https://api.github.com/repos/rapidsai/cudf/issues/2135,508292951,MDEyOklzc3VlQ29tbWVudDUwODI5Mjk1MQ==,2019-07-04T00:06:09Z,2019-07-04T00:06:09Z,COLLABORATOR,"@javy-kong There unfortunately won't be an easy way today. Ultimately you want the code to run vectorized on the GPU, so we need to be careful to prevent Python serial iteration accidentally.

@randerzander @beckernick @ayushdg any ideas on workarounds here to do some UDFs?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/508292951/reactions,0,0,0,0,0,0,0,0,0,2135
123,https://api.github.com/repos/rapidsai/cudf/issues/comments/510594405,https://github.com/rapidsai/cudf/issues/2135#issuecomment-510594405,https://api.github.com/repos/rapidsai/cudf/issues/2135,510594405,MDEyOklzc3VlQ29tbWVudDUxMDU5NDQwNQ==,2019-07-11T18:09:57Z,2019-07-11T18:09:57Z,MEMBER,"@javy-kong it wouldn't be clean (and would have potentially large memory implications), but you could possibly do something like:

1. Manually shift columns using `shift` (window size - 1 shifts)
2. Write a numba kernel that accepts the original and shifted columns as inputs, carefully handles indices across the columns (since they will be off by one for each shift window), conducts some set of operations, and writes the result to an output array",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/510594405/reactions,0,0,0,0,0,0,0,0,0,2135
124,https://api.github.com/repos/rapidsai/cudf/issues/comments/511424305,https://github.com/rapidsai/cudf/issues/2231#issuecomment-511424305,https://api.github.com/repos/rapidsai/cudf/issues/2231,511424305,MDEyOklzc3VlQ29tbWVudDUxMTQyNDMwNQ==,2019-07-15T14:24:52Z,2019-07-15T14:24:52Z,COLLABORATOR,"For reference: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge_asof.html

I can only see this working with a sort based join FYI.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/511424305/reactions,0,0,0,0,0,0,0,0,0,2231
125,https://api.github.com/repos/rapidsai/cudf/issues/comments/887009853,https://github.com/rapidsai/cudf/issues/2231#issuecomment-887009853,https://api.github.com/repos/rapidsai/cudf/issues/2231,887009853,IC_kwDOBWUGps403rI9,2021-07-26T20:37:24Z,2021-07-26T20:37:56Z,MEMBER,"@vyasr might the recent conditional join / AST work perhaps be relevant for this issue? Copying the summary from the pandas docs linked above.


Perform an asof merge.

This is similar to a left-join except that we match on nearest key rather than equal keys. Both DataFrames must be sorted by the key.

For each row in the left DataFrame:

- A “backward” search selects the last row in the right DataFrame whose ‘on’ key is less than or equal to the left’s key.
- A “forward” search selects the first row in the right DataFrame whose ‘on’ key is greater than or equal to the left’s key.
- A “nearest” search selects the row in the right DataFrame whose ‘on’ key is closest in absolute distance to the left’s key.

The default is “backward” and is compatible in versions below 0.20.0. The direction parameter was added in version 0.20.0 and introduces “forward” and “nearest”.

Optionally match on equivalent keys with ‘by’ before searching with ‘on’.
",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/887009853/reactions,0,0,0,0,0,0,0,0,0,2231
126,https://api.github.com/repos/rapidsai/cudf/issues/comments/887030362,https://github.com/rapidsai/cudf/issues/2231#issuecomment-887030362,https://api.github.com/repos/rapidsai/cudf/issues/2231,887030362,IC_kwDOBWUGps403wJa,2021-07-26T21:12:28Z,2021-07-26T21:12:28Z,CONTRIBUTOR,"This could not be implemented with the AST as it requires storing state (i.e., the ""closest so far"" value). I'm not sure how you would implement this in a way that is not terrible. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/887030362/reactions,0,0,0,0,0,0,0,0,0,2231
127,https://api.github.com/repos/rapidsai/cudf/issues/comments/887055418,https://github.com/rapidsai/cudf/issues/2231#issuecomment-887055418,https://api.github.com/repos/rapidsai/cudf/issues/2231,887055418,IC_kwDOBWUGps4032Q6,2021-07-26T22:00:21Z,2021-07-26T22:07:24Z,CONTRIBUTOR,"The kernel computing conditional joins currently uses a 1D grid to parallelize only over the rows of the left table. We probably want to retain the flexibility to change the grid layout in the future if we find a more performant approach for conditional joins, but a slightly modified version of the current kernel that stores the ""closest so far"" value in a kernel-local variable should work for this use case, right? Note that the pandas API specifically requires that both DataFrames are sorted to begin with. I'm imagining something like the following (in very rough pseudocode):
```
join_index = SENTINEL
finished = false
for row in right:
    if not finished and condition(row):
        join_index = index(row)
    else:
        finished = true

if join_index == SENTINEL:
    handle_no_join()
else:
    add_pair_to_cache(left_row, join_index)
```
with `condition =  ast_operator::GREATER` for `backwards` and `condition = ast_operator::LESS` for `forwards`. `nearest` would require a little extra logic using `ast_operator::GREATER` but then doing a comparison of two values the first time the condition is False.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/887055418/reactions,0,0,0,0,0,0,0,0,0,2231
128,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500453948,https://github.com/rapidsai/cudf/issues/2231#issuecomment-1500453948,https://api.github.com/repos/rapidsai/cudf/issues/2231,1500453948,IC_kwDOBWUGps5Zbxw8,2023-04-07T16:46:57Z,2023-05-04T11:02:53Z,CONTRIBUTOR,"Quick update: my interest in this issue has grown since I started researching sort-based join algorithms such as the ""[inequality_join](https://duckdb.org/2022/05/27/iejoin.html)"" in DuckDB, ""[asof join](https://pola-rs.github.io/polars-book/user-guide/transformations/joins/#asof-join)"" in polars, and ""[merge_asof](https://pandas.pydata.org/docs/reference/api/pandas.merge_asof.html)"" in pandas. ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500453948/reactions,0,0,0,0,0,0,0,0,0,2231
129,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553094087,https://github.com/rapidsai/cudf/issues/2231#issuecomment-1553094087,https://api.github.com/repos/rapidsai/cudf/issues/2231,1553094087,IC_kwDOBWUGps5cklXH,2023-05-18T13:55:05Z,2023-05-18T13:55:05Z,MEMBER,"DuckDB has officially added ""AS OF"" joins as of the v8.0.0 release (pun intended).

- https://duckdb.org/2023/05/17/announcing-duckdb-080.html
- https://duckdb.org/docs/guides/sql_features/asof_join.html
- https://github.com/duckdb/duckdb/pull/6719",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553094087/reactions,1,0,0,0,0,0,1,0,0,2231
130,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553332700,https://github.com/rapidsai/cudf/issues/2231#issuecomment-1553332700,https://api.github.com/repos/rapidsai/cudf/issues/2231,1553332700,IC_kwDOBWUGps5clfnc,2023-05-18T16:47:31Z,2023-05-18T19:35:11Z,CONTRIBUTOR,"Both Spark and DuckDB implement ""ASOF"" join using slightly different translations to operators that I think both CUDF and Dask already support. These translations allow the processing to be mostly distributed, which is really nice.

Spark's translation will do a join followed by an aggregation. 

https://github.com/apache/spark/blob/d7a8b852eaa6cc04df1eea0018a9b9de29b1c4fe/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/RewriteAsOfJoin.scala#L27-L47

In this `MIN_BY` is essentially an `ARGMIN` aggregation followed by gather using the index returned on the first column passed to the `MIN_BY`. The problem here is that the join will likely explode. They use the tolerance from pandas to reduce the window (Spark only supports this for their pandas compatibility layer currently).

I have not tried but want to. We have not been looking at it in depth because it is only for pandas compatibility right now.

Where as DuckDB appears to be doing a lead of 1 in a window operation to get a min/max value, but the default for the last value in the lead not `null` it is `infinity` so that they can get the proper range.

https://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/execution/physical_plan/plan_asof_join.cpp#L48

And then DuckDB does a conditional join bounding the left hand side key by values in that range.  It is a conditional join.

https://github.com/duckdb/duckdb/blob/1d304769a4451e69f2cf4c376dad498226615c2c/src/execution/physical_plan/plan_asof_join.cpp#L73

The problem here is that if the asof join does not include any equality operations the window operation is likely to require all of the data to go to a single task (at least when doing this how Spark does it, not sure on DuckDB or Dask)

Both of these implementations are likely to require a cross join if are no equality operations in the join condition. I don't think that is very likely (I think the DuckDB example is bad), but I do think that there are ways that we can make it much better if we need to.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553332700/reactions,0,0,0,0,0,0,0,0,0,2231
131,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911172395,https://github.com/rapidsai/cudf/issues/2231#issuecomment-1911172395,https://api.github.com/repos/rapidsai/cudf/issues/2231,1911172395,IC_kwDOBWUGps5x6i0r,2024-01-25T23:39:18Z,2024-01-25T23:40:31Z,CONTRIBUTOR,"This feature is still of interest for libcudf, and we may choose a segmented sort-based join that uses binary search to locate correct matches. 

Looking at the pandas API for [merge_asof](https://pandas.pydata.org/pandas-docs/version/0.25.0/reference/api/pandas.merge_asof.html), there are a few key arguments that our algorithm should support:
* `on`: references the numeric column that is used to find closest matches
* `by`: references one or more columns that must be equal in `right` and `left` before searching the `on` values
* `direction`: ""forward"", ""backward"" or ""nearest"" defines how to match the `on` values
* `tolerance`: don't match if the closest `on` values are too far apart
* `allow_exact_matches`: whether to match when `on` values are `==` or only find the closest non-equal

Possible primitives needed:
Device-callable binary search that can work with custom functors. This will allow us to interface implementations of `backward/forward/nearest` with template dispatch to support `tolerance/nearest` for primitive types
",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911172395/reactions,0,0,0,0,0,0,0,0,0,2231
132,https://api.github.com/repos/rapidsai/cudf/issues/comments/520026136,https://github.com/rapidsai/cudf/issues/2398#issuecomment-520026136,https://api.github.com/repos/rapidsai/cudf/issues/2398,520026136,MDEyOklzc3VlQ29tbWVudDUyMDAyNjEzNg==,2019-08-09T18:50:29Z,2019-08-09T18:50:29Z,CONTRIBUTOR,"This is essentially the same problem as described in https://github.com/rapidsai/cudf/issues/873.

There isn't really a ""correct"" way of handling misplaced quotes.  For every example where pandas seemingly returns something more useful, you can construct an example where pandas returns the ""wrong"" data.

We could decide for cuIO to match pandas' behavior, with all the good and bad side effects.

Please take a look at the following to learn more how pandas behaves:
https://github.com/rapidsai/cudf/issues/873#issuecomment-463004846
",,mjsamoht,44478121,MDQ6VXNlcjQ0NDc4MTIx,https://avatars.githubusercontent.com/u/44478121?v=4,,https://api.github.com/users/mjsamoht,https://github.com/mjsamoht,https://api.github.com/users/mjsamoht/followers,https://api.github.com/users/mjsamoht/following{/other_user},https://api.github.com/users/mjsamoht/gists{/gist_id},https://api.github.com/users/mjsamoht/starred{/owner}{/repo},https://api.github.com/users/mjsamoht/subscriptions,https://api.github.com/users/mjsamoht/orgs,https://api.github.com/users/mjsamoht/repos,https://api.github.com/users/mjsamoht/events{/privacy},https://api.github.com/users/mjsamoht/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/520026136/reactions,0,0,0,0,0,0,0,0,0,2398
133,https://api.github.com/repos/rapidsai/cudf/issues/comments/626490282,https://github.com/rapidsai/cudf/issues/2398#issuecomment-626490282,https://api.github.com/repos/rapidsai/cudf/issues/2398,626490282,MDEyOklzc3VlQ29tbWVudDYyNjQ5MDI4Mg==,2020-05-11T06:06:18Z,2020-05-11T06:06:18Z,MEMBER,"@kkraus14 @ayushdg @OlivierNV what do you think we should with this issue? Should we aim to match Pandas, or not?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/626490282/reactions,0,0,0,0,0,0,0,0,0,2398
134,https://api.github.com/repos/rapidsai/cudf/issues/comments/626752314,https://github.com/rapidsai/cudf/issues/2398#issuecomment-626752314,https://api.github.com/repos/rapidsai/cudf/issues/2398,626752314,MDEyOklzc3VlQ29tbWVudDYyNjc1MjMxNA==,2020-05-11T14:49:24Z,2020-05-11T14:49:24Z,COLLABORATOR,"The above situation seems like something that would be nice to handle, but in general we shouldn't try to handle every edge case / error case of Pandas here. We should do what's logical / what's the best end user experience.

Alternatively, instead of returning the correct results as above, if we were able to clearly and loudly error saying ""hey there was an unclosed quotation on line 123 at character 87, try setting `quoting=3`"" that would be perfectly good as well.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/626752314/reactions,0,0,0,0,0,0,0,0,0,2398
135,https://api.github.com/repos/rapidsai/cudf/issues/comments/626829975,https://github.com/rapidsai/cudf/issues/2398#issuecomment-626829975,https://api.github.com/repos/rapidsai/cudf/issues/2398,626829975,MDEyOklzc3VlQ29tbWVudDYyNjgyOTk3NQ==,2020-05-11T17:06:07Z,2020-05-11T17:12:58Z,CONTRIBUTOR,"IMO, we should try to match pandas if we can. The new csv implementation should be able to handle the case above when looking for `\n`, but the data conversion stage doesn't, so it will have to do something similar (basically automatically ignoring quoting if a field doesn't start with a quote)
[Edit] Although priority for malformed content should probably be lower than for correct cases, like basic escapechar support for the delimiter.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/626829975/reactions,0,0,0,0,0,0,0,0,0,2398
136,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192996253,https://github.com/rapidsai/cudf/issues/2398#issuecomment-1192996253,https://api.github.com/repos/rapidsai/cudf/issues/2398,1192996253,IC_kwDOBWUGps5HG62d,2022-07-22T23:10:04Z,2022-07-22T23:10:04Z,CONTRIBUTOR,"As discussed in #873, these are edge cases where fixing them will break other (valid) use cases. The `quoting=3` WAR is the correct solution. The only actionable before closing this issue is to determine whether it might be feasible to throw a clear error for unclosed quotations like Keith mentions above. @vuule I don't know much about the CSV reader internals, do you think that would be feasible?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192996253/reactions,0,0,0,0,0,0,0,0,0,2398
137,https://api.github.com/repos/rapidsai/cudf/issues/comments/518925595,https://github.com/rapidsai/cudf/issues/2477#issuecomment-518925595,https://api.github.com/repos/rapidsai/cudf/issues/2477,518925595,MDEyOklzc3VlQ29tbWVudDUxODkyNTU5NQ==,2019-08-07T03:31:52Z,2019-08-07T03:31:52Z,CONTRIBUTOR,"Is this specific to ORC ? ORC has the concept of a writer timezone, and we actually convert from the writer timezone to UTC when loading, so if the intent is to keep the native timezone of the ORC file, it could be as simple as a flag to bypass the existing timezone conversion.
If it's a generic target timezone conversion, it should be relatively easy to do it in the ORC loader (converting to a particular timezone isn't much different than the existing conversion to UTC). For other loaders that are natively UTC, it would be preferable as a standalone utility method.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/518925595/reactions,0,0,0,0,0,0,0,0,0,2477
138,https://api.github.com/repos/rapidsai/cudf/issues/comments/519101573,https://github.com/rapidsai/cudf/issues/2477#issuecomment-519101573,https://api.github.com/repos/rapidsai/cudf/issues/2477,519101573,MDEyOklzc3VlQ29tbWVudDUxOTEwMTU3Mw==,2019-08-07T13:40:14Z,2019-08-07T13:40:14Z,MEMBER,"It's not specific to ORC.  The intent is not to preserve the timezone of the file but rather to target a timezone that's specified by the caller.  ORC is already doing timezone conversions, and that's why I mention it here.  It would be slightly more efficient to have ORC directly convert to a specified timezone rather than convert to UTC and then the caller converts to another timezone.

I agree that a standalone utility method would be best if we're only going to have one way to rebase timestamps.  That can apply to the CSV and Parquet loaders which don't do any timezone conversions today.

The utility would also provide a way to convert Spark timestamps back to UTC.  This would probably be needed when cudf supports writing CSV, Parquet, and ORC, as I would expect those writers to assume all timestamps are UTC.  Spark would need to convert timestamps relative to the JVM timezone to UTC for cudf writing unless the writers supported a parameter specifying the timestamp timezone reference.
",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/519101573/reactions,0,0,0,0,0,0,0,0,0,2477
139,https://api.github.com/repos/rapidsai/cudf/issues/comments/519353042,https://github.com/rapidsai/cudf/issues/2477#issuecomment-519353042,https://api.github.com/repos/rapidsai/cudf/issues/2477,519353042,MDEyOklzc3VlQ29tbWVudDUxOTM1MzA0Mg==,2019-08-08T03:57:53Z,2019-08-08T03:57:53Z,CONTRIBUTOR,"Timezone conversions are super-messy, so I'd rather limit the impact of timezones (it also tends to be platform-specific since we need to parse timezone files from the OS to build conversion tables from/to UTC).
Compared to the column loader, a standalone timezone conversion should be very fast since it's fully data-parallel (internally, timezoneA->timezoneB would most likely be implemented as
 tsB = fromUTC(toUTC(tsA, A), B).
If the goal is an arbitrary target timezone, I think an in-place standalone conversion would be the way to go.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/519353042/reactions,1,1,0,0,0,0,0,0,0,2477
140,https://api.github.com/repos/rapidsai/cudf/issues/comments/561865446,https://github.com/rapidsai/cudf/issues/2477#issuecomment-561865446,https://api.github.com/repos/rapidsai/cudf/issues/2477,561865446,MDEyOklzc3VlQ29tbWVudDU2MTg2NTQ0Ng==,2019-12-04T22:19:04Z,2019-12-04T22:19:04Z,CONTRIBUTOR,"Since we are using libcu++ for our timestamp types, we should be using the C++20 timezone APIs that libcu++ will provide. CC @trxcllnt. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/561865446/reactions,0,0,0,0,0,0,0,0,0,2477
141,https://api.github.com/repos/rapidsai/cudf/issues/comments/561918745,https://github.com/rapidsai/cudf/issues/2477#issuecomment-561918745,https://api.github.com/repos/rapidsai/cudf/issues/2477,561918745,MDEyOklzc3VlQ29tbWVudDU2MTkxODc0NQ==,2019-12-05T01:04:03Z,2019-12-05T01:04:03Z,CONTRIBUTOR,@brycelelbach does libcu++ have plans to load the system timezone database? I recall @ogiroux saying that might not be supported yet.,,trxcllnt,178183,MDQ6VXNlcjE3ODE4Mw==,https://avatars.githubusercontent.com/u/178183?v=4,,https://api.github.com/users/trxcllnt,https://github.com/trxcllnt,https://api.github.com/users/trxcllnt/followers,https://api.github.com/users/trxcllnt/following{/other_user},https://api.github.com/users/trxcllnt/gists{/gist_id},https://api.github.com/users/trxcllnt/starred{/owner}{/repo},https://api.github.com/users/trxcllnt/subscriptions,https://api.github.com/users/trxcllnt/orgs,https://api.github.com/users/trxcllnt/repos,https://api.github.com/users/trxcllnt/events{/privacy},https://api.github.com/users/trxcllnt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/561918745/reactions,0,0,0,0,0,0,0,0,0,2477
142,https://api.github.com/repos/rapidsai/cudf/issues/comments/561919088,https://github.com/rapidsai/cudf/issues/2477#issuecomment-561919088,https://api.github.com/repos/rapidsai/cudf/issues/2477,561919088,MDEyOklzc3VlQ29tbWVudDU2MTkxOTA4OA==,2019-12-05T01:05:27Z,2019-12-05T01:05:27Z,CONTRIBUTOR,@brycelelbach promised me they would add it for us :) ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/561919088/reactions,1,0,0,0,0,0,1,0,0,2477
143,https://api.github.com/repos/rapidsai/cudf/issues/comments/726385945,https://github.com/rapidsai/cudf/issues/2477#issuecomment-726385945,https://api.github.com/repos/rapidsai/cudf/issues/2477,726385945,MDEyOklzc3VlQ29tbWVudDcyNjM4NTk0NQ==,2020-11-12T22:41:34Z,2020-11-12T22:41:34Z,CONTRIBUTOR,Any update on whether libcu++ will load the timezone database?  ,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/726385945/reactions,0,0,0,0,0,0,0,0,0,2477
144,https://api.github.com/repos/rapidsai/cudf/issues/comments/726397884,https://github.com/rapidsai/cudf/issues/2477#issuecomment-726397884,https://api.github.com/repos/rapidsai/cudf/issues/2477,726397884,MDEyOklzc3VlQ29tbWVudDcyNjM5Nzg4NA==,2020-11-12T23:11:28Z,2020-11-12T23:11:28Z,CONTRIBUTOR,"Please file an RFE on github.com/NVIDIA/libcudacxx. It's not on our immediate roadmap, and slightly tricky, but we'll get to it eventually, depending on how urgently you need it.",,brycelelbach,398194,MDQ6VXNlcjM5ODE5NA==,https://avatars.githubusercontent.com/u/398194?v=4,,https://api.github.com/users/brycelelbach,https://github.com/brycelelbach,https://api.github.com/users/brycelelbach/followers,https://api.github.com/users/brycelelbach/following{/other_user},https://api.github.com/users/brycelelbach/gists{/gist_id},https://api.github.com/users/brycelelbach/starred{/owner}{/repo},https://api.github.com/users/brycelelbach/subscriptions,https://api.github.com/users/brycelelbach/orgs,https://api.github.com/users/brycelelbach/repos,https://api.github.com/users/brycelelbach/events{/privacy},https://api.github.com/users/brycelelbach/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/726397884/reactions,0,0,0,0,0,0,0,0,0,2477
145,https://api.github.com/repos/rapidsai/cudf/issues/comments/726999951,https://github.com/rapidsai/cudf/issues/2477#issuecomment-726999951,https://api.github.com/repos/rapidsai/cudf/issues/2477,726999951,MDEyOklzc3VlQ29tbWVudDcyNjk5OTk1MQ==,2020-11-13T19:53:20Z,2020-11-13T19:53:20Z,CONTRIBUTOR,https://github.com/NVIDIA/cccl/issues/954,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/726999951/reactions,0,0,0,0,0,0,0,0,0,2477
146,https://api.github.com/repos/rapidsai/cudf/issues/comments/521718438,https://github.com/rapidsai/cudf/issues/2591#issuecomment-521718438,https://api.github.com/repos/rapidsai/cudf/issues/2591,521718438,MDEyOklzc3VlQ29tbWVudDUyMTcxODQzOA==,2019-08-15T17:05:53Z,2019-08-15T17:05:53Z,CONTRIBUTOR,"Thanks for reporting, @jangorecki. It looks like the underlying issue here is that cudf `assign` doesn't yet work with callable arguments.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/521718438/reactions,0,0,0,0,0,0,0,0,0,2591
147,https://api.github.com/repos/rapidsai/cudf/issues/comments/721157956,https://github.com/rapidsai/cudf/issues/2591#issuecomment-721157956,https://api.github.com/repos/rapidsai/cudf/issues/2591,721157956,MDEyOklzc3VlQ29tbWVudDcyMTE1Nzk1Ng==,2020-11-03T14:43:12Z,2020-11-03T14:43:12Z,NONE,"Hello, I was wondering if this feature has been implemented?",,edwintyh,45237047,MDQ6VXNlcjQ1MjM3MDQ3,https://avatars.githubusercontent.com/u/45237047?v=4,,https://api.github.com/users/edwintyh,https://github.com/edwintyh,https://api.github.com/users/edwintyh/followers,https://api.github.com/users/edwintyh/following{/other_user},https://api.github.com/users/edwintyh/gists{/gist_id},https://api.github.com/users/edwintyh/starred{/owner}{/repo},https://api.github.com/users/edwintyh/subscriptions,https://api.github.com/users/edwintyh/orgs,https://api.github.com/users/edwintyh/repos,https://api.github.com/users/edwintyh/events{/privacy},https://api.github.com/users/edwintyh/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/721157956/reactions,1,1,0,0,0,0,0,0,0,2591
148,https://api.github.com/repos/rapidsai/cudf/issues/comments/721288253,https://github.com/rapidsai/cudf/issues/2591#issuecomment-721288253,https://api.github.com/repos/rapidsai/cudf/issues/2591,721288253,MDEyOklzc3VlQ29tbWVudDcyMTI4ODI1Mw==,2020-11-03T18:00:45Z,2020-11-03T18:00:45Z,COLLABORATOR,I don't believe that `assign` supports lambdas still. Contributions welcome!,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/721288253/reactions,0,0,0,0,0,0,0,0,0,2591
149,https://api.github.com/repos/rapidsai/cudf/issues/comments/524467515,https://github.com/rapidsai/cudf/issues/2678#issuecomment-524467515,https://api.github.com/repos/rapidsai/cudf/issues/2678,524467515,MDEyOklzc3VlQ29tbWVudDUyNDQ2NzUxNQ==,2019-08-23T21:26:06Z,2019-08-23T21:26:06Z,CONTRIBUTOR,"Internal link to my Excel file with breakdown of the csv-writer
https://nvidia-my.sharepoint.com/:x:/p/dwendt/EfKmvRq5FR5KhnwkdLfwPm8BG0YhCdMPNv-mZzKPFu-vmA",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/524467515/reactions,0,0,0,0,0,0,0,0,0,2678
150,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181164138,https://github.com/rapidsai/cudf/issues/2678#issuecomment-1181164138,https://api.github.com/repos/rapidsai/cudf/issues/2678,1181164138,IC_kwDOBWUGps5GZyJq,2022-07-12T00:20:35Z,2022-07-12T00:20:35Z,CONTRIBUTOR,@davidwendt are items 2 and 3 still something that you plan to pursue?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181164138/reactions,0,0,0,0,0,0,0,0,0,2678
151,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181636802,https://github.com/rapidsai/cudf/issues/2678#issuecomment-1181636802,https://api.github.com/repos/rapidsai/cudf/issues/2678,1181636802,IC_kwDOBWUGps5GbljC,2022-07-12T11:20:17Z,2022-07-12T11:20:17Z,CONTRIBUTOR,"I've forgotten about this issue so I had no plans to pursue these.
Also, looks like the improvements made in PR #2706 for step 1 appear to have been discarded in PR #4484.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181636802/reactions,0,0,0,0,0,0,0,0,0,2678
152,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182153662,https://github.com/rapidsai/cudf/issues/2678#issuecomment-1182153662,https://api.github.com/repos/rapidsai/cudf/issues/2678,1182153662,IC_kwDOBWUGps5Gdju-,2022-07-12T18:06:13Z,2022-07-12T18:06:13Z,CONTRIBUTOR,Do you think it's something that we'll want to pursue again? Was trying to gauge whether these changes would still provide a perf benefit and if it's worth keeping the issue open.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182153662/reactions,0,0,0,0,0,0,0,0,0,2678
153,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182221798,https://github.com/rapidsai/cudf/issues/2678#issuecomment-1182221798,https://api.github.com/repos/rapidsai/cudf/issues/2678,1182221798,IC_kwDOBWUGps5Gd0Xm,2022-07-12T18:34:48Z,2022-07-12T18:35:13Z,CONTRIBUTOR,"I think this could morph into just a feature request to enable writing to multiple CSV files. I suspect the performance gain would be similar in today's codebase when using multiple CPU threads. I don't know if there is also an existing issue/request to support gzip compression on CSV write.
If memory serves, I believe both of these requests originally came from @randerzander ",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182221798/reactions,0,0,0,0,0,0,0,0,0,2678
154,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321038575,https://github.com/rapidsai/cudf/issues/3155#issuecomment-1321038575,https://api.github.com/repos/rapidsai/cudf/issues/3155,1321038575,IC_kwDOBWUGps5OvXLv,2022-11-20T04:49:42Z,2022-11-20T04:49:42Z,CONTRIBUTOR,"I believe this is resolved, including `CUDF_VERSION`, `CUDF_VERSION_MAJOR` and `CUDF_VERSION_MINOR`",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321038575/reactions,0,0,0,0,0,0,0,0,0,3155
155,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684019680,https://github.com/rapidsai/cudf/issues/3155#issuecomment-1684019680,https://api.github.com/repos/rapidsai/cudf/issues/3155,1684019680,IC_kwDOBWUGps5kYBng,2023-08-18T14:39:39Z,2023-08-18T14:39:39Z,CONTRIBUTOR,I don't believe that this exists yet.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684019680/reactions,0,0,0,0,0,0,0,0,0,3155
156,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006997006,https://github.com/rapidsai/cudf/issues/3676#issuecomment-1006997006,https://api.github.com/repos/rapidsai/cudf/issues/3676,1006997006,IC_kwDOBWUGps48BY4O,2022-01-06T22:59:35Z,2022-01-06T22:59:35Z,MEMBER,"Based on the following small benchmark, this can probably be done fast enough in Python.

```python
import cudf
import numpy as np
​
def mad(self):
    # mad formula
    n = len(self)
    m = self.mean()
    mad = ((self - m).abs() / n).sum()
    return mad
​
nrows = (1e6, 10e6)
for n in nrows:
    s = cudf.Series(np.random.normal(10, 5, int(n)), dtype=""float32"")
    ps = s.to_pandas()
    print(f""{int(n):,} rows:"")
    %time mp = ps.mad()
    %time mg = mad(s)
    print()
1,000,000 rows:
CPU times: user 22.9 ms, sys: 0 ns, total: 22.9 ms
Wall time: 22.5 ms
CPU times: user 782 µs, sys: 3.24 ms, total: 4.02 ms
Wall time: 3.89 ms

10,000,000 rows:
CPU times: user 213 ms, sys: 100 ms, total: 313 ms
Wall time: 313 ms
CPU times: user 1.23 ms, sys: 4.25 ms, total: 5.49 ms
Wall time: 5.24 ms
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006997006/reactions,0,0,0,0,0,0,0,0,0,3676
157,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589212,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588589212,https://api.github.com/repos/rapidsai/cudf/issues/4206,588589212,MDEyOklzc3VlQ29tbWVudDU4ODU4OTIxMg==,2020-02-20T03:19:39Z,2020-02-20T03:19:39Z,CONTRIBUTOR,I think this is an old utility function that is slated to be eliminated and using https://github.com/rapidsai/cudf/issues/4142 instead. @kkraus14 correct me if I'm wrong. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589212/reactions,0,0,0,0,0,0,0,0,0,4206
158,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589765,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588589765,https://api.github.com/repos/rapidsai/cudf/issues/4206,588589765,MDEyOklzc3VlQ29tbWVudDU4ODU4OTc2NQ==,2020-02-20T03:22:03Z,2020-02-20T03:22:03Z,COLLABORATOR,I wasn't even aware of the existence of this function. It should probably use https://github.com/rapidsai/cudf/blob/branch-0.13/python/cudf/cudf/utils/cudautils.py#L250 instead of rolling it's own.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589765/reactions,0,0,0,0,0,0,0,0,0,4206
159,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589848,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588589848,https://api.github.com/repos/rapidsai/cudf/issues/4206,588589848,MDEyOklzc3VlQ29tbWVudDU4ODU4OTg0OA==,2020-02-20T03:22:24Z,2020-02-20T03:22:24Z,COLLABORATOR,The function I linked above would be replaced with #4142 as Jake mentioned 😄,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588589848/reactions,0,0,0,0,0,0,0,0,0,4206
160,https://api.github.com/repos/rapidsai/cudf/issues/comments/588590646,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588590646,https://api.github.com/repos/rapidsai/cudf/issues/4206,588590646,MDEyOklzc3VlQ29tbWVudDU4ODU5MDY0Ng==,2020-02-20T03:26:13Z,2020-02-20T03:26:13Z,COLLABORATOR,"Oh wait, this is a testing utility function that likely works on host objects. We probably would want to use: https://docs.scipy.org/doc/numpy/reference/generated/numpy.unpackbits.html",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588590646/reactions,0,0,0,0,0,0,0,0,0,4206
161,https://api.github.com/repos/rapidsai/cudf/issues/comments/588591765,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588591765,https://api.github.com/repos/rapidsai/cudf/issues/4206,588591765,MDEyOklzc3VlQ29tbWVudDU4ODU5MTc2NQ==,2020-02-20T03:31:28Z,2020-02-20T03:31:28Z,CONTRIBUTOR,"Yeah, this is just an internal unit testing utility. Not really high priority. I just noticed it was odd while I was working on the hash.pyx tests.",,trevorsm7,5580056,MDQ6VXNlcjU1ODAwNTY=,https://avatars.githubusercontent.com/u/5580056?v=4,,https://api.github.com/users/trevorsm7,https://github.com/trevorsm7,https://api.github.com/users/trevorsm7/followers,https://api.github.com/users/trevorsm7/following{/other_user},https://api.github.com/users/trevorsm7/gists{/gist_id},https://api.github.com/users/trevorsm7/starred{/owner}{/repo},https://api.github.com/users/trevorsm7/subscriptions,https://api.github.com/users/trevorsm7/orgs,https://api.github.com/users/trevorsm7/repos,https://api.github.com/users/trevorsm7/events{/privacy},https://api.github.com/users/trevorsm7/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588591765/reactions,0,0,0,0,0,0,0,0,0,4206
162,https://api.github.com/repos/rapidsai/cudf/issues/comments/588592591,https://github.com/rapidsai/cudf/issues/4206#issuecomment-588592591,https://api.github.com/repos/rapidsai/cudf/issues/4206,588592591,MDEyOklzc3VlQ29tbWVudDU4ODU5MjU5MQ==,2020-02-20T03:35:05Z,2020-02-20T03:35:05Z,CONTRIBUTOR,"I looked up `unpackbits` while I was writing the description, and I agree that should work.",,trevorsm7,5580056,MDQ6VXNlcjU1ODAwNTY=,https://avatars.githubusercontent.com/u/5580056?v=4,,https://api.github.com/users/trevorsm7,https://github.com/trevorsm7,https://api.github.com/users/trevorsm7/followers,https://api.github.com/users/trevorsm7/following{/other_user},https://api.github.com/users/trevorsm7/gists{/gist_id},https://api.github.com/users/trevorsm7/starred{/owner}{/repo},https://api.github.com/users/trevorsm7/subscriptions,https://api.github.com/users/trevorsm7/orgs,https://api.github.com/users/trevorsm7/repos,https://api.github.com/users/trevorsm7/events{/privacy},https://api.github.com/users/trevorsm7/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/588592591/reactions,0,0,0,0,0,0,0,0,0,4206
163,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962750,https://github.com/rapidsai/cudf/issues/4206#issuecomment-798962750,https://api.github.com/repos/rapidsai/cudf/issues/4206,798962750,MDEyOklzc3VlQ29tbWVudDc5ODk2Mjc1MA==,2021-03-14T19:14:21Z,2021-03-14T19:14:21Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962750/reactions,0,0,0,0,0,0,0,0,0,4206
164,https://api.github.com/repos/rapidsai/cudf/issues/comments/592106373,https://github.com/rapidsai/cudf/issues/4270#issuecomment-592106373,https://api.github.com/repos/rapidsai/cudf/issues/4270,592106373,MDEyOklzc3VlQ29tbWVudDU5MjEwNjM3Mw==,2020-02-27T18:24:54Z,2020-02-27T18:29:08Z,COLLABORATOR,"> @shwina correct me if I'm wrong, but I don't anticipate this should be a problem from the Python/Cython side nor require significant changes?

We currently release the buffers from a Column and those control the memory lifetime directly via smart pointers. For creating `column_view` instances, we currently have this function: https://github.com/rapidsai/cudf/blob/branch-0.13/python/cudf/cudf/_libxx/column.pyx#L335-L369

It sounds like we'll need to change the `vector[column_view]` to use a `column_view*` which we then no longer know the lifetime of. This is a bit of a pain for us on the Cython side, but we have a couple of options from my perspective:
1) We add an attribute to our `Column` cython class that keeps a reference to a `vector[column_view]` to keep it alive. Note: this doesn't work when children columns can have children unless we recursively add all of the children `column_view` to the vector.
2) We create a `ColumnView` cython class that keeps a reference to a `vector[column_view]` and a corresponding list of `ColumnView` to handle keeping children of children of children of etc. alive.

Number 2 is probably the better long term solution but is a bit of annoying work as of now.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/592106373/reactions,0,0,0,0,0,0,0,0,0,4270
165,https://api.github.com/repos/rapidsai/cudf/issues/comments/592110105,https://github.com/rapidsai/cudf/issues/4270#issuecomment-592110105,https://api.github.com/repos/rapidsai/cudf/issues/4270,592110105,MDEyOklzc3VlQ29tbWVudDU5MjExMDEwNQ==,2020-02-27T18:33:03Z,2020-02-27T18:35:40Z,CONTRIBUTOR,"You'd just need to make [this `vector`](https://github.com/rapidsai/cudf/blob/branch-0.13/python/cudf/cudf/_libxx/column.pyx#L344) stay alive for the lifetime of the Python column object.

Instead of creating a `column_view` on the fly for a Python column every time you need to pass into libcudf, why not just construct and store the `column_view` once? I think this is what you're suggesting in 2. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/592110105/reactions,0,0,0,0,0,0,0,0,0,4270
166,https://api.github.com/repos/rapidsai/cudf/issues/comments/592112476,https://github.com/rapidsai/cudf/issues/4270#issuecomment-592112476,https://api.github.com/repos/rapidsai/cudf/issues/4270,592112476,MDEyOklzc3VlQ29tbWVudDU5MjExMjQ3Ng==,2020-02-27T18:38:27Z,2020-02-27T18:38:27Z,COLLABORATOR,"> You'd just need to make [this `vector`](https://github.com/rapidsai/cudf/blob/branch-0.13/python/cudf/cudf/_libxx/column.pyx#L344) stay alive for the lifetime of the Python column object.

What about the `column_view` children of those `column_view`? Nothing would be controlling their lifetime since they'd now be `column_view*`.

> Instead of creating a column_view on the fly for a Python column every time you need to pass into libcudf, why not just construct and store the column_view once? I think this is what you're suggesting in #2.

We'd then need to somehow invalidate that `column_view` whenever we do something potentially mutable, which in the currently state of using legacy things as well is still somewhat all over the place. My initial thought is to basically replace where we call `.view()` currently with something like `view().column_view()` where `.view()` returns a `ColumnView` and `.column_view()` returns the C++ `column_view`, but this can lead to situations where we accidentally create an ephemeral instance of `ColumnView` and then end up with a dangling pointer in the `column_view`.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/592112476/reactions,0,0,0,0,0,0,0,0,0,4270
167,https://api.github.com/repos/rapidsai/cudf/issues/comments/592115779,https://github.com/rapidsai/cudf/issues/4270#issuecomment-592115779,https://api.github.com/repos/rapidsai/cudf/issues/4270,592115779,MDEyOklzc3VlQ29tbWVudDU5MjExNTc3OQ==,2020-02-27T18:45:43Z,2020-02-27T18:45:43Z,CONTRIBUTOR,"Understood that it will require a bit of work.

It sounds like the pros still outweigh the cons. Eliminating this pervasive compiler error will be a huge win. So unless it's totally impossible to make this change without significant effort, it still seems like something we should do.

And to be clear, this wouldn't be tackled until post-GTC, 0.14 timeframe. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/592115779/reactions,2,1,0,0,0,0,0,1,0,4270
168,https://api.github.com/repos/rapidsai/cudf/issues/comments/593712747,https://github.com/rapidsai/cudf/issues/4270#issuecomment-593712747,https://api.github.com/repos/rapidsai/cudf/issues/4270,593712747,MDEyOklzc3VlQ29tbWVudDU5MzcxMjc0Nw==,2020-03-03T01:05:50Z,2020-03-03T01:05:50Z,MEMBER,I think this is a nice bit if tech debt to tackle in 0.14.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/593712747/reactions,1,1,0,0,0,0,0,0,0,4270
169,https://api.github.com/repos/rapidsai/cudf/issues/comments/623800578,https://github.com/rapidsai/cudf/issues/4270#issuecomment-623800578,https://api.github.com/repos/rapidsai/cudf/issues/4270,623800578,MDEyOklzc3VlQ29tbWVudDYyMzgwMDU3OA==,2020-05-05T02:18:17Z,2020-05-05T02:18:17Z,MEMBER,@jrhemstad can you document here what you ran up against that lead to reprioritizing this?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/623800578/reactions,0,0,0,0,0,0,0,0,0,4270
170,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962734,https://github.com/rapidsai/cudf/issues/4270#issuecomment-798962734,https://api.github.com/repos/rapidsai/cudf/issues/4270,798962734,MDEyOklzc3VlQ29tbWVudDc5ODk2MjczNA==,2021-03-14T19:14:17Z,2021-03-14T19:14:17Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962734/reactions,0,0,0,0,0,0,0,0,0,4270
171,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962744,https://github.com/rapidsai/cudf/issues/4270#issuecomment-798962744,https://api.github.com/repos/rapidsai/cudf/issues/4270,798962744,MDEyOklzc3VlQ29tbWVudDc5ODk2Mjc0NA==,2021-03-14T19:14:20Z,2021-03-14T19:14:20Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962744/reactions,0,0,0,0,0,0,0,0,0,4270
172,https://api.github.com/repos/rapidsai/cudf/issues/comments/799870899,https://github.com/rapidsai/cudf/issues/4270#issuecomment-799870899,https://api.github.com/repos/rapidsai/cudf/issues/4270,799870899,MDEyOklzc3VlQ29tbWVudDc5OTg3MDg5OQ==,2021-03-16T01:19:59Z,2021-03-16T01:19:59Z,MEMBER,"This is still relevant. @jrhemstad instead of storing a pointer and size, I guess `column_view` could just store a `host_span<column_view>`?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/799870899/reactions,0,0,0,0,0,0,0,0,0,4270
173,https://api.github.com/repos/rapidsai/cudf/issues/comments/799880057,https://github.com/rapidsai/cudf/issues/4270#issuecomment-799880057,https://api.github.com/repos/rapidsai/cudf/issues/4270,799880057,MDEyOklzc3VlQ29tbWVudDc5OTg4MDA1Nw==,2021-03-16T01:46:09Z,2021-03-16T01:46:27Z,CONTRIBUTOR,"> This is still relevant. @jrhemstad instead of storing a pointer and size, I guess `column_view` could just store a `host_span<column_view>`?

It could, yeah. I remember I went down the path of making this change (not the `host_span` specifically) and running into what felt like a showstopper. I can't remember what it was right now. I'd have to revisit and think about it. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/799880057/reactions,0,0,0,0,0,0,0,0,0,4270
174,https://api.github.com/repos/rapidsai/cudf/issues/comments/608016509,https://github.com/rapidsai/cudf/issues/4309#issuecomment-608016509,https://api.github.com/repos/rapidsai/cudf/issues/4309,608016509,MDEyOklzc3VlQ29tbWVudDYwODAxNjUwOQ==,2020-04-02T18:04:24Z,2020-04-02T18:04:24Z,MEMBER,"In discussion with @galipremsagar offline, it appears this is related to issue ( https://github.com/dask/dask/issues/5606 ). PR ( https://github.com/dask/dask/pull/5628 ) attempts to fix that issue, but appears to have stalled out.

cc @quasiben (for awareness)",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/608016509/reactions,0,0,0,0,0,0,0,0,0,4309
175,https://api.github.com/repos/rapidsai/cudf/issues/comments/608021899,https://github.com/rapidsai/cudf/issues/4309#issuecomment-608021899,https://api.github.com/repos/rapidsai/cudf/issues/4309,608021899,MDEyOklzc3VlQ29tbWVudDYwODAyMTg5OQ==,2020-04-02T18:14:37Z,2020-04-02T18:14:37Z,MEMBER,"As a workaround, @daxiongshu, you could replace the array's `_meta` with a CuPy array. Here's an example using the code above.

```python
import cupy
import cudf
import dask_cudf

df = cudf.DataFrame({
    ""a"": list(range(20)),
    ""b"": list(reversed(range(20))),
    ""c"": list(range(20))
})
ddf = dask_cudf.from_cudf(df, npartitions=2)

dv = ddf.values
dv._meta = cupy.asarray(dv._meta)
```

cc @pentschev (in case you have other thoughts here)",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/608021899/reactions,0,0,0,0,0,0,0,0,0,4309
176,https://api.github.com/repos/rapidsai/cudf/issues/comments/608081091,https://github.com/rapidsai/cudf/issues/4309#issuecomment-608081091,https://api.github.com/repos/rapidsai/cudf/issues/4309,608081091,MDEyOklzc3VlQ29tbWVudDYwODA4MTA5MQ==,2020-04-02T20:23:03Z,2020-04-02T20:23:03Z,MEMBER,"I think your summary is correct @jakirkham , if that's a blocker we should try to push for those fixes to be merged.",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/608081091/reactions,0,0,0,0,0,0,0,0,0,4309
177,https://api.github.com/repos/rapidsai/cudf/issues/comments/608123761,https://github.com/rapidsai/cudf/issues/4309#issuecomment-608123761,https://api.github.com/repos/rapidsai/cudf/issues/4309,608123761,MDEyOklzc3VlQ29tbWVudDYwODEyMzc2MQ==,2020-04-02T22:26:43Z,2020-04-02T22:26:43Z,MEMBER,"Based on discussion with @daxiongshu offline, it sounds like [the workaround]( https://github.com/rapidsai/cudf/issues/4309#issuecomment-608021899 ) was sufficient for now. Though agree it would be good to get a proper fix upstream.",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/608123761/reactions,0,0,0,0,0,0,0,0,0,4309
178,https://api.github.com/repos/rapidsai/cudf/issues/comments/706362315,https://github.com/rapidsai/cudf/issues/4309#issuecomment-706362315,https://api.github.com/repos/rapidsai/cudf/issues/4309,706362315,MDEyOklzc3VlQ29tbWVudDcwNjM2MjMxNQ==,2020-10-09T19:24:23Z,2020-10-09T19:24:23Z,MEMBER,"> In discussion with @galipremsagar offline, it appears this is related to issue ( https://github.com/dask/dask/issues/5606 ). PR ( https://github.com/dask/dask/pull/5628 ) attempts to fix that issue, but appears to have stalled out.
>
> cc @quasiben (for awareness)

That PR has just now been merged. So should be fixed in the next Dask release.",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/706362315/reactions,0,0,0,0,0,0,0,0,0,4309
179,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962731,https://github.com/rapidsai/cudf/issues/4309#issuecomment-798962731,https://api.github.com/repos/rapidsai/cudf/issues/4309,798962731,MDEyOklzc3VlQ29tbWVudDc5ODk2MjczMQ==,2021-03-14T19:14:16Z,2021-03-14T19:14:16Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962731/reactions,0,0,0,0,0,0,0,0,0,4309
180,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962740,https://github.com/rapidsai/cudf/issues/4309#issuecomment-798962740,https://api.github.com/repos/rapidsai/cudf/issues/4309,798962740,MDEyOklzc3VlQ29tbWVudDc5ODk2Mjc0MA==,2021-03-14T19:14:19Z,2021-03-14T19:14:19Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962740/reactions,0,0,0,0,0,0,0,0,0,4309
181,https://api.github.com/repos/rapidsai/cudf/issues/comments/804643674,https://github.com/rapidsai/cudf/issues/4309#issuecomment-804643674,https://api.github.com/repos/rapidsai/cudf/issues/4309,804643674,MDEyOklzc3VlQ29tbWVudDgwNDY0MzY3NA==,2021-03-23T06:05:37Z,2021-03-23T06:05:37Z,MEMBER,Am still seeing the same issue that Jiwei saw. Maybe there is something needed in Dask-cuDF. @rjzamora do you know? 🙂,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/804643674/reactions,0,0,0,0,0,0,0,0,0,4309
182,https://api.github.com/repos/rapidsai/cudf/issues/comments/810227213,https://github.com/rapidsai/cudf/issues/4309#issuecomment-810227213,https://api.github.com/repos/rapidsai/cudf/issues/4309,810227213,MDEyOklzc3VlQ29tbWVudDgxMDIyNzIxMw==,2021-03-30T13:13:42Z,2021-03-30T13:13:42Z,MEMBER,I also came across this problem today.,,jacobtomlinson,1610850,MDQ6VXNlcjE2MTA4NTA=,https://avatars.githubusercontent.com/u/1610850?v=4,,https://api.github.com/users/jacobtomlinson,https://github.com/jacobtomlinson,https://api.github.com/users/jacobtomlinson/followers,https://api.github.com/users/jacobtomlinson/following{/other_user},https://api.github.com/users/jacobtomlinson/gists{/gist_id},https://api.github.com/users/jacobtomlinson/starred{/owner}{/repo},https://api.github.com/users/jacobtomlinson/subscriptions,https://api.github.com/users/jacobtomlinson/orgs,https://api.github.com/users/jacobtomlinson/repos,https://api.github.com/users/jacobtomlinson/events{/privacy},https://api.github.com/users/jacobtomlinson/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/810227213/reactions,0,0,0,0,0,0,0,0,0,4309
183,https://api.github.com/repos/rapidsai/cudf/issues/comments/810445173,https://github.com/rapidsai/cudf/issues/4309#issuecomment-810445173,https://api.github.com/repos/rapidsai/cudf/issues/4309,810445173,MDEyOklzc3VlQ29tbWVudDgxMDQ0NTE3Mw==,2021-03-30T17:32:28Z,2021-03-30T17:32:43Z,MEMBER,"I poked through the code on the Dask side and concluded this makes more sense to fix in Dask-cuDF. AFAICT the workaround noted above is a sufficient fix. So just implemented `values` using that ( https://github.com/rapidsai/cudf/pull/7760 )

Would add that other functions like `to_dask_array` just call `.values`. Thus this same fix should fix that function and other similarly downstream functions as well",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/810445173/reactions,0,0,0,0,0,0,0,0,0,4309
184,https://api.github.com/repos/rapidsai/cudf/issues/comments/810456421,https://github.com/rapidsai/cudf/issues/4309#issuecomment-810456421,https://api.github.com/repos/rapidsai/cudf/issues/4309,810456421,MDEyOklzc3VlQ29tbWVudDgxMDQ1NjQyMQ==,2021-03-30T17:49:46Z,2021-03-30T17:49:46Z,MEMBER,NVM Keith made a good point in the other PR. Seems we can fix this upstream. Submitted PR ( https://github.com/dask/dask/pull/7486 ),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/810456421/reactions,0,0,0,0,0,0,0,0,0,4309
185,https://api.github.com/repos/rapidsai/cudf/issues/comments/849309442,https://github.com/rapidsai/cudf/issues/4309#issuecomment-849309442,https://api.github.com/repos/rapidsai/cudf/issues/4309,849309442,MDEyOklzc3VlQ29tbWVudDg0OTMwOTQ0Mg==,2021-05-27T04:26:28Z,2021-05-27T04:26:28Z,MEMBER,@jakirkham was this bug fixed by #7760 or not?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849309442/reactions,0,0,0,0,0,0,0,0,0,4309
186,https://api.github.com/repos/rapidsai/cudf/issues/comments/849753710,https://github.com/rapidsai/cudf/issues/4309#issuecomment-849753710,https://api.github.com/repos/rapidsai/cudf/issues/4309,849753710,MDEyOklzc3VlQ29tbWVudDg0OTc1MzcxMA==,2021-05-27T16:01:53Z,2021-05-27T16:01:53Z,MEMBER,No there's an upstream PR ( https://github.com/dask/dask/pull/7399 ) that is needed,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849753710/reactions,0,0,0,0,0,0,0,0,0,4309
187,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289367597,https://github.com/rapidsai/cudf/issues/4309#issuecomment-1289367597,https://api.github.com/repos/rapidsai/cudf/issues/4309,1289367597,IC_kwDOBWUGps5M2jAt,2022-10-24T17:36:50Z,2022-10-24T17:36:50Z,CONTRIBUTOR,@jakirkham the upstream PR here has stalled. Do you know how we should follow up/whether we should still expect any progress there? Should we loop in other dask cudf devs?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289367597/reactions,0,0,0,0,0,0,0,0,0,4309
188,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290188055,https://github.com/rapidsai/cudf/issues/4309#issuecomment-1290188055,https://api.github.com/repos/rapidsai/cudf/issues/4309,1290188055,IC_kwDOBWUGps5M5rUX,2022-10-25T08:33:23Z,2022-10-25T08:33:23Z,MEMBER,AFAIU the folks involved in that PR are simply busy with other things atm. My guess is if folks here want to pick up the upstream PR that would be welcome 🙂,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290188055/reactions,0,0,0,0,0,0,0,0,0,4309
189,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291152114,https://github.com/rapidsai/cudf/issues/4309#issuecomment-1291152114,https://api.github.com/repos/rapidsai/cudf/issues/4309,1291152114,IC_kwDOBWUGps5M9Wry,2022-10-25T21:14:39Z,2022-10-25T21:14:39Z,CONTRIBUTOR,"I was specifically concerned about [the last comment about extension arrays](https://github.com/dask/dask/pull/7399#issuecomment-864078866). Do you recall if that was specifically talking about pandas ExtensionArray types, or does that also impact cupy? If it's the latter then I assume that the upstream change wouldn't help us.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291152114/reactions,0,0,0,0,0,0,0,0,0,4309
190,https://api.github.com/repos/rapidsai/cudf/issues/comments/595554908,https://github.com/rapidsai/cudf/issues/4348#issuecomment-595554908,https://api.github.com/repos/rapidsai/cudf/issues/4348,595554908,MDEyOklzc3VlQ29tbWVudDU5NTU1NDkwOA==,2020-03-06T01:43:50Z,2020-03-06T01:43:50Z,CONTRIBUTOR,"I would argue this really is not a bug since the code does not even include all of these parameters. The libcudf coded `wrap()` feature matches the nvstrings implementation which was the intention of the port. Perhaps this can be re-labeled as a feature request since supporting all of these parameters would be a very large task.
@kkraus14 ",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/595554908/reactions,2,2,0,0,0,0,0,0,0,4348
191,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962726,https://github.com/rapidsai/cudf/issues/4348#issuecomment-798962726,https://api.github.com/repos/rapidsai/cudf/issues/4348,798962726,MDEyOklzc3VlQ29tbWVudDc5ODk2MjcyNg==,2021-03-14T19:14:15Z,2021-03-14T19:14:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962726/reactions,0,0,0,0,0,0,0,0,0,4348
192,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962732,https://github.com/rapidsai/cudf/issues/4348#issuecomment-798962732,https://api.github.com/repos/rapidsai/cudf/issues/4348,798962732,MDEyOklzc3VlQ29tbWVudDc5ODk2MjczMg==,2021-03-14T19:14:16Z,2021-03-14T19:14:16Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962732/reactions,0,0,0,0,0,0,0,0,0,4348
193,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167533098,https://github.com/rapidsai/cudf/issues/4348#issuecomment-1167533098,https://api.github.com/repos/rapidsai/cudf/issues/4348,1167533098,IC_kwDOBWUGps5FlyQq,2022-06-27T15:58:15Z,2022-06-27T15:58:15Z,CONTRIBUTOR,"We plan to stick to the current `wrap` behavior based on nvstrings, rather than exactly match Pandas behavior.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167533098/reactions,0,0,0,0,0,0,0,0,0,4348
194,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355886225,https://github.com/rapidsai/cudf/issues/4348#issuecomment-1355886225,https://api.github.com/repos/rapidsai/cudf/issues/4348,1355886225,IC_kwDOBWUGps5Q0S6R,2022-12-17T00:55:09Z,2022-12-17T00:55:22Z,CONTRIBUTOR,I think we're probably going to want to try to implement these features at some point. I'm going to reopen this one for further discussion.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355886225/reactions,0,0,0,0,0,0,0,0,0,4348
195,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355893579,https://github.com/rapidsai/cudf/issues/4348#issuecomment-1355893579,https://api.github.com/repos/rapidsai/cudf/issues/4348,1355893579,IC_kwDOBWUGps5Q0UtL,2022-12-17T01:03:33Z,2022-12-17T01:03:33Z,CONTRIBUTOR,I've never seen this used. Do you have new information on requirements for this API?,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355893579/reactions,0,0,0,0,0,0,0,0,0,4348
196,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355944246,https://github.com/rapidsai/cudf/issues/4348#issuecomment-1355944246,https://api.github.com/repos/rapidsai/cudf/issues/4348,1355944246,IC_kwDOBWUGps5Q0hE2,2022-12-17T01:36:28Z,2022-12-17T01:36:28Z,CONTRIBUTOR,"No, my sudden interest in these mostly comes from needing to handle potentially changing defaults in pandas 2.0. I don't think that these are necessarily critical features to support, but given that the majority of our defaults are misaligned with pandas defaults (because we don't support the other option) I think we ought to think through the consequences for unwary pandas users. At the moment we throw out a bunch of warnings on basically any usage of `str.wrap` because our parameter defaults don't match pandas because we don't support the alternatives. That's also not a great UX.

CC @shwina ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355944246/reactions,0,0,0,0,0,0,0,0,0,4348
197,https://api.github.com/repos/rapidsai/cudf/issues/comments/603560930,https://github.com/rapidsai/cudf/issues/4365#issuecomment-603560930,https://api.github.com/repos/rapidsai/cudf/issues/4365,603560930,MDEyOklzc3VlQ29tbWVudDYwMzU2MDkzMA==,2020-03-24T23:41:40Z,2020-03-24T23:41:40Z,CONTRIBUTOR,"It's been a while but I think the reason is that we cannot overload functions on constness. So there isn't a way to return a `const scalar_device_view` based on the constness of the input. We could make it take by const ref but then we get a `scalar_device_view` that is mutable.

Another option would be to make new classes for `mutable_scalar_device_view` for each type. Then we can add const qualified methods to each typed `scalar` like `numeric_scalar<T>.device_view() const` and `numeric_scalar<T>.mutable_device_view()`.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/603560930/reactions,0,0,0,0,0,0,0,0,0,4365
198,https://api.github.com/repos/rapidsai/cudf/issues/comments/607529630,https://github.com/rapidsai/cudf/issues/4365#issuecomment-607529630,https://api.github.com/repos/rapidsai/cudf/issues/4365,607529630,MDEyOklzc3VlQ29tbWVudDYwNzUyOTYzMA==,2020-04-01T22:56:14Z,2020-04-01T22:56:14Z,MEMBER,This is borderline a feature request.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/607529630/reactions,0,0,0,0,0,0,0,0,0,4365
199,https://api.github.com/repos/rapidsai/cudf/issues/comments/678338579,https://github.com/rapidsai/cudf/issues/4365#issuecomment-678338579,https://api.github.com/repos/rapidsai/cudf/issues/4365,678338579,MDEyOklzc3VlQ29tbWVudDY3ODMzODU3OQ==,2020-08-21T15:02:35Z,2020-08-21T15:02:53Z,CONTRIBUTOR,"> This is borderline a feature request.

It's definitely a bug. As a result, we've got `const_cast`s in the code that are resulting in undefined behavior. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/678338579/reactions,0,0,0,0,0,0,0,0,0,4365
200,https://api.github.com/repos/rapidsai/cudf/issues/comments/678842340,https://github.com/rapidsai/cudf/issues/4365#issuecomment-678842340,https://api.github.com/repos/rapidsai/cudf/issues/4365,678842340,MDEyOklzc3VlQ29tbWVudDY3ODg0MjM0MA==,2020-08-23T23:57:26Z,2020-08-23T23:57:26Z,MEMBER,Can I assign you @jrhemstad ?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/678842340/reactions,0,0,0,0,0,0,0,0,0,4365
201,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962719,https://github.com/rapidsai/cudf/issues/4365#issuecomment-798962719,https://api.github.com/repos/rapidsai/cudf/issues/4365,798962719,MDEyOklzc3VlQ29tbWVudDc5ODk2MjcxOQ==,2021-03-14T19:14:14Z,2021-03-14T19:14:14Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962719/reactions,0,0,0,0,0,0,0,0,0,4365
202,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962728,https://github.com/rapidsai/cudf/issues/4365#issuecomment-798962728,https://api.github.com/repos/rapidsai/cudf/issues/4365,798962728,MDEyOklzc3VlQ29tbWVudDc5ODk2MjcyOA==,2021-03-14T19:14:15Z,2021-03-14T19:14:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962728/reactions,0,0,0,0,0,0,0,0,0,4365
203,https://api.github.com/repos/rapidsai/cudf/issues/comments/804594197,https://github.com/rapidsai/cudf/issues/4365#issuecomment-804594197,https://api.github.com/repos/rapidsai/cudf/issues/4365,804594197,MDEyOklzc3VlQ29tbWVudDgwNDU5NDE5Nw==,2021-03-23T03:45:19Z,2021-03-23T03:45:19Z,MEMBER,Still relevant,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/804594197/reactions,0,0,0,0,0,0,0,0,0,4365
204,https://api.github.com/repos/rapidsai/cudf/issues/comments/805204018,https://github.com/rapidsai/cudf/issues/4365#issuecomment-805204018,https://api.github.com/repos/rapidsai/cudf/issues/4365,805204018,MDEyOklzc3VlQ29tbWVudDgwNTIwNDAxOA==,2021-03-23T20:07:02Z,2021-03-23T20:09:38Z,CONTRIBUTOR,"This should be feasible to resolve. While @devavret is correct that you cannot overload functions based on the constness of parameters using pass-by-value semantics, the compiler can differentiate between const and non-const reference/pointer parameters. However, how would we want to address the following:
1. As @devavret suggested previously, would we want separate types for mutable and non-mutable scalars, mirroring columns views?
2. If we chose not to have separate types, the `_is_valid` member would need to be templated to support both const and non-const bool types. Furthermore, `scalar_device_view_base::set_valid` is currently marked `noexcept`: we would probably want to either avoid defining this method for const types (probably using `std::is_const_v` in some fashion), or mark it as conditionally `noexcept (std::is_const_v<BoolType>)` and raise an exception. The former seems like a much better solution, but I don't know if we make any API promises that would be violated by such a change.

Happy to work on this if it's worth prioritizing.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/805204018/reactions,0,0,0,0,0,0,0,0,0,4365
205,https://api.github.com/repos/rapidsai/cudf/issues/comments/805726131,https://github.com/rapidsai/cudf/issues/4365#issuecomment-805726131,https://api.github.com/repos/rapidsai/cudf/issues/4365,805726131,MDEyOklzc3VlQ29tbWVudDgwNTcyNjEzMQ==,2021-03-24T11:01:06Z,2021-03-24T11:01:06Z,MEMBER,"It's worth prioritizing, just not sure how high. :)",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/805726131/reactions,0,0,0,0,0,0,0,0,0,4365
206,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962705,https://github.com/rapidsai/cudf/issues/4410#issuecomment-798962705,https://api.github.com/repos/rapidsai/cudf/issues/4410,798962705,MDEyOklzc3VlQ29tbWVudDc5ODk2MjcwNQ==,2021-03-14T19:14:11Z,2021-03-14T19:14:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962705/reactions,0,0,0,0,0,0,0,0,0,4410
207,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962710,https://github.com/rapidsai/cudf/issues/4410#issuecomment-798962710,https://api.github.com/repos/rapidsai/cudf/issues/4410,798962710,MDEyOklzc3VlQ29tbWVudDc5ODk2MjcxMA==,2021-03-14T19:14:12Z,2021-03-14T19:14:12Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962710/reactions,0,0,0,0,0,0,0,0,0,4410
208,https://api.github.com/repos/rapidsai/cudf/issues/comments/599822262,https://github.com/rapidsai/cudf/issues/4529#issuecomment-599822262,https://api.github.com/repos/rapidsai/cudf/issues/4529,599822262,MDEyOklzc3VlQ29tbWVudDU5OTgyMjI2Mg==,2020-03-17T00:47:43Z,2020-03-17T03:26:32Z,NONE,"Clarifying from Slack:

This is related to but not dependent on CUDA streams. CUDA streams (afaict) allow control of concurrent + parallel execution of ~heterogeneous CUDA task graphs. 

Consider a modern server (python, node, ruby, php, java, ...) GPU-accelerating requests of different type & size:

The relationship is:

* Priority request - non-blocking of host event loops: Allow the host's event loop to not block on cudf calls, and instead proceed to handling the next server request, and get back to cudf when it's done. So the GPU crunching doesn't prevent the CPU from continuing, such as being able to tell clients  ""come back later"" and ""progress"" and ""here's some CPU calcs"". This helps prevents big tasks from making the system non-responsive and otherwise starving the system.

* Maybe viable - non-blocking event loop w/ streams across requests: If each event context is really a sequence of cudf calls, CUDA streams would support better (e.g., parallel) execution of heterogenous tasks across concurrent events. This would help increase GPU utilization when tasks are of different sizes, so a bunch of tiny tasks wouldn't clog up a big box through low utilization / inversion of control.

* User-level: Some better users may occasionally benefit from user-control of cuda streams:

```
await asyncio.gather([ task1, task2, task3 ])
```

* Framework-level: Algo writers may be even more prone to writing such tasks.

Priority order, IMO is:
-- cudf not blocking the event loop
-- a concurrency control for allowing concurrent task execution across event contexts

```
cudf.set_asyncio_concurrent_streams(10)
```

Or enabling user schedulers to map event context <> default cuda stream
```
cudf.set_stream_context_id( cudf.get_stream_context_id() )
cudf.set_stream_policy(....)
```

-- DAG primitives like `gather`",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/599822262/reactions,0,0,0,0,0,0,0,0,0,4529
209,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962683,https://github.com/rapidsai/cudf/issues/4529#issuecomment-798962683,https://api.github.com/repos/rapidsai/cudf/issues/4529,798962683,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY4Mw==,2021-03-14T19:14:06Z,2021-03-14T19:14:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962683/reactions,0,0,0,0,0,0,0,0,0,4529
210,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962692,https://github.com/rapidsai/cudf/issues/4529#issuecomment-798962692,https://api.github.com/repos/rapidsai/cudf/issues/4529,798962692,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY5Mg==,2021-03-14T19:14:08Z,2021-03-14T19:14:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962692/reactions,0,0,0,0,0,0,0,0,0,4529
211,https://api.github.com/repos/rapidsai/cudf/issues/comments/601487246,https://github.com/rapidsai/cudf/issues/4607#issuecomment-601487246,https://api.github.com/repos/rapidsai/cudf/issues/4607,601487246,MDEyOklzc3VlQ29tbWVudDYwMTQ4NzI0Ng==,2020-03-20T01:17:47Z,2020-03-20T01:17:47Z,MEMBER,Agree.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/601487246/reactions,0,0,0,0,0,0,0,0,0,4607
212,https://api.github.com/repos/rapidsai/cudf/issues/comments/601487515,https://github.com/rapidsai/cudf/issues/4607#issuecomment-601487515,https://api.github.com/repos/rapidsai/cudf/issues/4607,601487515,MDEyOklzc3VlQ29tbWVudDYwMTQ4NzUxNQ==,2020-03-20T01:19:01Z,2020-03-20T01:19:01Z,CONTRIBUTOR,"> Agree.

New API or change `split`? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/601487515/reactions,0,0,0,0,0,0,0,0,0,4607
213,https://api.github.com/repos/rapidsai/cudf/issues/comments/601505932,https://github.com/rapidsai/cudf/issues/4607#issuecomment-601505932,https://api.github.com/repos/rapidsai/cudf/issues/4607,601505932,MDEyOklzc3VlQ29tbWVudDYwMTUwNTkzMg==,2020-03-20T03:05:46Z,2020-03-20T03:05:46Z,MEMBER,"> There should be an API that allows naively passing in the vector of offsets from a partitioning API and it returns a vector of zero-copy views for each partition.

Was agreeing with your final statement, which didn't specify a choice.  :)  I would change split. Doing so would also make split slightly more versatile -- e.g. it could be used to skip the beginning and/or end of a table when splitting. 

but of course we need to check for any existing users of split before we change it...",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/601505932/reactions,0,0,0,0,0,0,0,0,0,4607
214,https://api.github.com/repos/rapidsai/cudf/issues/comments/607530873,https://github.com/rapidsai/cudf/issues/4607#issuecomment-607530873,https://api.github.com/repos/rapidsai/cudf/issues/4607,607530873,MDEyOklzc3VlQ29tbWVudDYwNzUzMDg3Mw==,2020-04-01T23:00:17Z,2020-04-01T23:00:17Z,MEMBER,Should at least fix the docs for now.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/607530873/reactions,0,0,0,0,0,0,0,0,0,4607
215,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962663,https://github.com/rapidsai/cudf/issues/4607#issuecomment-798962663,https://api.github.com/repos/rapidsai/cudf/issues/4607,798962663,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY2Mw==,2021-03-14T19:14:01Z,2021-03-14T19:14:01Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962663/reactions,0,0,0,0,0,0,0,0,0,4607
216,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962675,https://github.com/rapidsai/cudf/issues/4607#issuecomment-798962675,https://api.github.com/repos/rapidsai/cudf/issues/4607,798962675,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY3NQ==,2021-03-14T19:14:03Z,2021-03-14T19:14:03Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962675/reactions,0,0,0,0,0,0,0,0,0,4607
217,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182125093,https://github.com/rapidsai/cudf/issues/4607#issuecomment-1182125093,https://api.github.com/repos/rapidsai/cudf/issues/4607,1182125093,IC_kwDOBWUGps5Gdcwl,2022-07-12T17:54:05Z,2022-07-12T17:54:05Z,CONTRIBUTOR,"FWIW, `offsets` of length `n+1` is most convenient if interfacing with MPI-like libraries, and is also consistent with most ragged-array CSR-style data-structures, so I would argue for rationalizing on that.

(If you need to return sparse partitions then a pair of `counts` and `offsets` is probably necessary.)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182125093/reactions,0,0,0,0,0,0,0,0,0,4607
218,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182371689,https://github.com/rapidsai/cudf/issues/4607#issuecomment-1182371689,https://api.github.com/repos/rapidsai/cudf/issues/4607,1182371689,IC_kwDOBWUGps5GeY9p,2022-07-12T19:36:28Z,2022-07-12T19:36:28Z,CONTRIBUTOR,"Just want to link https://github.com/rapidsai/cudf/issues/11223 to this issue as well.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182371689/reactions,1,1,0,0,0,0,0,0,0,4607
219,https://api.github.com/repos/rapidsai/cudf/issues/comments/604545225,https://github.com/rapidsai/cudf/issues/4706#issuecomment-604545225,https://api.github.com/repos/rapidsai/cudf/issues/4706,604545225,MDEyOklzc3VlQ29tbWVudDYwNDU0NTIyNQ==,2020-03-26T16:53:56Z,2020-03-26T16:53:56Z,CONTRIBUTOR,@taureandyernv fyi.,,rnyak,16246900,MDQ6VXNlcjE2MjQ2OTAw,https://avatars.githubusercontent.com/u/16246900?v=4,,https://api.github.com/users/rnyak,https://github.com/rnyak,https://api.github.com/users/rnyak/followers,https://api.github.com/users/rnyak/following{/other_user},https://api.github.com/users/rnyak/gists{/gist_id},https://api.github.com/users/rnyak/starred{/owner}{/repo},https://api.github.com/users/rnyak/subscriptions,https://api.github.com/users/rnyak/orgs,https://api.github.com/users/rnyak/repos,https://api.github.com/users/rnyak/events{/privacy},https://api.github.com/users/rnyak/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/604545225/reactions,0,0,0,0,0,0,0,0,0,4706
220,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962645,https://github.com/rapidsai/cudf/issues/4706#issuecomment-798962645,https://api.github.com/repos/rapidsai/cudf/issues/4706,798962645,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY0NQ==,2021-03-14T19:13:57Z,2021-03-14T19:13:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962645/reactions,0,0,0,0,0,0,0,0,0,4706
221,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962656,https://github.com/rapidsai/cudf/issues/4706#issuecomment-798962656,https://api.github.com/repos/rapidsai/cudf/issues/4706,798962656,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY1Ng==,2021-03-14T19:13:59Z,2021-03-14T19:13:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962656/reactions,0,0,0,0,0,0,0,0,0,4706
222,https://api.github.com/repos/rapidsai/cudf/issues/comments/805964177,https://github.com/rapidsai/cudf/issues/4706#issuecomment-805964177,https://api.github.com/repos/rapidsai/cudf/issues/4706,805964177,MDEyOklzc3VlQ29tbWVudDgwNTk2NDE3Nw==,2021-03-24T16:18:28Z,2021-03-24T16:18:28Z,CONTRIBUTOR,Still a desired [FEA],,randerzander,1692914,MDQ6VXNlcjE2OTI5MTQ=,https://avatars.githubusercontent.com/u/1692914?v=4,,https://api.github.com/users/randerzander,https://github.com/randerzander,https://api.github.com/users/randerzander/followers,https://api.github.com/users/randerzander/following{/other_user},https://api.github.com/users/randerzander/gists{/gist_id},https://api.github.com/users/randerzander/starred{/owner}{/repo},https://api.github.com/users/randerzander/subscriptions,https://api.github.com/users/randerzander/orgs,https://api.github.com/users/randerzander/repos,https://api.github.com/users/randerzander/events{/privacy},https://api.github.com/users/randerzander/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/805964177/reactions,0,0,0,0,0,0,0,0,0,4706
223,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030125616,https://github.com/rapidsai/cudf/issues/4706#issuecomment-1030125616,https://api.github.com/repos/rapidsai/cudf/issues/4706,1030125616,IC_kwDOBWUGps49Zngw,2022-02-04T16:04:45Z,2022-02-04T19:16:04Z,MEMBER,"Ideally, this would also be enabled by an implementation on dask.dataframe, so we can enable group quantile/percentile on CPUs and GPUs",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030125616/reactions,0,0,0,0,0,0,0,0,0,4706
224,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105353558,https://github.com/rapidsai/cudf/issues/4706#issuecomment-2105353558,https://api.github.com/repos/rapidsai/cudf/issues/4706,2105353558,IC_kwDOBWUGps59fSVW,2024-05-10T22:44:04Z,2024-05-10T22:44:04Z,CONTRIBUTOR,"It looks like median is now implemented
```
In [27]: ddf.groupby(['id4', 'id5'])[['v3']].median().compute()
Out[27]: 
          v3
id4 id5     
0   5    1.0
1   4    2.0
2   3    1.0
3   2    2.0
4   1    1.0
5   0    2.0
```

quantile remains unimplemented.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105353558/reactions,0,0,0,0,0,0,0,0,0,4706
225,https://api.github.com/repos/rapidsai/cudf/issues/comments/606634830,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606634830,https://api.github.com/repos/rapidsai/cudf/issues/4753,606634830,MDEyOklzc3VlQ29tbWVudDYwNjYzNDgzMA==,2020-03-31T13:41:28Z,2020-03-31T13:41:28Z,CONTRIBUTOR,The example was very confusing until I realized you were describing a _groupby_ aggregation. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606634830/reactions,1,1,0,0,0,0,0,0,0,4753
226,https://api.github.com/repos/rapidsai/cudf/issues/comments/606636400,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606636400,https://api.github.com/repos/rapidsai/cudf/issues/4753,606636400,MDEyOklzc3VlQ29tbWVudDYwNjYzNjQwMA==,2020-03-31T13:44:06Z,2020-03-31T13:44:06Z,CONTRIBUTOR,"From https://github.com/rapidsai/cudf/issues/4754

```
scala> spark.sql(""""select * from floatsAndDoubles"""").show
+-----+------+
|float|double|
+-----+------+
|  NaN|   NaN|
| 1.02|   NaN|
|  NaN|   4.5|
+-----+------+
```

running an aggregate(max) op on the double-column will result in the following table 

```
+----------+-----------+
| float    |max(double)|
+----------+-----------+
| 1.020000 | -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000000 |
| NaN      | 4.500000  |
+----------+-----------+
```

**Expected behavior**
It should output this 

```
""scala> spark.sql(""""select float, max(double) from floatsAndDoubles group by float"""").show
+-----+-----------+
|float|max(double)|
+-----+-----------+
| 1.02|        NaN|
|  NaN|        NaN|
+-----+-----------+""
```

**Additional context**
For context here is what aggregate(sum) does in cudf
```
+------+-----+
|float | sum |
+------+-----+
| 1.02 | NaN |
| NaN  | NaN |
+------+-----+
```
",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606636400/reactions,0,0,0,0,0,0,0,0,0,4753
227,https://api.github.com/repos/rapidsai/cudf/issues/comments/606646969,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606646969,https://api.github.com/repos/rapidsai/cudf/issues/4753,606646969,MDEyOklzc3VlQ29tbWVudDYwNjY0Njk2OQ==,2020-03-31T14:01:49Z,2020-03-31T14:02:32Z,CONTRIBUTOR,"There's no way to accomplish this behavior in a hash based groupby without significant performance loss. For min/max, we rely on CUDA `atomicMin`/`atomicMax`. There's no way to inject custom logic into these comparisons. So we would instead have to specialize floating point min/max operations to use a `atomicCAS` instead, which is much slower than a native `min/max` atomic. 

Sort-based groupby uses the same `aggregate_row` functionality for min/max, so it has the same problem. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606646969/reactions,0,0,0,0,0,0,0,0,0,4753
228,https://api.github.com/repos/rapidsai/cudf/issues/comments/606659917,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606659917,https://api.github.com/repos/rapidsai/cudf/issues/4753,606659917,MDEyOklzc3VlQ29tbWVudDYwNjY1OTkxNw==,2020-03-31T14:23:20Z,2020-03-31T14:23:20Z,CONTRIBUTOR,"Similar to https://github.com/rapidsai/cudf/issues/4752, I'm marking this as a feature request rather than a bug. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606659917/reactions,0,0,0,0,0,0,0,0,0,4753
229,https://api.github.com/repos/rapidsai/cudf/issues/comments/606684597,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606684597,https://api.github.com/repos/rapidsai/cudf/issues/4753,606684597,MDEyOklzc3VlQ29tbWVudDYwNjY4NDU5Nw==,2020-03-31T15:04:52Z,2020-03-31T15:04:52Z,CONTRIBUTOR,"> There's no way to accomplish this behavior in a hash based groupby without significant performance loss. For min/max, we rely on CUDA `atomicMin`/`atomicMax`.
> 

I think the first part of that statement is only a consequence of the second part. A reduction not based on atomics (like in ORC/Parquet stats) should be just as fast if not faster than an atomic-based implementation (it may just require a tiny 2nd low utilization pass to aggregate multiple results)",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606684597/reactions,0,0,0,0,0,0,0,0,0,4753
230,https://api.github.com/repos/rapidsai/cudf/issues/comments/606691020,https://github.com/rapidsai/cudf/issues/4753#issuecomment-606691020,https://api.github.com/repos/rapidsai/cudf/issues/4753,606691020,MDEyOklzc3VlQ29tbWVudDYwNjY5MTAyMA==,2020-03-31T15:15:22Z,2020-03-31T15:15:22Z,CONTRIBUTOR,"> I think the first part of that statement is only a consequence of the second part. A reduction not based on atomics (like in ORC/Parquet stats) should be just as fast if not faster than an atomic-based implementation (it may just require a tiny 2nd low utilization pass to aggregate multiple results)

A groupby reduction (reduce by key) and a column-level reduction are very different things. 

The implementation of groupby that uses a hash table requires the use of atomics. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/606691020/reactions,0,0,0,0,0,0,0,0,0,4753
231,https://api.github.com/repos/rapidsai/cudf/issues/comments/637588529,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637588529,https://api.github.com/repos/rapidsai/cudf/issues/4753,637588529,MDEyOklzc3VlQ29tbWVudDYzNzU4ODUyOQ==,2020-06-02T14:42:57Z,2020-06-02T19:36:01Z,CONTRIBUTOR,"To add here and possibly this is already known - if an aggregation does not have a grouping key, operations like max() still give a different result than Spark's implementation.",,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637588529/reactions,0,0,0,0,0,0,0,0,0,4753
232,https://api.github.com/repos/rapidsai/cudf/issues/comments/637666472,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637666472,https://api.github.com/repos/rapidsai/cudf/issues/4753,637666472,MDEyOklzc3VlQ29tbWVudDYzNzY2NjQ3Mg==,2020-06-02T16:30:26Z,2020-06-02T16:30:26Z,CONTRIBUTOR,"> if an aggregation does not have a grouping key

What does that mean? Is that just a column-level reduction? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637666472/reactions,0,0,0,0,0,0,0,0,0,4753
233,https://api.github.com/repos/rapidsai/cudf/issues/comments/637701048,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637701048,https://api.github.com/repos/rapidsai/cudf/issues/4753,637701048,MDEyOklzc3VlQ29tbWVudDYzNzcwMTA0OA==,2020-06-02T17:38:08Z,2020-06-02T17:38:08Z,CONTRIBUTOR,"> Is that just a column-level reduction?
>
Yes",,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637701048/reactions,0,0,0,0,0,0,0,0,0,4753
234,https://api.github.com/repos/rapidsai/cudf/issues/comments/637736193,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637736193,https://api.github.com/repos/rapidsai/cudf/issues/4753,637736193,MDEyOklzc3VlQ29tbWVudDYzNzczNjE5Mw==,2020-06-02T18:42:08Z,2020-06-02T18:42:08Z,CONTRIBUTOR,"> > Is that just a column-level reduction?
> 
> Yes

Based on discussion in https://github.com/rapidsai/cudf/issues/4760, I believe that is a situation where Spark will need to do additional pre-processing to satisfy Spark's requirements. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637736193/reactions,0,0,0,0,0,0,0,0,0,4753
235,https://api.github.com/repos/rapidsai/cudf/issues/comments/637740919,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637740919,https://api.github.com/repos/rapidsai/cudf/issues/4753,637740919,MDEyOklzc3VlQ29tbWVudDYzNzc0MDkxOQ==,2020-06-02T18:51:36Z,2020-06-02T18:51:36Z,CONTRIBUTOR,">Spark will need to do additional pre-processing to satisfy Spark's requirements.
>
Other than not running on the GPU, I am not sure how aggregates/reductions can be pre-processed to handle NaNs. @revans2. Am I missing something here?",,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637740919/reactions,0,0,0,0,0,0,0,0,0,4753
236,https://api.github.com/repos/rapidsai/cudf/issues/comments/637743952,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637743952,https://api.github.com/repos/rapidsai/cudf/issues/4753,637743952,MDEyOklzc3VlQ29tbWVudDYzNzc0Mzk1Mg==,2020-06-02T18:57:19Z,2020-06-02T18:57:19Z,MEMBER,"Some simple reductions like min/max/sum/etc. should be straightforward.  We would just need to replace NaNs with the value desired if the reduction with NaNs doesn't result in NaN. For example, if we're doing a max reduction then we can check if there's a NaN anywhere and if so just return NaN otherwise do the reduction (via copy_if_else).  If we're doing a min then we can just replace NaNs with null or filter them out completely.

Aggregations _might_ be able to be handled similarly, but I suspect some aggregations we won't be able to pre-process properly.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637743952/reactions,0,0,0,0,0,0,0,0,0,4753
237,https://api.github.com/repos/rapidsai/cudf/issues/comments/637744929,https://github.com/rapidsai/cudf/issues/4753#issuecomment-637744929,https://api.github.com/repos/rapidsai/cudf/issues/4753,637744929,MDEyOklzc3VlQ29tbWVudDYzNzc0NDkyOQ==,2020-06-02T18:59:21Z,2020-06-02T18:59:21Z,CONTRIBUTOR,"Thanks @jlowe , sounds like a plan. I will follow up on the changes we need on our side. Thanks @jrhemstad.
",,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/637744929/reactions,0,0,0,0,0,0,0,0,0,4753
238,https://api.github.com/repos/rapidsai/cudf/issues/comments/732319965,https://github.com/rapidsai/cudf/issues/4753#issuecomment-732319965,https://api.github.com/repos/rapidsai/cudf/issues/4753,732319965,MDEyOklzc3VlQ29tbWVudDczMjMxOTk2NQ==,2020-11-23T17:46:13Z,2020-11-23T17:46:13Z,CONTRIBUTOR,@kuhushukla any update on this? ,,razajafri,8813002,MDQ6VXNlcjg4MTMwMDI=,https://avatars.githubusercontent.com/u/8813002?v=4,,https://api.github.com/users/razajafri,https://github.com/razajafri,https://api.github.com/users/razajafri/followers,https://api.github.com/users/razajafri/following{/other_user},https://api.github.com/users/razajafri/gists{/gist_id},https://api.github.com/users/razajafri/starred{/owner}{/repo},https://api.github.com/users/razajafri/subscriptions,https://api.github.com/users/razajafri/orgs,https://api.github.com/users/razajafri/repos,https://api.github.com/users/razajafri/events{/privacy},https://api.github.com/users/razajafri/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/732319965/reactions,0,0,0,0,0,0,0,0,0,4753
239,https://api.github.com/repos/rapidsai/cudf/issues/comments/732324841,https://github.com/rapidsai/cudf/issues/4753#issuecomment-732324841,https://api.github.com/repos/rapidsai/cudf/issues/4753,732324841,MDEyOklzc3VlQ29tbWVudDczMjMyNDg0MQ==,2020-11-23T17:54:30Z,2020-11-23T17:54:30Z,CONTRIBUTOR,No update at the moment,,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/732324841/reactions,0,0,0,0,0,0,0,0,0,4753
240,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962638,https://github.com/rapidsai/cudf/issues/4753#issuecomment-798962638,https://api.github.com/repos/rapidsai/cudf/issues/4753,798962638,MDEyOklzc3VlQ29tbWVudDc5ODk2MjYzOA==,2021-03-14T19:13:55Z,2021-03-14T19:13:55Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962638/reactions,0,0,0,0,0,0,0,0,0,4753
241,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962644,https://github.com/rapidsai/cudf/issues/4753#issuecomment-798962644,https://api.github.com/repos/rapidsai/cudf/issues/4753,798962644,MDEyOklzc3VlQ29tbWVudDc5ODk2MjY0NA==,2021-03-14T19:13:56Z,2021-03-14T19:13:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962644/reactions,0,0,0,0,0,0,0,0,0,4753
242,https://api.github.com/repos/rapidsai/cudf/issues/comments/896957503,https://github.com/rapidsai/cudf/issues/4753#issuecomment-896957503,https://api.github.com/repos/rapidsai/cudf/issues/4753,896957503,IC_kwDOBWUGps41dnw_,2021-08-11T16:09:44Z,2021-08-11T16:12:20Z,CONTRIBUTOR,"I believe that this is still needed. We already have a NaN equality configs for collect_set and merge_set operations. This feels similar. To be clear we could make the proposal https://github.com/rapidsai/cudf/issues/4753#issuecomment-637743952 work for some cases, but not all, and in the cases we can make it work it feels unreasonable to do so.

Instead of doing a single reduction we would have to 

1. call `is_nan`
2. do an `any` reduction to see if we have to go any further.
3. If there are any nans do an all reduction.
4. If they are all nans stop because the result will be NaN
5. if they are not all nans, then call `replace_nans` to replace the NaN with a min or max value depending on the operation being done.

This makes the code a little more complicated, but we can isolate it and it is not likely to cause too many issues.

For group by aggregations it would be much more complicated. We could do it but to be able to tell on a per group basis if we need to replace a NaN or not is going to require us to do a group by aggregation to check the same any/all conditions and then find a way to put that back with the original input data.  That means either doing a join with the original input data on the grouping keys or sorting the data. Both of those would have very large performance penalties, even in the common case when there are no NaN values.

For windowing, which we now also need to support, there is no way to do this.  We could have a single row that contributes to multiple separate aggregations. Some of which may have all of the values be NaN. Some of which may have only a few of the values be NaNs.  There is no way for us to fix up the input data to work around this.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/896957503/reactions,0,0,0,0,0,0,0,0,0,4753
243,https://api.github.com/repos/rapidsai/cudf/issues/comments/1428471533,https://github.com/rapidsai/cudf/issues/4753#issuecomment-1428471533,https://api.github.com/repos/rapidsai/cudf/issues/4753,1428471533,IC_kwDOBWUGps5VJL7t,2023-02-13T18:45:23Z,2023-02-13T18:45:37Z,CONTRIBUTOR,"Based on some offline discussion, we agreed to keep this issue open. The NaN value issue impacts hash-based groupby aggregations with a `float` key type. We expect `float` types to be rarely used as groupby keys, and Spark-RAPIDS has workarounds that are adequate for now.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1428471533/reactions,0,0,0,0,0,0,0,0,0,4753
244,https://api.github.com/repos/rapidsai/cudf/issues/comments/618471297,https://github.com/rapidsai/cudf/issues/4999#issuecomment-618471297,https://api.github.com/repos/rapidsai/cudf/issues/4999,618471297,MDEyOklzc3VlQ29tbWVudDYxODQ3MTI5Nw==,2020-04-23T15:38:48Z,2020-04-23T15:38:48Z,COLLABORATOR,"cc @vuule @OlivierNV 

We shouldn't consider this until we refactor the CSV reader based on #1229",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/618471297/reactions,1,1,0,0,0,0,0,0,0,4999
245,https://api.github.com/repos/rapidsai/cudf/issues/comments/632639152,https://github.com/rapidsai/cudf/issues/4999#issuecomment-632639152,https://api.github.com/repos/rapidsai/cudf/issues/4999,632639152,MDEyOklzc3VlQ29tbWVudDYzMjYzOTE1Mg==,2020-05-22T11:17:12Z,2020-05-22T11:17:12Z,MEMBER,"Hi all,

I was wondering if there is any progress on this feature request.

Thanks!

Miguel",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/632639152/reactions,0,0,0,0,0,0,0,0,0,4999
246,https://api.github.com/repos/rapidsai/cudf/issues/comments/632957137,https://github.com/rapidsai/cudf/issues/4999#issuecomment-632957137,https://api.github.com/repos/rapidsai/cudf/issues/4999,632957137,MDEyOklzc3VlQ29tbWVudDYzMjk1NzEzNw==,2020-05-23T00:46:32Z,2020-05-23T00:46:32Z,CONTRIBUTOR,"Hi Miguel, the team is still wrapping up the prioritized issues for the 0.14 release. ",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/632957137/reactions,1,1,0,0,0,0,0,0,0,4999
247,https://api.github.com/repos/rapidsai/cudf/issues/comments/717778636,https://github.com/rapidsai/cudf/issues/4999#issuecomment-717778636,https://api.github.com/repos/rapidsai/cudf/issues/4999,717778636,MDEyOklzc3VlQ29tbWVudDcxNzc3ODYzNg==,2020-10-28T08:28:18Z,2020-10-28T08:28:18Z,MEMBER,"Hi!

I was wondering if you could please have a look at the feature request above.

Thanks!

Miguel ",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/717778636/reactions,0,0,0,0,0,0,0,0,0,4999
248,https://api.github.com/repos/rapidsai/cudf/issues/comments/717981699,https://github.com/rapidsai/cudf/issues/4999#issuecomment-717981699,https://api.github.com/repos/rapidsai/cudf/issues/4999,717981699,MDEyOklzc3VlQ29tbWVudDcxNzk4MTY5OQ==,2020-10-28T14:45:04Z,2020-10-28T14:45:04Z,COLLABORATOR,"> Hi!
> 
> I was wondering if you could please have a look at the feature request above.
> 
> Thanks!
> 
> Miguel

cuIO is going through a large refactoring to make supporting requests like these easier moving forward. We'll re-evaluate this request once the refactoring is completed.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/717981699/reactions,0,0,0,0,0,0,0,0,0,4999
249,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962582,https://github.com/rapidsai/cudf/issues/4999#issuecomment-798962582,https://api.github.com/repos/rapidsai/cudf/issues/4999,798962582,MDEyOklzc3VlQ29tbWVudDc5ODk2MjU4Mg==,2021-03-14T19:13:40Z,2021-03-14T19:13:40Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962582/reactions,0,0,0,0,0,0,0,0,0,4999
250,https://api.github.com/repos/rapidsai/cudf/issues/comments/799636549,https://github.com/rapidsai/cudf/issues/4999#issuecomment-799636549,https://api.github.com/repos/rapidsai/cudf/issues/4999,799636549,MDEyOklzc3VlQ29tbWVudDc5OTYzNjU0OQ==,2021-03-15T18:11:32Z,2021-03-15T18:11:32Z,MEMBER,I think this feature request is still relevant.,,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/799636549/reactions,0,0,0,0,0,0,0,0,0,4999
251,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171750880,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1171750880,https://api.github.com/repos/rapidsai/cudf/issues/4999,1171750880,IC_kwDOBWUGps5F13_g,2022-06-30T22:55:12Z,2022-06-30T22:55:12Z,CONTRIBUTOR,"Thank you @miguelusque for raising this idea. With byte-range support available for `read_csv`, we don't plan on implementing chunked CSV reading. ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171750880/reactions,0,0,0,0,0,0,0,0,0,4999
252,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171765683,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1171765683,https://api.github.com/repos/rapidsai/cudf/issues/4999,1171765683,IC_kwDOBWUGps5F17mz,2022-06-30T23:21:38Z,2022-06-30T23:21:38Z,CONTRIBUTOR,Re-opening this after a discussion with @miguelusque. We could implement CSV chunked reading at the cuDF-python layer or the libcudf layer to achieve the desired outcome. ,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171765683/reactions,0,0,0,0,0,0,0,0,0,4999
253,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337596658,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1337596658,https://api.github.com/repos/rapidsai/cudf/issues/4999,1337596658,IC_kwDOBWUGps5Puhry,2022-12-05T15:42:32Z,2022-12-05T15:42:32Z,CONTRIBUTOR,"@vuule, @GregoryKimball - it looks like chunking is implemented for `write_csv` at the `libcudf` level, but not `read_csv`. 

> We could implement CSV chunked reading at the cuDF-python layer

Would this be accomplished via a combination of `skip_rows` and `nrows` to read the chunks, and `concat` to combine them? 

That sounds doable, but I wanted to double check whether using `skip_rows` would actually result in lower (**peak**) memory usage than reading the entire `.csv`? ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337596658/reactions,0,0,0,0,0,0,0,0,0,4999
254,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337727698,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1337727698,https://api.github.com/repos/rapidsai/cudf/issues/4999,1337727698,IC_kwDOBWUGps5PvBrS,2022-12-05T16:56:34Z,2022-12-05T16:57:28Z,CONTRIBUTOR,"> whether using skip_rows would actually result in lower (peak) memory usage than reading the entire .csv?

Emperically, the answer is yes (using `byte_range` as suggested by @miguelusque as opposed to `skip_rows`):

```python
import cudf
from dask.utils import format_bytes, parse_bytes
import rmm

from contextlib import contextmanager


def make_csv():
    data = cudf.datasets.randomdata(10_000_000, dtypes={'a': str, 'b': str, 'c': str, 'd': str})
    data.to_csv(""test.csv"", index=False)

@contextmanager
def peak_memory(*args, **kwargs):
    old_mr = rmm.mr.get_current_device_resource()
    mr = rmm.mr.StatisticsResourceAdaptor(old_mr)    
    rmm.mr.set_current_device_resource(mr)
    initial_peak_mem = mr.allocation_counts[""peak_bytes""]
    try:
        yield
    finally:
        final_peak_mem = mr.allocation_counts[""peak_bytes""]
        print(format_bytes(final_peak_mem - initial_peak_mem))
        rmm.mr.set_current_device_resource(old_mr)

def chunked_csv_reader(fname, chunksize, *args, **kwargs):
    chunksize = parse_bytes(chunksize)
    chunks = []
    offset = 0
    while True:
        try:
            chunk = cudf.read_csv(""test.csv"", byte_range=[offset, chunksize], header=None, *args, **kwargs)
        except RuntimeError as e:
            if ""Offset is past end of file"" in str(e):
                break
        chunks.append(chunk) 
        offset += chunksize
    return cudf.concat(chunks, ignore_index=True)

if __name__ == ""__main__"":
    make_csv()

    with peak_memory():
        cudf.read_csv(""test.csv"", index_col=False)

    with peak_memory():
        chunked_csv_reader(""test.csv"", ""100 MiB"", dtype=[str, str, str, str], index_col=False)
```

Output:

```
1.35 GiB
716.98 MiB
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337727698/reactions,1,0,0,0,0,0,1,0,0,4999
255,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341587120,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1341587120,https://api.github.com/repos/rapidsai/cudf/issues/4999,1341587120,IC_kwDOBWUGps5P9v6w,2022-12-07T20:57:37Z,2022-12-07T20:57:37Z,CONTRIBUTOR,"Great demonstration of how `byte_range` helps here!
`skip_rows` should also reduce the peak memory use, but it would be slower than `byte_range`. On the other hand, `byte_range` is not 100% reliable, see https://github.com/rapidsai/cudf/issues/7602.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341587120/reactions,0,0,0,0,0,0,0,0,0,4999
256,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341588428,https://github.com/rapidsai/cudf/issues/4999#issuecomment-1341588428,https://api.github.com/repos/rapidsai/cudf/issues/4999,1341588428,IC_kwDOBWUGps5P9wPM,2022-12-07T20:58:53Z,2022-12-07T20:58:53Z,CONTRIBUTOR,related https://github.com/rapidsai/cudf/issues/10554,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341588428/reactions,0,0,0,0,0,0,0,0,0,4999
257,https://api.github.com/repos/rapidsai/cudf/issues/comments/619303617,https://github.com/rapidsai/cudf/issues/5017#issuecomment-619303617,https://api.github.com/repos/rapidsai/cudf/issues/5017,619303617,MDEyOklzc3VlQ29tbWVudDYxOTMwMzYxNw==,2020-04-25T02:10:05Z,2020-04-25T02:10:05Z,CONTRIBUTOR,"Doable, but definitly not a trivial task, would involve new APIs between python and cpp layers.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/619303617/reactions,0,0,0,0,0,0,0,0,0,5017
258,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962580,https://github.com/rapidsai/cudf/issues/5017#issuecomment-798962580,https://api.github.com/repos/rapidsai/cudf/issues/5017,798962580,MDEyOklzc3VlQ29tbWVudDc5ODk2MjU4MA==,2021-03-14T19:13:39Z,2021-03-14T19:13:39Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962580/reactions,0,0,0,0,0,0,0,0,0,5017
259,https://api.github.com/repos/rapidsai/cudf/issues/comments/623675316,https://github.com/rapidsai/cudf/issues/5080#issuecomment-623675316,https://api.github.com/repos/rapidsai/cudf/issues/5080,623675316,MDEyOklzc3VlQ29tbWVudDYyMzY3NTMxNg==,2020-05-04T20:01:08Z,2020-05-04T20:01:08Z,CONTRIBUTOR,"I initially suspected the heavy use of atomics, which is a big problem, but almost entirely masked by the  cache trashfest problem of having many threads each reading one byte a few hundred bytes from each other when searching for the end of a column field, so fixing this will have to involve rewriting the way we read data from the row (maybe multiple threads per row and/or small shared mem scratch buffer per row).
The good news is that fixing that will also automatically benefit the data conversion stage as well.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/623675316/reactions,0,0,0,0,0,0,0,0,0,5080
260,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962558,https://github.com/rapidsai/cudf/issues/5080#issuecomment-798962558,https://api.github.com/repos/rapidsai/cudf/issues/5080,798962558,MDEyOklzc3VlQ29tbWVudDc5ODk2MjU1OA==,2021-03-14T19:13:33Z,2021-03-14T19:13:33Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962558/reactions,0,0,0,0,0,0,0,0,0,5080
261,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962591,https://github.com/rapidsai/cudf/issues/5080#issuecomment-798962591,https://api.github.com/repos/rapidsai/cudf/issues/5080,798962591,MDEyOklzc3VlQ29tbWVudDc5ODk2MjU5MQ==,2021-03-14T19:13:43Z,2021-03-14T19:13:43Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962591/reactions,0,0,0,0,0,0,0,0,0,5080
262,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166365083,https://github.com/rapidsai/cudf/issues/5080#issuecomment-1166365083,https://api.github.com/repos/rapidsai/cudf/issues/5080,1166365083,IC_kwDOBWUGps5FhVGb,2022-06-25T21:34:27Z,2022-06-25T21:34:27Z,CONTRIBUTOR,"@PointKernel based on your recent study of CSV type inference, do you think we should keep this issue open?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166365083/reactions,0,0,0,0,0,0,0,0,0,5080
263,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962539,https://github.com/rapidsai/cudf/issues/5142#issuecomment-798962539,https://api.github.com/repos/rapidsai/cudf/issues/5142,798962539,MDEyOklzc3VlQ29tbWVudDc5ODk2MjUzOQ==,2021-03-14T19:13:27Z,2021-03-14T19:13:27Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962539/reactions,0,0,0,0,0,0,0,0,0,5142
264,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962572,https://github.com/rapidsai/cudf/issues/5142#issuecomment-798962572,https://api.github.com/repos/rapidsai/cudf/issues/5142,798962572,MDEyOklzc3VlQ29tbWVudDc5ODk2MjU3Mg==,2021-03-14T19:13:38Z,2021-03-14T19:13:38Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962572/reactions,0,0,0,0,0,0,0,0,0,5142
265,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962464,https://github.com/rapidsai/cudf/issues/5276#issuecomment-798962464,https://api.github.com/repos/rapidsai/cudf/issues/5276,798962464,MDEyOklzc3VlQ29tbWVudDc5ODk2MjQ2NA==,2021-03-14T19:13:09Z,2021-03-14T19:13:09Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962464/reactions,0,0,0,0,0,0,0,0,0,5276
266,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962507,https://github.com/rapidsai/cudf/issues/5276#issuecomment-798962507,https://api.github.com/repos/rapidsai/cudf/issues/5276,798962507,MDEyOklzc3VlQ29tbWVudDc5ODk2MjUwNw==,2021-03-14T19:13:20Z,2021-03-14T19:13:20Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962507/reactions,0,0,0,0,0,0,0,0,0,5276
267,https://api.github.com/repos/rapidsai/cudf/issues/comments/864190081,https://github.com/rapidsai/cudf/issues/5276#issuecomment-864190081,https://api.github.com/repos/rapidsai/cudf/issues/5276,864190081,MDEyOklzc3VlQ29tbWVudDg2NDE5MDA4MQ==,2021-06-18T17:48:53Z,2021-06-18T17:49:34Z,MEMBER,"This has been implemented. Closing!

```python
import cudf
import numpy as np
​
df = cudf.DataFrame({'A': 1.,
                     'B': 2,
                     'C': np.array([3] * 4, dtype='int32'),
                     'D': cudf.Series([""cat"", ""dog"", ""lion"", ""fish""], dtype='category'),
                     'E': 'foo'})
print(df)
print(df.D)
     A  B  C     D    E
0  1.0  2  3   cat  foo
1  1.0  2  3   dog  foo
2  1.0  2  3  lion  foo
3  1.0  2  3  fish  foo
0     cat
1     dog
2    lion
3    fish
Name: D, dtype: category
Categories (4, object): ['cat', 'dog', 'fish', 'lion']
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/864190081/reactions,0,0,0,0,0,0,0,0,0,5276
268,https://api.github.com/repos/rapidsai/cudf/issues/comments/864196191,https://github.com/rapidsai/cudf/issues/5276#issuecomment-864196191,https://api.github.com/repos/rapidsai/cudf/issues/5276,864196191,MDEyOklzc3VlQ29tbWVudDg2NDE5NjE5MQ==,2021-06-18T18:02:54Z,2021-06-18T18:02:54Z,MEMBER,"Reopening as I misunderstood the request. The ask for for cudf.Categorical, and the example is the workaround.

Today, we can do `cudf.CategoricalIndex([1, 2, 3, 1, 2, 3]))` to create a CategoricalIndex but not `cudf.Categorical` as we don't have the analogous class.

@miguelusque , does the specific distinction of Categorical vs CategoricalIndex affect your pandas workloads?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/864196191/reactions,0,0,0,0,0,0,0,0,0,5276
269,https://api.github.com/repos/rapidsai/cudf/issues/comments/864197665,https://github.com/rapidsai/cudf/issues/5276#issuecomment-864197665,https://api.github.com/repos/rapidsai/cudf/issues/5276,864197665,MDEyOklzc3VlQ29tbWVudDg2NDE5NzY2NQ==,2021-06-18T18:05:57Z,2021-06-18T18:53:24Z,MEMBER,"Hi @beckernick ,

This issue was more 'a nice to have' feature, rather than 'a blocker' for my workload. Therefore, we just used the WAR above.

I assume that there are use cases where an Index is not the expected, but nothing that affects me at the moment. ",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/864197665/reactions,0,0,0,0,0,0,0,0,0,5276
270,https://api.github.com/repos/rapidsai/cudf/issues/comments/641714201,https://github.com/rapidsai/cudf/issues/5277#issuecomment-641714201,https://api.github.com/repos/rapidsai/cudf/issues/5277,641714201,MDEyOklzc3VlQ29tbWVudDY0MTcxNDIwMQ==,2020-06-10T04:32:32Z,2020-06-10T04:32:32Z,NONE,I think the main driver is to try to stay consistent with the look and feel of Pandas.,,jl-massey,6101125,MDQ6VXNlcjYxMDExMjU=,https://avatars.githubusercontent.com/u/6101125?v=4,,https://api.github.com/users/jl-massey,https://github.com/jl-massey,https://api.github.com/users/jl-massey/followers,https://api.github.com/users/jl-massey/following{/other_user},https://api.github.com/users/jl-massey/gists{/gist_id},https://api.github.com/users/jl-massey/starred{/owner}{/repo},https://api.github.com/users/jl-massey/subscriptions,https://api.github.com/users/jl-massey/orgs,https://api.github.com/users/jl-massey/repos,https://api.github.com/users/jl-massey/events{/privacy},https://api.github.com/users/jl-massey/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/641714201/reactions,0,0,0,0,0,0,0,0,0,5277
271,https://api.github.com/repos/rapidsai/cudf/issues/comments/641771472,https://github.com/rapidsai/cudf/issues/5277#issuecomment-641771472,https://api.github.com/repos/rapidsai/cudf/issues/5277,641771472,MDEyOklzc3VlQ29tbWVudDY0MTc3MTQ3Mg==,2020-06-10T06:56:59Z,2020-06-10T06:56:59Z,MEMBER,"Hi @jl-massey ,

IIRC, Pandas has from_records method, but none of the other methods detailed in my comment.

IMO, It might make sense to keep from_records for compatibility purposes, but a different approach could be considered for the other sources of data.",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/641771472/reactions,0,0,0,0,0,0,0,0,0,5277
272,https://api.github.com/repos/rapidsai/cudf/issues/comments/646409358,https://github.com/rapidsai/cudf/issues/5277#issuecomment-646409358,https://api.github.com/repos/rapidsai/cudf/issues/5277,646409358,MDEyOklzc3VlQ29tbWVudDY0NjQwOTM1OA==,2020-06-19T03:05:55Z,2020-06-19T03:05:55Z,NONE,"@miguelusque Fair enough, pandas uses from_<format> or read_<format>.   I expect, with the broad range of source types and handling, that your request would 'practically' be added as a method that calls one of the others after type inference?  i.e. read_type(""some_file.csv.gz"") --> read_csv(""some_file.csv.gz"") ??",,jl-massey,6101125,MDQ6VXNlcjYxMDExMjU=,https://avatars.githubusercontent.com/u/6101125?v=4,,https://api.github.com/users/jl-massey,https://github.com/jl-massey,https://api.github.com/users/jl-massey/followers,https://api.github.com/users/jl-massey/following{/other_user},https://api.github.com/users/jl-massey/gists{/gist_id},https://api.github.com/users/jl-massey/starred{/owner}{/repo},https://api.github.com/users/jl-massey/subscriptions,https://api.github.com/users/jl-massey/orgs,https://api.github.com/users/jl-massey/repos,https://api.github.com/users/jl-massey/events{/privacy},https://api.github.com/users/jl-massey/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/646409358/reactions,0,0,0,0,0,0,0,0,0,5277
273,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962456,https://github.com/rapidsai/cudf/issues/5277#issuecomment-798962456,https://api.github.com/repos/rapidsai/cudf/issues/5277,798962456,MDEyOklzc3VlQ29tbWVudDc5ODk2MjQ1Ng==,2021-03-14T19:13:08Z,2021-03-14T19:13:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962456/reactions,0,0,0,0,0,0,0,0,0,5277
274,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962504,https://github.com/rapidsai/cudf/issues/5277#issuecomment-798962504,https://api.github.com/repos/rapidsai/cudf/issues/5277,798962504,MDEyOklzc3VlQ29tbWVudDc5ODk2MjUwNA==,2021-03-14T19:13:19Z,2021-03-14T19:13:19Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962504/reactions,0,0,0,0,0,0,0,0,0,5277
275,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274445140,https://github.com/rapidsai/cudf/issues/5277#issuecomment-1274445140,https://api.github.com/repos/rapidsai/cudf/issues/5277,1274445140,IC_kwDOBWUGps5L9n1U,2022-10-11T10:03:08Z,2022-10-11T10:03:08Z,MEMBER,"I have just double-checked this feature request, and the only missing datatype from the list above to be supported by `cudf.DataFrame()` is  `cudf.DataFrame.from_arrow()`.

Could you please consider adding support to that method too? Thanks!",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274445140/reactions,0,0,0,0,0,0,0,0,0,5277
276,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274681983,https://github.com/rapidsai/cudf/issues/5277#issuecomment-1274681983,https://api.github.com/repos/rapidsai/cudf/issues/5277,1274681983,IC_kwDOBWUGps5L-hp_,2022-10-11T13:23:56Z,2022-10-11T13:23:56Z,CONTRIBUTOR,"I think ultimately we want to deprecate/remove the `.from_pandas()` API and be able to support constructing from other ""DataFrameLike"" objects (e.g., Pandas, Modin, Vaex) via the `.from_dataframe()` API. Currently, that depends on https://github.com/rapidsai/cudf/pull/11392. 

As for `.from_arrow()`, I'd rather we have a more _explicit_ `.from_arrow` constructor than an _implicit_ one that goes through the constructor. I understand that Pandas does not have the equivalent `.from_arrow()` method, but neither does it allow passing pyarrow tables as input to the `DataFrame` constructor (AFAICT). What do you think?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274681983/reactions,0,0,0,0,0,0,0,0,0,5277
277,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962382,https://github.com/rapidsai/cudf/issues/5546#issuecomment-798962382,https://api.github.com/repos/rapidsai/cudf/issues/5546,798962382,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM4Mg==,2021-03-14T19:12:48Z,2021-03-14T19:12:48Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962382/reactions,0,0,0,0,0,0,0,0,0,5546
278,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962376,https://github.com/rapidsai/cudf/issues/5550#issuecomment-798962376,https://api.github.com/repos/rapidsai/cudf/issues/5550,798962376,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM3Ng==,2021-03-14T19:12:47Z,2021-03-14T19:12:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962376/reactions,0,0,0,0,0,0,0,0,0,5550
279,https://api.github.com/repos/rapidsai/cudf/issues/comments/701442038,https://github.com/rapidsai/cudf/issues/5556#issuecomment-701442038,https://api.github.com/repos/rapidsai/cudf/issues/5556,701442038,MDEyOklzc3VlQ29tbWVudDcwMTQ0MjAzOA==,2020-09-30T14:51:33Z,2020-09-30T14:53:52Z,CONTRIBUTOR,"Moving this out of 0.16 as the primary use-case of `axis` is tied to `method` param which is not yet supported: https://github.com/rapidsai/cudf/issues/1361

and there seems to be no defined behavior from pandas yet: https://github.com/pandas-dev/pandas/blob/master/pandas/core/generic.py#L6296-L6301

cc: @kkraus14 ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/701442038/reactions,1,1,0,0,0,0,0,0,0,5556
280,https://api.github.com/repos/rapidsai/cudf/issues/comments/891141961,https://github.com/rapidsai/cudf/issues/5556#issuecomment-891141961,https://api.github.com/repos/rapidsai/cudf/issues/5556,891141961,IC_kwDOBWUGps41Hb9J,2021-08-02T16:01:07Z,2021-08-02T16:01:07Z,MEMBER,"We now support additional methods, but may not be able to support this efficiently",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/891141961/reactions,0,0,0,0,0,0,0,0,0,5556
281,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962369,https://github.com/rapidsai/cudf/issues/5571#issuecomment-798962369,https://api.github.com/repos/rapidsai/cudf/issues/5571,798962369,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM2OQ==,2021-03-14T19:12:45Z,2021-03-14T19:12:45Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962369/reactions,0,0,0,0,0,0,0,0,0,5571
282,https://api.github.com/repos/rapidsai/cudf/issues/comments/649852426,https://github.com/rapidsai/cudf/issues/5580#issuecomment-649852426,https://api.github.com/repos/rapidsai/cudf/issues/5580,649852426,MDEyOklzc3VlQ29tbWVudDY0OTg1MjQyNg==,2020-06-25T22:37:59Z,2020-06-25T22:38:07Z,CONTRIBUTOR,"So the issue is that cuDF produces `null` for the last value whereas Pandas 1.0 produces `1`? 

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/649852426/reactions,0,0,0,0,0,0,0,0,0,5580
283,https://api.github.com/repos/rapidsai/cudf/issues/comments/650185314,https://github.com/rapidsai/cudf/issues/5580#issuecomment-650185314,https://api.github.com/repos/rapidsai/cudf/issues/5580,650185314,MDEyOklzc3VlQ29tbWVudDY1MDE4NTMxNA==,2020-06-26T13:40:25Z,2020-06-26T13:40:25Z,CONTRIBUTOR,"Yes, that's more or less the problem.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/650185314/reactions,0,0,0,0,0,0,0,0,0,5580
284,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962360,https://github.com/rapidsai/cudf/issues/5580#issuecomment-798962360,https://api.github.com/repos/rapidsai/cudf/issues/5580,798962360,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM2MA==,2021-03-14T19:12:43Z,2021-03-14T19:12:43Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962360/reactions,0,0,0,0,0,0,0,0,0,5580
285,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962346,https://github.com/rapidsai/cudf/issues/5640#issuecomment-798962346,https://api.github.com/repos/rapidsai/cudf/issues/5640,798962346,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM0Ng==,2021-03-14T19:12:40Z,2021-03-14T19:12:40Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962346/reactions,0,0,0,0,0,0,0,0,0,5640
286,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007701080,https://github.com/rapidsai/cudf/issues/5640#issuecomment-1007701080,https://api.github.com/repos/rapidsai/cudf/issues/5640,1007701080,IC_kwDOBWUGps48EExY,2022-01-07T20:04:34Z,2022-01-07T20:04:34Z,MEMBER,"This might be feasible in the Python layer with existing capabilities:

```python
import cudf
​
s = cudf.Series([[0,1,2],[2,4,2]])
​
cudf.Series(
    cudf.core.column.build_list_column(
        indices=s._column.base_children[0],
        elements=s.list.leaves.hash_values()._column,
        mask=s._column.base_mask,
        size=s._column.size,
        offset=s._column.offset,
        null_count=s._column.null_count,
    )
)
0      [29140149, -247539971, 1683430573]
1    [1683430573, 1851360991, 1683430573]
dtype: list
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007701080/reactions,0,0,0,0,0,0,0,0,0,5640
287,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007746943,https://github.com/rapidsai/cudf/issues/5640#issuecomment-1007746943,https://api.github.com/repos/rapidsai/cudf/issues/5640,1007746943,IC_kwDOBWUGps48EP9_,2022-01-07T21:16:45Z,2022-01-07T21:16:45Z,CONTRIBUTOR,@beckernick I think we'd probably want to wrap that functionality into a public API rather than advocating for users to access the internals of columns to the user. Looks like it would be straightforward to do so from your example though!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007746943/reactions,0,0,0,0,0,0,0,0,0,5640
288,https://api.github.com/repos/rapidsai/cudf/issues/comments/660983694,https://github.com/rapidsai/cudf/issues/5695#issuecomment-660983694,https://api.github.com/repos/rapidsai/cudf/issues/5695,660983694,MDEyOklzc3VlQ29tbWVudDY2MDk4MzY5NA==,2020-07-20T12:00:10Z,2020-07-20T12:00:10Z,CONTRIBUTOR,We should also update the code to use [`functools.cached_property`](https://docs.python.org/dev/library/functools.html?highlight=s#functools.cached_property) rather than our own implementation for Python >= 3.8. @rgsl888prabhu ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/660983694/reactions,1,1,0,0,0,0,0,0,0,5695
289,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962330,https://github.com/rapidsai/cudf/issues/5695#issuecomment-798962330,https://api.github.com/repos/rapidsai/cudf/issues/5695,798962330,MDEyOklzc3VlQ29tbWVudDc5ODk2MjMzMA==,2021-03-14T19:12:37Z,2021-03-14T19:12:37Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962330/reactions,0,0,0,0,0,0,0,0,0,5695
290,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962307,https://github.com/rapidsai/cudf/issues/5714#issuecomment-798962307,https://api.github.com/repos/rapidsai/cudf/issues/5714,798962307,MDEyOklzc3VlQ29tbWVudDc5ODk2MjMwNw==,2021-03-14T19:12:32Z,2021-03-14T19:12:32Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962307/reactions,0,0,0,0,0,0,0,0,0,5714
291,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321038878,https://github.com/rapidsai/cudf/issues/5714#issuecomment-1321038878,https://api.github.com/repos/rapidsai/cudf/issues/5714,1321038878,IC_kwDOBWUGps5OvXQe,2022-11-20T04:52:48Z,2022-11-20T04:52:48Z,CONTRIBUTOR,"@brandon-b-miller I like your proposal. Seeing ""object"" in my string dtypes confuses me every time I see it.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321038878/reactions,0,0,0,0,0,0,0,0,0,5714
292,https://api.github.com/repos/rapidsai/cudf/issues/comments/668070040,https://github.com/rapidsai/cudf/issues/5828#issuecomment-668070040,https://api.github.com/repos/rapidsai/cudf/issues/5828,668070040,MDEyOklzc3VlQ29tbWVudDY2ODA3MDA0MA==,2020-08-03T14:58:46Z,2020-08-03T14:58:46Z,COLLABORATOR,"Reprioritized this as a feature request, but the current way that cuML works will not be efficient with `rolling.apply`.

In order to try to do this, we'd likely need to have a CUDA stream pool and then launch the `apply` functions using the stream pool to try to get some parallelism, but if the underlying implementation of the function sprawls across SMs then we're likely not going to be able to do much.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/668070040/reactions,0,0,0,0,0,0,0,0,0,5828
293,https://api.github.com/repos/rapidsai/cudf/issues/comments/668321825,https://github.com/rapidsai/cudf/issues/5828#issuecomment-668321825,https://api.github.com/repos/rapidsai/cudf/issues/5828,668321825,MDEyOklzc3VlQ29tbWVudDY2ODMyMTgyNQ==,2020-08-04T01:21:28Z,2020-08-04T01:21:28Z,MEMBER,@kkraus14 is there a workaround to unblock @nasiha0 ? E.g. get access to the groups and run a loop that calls cuML? Slow but workable?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/668321825/reactions,0,0,0,0,0,0,0,0,0,5828
294,https://api.github.com/repos/rapidsai/cudf/issues/comments/668322237,https://github.com/rapidsai/cudf/issues/5828#issuecomment-668322237,https://api.github.com/repos/rapidsai/cudf/issues/5828,668322237,MDEyOklzc3VlQ29tbWVudDY2ODMyMjIzNw==,2020-08-04T01:22:47Z,2020-08-04T01:22:47Z,COLLABORATOR,@shwina is there any workaround here? I'm not super familiar with the rolling code and the exception that's being seen.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/668322237/reactions,0,0,0,0,0,0,0,0,0,5828
295,https://api.github.com/repos/rapidsai/cudf/issues/comments/668322464,https://github.com/rapidsai/cudf/issues/5828#issuecomment-668322464,https://api.github.com/repos/rapidsai/cudf/issues/5828,668322464,MDEyOklzc3VlQ29tbWVudDY2ODMyMjQ2NA==,2020-08-04T01:23:29Z,2020-08-04T01:23:29Z,COLLABORATOR,"> @kkraus14 is there a workaround to unblock @nasiha0 ? E.g. get access to the groups and run a loop that calls cuML? Slow but workable?

Just a note, if the data is like the above example where there's ~5 values per window then we're going to run insanely slow based on the current implementation.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/668322464/reactions,0,0,0,0,0,0,0,0,0,5828
296,https://api.github.com/repos/rapidsai/cudf/issues/comments/668605449,https://github.com/rapidsai/cudf/issues/5828#issuecomment-668605449,https://api.github.com/repos/rapidsai/cudf/issues/5828,668605449,MDEyOklzc3VlQ29tbWVudDY2ODYwNTQ0OQ==,2020-08-04T13:45:21Z,2020-08-04T13:45:21Z,CONTRIBUTOR,"@kkraus14 Unlike `GroupBy.apply()`, which operates serially on the groups and concatenates the results, `RollingGroupBy.apply()` uses the numba->PTX->libcudf code path. The latter is probably much more efficient but has no null support. We *could* fall back to operating serially on the groups if nulls are encountered.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/668605449/reactions,0,0,0,0,0,0,0,0,0,5828
297,https://api.github.com/repos/rapidsai/cudf/issues/comments/780155561,https://github.com/rapidsai/cudf/issues/5828#issuecomment-780155561,https://api.github.com/repos/rapidsai/cudf/issues/5828,780155561,MDEyOklzc3VlQ29tbWVudDc4MDE1NTU2MQ==,2021-02-16T22:21:37Z,2021-02-16T22:21:37Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780155561/reactions,0,0,0,0,0,0,0,0,0,5828
298,https://api.github.com/repos/rapidsai/cudf/issues/comments/780184659,https://github.com/rapidsai/cudf/issues/5828#issuecomment-780184659,https://api.github.com/repos/rapidsai/cudf/issues/5828,780184659,MDEyOklzc3VlQ29tbWVudDc4MDE4NDY1OQ==,2021-02-16T23:28:45Z,2021-02-16T23:28:45Z,CONTRIBUTOR,This is possiblly something we can look into once we have `groupby.apply()` working with streams. cc @isVoid ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780184659/reactions,0,0,0,0,0,0,0,0,0,5828
299,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124167,https://github.com/rapidsai/cudf/issues/5882#issuecomment-780124167,https://api.github.com/repos/rapidsai/cudf/issues/5882,780124167,MDEyOklzc3VlQ29tbWVudDc4MDEyNDE2Nw==,2021-02-16T21:18:53Z,2021-02-16T21:18:53Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124167/reactions,0,0,0,0,0,0,0,0,0,5882
300,https://api.github.com/repos/rapidsai/cudf/issues/comments/1358137459,https://github.com/rapidsai/cudf/issues/5882#issuecomment-1358137459,https://api.github.com/repos/rapidsai/cudf/issues/5882,1358137459,IC_kwDOBWUGps5Q84hz,2022-12-19T19:14:31Z,2022-12-19T19:14:31Z,NONE,"i've run into this trying to use `import cudf as pd`

additional additional context: https://pandas.pydata.org/docs/user_guide/timedeltas.html",,mattf,112653,MDQ6VXNlcjExMjY1Mw==,https://avatars.githubusercontent.com/u/112653?v=4,,https://api.github.com/users/mattf,https://github.com/mattf,https://api.github.com/users/mattf/followers,https://api.github.com/users/mattf/following{/other_user},https://api.github.com/users/mattf/gists{/gist_id},https://api.github.com/users/mattf/starred{/owner}{/repo},https://api.github.com/users/mattf/subscriptions,https://api.github.com/users/mattf/orgs,https://api.github.com/users/mattf/repos,https://api.github.com/users/mattf/events{/privacy},https://api.github.com/users/mattf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1358137459/reactions,0,0,0,0,0,0,0,0,0,5882
301,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124134,https://github.com/rapidsai/cudf/issues/5889#issuecomment-780124134,https://api.github.com/repos/rapidsai/cudf/issues/5889,780124134,MDEyOklzc3VlQ29tbWVudDc4MDEyNDEzNA==,2021-02-16T21:18:50Z,2021-02-16T21:18:50Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124134/reactions,0,0,0,0,0,0,0,0,0,5889
302,https://api.github.com/repos/rapidsai/cudf/issues/comments/780702175,https://github.com/rapidsai/cudf/issues/5889#issuecomment-780702175,https://api.github.com/repos/rapidsai/cudf/issues/5889,780702175,MDEyOklzc3VlQ29tbWVudDc4MDcwMjE3NQ==,2021-02-17T17:01:55Z,2021-02-17T17:01:55Z,CONTRIBUTOR,"> This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.

This is still needed",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780702175/reactions,0,0,0,0,0,0,0,0,0,5889
303,https://api.github.com/repos/rapidsai/cudf/issues/comments/672119896,https://github.com/rapidsai/cudf/issues/5922#issuecomment-672119896,https://api.github.com/repos/rapidsai/cudf/issues/5922,672119896,MDEyOklzc3VlQ29tbWVudDY3MjExOTg5Ng==,2020-08-11T17:30:55Z,2020-08-11T17:33:46Z,MEMBER,"Some relevant issues listed below:

xref: https://github.com/rapidsai/dask-cuda/issues/96
xref: https://github.com/cupy/cupy/issues/3755
xref: https://github.com/numba/numba/issues/5137

Also some relevant PRs below:

xref: https://github.com/rapidsai/rmm/pull/480
xref: https://github.com/dask/distributed/pull/4034",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/672119896/reactions,0,0,0,0,0,0,0,0,0,5922
304,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124005,https://github.com/rapidsai/cudf/issues/5922#issuecomment-780124005,https://api.github.com/repos/rapidsai/cudf/issues/5922,780124005,MDEyOklzc3VlQ29tbWVudDc4MDEyNDAwNQ==,2021-02-16T21:18:36Z,2021-02-16T21:18:36Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780124005/reactions,0,0,0,0,0,0,0,0,0,5922
305,https://api.github.com/repos/rapidsai/cudf/issues/comments/780943278,https://github.com/rapidsai/cudf/issues/5922#issuecomment-780943278,https://api.github.com/repos/rapidsai/cudf/issues/5922,780943278,MDEyOklzc3VlQ29tbWVudDc4MDk0MzI3OA==,2021-02-18T00:23:17Z,2021-02-18T00:23:17Z,MEMBER,cc @pentschev (for awareness),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780943278/reactions,0,0,0,0,0,0,0,0,0,5922
306,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287317252,https://github.com/rapidsai/cudf/issues/5922#issuecomment-1287317252,https://api.github.com/repos/rapidsai/cudf/issues/5922,1287317252,IC_kwDOBWUGps5MuucE,2022-10-21T18:41:43Z,2022-10-21T18:41:43Z,CONTRIBUTOR,"@shwina Is this intended to be unconditional, or only when requested by the user? We will also need to start passing streams down to libcudf everywhere in order to support this.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287317252/reactions,0,0,0,0,0,0,0,0,0,5922
307,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287333154,https://github.com/rapidsai/cudf/issues/5922#issuecomment-1287333154,https://api.github.com/repos/rapidsai/cudf/issues/5922,1287333154,IC_kwDOBWUGps5MuyUi,2022-10-21T19:00:09Z,2022-10-21T19:00:09Z,MEMBER,"My take on this is that we could begin with an opt-in solution, like we've done for CuPy with [`CUPY_CUDA_PER_THREAD_DEFAULT_STREAM`](https://docs.cupy.dev/en/stable/reference/environment.html#envvar-CUPY_CUDA_PER_THREAD_DEFAULT_STREAM). This could allow us to test things without being too intrusive, and if this proves to be useful then we could enable it by default.",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287333154/reactions,0,0,0,0,0,0,0,0,0,5922
308,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287354420,https://github.com/rapidsai/cudf/issues/5922#issuecomment-1287354420,https://api.github.com/repos/rapidsai/cudf/issues/5922,1287354420,IC_kwDOBWUGps5Mu3g0,2022-10-21T19:25:42Z,2022-10-21T19:25:42Z,MEMBER,Yeah agreed. We probably want to support both the current mode and PTDS for some time. There are likely different issues we will run into. So having an escape hatch to old behavior is quite useful.,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287354420/reactions,0,0,0,0,0,0,0,0,0,5922
309,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123883,https://github.com/rapidsai/cudf/issues/5967#issuecomment-780123883,https://api.github.com/repos/rapidsai/cudf/issues/5967,780123883,MDEyOklzc3VlQ29tbWVudDc4MDEyMzg4Mw==,2021-02-16T21:18:23Z,2021-02-16T21:18:23Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123883/reactions,0,0,0,0,0,0,0,0,0,5967
310,https://api.github.com/repos/rapidsai/cudf/issues/comments/905886013,https://github.com/rapidsai/cudf/issues/5967#issuecomment-905886013,https://api.github.com/repos/rapidsai/cudf/issues/5967,905886013,IC_kwDOBWUGps41_rk9,2021-08-25T21:23:58Z,2021-08-25T21:23:58Z,MEMBER,Will this be closed by https://github.com/rapidsai/cudf/pull/9103 @rjzamora ?,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/905886013/reactions,0,0,0,0,0,0,0,0,0,5967
311,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123821,https://github.com/rapidsai/cudf/issues/6004#issuecomment-780123821,https://api.github.com/repos/rapidsai/cudf/issues/6004,780123821,MDEyOklzc3VlQ29tbWVudDc4MDEyMzgyMQ==,2021-02-16T21:18:17Z,2021-02-16T21:18:17Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123821/reactions,0,0,0,0,0,0,0,0,0,6004
312,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949481879,https://github.com/rapidsai/cudf/issues/6004#issuecomment-1949481879,https://api.github.com/repos/rapidsai/cudf/issues/6004,1949481879,IC_kwDOBWUGps50MruX,2024-02-16T23:31:24Z,2024-02-16T23:31:24Z,CONTRIBUTOR,"Hello @wence- , now that #15028 is merged, would you please let me know if cuDF-python is still reading parquet row group metadata using pyarrow? Or is that step completely removed?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949481879/reactions,0,0,0,0,0,0,0,0,0,6004
313,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949928934,https://github.com/rapidsai/cudf/issues/6004#issuecomment-1949928934,https://api.github.com/repos/rapidsai/cudf/issues/6004,1949928934,IC_kwDOBWUGps50OY3m,2024-02-17T10:31:15Z,2024-02-17T10:31:15Z,CONTRIBUTOR,"> Hello @wence- , now that #15028 is merged, would you please let me know if cuDF-python is still reading parquet row group metadata using pyarrow? Or is that step completely removed?

That change just exposed the libcudf functionality, we haven't migrated to using it from cudf-python (partly due to #15051 )",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949928934/reactions,0,0,0,0,0,0,0,0,0,6004
314,https://api.github.com/repos/rapidsai/cudf/issues/comments/676478576,https://github.com/rapidsai/cudf/issues/6040#issuecomment-676478576,https://api.github.com/repos/rapidsai/cudf/issues/6040,676478576,MDEyOklzc3VlQ29tbWVudDY3NjQ3ODU3Ng==,2020-08-19T14:57:52Z,2020-08-19T14:59:45Z,CONTRIBUTOR,"@miguelusque Thanks for reporting. Binary operations are not yet implemented at the libcudf level for ListColumns. You should be seeing the same error for DataFrames as well:

```python
In [8]: a = cudf.DataFrame({'a': [[1, 2], [3, 4]]}); b = cudf.DataFrame({'a': [[1, 2], [4, 5]]})

In [9]: a
Out[9]:
        a
0  [1, 2]
1  [3, 4]

In [10]: a == b  # will error
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/676478576/reactions,0,0,0,0,0,0,0,0,0,6040
315,https://api.github.com/repos/rapidsai/cudf/issues/comments/678477670,https://github.com/rapidsai/cudf/issues/6040#issuecomment-678477670,https://api.github.com/repos/rapidsai/cudf/issues/6040,678477670,MDEyOklzc3VlQ29tbWVudDY3ODQ3NzY3MA==,2020-08-21T20:25:22Z,2020-08-21T20:25:22Z,COLLABORATOR,"@shwina `Series.equals` returns a scalar boolean, it doesn't necessarily have to go through binaryop machinery though I suspect it does currently.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/678477670/reactions,0,0,0,0,0,0,0,0,0,6040
316,https://api.github.com/repos/rapidsai/cudf/issues/comments/737481818,https://github.com/rapidsai/cudf/issues/6040#issuecomment-737481818,https://api.github.com/repos/rapidsai/cudf/issues/6040,737481818,MDEyOklzc3VlQ29tbWVudDczNzQ4MTgxOA==,2020-12-02T20:38:41Z,2020-12-02T20:38:41Z,COLLABORATOR,pushing to 0.18,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/737481818/reactions,0,0,0,0,0,0,0,0,0,6040
317,https://api.github.com/repos/rapidsai/cudf/issues/comments/772187020,https://github.com/rapidsai/cudf/issues/6040#issuecomment-772187020,https://api.github.com/repos/rapidsai/cudf/issues/6040,772187020,MDEyOklzc3VlQ29tbWVudDc3MjE4NzAyMA==,2021-02-03T03:14:04Z,2021-02-03T03:14:04Z,CONTRIBUTOR,"This is labeled as a libcudf issue, but I don't believe that is correct. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/772187020/reactions,0,0,0,0,0,0,0,0,0,6040
318,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962392,https://github.com/rapidsai/cudf/issues/6040#issuecomment-798962392,https://api.github.com/repos/rapidsai/cudf/issues/6040,798962392,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM5Mg==,2021-03-14T19:12:52Z,2021-03-14T19:12:52Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962392/reactions,0,0,0,0,0,0,0,0,0,6040
319,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962387,https://github.com/rapidsai/cudf/issues/6089#issuecomment-798962387,https://api.github.com/repos/rapidsai/cudf/issues/6089,798962387,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM4Nw==,2021-03-14T19:12:50Z,2021-03-14T19:12:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962387/reactions,0,0,0,0,0,0,0,0,0,6089
320,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123649,https://github.com/rapidsai/cudf/issues/6158#issuecomment-780123649,https://api.github.com/repos/rapidsai/cudf/issues/6158,780123649,MDEyOklzc3VlQ29tbWVudDc4MDEyMzY0OQ==,2021-02-16T21:17:59Z,2021-02-16T21:17:59Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123649/reactions,0,0,0,0,0,0,0,0,0,6158
321,https://api.github.com/repos/rapidsai/cudf/issues/comments/692817505,https://github.com/rapidsai/cudf/issues/6170#issuecomment-692817505,https://api.github.com/repos/rapidsai/cudf/issues/6170,692817505,MDEyOklzc3VlQ29tbWVudDY5MjgxNzUwNQ==,2020-09-15T16:08:46Z,2020-09-15T16:08:46Z,COLLABORATOR,Is the expectation here that the order of rows within a group matches the order of rows from the input DataFrame? I'm not sure if we're able to make that guarantee currently.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692817505/reactions,0,0,0,0,0,0,0,0,0,6170
322,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123632,https://github.com/rapidsai/cudf/issues/6170#issuecomment-780123632,https://api.github.com/repos/rapidsai/cudf/issues/6170,780123632,MDEyOklzc3VlQ29tbWVudDc4MDEyMzYzMg==,2021-02-16T21:17:57Z,2021-02-16T21:17:57Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123632/reactions,0,0,0,0,0,0,0,0,0,6170
323,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123620,https://github.com/rapidsai/cudf/issues/6175#issuecomment-780123620,https://api.github.com/repos/rapidsai/cudf/issues/6175,780123620,MDEyOklzc3VlQ29tbWVudDc4MDEyMzYyMA==,2021-02-16T21:17:55Z,2021-02-16T21:17:55Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123620/reactions,0,0,0,0,0,0,0,0,0,6175
324,https://api.github.com/repos/rapidsai/cudf/issues/comments/878923488,https://github.com/rapidsai/cudf/issues/6175#issuecomment-878923488,https://api.github.com/repos/rapidsai/cudf/issues/6175,878923488,MDEyOklzc3VlQ29tbWVudDg3ODkyMzQ4OA==,2021-07-13T09:19:14Z,2021-07-13T09:19:14Z,CONTRIBUTOR,"This is because fastparquet writer converts the timedelta to a `time64` type which we don't support.

Besides, this is a bug in fastparquet because `timedelta64[ns]` should convert to a `duration[ns]` type.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878923488/reactions,0,0,0,0,0,0,0,0,0,6175
325,https://api.github.com/repos/rapidsai/cudf/issues/comments/884487089,https://github.com/rapidsai/cudf/issues/6175#issuecomment-884487089,https://api.github.com/repos/rapidsai/cudf/issues/6175,884487089,IC_kwDOBWUGps40uDOx,2021-07-21T20:44:24Z,2021-07-21T20:44:24Z,MEMBER,@galipremsagar ok to close ?,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884487089/reactions,0,0,0,0,0,0,0,0,0,6175
326,https://api.github.com/repos/rapidsai/cudf/issues/comments/884488235,https://github.com/rapidsai/cudf/issues/6175#issuecomment-884488235,https://api.github.com/repos/rapidsai/cudf/issues/6175,884488235,IC_kwDOBWUGps40uDgr,2021-07-21T20:46:30Z,2021-07-21T20:46:30Z,CONTRIBUTOR,@quasiben Will raise an issue on fastparquet and close it here.,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884488235/reactions,0,0,0,0,0,0,0,0,0,6175
327,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181196406,https://github.com/rapidsai/cudf/issues/6175#issuecomment-1181196406,https://api.github.com/repos/rapidsai/cudf/issues/6175,1181196406,IC_kwDOBWUGps5GZ6B2,2022-07-12T00:56:34Z,2022-07-12T00:56:34Z,CONTRIBUTOR,@galipremsagar should this be closed?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181196406/reactions,0,0,0,0,0,0,0,0,0,6175
328,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181897457,https://github.com/rapidsai/cudf/issues/6175#issuecomment-1181897457,https://api.github.com/repos/rapidsai/cudf/issues/6175,1181897457,IC_kwDOBWUGps5GclLx,2022-07-12T15:19:59Z,2022-07-12T15:19:59Z,CONTRIBUTOR,"@devavret Could you provide what exactly is broken with `fastparquet` with a minimal reproducer so that we can raise an issue on their repo? or is this an incompatibility of types across cudf & fastparquet? But seems like pandas is handling the types correctly:

```python
In [8]: pd.read_parquet(""temp_file"", engine='fastparquet')
Out[8]: 
                       a
0 0 days 00:03:54.334353
1 0 days 01:12:34.353455
2 0 days 00:00:54.546344

In [9]: pd.read_parquet(""temp_file"", engine='fastparquet').dtypes
Out[9]: 
a    timedelta64[ns]
dtype: object
```

Should cudf be doing the same kind of handling?",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181897457/reactions,0,0,0,0,0,0,0,0,0,6175
329,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181898398,https://github.com/rapidsai/cudf/issues/6175#issuecomment-1181898398,https://api.github.com/repos/rapidsai/cudf/issues/6175,1181898398,IC_kwDOBWUGps5Gclae,2022-07-12T15:20:38Z,2022-07-12T15:20:38Z,CONTRIBUTOR,"> @galipremsagar should this be closed?

Not yet, will need to know the above information",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1181898398/reactions,1,1,0,0,0,0,0,0,0,6175
330,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182385544,https://github.com/rapidsai/cudf/issues/6175#issuecomment-1182385544,https://api.github.com/repos/rapidsai/cudf/issues/6175,1182385544,IC_kwDOBWUGps5GecWI,2022-07-12T19:42:15Z,2022-07-12T19:42:15Z,CONTRIBUTOR,"I don't remember the details anymore but looks like the problem was in the `fastparquet` writer, not the reader.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182385544/reactions,0,0,0,0,0,0,0,0,0,6175
331,https://api.github.com/repos/rapidsai/cudf/issues/comments/689801723,https://github.com/rapidsai/cudf/issues/6187#issuecomment-689801723,https://api.github.com/repos/rapidsai/cudf/issues/6187,689801723,MDEyOklzc3VlQ29tbWVudDY4OTgwMTcyMw==,2020-09-09T20:24:08Z,2020-09-09T20:24:08Z,CONTRIBUTOR,"I had the same suggestion in the PR that added the `supports_device_write` logic. It was rejected because readers/writers have the context to better optimize the IO operations compared to having the host/device logic in the source/sink.

> Looks like ORC doesn't have this logic at all, which might be a bug?

Yeah, it's a missing feature. In all components but Parquet. We'll be adding this logic to every format soon, including readers. So, `supports_device_read` will also be used very soon :)",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/689801723/reactions,0,0,0,0,0,0,0,0,0,6187
332,https://api.github.com/repos/rapidsai/cudf/issues/comments/689861703,https://github.com/rapidsai/cudf/issues/6187#issuecomment-689861703,https://api.github.com/repos/rapidsai/cudf/issues/6187,689861703,MDEyOklzc3VlQ29tbWVudDY4OTg2MTcwMw==,2020-09-09T22:44:46Z,2020-09-09T22:44:46Z,CONTRIBUTOR,"> because readers/writers have the context to better optimize the IO operations compared to having the host/device logic in the source/sink.

:(

Any chance you have the PR number? I'd like to see the reasoning. I imagining the control could still be inverted...",,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/689861703/reactions,0,0,0,0,0,0,0,0,0,6187
333,https://api.github.com/repos/rapidsai/cudf/issues/comments/689864555,https://github.com/rapidsai/cudf/issues/6187#issuecomment-689864555,https://api.github.com/repos/rapidsai/cudf/issues/6187,689864555,MDEyOklzc3VlQ29tbWVudDY4OTg2NDU1NQ==,2020-09-09T22:52:38Z,2020-09-09T22:52:38Z,CONTRIBUTOR,@cwharris here you go: https://github.com/rapidsai/cudf/pull/4231#discussion_r384104534,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/689864555/reactions,0,0,0,0,0,0,0,0,0,6187
334,https://api.github.com/repos/rapidsai/cudf/issues/comments/689876187,https://github.com/rapidsai/cudf/issues/6187#issuecomment-689876187,https://api.github.com/repos/rapidsai/cudf/issues/6187,689876187,MDEyOklzc3VlQ29tbWVudDY4OTg3NjE4Nw==,2020-09-09T23:26:32Z,2020-09-09T23:26:32Z,CONTRIBUTOR,Is this device or host memory we're concerned with? @nvdbaranec ,,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/689876187/reactions,0,0,0,0,0,0,0,0,0,6187
335,https://api.github.com/repos/rapidsai/cudf/issues/comments/690343997,https://github.com/rapidsai/cudf/issues/6187#issuecomment-690343997,https://api.github.com/repos/rapidsai/cudf/issues/6187,690343997,MDEyOklzc3VlQ29tbWVudDY5MDM0Mzk5Nw==,2020-09-10T14:53:51Z,2020-09-10T14:53:51Z,CONTRIBUTOR,"Are you asking about my comment re: having to alloc/free on the spot for a default implementation?  The thinking there was that it would have to allocate host memory, do a memcpy, then do it's write, then immediately free that memory even though it would probably be doing that multiple times.  If you look at how the code is structured here:  https://github.com/rapidsai/cudf/blob/ac39e372d771b604b64d1c704c2c846ee1edde2d/cpp/src/io/parquet/writer_impl.cu#L835

It allocates one worst-case sized buffer and then reuses that for multiple write calls.   A default implementation would have no context what's going on and what have to alloc/free every time which is undesirable from a performance perspective (doubly so because we're using pinned memory here)

",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/690343997/reactions,1,1,0,0,0,0,0,0,0,6187
336,https://api.github.com/repos/rapidsai/cudf/issues/comments/691506851,https://github.com/rapidsai/cudf/issues/6187#issuecomment-691506851,https://api.github.com/repos/rapidsai/cudf/issues/6187,691506851,MDEyOklzc3VlQ29tbWVudDY5MTUwNjg1MQ==,2020-09-12T15:34:36Z,2020-09-12T15:39:40Z,CONTRIBUTOR,"If the invocation sites are bifurcated due to the need for multiple passes using the same buffer, we could use a two-step API instead. The first step uses RAII to obtain a worst-case-size buffer, and the second step writes using that buffer. The second step could be called any number of times. Since the buffer type can differ (or simply be unnecessary), we could wrap it in a context to hide the details. For instance:
```c++
{
  // may or may not create a buffer, depending on what type of sink is being used.
  auto sink_context = out_sink->create_write_context(max_chunk_bfr_size);
  for (; r < rnext; r++, global_r++) {
    for (auto i = 0; i < num_columns; i++) {
      ...
      // writes using the worst-case-size buffer, if one was required.
      sink_context.write(dev_bfr + ck->ck_stat_size, ck.compressed_size, state.stream);
      ...
    }
  }   
}
// buffer goes out of scope and associated memory is released
```

That `create_write_context` api should accept any relevant information about the data that's going to be written, with regards to the number of passes and size of each pass.

Alternatively, we could use a memory allocator behind the scenes, but that could be more complicated given that the situation is pretty clearly defined in this case.",,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/691506851/reactions,0,0,0,0,0,0,0,0,0,6187
337,https://api.github.com/repos/rapidsai/cudf/issues/comments/692164907,https://github.com/rapidsai/cudf/issues/6187#issuecomment-692164907,https://api.github.com/repos/rapidsai/cudf/issues/6187,692164907,MDEyOklzc3VlQ29tbWVudDY5MjE2NDkwNw==,2020-09-14T16:20:51Z,2020-09-14T16:20:51Z,CONTRIBUTOR,"There is a plan to improve performance by processing files in batches (when possible) so that IO can be overlapped with kernels. We don't currently have the infrastructure to make this change. 
Since this would significantly change how the sources/sinks are used, I would postpone addressing this issue for now. In addition, I don't think this part of the code is what we need to focus on in the refactoring effort. There are many other components that would benefit more from clean up.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692164907/reactions,0,0,0,0,0,0,0,0,0,6187
338,https://api.github.com/repos/rapidsai/cudf/issues/comments/692234400,https://github.com/rapidsai/cudf/issues/6187#issuecomment-692234400,https://api.github.com/repos/rapidsai/cudf/issues/6187,692234400,MDEyOklzc3VlQ29tbWVudDY5MjIzNDQwMA==,2020-09-14T18:31:17Z,2020-09-14T18:31:17Z,CONTRIBUTOR,"IMO this is not a 'tech debt' issue, removed the tag. 
Depending on future changes to how IO is pipelined, this issue might not get implemented. Keeping open for now.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692234400/reactions,0,0,0,0,0,0,0,0,0,6187
339,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123597,https://github.com/rapidsai/cudf/issues/6187#issuecomment-780123597,https://api.github.com/repos/rapidsai/cudf/issues/6187,780123597,MDEyOklzc3VlQ29tbWVudDc4MDEyMzU5Nw==,2021-02-16T21:17:52Z,2021-02-16T21:17:52Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123597/reactions,0,0,0,0,0,0,0,0,0,6187
340,https://api.github.com/repos/rapidsai/cudf/issues/comments/780899827,https://github.com/rapidsai/cudf/issues/6187#issuecomment-780899827,https://api.github.com/repos/rapidsai/cudf/issues/6187,780899827,MDEyOklzc3VlQ29tbWVudDc4MDg5OTgyNw==,2021-02-17T22:35:35Z,2021-02-17T22:35:35Z,CONTRIBUTOR,"Keeping this open, will be potentially addressed at a later date.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780899827/reactions,0,0,0,0,0,0,0,0,0,6187
341,https://api.github.com/repos/rapidsai/cudf/issues/comments/693534464,https://github.com/rapidsai/cudf/issues/6222#issuecomment-693534464,https://api.github.com/repos/rapidsai/cudf/issues/6222,693534464,MDEyOklzc3VlQ29tbWVudDY5MzUzNDQ2NA==,2020-09-16T16:56:50Z,2020-09-16T16:56:50Z,CONTRIBUTOR,Is this issue about the use of `CUDF_TEST_EXPECT_TABLES_EQUIVALENT` ?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693534464/reactions,0,0,0,0,0,0,0,0,0,6222
342,https://api.github.com/repos/rapidsai/cudf/issues/comments/693545513,https://github.com/rapidsai/cudf/issues/6222#issuecomment-693545513,https://api.github.com/repos/rapidsai/cudf/issues/6222,693545513,MDEyOklzc3VlQ29tbWVudDY5MzU0NTUxMw==,2020-09-16T17:18:14Z,2020-09-16T17:19:16Z,CONTRIBUTOR,"No, this issue is about:
```
data == decode(encode(data)) // is tested, guarantees isomorphism
expected_file == encode(data) // is not tested, does not guarantee expected bytes are written to file
expected_data == decode(file) // is not tested, does not guarantee expected data is read from file
```",,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693545513/reactions,0,0,0,0,0,0,0,0,0,6222
343,https://api.github.com/repos/rapidsai/cudf/issues/comments/693552681,https://github.com/rapidsai/cudf/issues/6222#issuecomment-693552681,https://api.github.com/repos/rapidsai/cudf/issues/6222,693552681,MDEyOklzc3VlQ29tbWVudDY5MzU1MjY4MQ==,2020-09-16T17:32:22Z,2020-09-16T17:32:22Z,CONTRIBUTOR,"I don't think we have a way to test this in C++ tests.
We do have Python tests that leverage readers/writers from other libraries to validate the file content.
That said, how do resolve this issue? Migrate such tests to Python?",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693552681/reactions,1,1,0,0,0,0,0,0,0,6222
344,https://api.github.com/repos/rapidsai/cudf/issues/comments/693631801,https://github.com/rapidsai/cudf/issues/6222#issuecomment-693631801,https://api.github.com/repos/rapidsai/cudf/issues/6222,693631801,MDEyOklzc3VlQ29tbWVudDY5MzYzMTgwMQ==,2020-09-16T19:56:01Z,2020-09-16T19:57:18Z,CONTRIBUTOR,"> I don't think we have a way to test this in C++ tests.

Pretty sure that's accurate.

It's technically possible to test them in c++, but it's **_very_** inconvenient because we'd need sample files and associated expected data. It'll definitely be easier to test on the python layer. It's possible we account for these cases in python tests already, but imho we should check python's tests before closing this issue.",,cwharris,1445368,MDQ6VXNlcjE0NDUzNjg=,https://avatars.githubusercontent.com/u/1445368?v=4,,https://api.github.com/users/cwharris,https://github.com/cwharris,https://api.github.com/users/cwharris/followers,https://api.github.com/users/cwharris/following{/other_user},https://api.github.com/users/cwharris/gists{/gist_id},https://api.github.com/users/cwharris/starred{/owner}{/repo},https://api.github.com/users/cwharris/subscriptions,https://api.github.com/users/cwharris/orgs,https://api.github.com/users/cwharris/repos,https://api.github.com/users/cwharris/events{/privacy},https://api.github.com/users/cwharris/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693631801/reactions,1,1,0,0,0,0,0,0,0,6222
345,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123557,https://github.com/rapidsai/cudf/issues/6222#issuecomment-780123557,https://api.github.com/repos/rapidsai/cudf/issues/6222,780123557,MDEyOklzc3VlQ29tbWVudDc4MDEyMzU1Nw==,2021-02-16T21:17:48Z,2021-02-16T21:17:48Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123557/reactions,0,0,0,0,0,0,0,0,0,6222
346,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123546,https://github.com/rapidsai/cudf/issues/6229#issuecomment-780123546,https://api.github.com/repos/rapidsai/cudf/issues/6229,780123546,MDEyOklzc3VlQ29tbWVudDc4MDEyMzU0Ng==,2021-02-16T21:17:47Z,2021-02-16T21:17:47Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123546/reactions,0,0,0,0,0,0,0,0,0,6229
347,https://api.github.com/repos/rapidsai/cudf/issues/comments/780155495,https://github.com/rapidsai/cudf/issues/6229#issuecomment-780155495,https://api.github.com/repos/rapidsai/cudf/issues/6229,780155495,MDEyOklzc3VlQ29tbWVudDc4MDE1NTQ5NQ==,2021-02-16T22:21:26Z,2021-02-16T22:21:26Z,MEMBER,This is still relevant.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780155495/reactions,0,0,0,0,0,0,0,0,0,6229
348,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123539,https://github.com/rapidsai/cudf/issues/6235#issuecomment-780123539,https://api.github.com/repos/rapidsai/cudf/issues/6235,780123539,MDEyOklzc3VlQ29tbWVudDc4MDEyMzUzOQ==,2021-02-16T21:17:46Z,2021-02-16T21:17:46Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123539/reactions,0,0,0,0,0,0,0,0,0,6235
349,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105372073,https://github.com/rapidsai/cudf/issues/6235#issuecomment-2105372073,https://api.github.com/repos/rapidsai/cudf/issues/6235,2105372073,IC_kwDOBWUGps59fW2p,2024-05-10T23:14:52Z,2024-05-10T23:14:52Z,CONTRIBUTOR,"As of today, this error still exists.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105372073/reactions,0,0,0,0,0,0,0,0,0,6235
350,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105636074,https://github.com/rapidsai/cudf/issues/6235#issuecomment-2105636074,https://api.github.com/repos/rapidsai/cudf/issues/6235,2105636074,IC_kwDOBWUGps59gXTq,2024-05-11T08:40:02Z,2024-05-11T08:40:02Z,CONTRIBUTOR,This may be the same or related to https://github.com/rapidsai/cudf/issues/6418,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105636074/reactions,1,1,0,0,0,0,0,0,0,6235
351,https://api.github.com/repos/rapidsai/cudf/issues/comments/692897582,https://github.com/rapidsai/cudf/issues/6241#issuecomment-692897582,https://api.github.com/repos/rapidsai/cudf/issues/6241,692897582,MDEyOklzc3VlQ29tbWVudDY5Mjg5NzU4Mg==,2020-09-15T18:33:52Z,2020-09-15T18:33:52Z,CONTRIBUTOR,"Nope: last one is `if (lane_id == 31)`, for those that prefer the ""lane id"" terminology.",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692897582/reactions,1,1,0,0,0,0,0,0,0,6241
352,https://api.github.com/repos/rapidsai/cudf/issues/comments/692941335,https://github.com/rapidsai/cudf/issues/6241#issuecomment-692941335,https://api.github.com/repos/rapidsai/cudf/issues/6241,692941335,MDEyOklzc3VlQ29tbWVudDY5Mjk0MTMzNQ==,2020-09-15T19:49:06Z,2020-09-15T19:49:06Z,CONTRIBUTOR,"> Nope: last one is `if (lane_id == 31)`, for those that prefer the ""lane id"" terminology.

Thanks. Thus demonstrated that it wasn't so readable for me 😆 ",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/692941335/reactions,0,0,0,0,0,0,0,0,0,6241
353,https://api.github.com/repos/rapidsai/cudf/issues/comments/693094031,https://github.com/rapidsai/cudf/issues/6241#issuecomment-693094031,https://api.github.com/repos/rapidsai/cudf/issues/6241,693094031,MDEyOklzc3VlQ29tbWVudDY5MzA5NDAzMQ==,2020-09-16T00:08:39Z,2020-09-16T00:15:31Z,CONTRIBUTOR,"Also, isn't `!(t & 0x1f)` actually `t % 32 == 0`, not `t == 0` ?
Edit: confirmed for modulo. Also confirmed that the compiler generates the same code.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693094031/reactions,0,0,0,0,0,0,0,0,0,6241
354,https://api.github.com/repos/rapidsai/cudf/issues/comments/693125331,https://github.com/rapidsai/cudf/issues/6241#issuecomment-693125331,https://api.github.com/repos/rapidsai/cudf/issues/6241,693125331,MDEyOklzc3VlQ29tbWVudDY5MzEyNTMzMQ==,2020-09-16T02:06:42Z,2020-09-16T02:06:42Z,CONTRIBUTOR,"> Also, isn't `!(t & 0x1f)` actually `t % 32 == 0`, not `t == 0` ?
> Edit: confirmed for modulo. Also confirmed that the compiler generates the same code.

https://godbolt.org/z/a9ercr

Note that using CG also generates the same code, but it actually gives you access to the special `laneid` register. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693125331/reactions,3,2,0,0,0,0,0,0,1,6241
355,https://api.github.com/repos/rapidsai/cudf/issues/comments/693319143,https://github.com/rapidsai/cudf/issues/6241#issuecomment-693319143,https://api.github.com/repos/rapidsai/cudf/issues/6241,693319143,MDEyOklzc3VlQ29tbWVudDY5MzMxOTE0Mw==,2020-09-16T10:31:16Z,2020-09-16T10:31:16Z,CONTRIBUTOR,"> Also, isn't `!(t & 0x1f)` actually `t % 32 == 0`, not `t == 0` ?

That's what I wrote. `lane_id == 0`",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/693319143/reactions,1,1,0,0,0,0,0,0,0,6241
356,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123525,https://github.com/rapidsai/cudf/issues/6241#issuecomment-780123525,https://api.github.com/repos/rapidsai/cudf/issues/6241,780123525,MDEyOklzc3VlQ29tbWVudDc4MDEyMzUyNQ==,2021-02-16T21:17:44Z,2021-02-16T21:17:44Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123525/reactions,0,0,0,0,0,0,0,0,0,6241
357,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123510,https://github.com/rapidsai/cudf/issues/6256#issuecomment-780123510,https://api.github.com/repos/rapidsai/cudf/issues/6256,780123510,MDEyOklzc3VlQ29tbWVudDc4MDEyMzUxMA==,2021-02-16T21:17:43Z,2021-02-16T21:17:43Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123510/reactions,0,0,0,0,0,0,0,0,0,6256
358,https://api.github.com/repos/rapidsai/cudf/issues/comments/974398233,https://github.com/rapidsai/cudf/issues/6256#issuecomment-974398233,https://api.github.com/repos/rapidsai/cudf/issues/6256,974398233,IC_kwDOBWUGps46FCMZ,2021-11-19T20:08:02Z,2021-11-19T20:08:02Z,CONTRIBUTOR,@shwina would this be relevant for using the object-based join from libcudf? ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/974398233/reactions,0,0,0,0,0,0,0,0,0,6256
359,https://api.github.com/repos/rapidsai/cudf/issues/comments/974414469,https://github.com/rapidsai/cudf/issues/6256#issuecomment-974414469,https://api.github.com/repos/rapidsai/cudf/issues/6256,974414469,IC_kwDOBWUGps46FGKF,2021-11-19T20:22:05Z,2021-11-19T20:22:05Z,CONTRIBUTOR,"Yes, I think it absolutely would.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/974414469/reactions,0,0,0,0,0,0,0,0,0,6256
360,https://api.github.com/repos/rapidsai/cudf/issues/comments/698098197,https://github.com/rapidsai/cudf/issues/6267#issuecomment-698098197,https://api.github.com/repos/rapidsai/cudf/issues/6267,698098197,MDEyOklzc3VlQ29tbWVudDY5ODA5ODE5Nw==,2020-09-24T04:04:12Z,2020-09-24T04:04:12Z,COLLABORATOR,"The issue is we try to JIT compile the UDF via Numba and the UDF provided can't be properly lowered by Numba into a GPU kernel. It can't be lowered because the function being passed isn't a kernel, but is instead an array / column level function of `median`.

We could make the typical Pandas way of `apply` work via iteration, but it would be painfully slow in the case of a large number of windows of small sizes.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/698098197/reactions,0,0,0,0,0,0,0,0,0,6267
361,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123484,https://github.com/rapidsai/cudf/issues/6267#issuecomment-780123484,https://api.github.com/repos/rapidsai/cudf/issues/6267,780123484,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQ4NA==,2021-02-16T21:17:41Z,2021-02-16T21:17:41Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123484/reactions,0,0,0,0,0,0,0,0,0,6267
362,https://api.github.com/repos/rapidsai/cudf/issues/comments/696822053,https://github.com/rapidsai/cudf/issues/6276#issuecomment-696822053,https://api.github.com/repos/rapidsai/cudf/issues/6276,696822053,MDEyOklzc3VlQ29tbWVudDY5NjgyMjA1Mw==,2020-09-22T16:10:19Z,2020-09-22T16:10:19Z,NONE,"If someone solves this, I'd like to understand the solution because the denominator in the robust z-score is more complicated than a rolling median (https://medium.com/james-blogs/outliers-make-us-go-mad-univariate-outlier-detection-b3a72f1ea8c7). I'll need to write a UDF for the MAD that hopefully can use similar machinery needed to solve the rolling median. ",,ShashaankV,6562289,MDQ6VXNlcjY1NjIyODk=,https://avatars.githubusercontent.com/u/6562289?v=4,,https://api.github.com/users/ShashaankV,https://github.com/ShashaankV,https://api.github.com/users/ShashaankV/followers,https://api.github.com/users/ShashaankV/following{/other_user},https://api.github.com/users/ShashaankV/gists{/gist_id},https://api.github.com/users/ShashaankV/starred{/owner}{/repo},https://api.github.com/users/ShashaankV/subscriptions,https://api.github.com/users/ShashaankV/orgs,https://api.github.com/users/ShashaankV/repos,https://api.github.com/users/ShashaankV/events{/privacy},https://api.github.com/users/ShashaankV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/696822053/reactions,0,0,0,0,0,0,0,0,0,6276
363,https://api.github.com/repos/rapidsai/cudf/issues/comments/696906662,https://github.com/rapidsai/cudf/issues/6276#issuecomment-696906662,https://api.github.com/repos/rapidsai/cudf/issues/6276,696906662,MDEyOklzc3VlQ29tbWVudDY5NjkwNjY2Mg==,2020-09-22T18:39:35Z,2020-09-22T18:39:35Z,MEMBER,FWIW this is something I [solved before in C++]( https://github.com/nanshe-org/rank_filter/blob/49cd0a35998aaccebab680d14f0f3fb8ac85e5ea/include/rank_filter.hxx#L24 ). May be useful here too.,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/696906662/reactions,0,0,0,0,0,0,0,0,0,6276
364,https://api.github.com/repos/rapidsai/cudf/issues/comments/697936824,https://github.com/rapidsai/cudf/issues/6276#issuecomment-697936824,https://api.github.com/repos/rapidsai/cudf/issues/6276,697936824,MDEyOklzc3VlQ29tbWVudDY5NzkzNjgyNA==,2020-09-23T19:51:53Z,2020-09-23T19:51:53Z,NONE,"Thank you. Hoping for a higher level solution using the cuDF or other RAPIDS objects. However, I'll take a closer look at your C++ solution later. 

FYI - This is my latest version using pandas for calculating a rolling robust z-score (which calls for a rolling median and UDF). It takes 50 minutes per dataframe. Love to speed this up. 

```
##CPU numba version
@nb.njit()
def fun_mad(x):
  return np.median(np.absolute(x - np.median(x)))

def rzscore(df,win):
  mu = df.rolling(window=win).median() 
  mad = df.rolling(window=win).apply(fun_mad, engine='numba',raw=True) 
  df = 0.6745*(df.subtract(mu)).divide(mad)
  return df

dfz = rzscore(df,int(2*sHz))
```",,ShashaankV,6562289,MDQ6VXNlcjY1NjIyODk=,https://avatars.githubusercontent.com/u/6562289?v=4,,https://api.github.com/users/ShashaankV,https://github.com/ShashaankV,https://api.github.com/users/ShashaankV/followers,https://api.github.com/users/ShashaankV/following{/other_user},https://api.github.com/users/ShashaankV/gists{/gist_id},https://api.github.com/users/ShashaankV/starred{/owner}{/repo},https://api.github.com/users/ShashaankV/subscriptions,https://api.github.com/users/ShashaankV/orgs,https://api.github.com/users/ShashaankV/repos,https://api.github.com/users/ShashaankV/events{/privacy},https://api.github.com/users/ShashaankV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/697936824/reactions,0,0,0,0,0,0,0,0,0,6276
365,https://api.github.com/repos/rapidsai/cudf/issues/comments/713228125,https://github.com/rapidsai/cudf/issues/6276#issuecomment-713228125,https://api.github.com/repos/rapidsai/cudf/issues/6276,713228125,MDEyOklzc3VlQ29tbWVudDcxMzIyODEyNQ==,2020-10-21T01:09:37Z,2020-10-21T01:09:37Z,NONE,Working on a selection sorter UDF for the rolling median. ,,ShashaankV,6562289,MDQ6VXNlcjY1NjIyODk=,https://avatars.githubusercontent.com/u/6562289?v=4,,https://api.github.com/users/ShashaankV,https://github.com/ShashaankV,https://api.github.com/users/ShashaankV/followers,https://api.github.com/users/ShashaankV/following{/other_user},https://api.github.com/users/ShashaankV/gists{/gist_id},https://api.github.com/users/ShashaankV/starred{/owner}{/repo},https://api.github.com/users/ShashaankV/subscriptions,https://api.github.com/users/ShashaankV/orgs,https://api.github.com/users/ShashaankV/repos,https://api.github.com/users/ShashaankV/events{/privacy},https://api.github.com/users/ShashaankV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713228125/reactions,0,0,0,0,0,0,0,0,0,6276
366,https://api.github.com/repos/rapidsai/cudf/issues/comments/713238967,https://github.com/rapidsai/cudf/issues/6276#issuecomment-713238967,https://api.github.com/repos/rapidsai/cudf/issues/6276,713238967,MDEyOklzc3VlQ29tbWVudDcxMzIzODk2Nw==,2020-10-21T01:46:58Z,2020-10-21T01:46:58Z,MEMBER,cc @gmarkall (in case you have ideas on the Numba side of things 🙂),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713238967/reactions,0,0,0,0,0,0,0,0,0,6276
367,https://api.github.com/repos/rapidsai/cudf/issues/comments/713280182,https://github.com/rapidsai/cudf/issues/6276#issuecomment-713280182,https://api.github.com/repos/rapidsai/cudf/issues/6276,713280182,MDEyOklzc3VlQ29tbWVudDcxMzI4MDE4Mg==,2020-10-21T03:49:25Z,2020-10-21T04:05:50Z,NONE,"Maybe crude but this UDF seems to work for rolling median with cuDF.


```
def median_select(x):
  #get min in array
  minx = x[0]
  for x2 in x[1:]:
    if x2<minx:
      minx = x2
  #iterate until center index
  kcenter = int(len(x)/2)
  #if odd
  if len(x)%2 != 0:
    lb = minx
    for k in range(kcenter):
      ub = 1*10^100
      for x2 in x:
        if x2>lb and x2<ub:
          ub = x2
      lb = ub
    mu = lb
  #if even
  else:
    lb = minx
    for k in range(kcenter-1):
      ub = 1*10^100
      for x2 in x:
        if x2>lb and x2<ub:
          ub = x2
      lb = ub
    mu = lb
    lb = minx
    for k in range(kcenter):
      ub = 1*10^100
      for x2 in x:
        if x2>lb and x2<ub:
          ub = x2
      lb = ub
    mu += lb
    mu = mu/2
  return mu
```

```
win = 28
n = win+2

df = cudf.DataFrame()
df['a'] = np.random.normal(0,1,n)
df['b'] = np.random.normal(0,1,n)
rolling = df.rolling(window=win,axis=0)
print(rolling.apply(median_select))

pdf = df.to_pandas()
print(np.median(pdf.iloc[:-2,:],axis=0))
print(np.median(pdf.iloc[1:-1,:],axis=0))
print(np.median(pdf.iloc[2:,:],axis=0))

```",,ShashaankV,6562289,MDQ6VXNlcjY1NjIyODk=,https://avatars.githubusercontent.com/u/6562289?v=4,,https://api.github.com/users/ShashaankV,https://github.com/ShashaankV,https://api.github.com/users/ShashaankV/followers,https://api.github.com/users/ShashaankV/following{/other_user},https://api.github.com/users/ShashaankV/gists{/gist_id},https://api.github.com/users/ShashaankV/starred{/owner}{/repo},https://api.github.com/users/ShashaankV/subscriptions,https://api.github.com/users/ShashaankV/orgs,https://api.github.com/users/ShashaankV/repos,https://api.github.com/users/ShashaankV/events{/privacy},https://api.github.com/users/ShashaankV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713280182/reactions,0,0,0,0,0,0,0,0,0,6276
368,https://api.github.com/repos/rapidsai/cudf/issues/comments/713300575,https://github.com/rapidsai/cudf/issues/6276#issuecomment-713300575,https://api.github.com/repos/rapidsai/cudf/issues/6276,713300575,MDEyOklzc3VlQ29tbWVudDcxMzMwMDU3NQ==,2020-10-21T04:47:59Z,2020-10-21T14:21:58Z,NONE,This is two times slower than running the equivalent pandas rolling median. Could try a quicksort but not sure how to implement partition without generating new arrays or altering the original data. ,,ShashaankV,6562289,MDQ6VXNlcjY1NjIyODk=,https://avatars.githubusercontent.com/u/6562289?v=4,,https://api.github.com/users/ShashaankV,https://github.com/ShashaankV,https://api.github.com/users/ShashaankV/followers,https://api.github.com/users/ShashaankV/following{/other_user},https://api.github.com/users/ShashaankV/gists{/gist_id},https://api.github.com/users/ShashaankV/starred{/owner}{/repo},https://api.github.com/users/ShashaankV/subscriptions,https://api.github.com/users/ShashaankV/orgs,https://api.github.com/users/ShashaankV/repos,https://api.github.com/users/ShashaankV/events{/privacy},https://api.github.com/users/ShashaankV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713300575/reactions,0,0,0,0,0,0,0,0,0,6276
369,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123476,https://github.com/rapidsai/cudf/issues/6276#issuecomment-780123476,https://api.github.com/repos/rapidsai/cudf/issues/6276,780123476,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQ3Ng==,2021-02-16T21:17:39Z,2021-02-16T21:17:39Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123476/reactions,0,0,0,0,0,0,0,0,0,6276
370,https://api.github.com/repos/rapidsai/cudf/issues/comments/700635662,https://github.com/rapidsai/cudf/issues/6305#issuecomment-700635662,https://api.github.com/repos/rapidsai/cudf/issues/6305,700635662,MDEyOklzc3VlQ29tbWVudDcwMDYzNTY2Mg==,2020-09-29T11:15:36Z,2020-09-29T11:15:36Z,MEMBER,Can you clarify the title of this issue to indicate *which* cuIO reader and writer?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/700635662/reactions,0,0,0,0,0,0,0,0,0,6305
371,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123462,https://github.com/rapidsai/cudf/issues/6305#issuecomment-780123462,https://api.github.com/repos/rapidsai/cudf/issues/6305,780123462,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQ2Mg==,2021-02-16T21:17:38Z,2021-02-16T21:17:38Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123462/reactions,0,0,0,0,0,0,0,0,0,6305
372,https://api.github.com/repos/rapidsai/cudf/issues/comments/698576379,https://github.com/rapidsai/cudf/issues/6313#issuecomment-698576379,https://api.github.com/repos/rapidsai/cudf/issues/6313,698576379,MDEyOklzc3VlQ29tbWVudDY5ODU3NjM3OQ==,2020-09-24T20:38:50Z,2020-09-24T20:38:50Z,CONTRIBUTOR,"This is an issue in pandas as well. Our code is conformant with pandas behavior. 
https://github.com/rapidsai/cudf/blob/60d25ea04bf018905836310a18133806f780cb22/cpp/src/io/csv/reader_impl.cu#L583-L587

```python
In [18]: pdf = pd.DataFrame({'a':pd.Series([1, 2, 3, None], dtype='Int64')})

In [19]: pdf.dtypes
Out[19]: 
a    Int64
dtype: object

In [20]: pdf.to_csv('temp.csv')

In [21]: cat temp.csv
,a
0,1
1,2
2,3
3,

In [22]: pd.read_csv('temp.csv').dtypes
Out[22]: 
Unnamed: 0      int64
a             float64
dtype: object
```",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/698576379/reactions,0,0,0,0,0,0,0,0,0,6313
373,https://api.github.com/repos/rapidsai/cudf/issues/comments/698577940,https://github.com/rapidsai/cudf/issues/6313#issuecomment-698577940,https://api.github.com/repos/rapidsai/cudf/issues/6313,698577940,MDEyOklzc3VlQ29tbWVudDY5ODU3Nzk0MA==,2020-09-24T20:42:16Z,2020-09-24T20:42:16Z,CONTRIBUTOR,I guess the question is with nullable dtypes support introduced in pandas aswell do we still want to mimic pandas behavior?,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/698577940/reactions,0,0,0,0,0,0,0,0,0,6313
374,https://api.github.com/repos/rapidsai/cudf/issues/comments/700178109,https://github.com/rapidsai/cudf/issues/6313#issuecomment-700178109,https://api.github.com/repos/rapidsai/cudf/issues/6313,700178109,MDEyOklzc3VlQ29tbWVudDcwMDE3ODEwOQ==,2020-09-28T17:33:32Z,2020-09-28T17:33:32Z,COLLABORATOR,"> I guess the question is with nullable dtypes support introduced in pandas aswell do we still want to mimic pandas behavior?

Agreed. This sounds like a bug in Pandas at this point and we shouldn't replicate the behavior. @galipremsagar can you open an issue on Pandas for this?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/700178109/reactions,1,1,0,0,0,0,0,0,0,6313
375,https://api.github.com/repos/rapidsai/cudf/issues/comments/700202395,https://github.com/rapidsai/cudf/issues/6313#issuecomment-700202395,https://api.github.com/repos/rapidsai/cudf/issues/6313,700202395,MDEyOklzc3VlQ29tbWVudDcwMDIwMjM5NQ==,2020-09-28T18:21:14Z,2020-09-28T18:21:25Z,CONTRIBUTOR,"
> Agreed. This sounds like a bug in Pandas at this point and we shouldn't replicate the behavior. @galipremsagar can you open an issue on Pandas for this?

Linking for reference: https://github.com/pandas-dev/pandas/issues/36712",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/700202395/reactions,0,0,0,0,0,0,0,0,0,6313
376,https://api.github.com/repos/rapidsai/cudf/issues/comments/706295382,https://github.com/rapidsai/cudf/issues/6313#issuecomment-706295382,https://api.github.com/repos/rapidsai/cudf/issues/6313,706295382,MDEyOklzc3VlQ29tbWVudDcwNjI5NTM4Mg==,2020-10-09T17:01:51Z,2020-10-09T17:01:51Z,CONTRIBUTOR,"From the Pandas issue: Pandas will not change this behavior until they start using nullable types by default.
We can still go ahead with the change.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/706295382/reactions,2,2,0,0,0,0,0,0,0,6313
377,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123448,https://github.com/rapidsai/cudf/issues/6313#issuecomment-780123448,https://api.github.com/repos/rapidsai/cudf/issues/6313,780123448,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQ0OA==,2021-02-16T21:17:37Z,2021-02-16T21:17:37Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123448/reactions,0,0,0,0,0,0,0,0,0,6313
378,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260213071,https://github.com/rapidsai/cudf/issues/6313#issuecomment-1260213071,https://api.github.com/repos/rapidsai/cudf/issues/6313,1260213071,IC_kwDOBWUGps5LHVNP,2022-09-28T00:12:53Z,2022-09-28T00:12:53Z,CONTRIBUTOR,"Looks like we didn't go ahead with the change :D
FWIW, Pandas still does not default to nullable types, and there's a PR to add an option to use nullable types in `read_csv` https://github.com/pandas-dev/pandas/pull/48776.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260213071/reactions,0,0,0,0,0,0,0,0,0,6313
379,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123440,https://github.com/rapidsai/cudf/issues/6319#issuecomment-780123440,https://api.github.com/repos/rapidsai/cudf/issues/6319,780123440,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQ0MA==,2021-02-16T21:17:36Z,2021-02-16T21:17:36Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123440/reactions,0,0,0,0,0,0,0,0,0,6319
380,https://api.github.com/repos/rapidsai/cudf/issues/comments/698651316,https://github.com/rapidsai/cudf/issues/6322#issuecomment-698651316,https://api.github.com/repos/rapidsai/cudf/issues/6322,698651316,MDEyOklzc3VlQ29tbWVudDY5ODY1MTMxNg==,2020-09-25T00:16:00Z,2020-09-25T00:16:00Z,CONTRIBUTOR,"cudf avro reader currently does not support nesting (structs, unions or lists, except for trivial unions with a null type).
Really #6319, #6322 , #6323 could be combined in a single ""[FEA] nesting support for avro reader"" (not sure if cudf has union types yet, but could be converted to a nullable struct form).",,OlivierNV,45697062,MDQ6VXNlcjQ1Njk3MDYy,https://avatars.githubusercontent.com/u/45697062?v=4,,https://api.github.com/users/OlivierNV,https://github.com/OlivierNV,https://api.github.com/users/OlivierNV/followers,https://api.github.com/users/OlivierNV/following{/other_user},https://api.github.com/users/OlivierNV/gists{/gist_id},https://api.github.com/users/OlivierNV/starred{/owner}{/repo},https://api.github.com/users/OlivierNV/subscriptions,https://api.github.com/users/OlivierNV/orgs,https://api.github.com/users/OlivierNV/repos,https://api.github.com/users/OlivierNV/events{/privacy},https://api.github.com/users/OlivierNV/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/698651316/reactions,0,0,0,0,0,0,0,0,0,6322
381,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123421,https://github.com/rapidsai/cudf/issues/6322#issuecomment-780123421,https://api.github.com/repos/rapidsai/cudf/issues/6322,780123421,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQyMQ==,2021-02-16T21:17:33Z,2021-02-16T21:17:33Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123421/reactions,0,0,0,0,0,0,0,0,0,6322
382,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123416,https://github.com/rapidsai/cudf/issues/6323#issuecomment-780123416,https://api.github.com/repos/rapidsai/cudf/issues/6323,780123416,MDEyOklzc3VlQ29tbWVudDc4MDEyMzQxNg==,2021-02-16T21:17:32Z,2021-02-16T21:17:32Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123416/reactions,0,0,0,0,0,0,0,0,0,6323
383,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123369,https://github.com/rapidsai/cudf/issues/6382#issuecomment-780123369,https://api.github.com/repos/rapidsai/cudf/issues/6382,780123369,MDEyOklzc3VlQ29tbWVudDc4MDEyMzM2OQ==,2021-02-16T21:17:27Z,2021-02-16T21:17:27Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123369/reactions,0,0,0,0,0,0,0,0,0,6382
384,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116029736,https://github.com/rapidsai/cudf/issues/6382#issuecomment-2116029736,https://api.github.com/repos/rapidsai/cudf/issues/6382,2116029736,IC_kwDOBWUGps5-IA0o,2024-05-16T19:29:05Z,2024-05-16T19:29:05Z,CONTRIBUTOR,"This still fails, but it does so differently now in dtype detection of the timestamp type (also the signature of `read_json` has changed subtly, the dtype needs to be a dict now):
```
In [6]: >>> import cudf
   ...: >>> import pandas as pd
   ...: >>> pdf = pd.DataFrame({""a"":[45461150050, 55414521000, 4544624522000, 4546345758000, 45445254600]}, dtype='datetime64[ms]')
   ...: >>> buffer = pdf.to_json(compression='infer', lines=True, orient=""records"")
   ...: >>> buffer
   ...: '{""a"":45461}\n{""a"":55414}\n{""a"":4544624}\n{""a"":4546345}\n{""a"":45445}'
   ...: >>> df = cudf.read_json(buffer, compression='infer', lines=True, orient=""records"", dtype={""a"": 'timestamp[ms]'})
   ...: >>> df
...

File ~/.conda/envs/rapids/lib/python3.10/site-packages/pandas/core/dtypes/common.py:1645, in pandas_dtype(dtype)
   1640     with warnings.catch_warnings():
   1641         # GH#51523 - Series.astype(np.integer) doesn't show
   1642         # numpy deprecation warning of np.integer
   1643         # Hence enabling DeprecationWarning
   1644         warnings.simplefilter(""always"", DeprecationWarning)
-> 1645         npdtype = np.dtype(dtype)
   1646 except SyntaxError as err:
   1647     # np.dtype uses `eval` which can raise SyntaxError
   1648     raise TypeError(f""data type '{dtype}' not understood"") from err

TypeError: data type 'timestamp[ms]' not understood
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116029736/reactions,0,0,0,0,0,0,0,0,0,6382
385,https://api.github.com/repos/rapidsai/cudf/issues/comments/703608633,https://github.com/rapidsai/cudf/issues/6418#issuecomment-703608633,https://api.github.com/repos/rapidsai/cudf/issues/6418,703608633,MDEyOklzc3VlQ29tbWVudDcwMzYwODYzMw==,2020-10-05T12:47:12Z,2020-10-05T12:47:12Z,CONTRIBUTOR,This 9 digits of precision (actually 10 significant digits) is hardcoded in the float-to-string conversion `cudf::strings::from_floats()` used by cuio's CSV writer.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/703608633/reactions,1,1,0,0,0,0,0,0,0,6418
386,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123347,https://github.com/rapidsai/cudf/issues/6418#issuecomment-780123347,https://api.github.com/repos/rapidsai/cudf/issues/6418,780123347,MDEyOklzc3VlQ29tbWVudDc4MDEyMzM0Nw==,2021-02-16T21:17:25Z,2021-02-16T21:17:25Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123347/reactions,0,0,0,0,0,0,0,0,0,6418
387,https://api.github.com/repos/rapidsai/cudf/issues/comments/704910753,https://github.com/rapidsai/cudf/issues/6456#issuecomment-704910753,https://api.github.com/repos/rapidsai/cudf/issues/6456,704910753,MDEyOklzc3VlQ29tbWVudDcwNDkxMDc1Mw==,2020-10-07T12:45:57Z,2020-10-07T12:45:57Z,CONTRIBUTOR,"The following works in case it helps:
```
gd.Series([""2020-05-01 08:00:00"", None], dtype=""<M8[ms]"")
```",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/704910753/reactions,1,1,0,0,0,0,0,0,0,6456
388,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123320,https://github.com/rapidsai/cudf/issues/6456#issuecomment-780123320,https://api.github.com/repos/rapidsai/cudf/issues/6456,780123320,MDEyOklzc3VlQ29tbWVudDc4MDEyMzMyMA==,2021-02-16T21:17:22Z,2021-02-16T21:17:22Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123320/reactions,0,0,0,0,0,0,0,0,0,6456
389,https://api.github.com/repos/rapidsai/cudf/issues/comments/781626950,https://github.com/rapidsai/cudf/issues/6456#issuecomment-781626950,https://api.github.com/repos/rapidsai/cudf/issues/6456,781626950,MDEyOklzc3VlQ29tbWVudDc4MTYyNjk1MA==,2021-02-18T20:52:01Z,2021-02-18T20:52:01Z,CONTRIBUTOR,Confirmed the issue still exists in 0.18.,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/781626950/reactions,0,0,0,0,0,0,0,0,0,6456
390,https://api.github.com/repos/rapidsai/cudf/issues/comments/849203799,https://github.com/rapidsai/cudf/issues/6456#issuecomment-849203799,https://api.github.com/repos/rapidsai/cudf/issues/6456,849203799,MDEyOklzc3VlQ29tbWVudDg0OTIwMzc5OQ==,2021-05-27T00:14:32Z,2021-05-27T00:14:32Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849203799/reactions,0,0,0,0,0,0,0,0,0,6456
391,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962352,https://github.com/rapidsai/cudf/issues/6492#issuecomment-798962352,https://api.github.com/repos/rapidsai/cudf/issues/6492,798962352,MDEyOklzc3VlQ29tbWVudDc5ODk2MjM1Mg==,2021-03-14T19:12:42Z,2021-03-14T19:12:42Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/798962352/reactions,0,0,0,0,0,0,0,0,0,6492
392,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123185,https://github.com/rapidsai/cudf/issues/6503#issuecomment-780123185,https://api.github.com/repos/rapidsai/cudf/issues/6503,780123185,MDEyOklzc3VlQ29tbWVudDc4MDEyMzE4NQ==,2021-02-16T21:17:08Z,2021-02-16T21:17:08Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123185/reactions,0,0,0,0,0,0,0,0,0,6503
393,https://api.github.com/repos/rapidsai/cudf/issues/comments/707424442,https://github.com/rapidsai/cudf/issues/6505#issuecomment-707424442,https://api.github.com/repos/rapidsai/cudf/issues/6505,707424442,MDEyOklzc3VlQ29tbWVudDcwNzQyNDQ0Mg==,2020-10-13T01:12:01Z,2020-10-13T01:19:36Z,CONTRIBUTOR,"> The output file looks as follows:
> 
> ```
> 1
> 2
> 3
> 4
> 5
> ```

We currently use pandas JSON writer and this output isn't a valid JSON file, but pandas can read back this output because of a dedicated parameter(`typ`) it has in `read_json` which will determine what the file contents could be. For example:

```python
>>> ser.to_json('s')
>>> ser
0    1
1    2
2    3
3    4
Name: a, dtype: int64
>>> buf = ser.to_json()
>>> buf
'{""0"":1,""1"":2,""2"":3,""3"":4}'
>>> buf = ser.to_json()
>>> buf
'{""0"":1,""1"":2,""2"":3,""3"":4}'
>>> pd.read_json(buf, typ='series')
0    1
1    2
2    3
3    4
dtype: int64
>>> buf = ser.to_json(orient='records', lines=True)
>>> buf
'1\n2\n3\n4'
>>> pd.read_json(buf, typ='series', orient='records', lines=True)
0    1
1    2
2    3
3    4
dtype: int64
```

@kkraus14 I think we should support similar param(`typ`) in `cudf` aswell. 

But it also raises the question if `'1\n2\n3\n4'` should be considered a valid json, if not what could be a valid form in this case.",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/707424442/reactions,0,0,0,0,0,0,0,0,0,6505
394,https://api.github.com/repos/rapidsai/cudf/issues/comments/707442033,https://github.com/rapidsai/cudf/issues/6505#issuecomment-707442033,https://api.github.com/repos/rapidsai/cudf/issues/6505,707442033,MDEyOklzc3VlQ29tbWVudDcwNzQ0MjAzMw==,2020-10-13T02:16:45Z,2020-10-13T02:16:45Z,COLLABORATOR,"> @kkraus14 I think we should support similar param(`typ`) in `cudf` aswell.

If there was reasonable formats of JSON that could be supported then sure, but generally JSONLines is the most scalable / common one, so I'm not sure how much sense it makes to support other formats.

> But it also raises the question if `'1\n2\n3\n4'` should be considered a valid json, if not what could be a valid form in this case.

This is definitely not valid JSON. Could you raise an issue on Pandas if one doesn't already exist?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/707442033/reactions,0,0,0,0,0,0,0,0,0,6505
395,https://api.github.com/repos/rapidsai/cudf/issues/comments/707781683,https://github.com/rapidsai/cudf/issues/6505#issuecomment-707781683,https://api.github.com/repos/rapidsai/cudf/issues/6505,707781683,MDEyOklzc3VlQ29tbWVudDcwNzc4MTY4Mw==,2020-10-13T14:34:41Z,2020-10-13T14:34:41Z,CONTRIBUTOR,Cross-linking pandas issue: https://github.com/pandas-dev/pandas/issues/37100,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/707781683/reactions,0,0,0,0,0,0,0,0,0,6505
396,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123168,https://github.com/rapidsai/cudf/issues/6505#issuecomment-780123168,https://api.github.com/repos/rapidsai/cudf/issues/6505,780123168,MDEyOklzc3VlQ29tbWVudDc4MDEyMzE2OA==,2021-02-16T21:17:07Z,2021-02-16T21:17:07Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123168/reactions,0,0,0,0,0,0,0,0,0,6505
397,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116045204,https://github.com/rapidsai/cudf/issues/6505#issuecomment-2116045204,https://api.github.com/repos/rapidsai/cudf/issues/6505,2116045204,IC_kwDOBWUGps5-IEmU,2024-05-16T19:36:58Z,2024-05-16T19:36:58Z,CONTRIBUTOR,"@galipremsagar @mroeschke WDYT of the status of this now? The last comment on the associated pandas issue was from Matt, so deferring to you two to decide if there's any action item here still.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116045204/reactions,0,0,0,0,0,0,0,0,0,6505
398,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118405025,https://github.com/rapidsai/cudf/issues/6505#issuecomment-2118405025,https://api.github.com/repos/rapidsai/cudf/issues/6505,2118405025,IC_kwDOBWUGps5-REuh,2024-05-17T21:29:17Z,2024-05-17T21:29:17Z,CONTRIBUTOR,"Yeah I think the OP exhibits the intended behavior as the output isn't necessary valid JSON (albeit the correctly formatted output), so I think this is a won't fix",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118405025/reactions,0,0,0,0,0,0,0,0,0,6505
399,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121340159,https://github.com/rapidsai/cudf/issues/6505#issuecomment-2121340159,https://api.github.com/repos/rapidsai/cudf/issues/6505,2121340159,IC_kwDOBWUGps5-cRT_,2024-05-20T22:45:40Z,2024-05-20T22:45:40Z,CONTRIBUTOR,"Hmm is that contradicting your last statement on [the associated pandas issue](https://github.com/pandas-dev/pandas/issues/37100#issuecomment-898187809)? Is there a behavior change needed on the pandas end, then? IIUC pandas is allowing this input through. Unless you're suggesting that it's OK for cudf not to support it since it's not valid JSON, but pandas will continue to do so because it already does, in which case we should consider the implications of the divergence for cudf.pandas.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121340159/reactions,0,0,0,0,0,0,0,0,0,6505
400,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121479677,https://github.com/rapidsai/cudf/issues/6505#issuecomment-2121479677,https://api.github.com/repos/rapidsai/cudf/issues/6505,2121479677,IC_kwDOBWUGps5-czX9,2024-05-21T00:26:31Z,2024-05-21T00:26:31Z,CONTRIBUTOR,"Sorry, I should have clarified that the `to_json` behavior that both cudf and pandas currently share is the intended behavior. But, yes I suppose `cudf.read_json` should be able to round trip that output like `pandas.read_json`

```python
In [1]: import cudf, io

In [3]: import pandas as pd

In [8]: cudf.read_json(io.StringIO(cudf.Series([1,2,3,4,5]).to_json(lines=True, orient='records')), lines=True, orient=""records"")
RuntimeError: CUDF failure at: cudf/cpp/src/io/json/json_tree.cu:272: JSON Parser encountered an invalid format at location 2

In [9]: pd.read_json(io.StringIO(pd.Series([1,2,3,4,5]).to_json(lines=True, orient='records')), lines=True, orient=""records"")
Out[9]: 
   0
0  1
1  2
2  3
3  4
4  5
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121479677/reactions,1,1,0,0,0,0,0,0,0,6505
401,https://api.github.com/repos/rapidsai/cudf/issues/comments/712525359,https://github.com/rapidsai/cudf/issues/6560#issuecomment-712525359,https://api.github.com/repos/rapidsai/cudf/issues/6560,712525359,MDEyOklzc3VlQ29tbWVudDcxMjUyNTM1OQ==,2020-10-20T01:06:20Z,2020-10-20T01:06:20Z,COLLABORATOR,"One note here is that per thread default stream / explicit CUDA streams could likely change this where we can run multiple threads on a GPU and saturate it more effectively via concurrent work instead of relying on only a single task to saturate it.

This is of course at the cost of a larger number of tasks and more work for the scheduler to handle the larger number of tasks.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/712525359/reactions,1,1,0,0,0,0,0,0,0,6560
402,https://api.github.com/repos/rapidsai/cudf/issues/comments/712532449,https://github.com/rapidsai/cudf/issues/6560#issuecomment-712532449,https://api.github.com/repos/rapidsai/cudf/issues/6560,712532449,MDEyOklzc3VlQ29tbWVudDcxMjUzMjQ0OQ==,2020-10-20T01:32:52Z,2020-10-20T01:32:52Z,MEMBER,"> One note here is that per thread default stream / explicit CUDA streams could likely change this where we can run multiple threads on a GPU and saturate it more effectively via concurrent work instead of relying on only a single task to saturate it.
> 
> This is of course at the cost of a larger number of tasks and more work for the scheduler to handle the larger number of tasks.

Agreed that we will have to revisit this default when we have explicit CUDA streams but for now, I feel we should be safe to increase the default chunk size.

If we all end up agreeing on changing this default, happy to do a quick pr to fix this. ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/712532449/reactions,0,0,0,0,0,0,0,0,0,6560
403,https://api.github.com/repos/rapidsai/cudf/issues/comments/713100919,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713100919,https://api.github.com/repos/rapidsai/cudf/issues/6560,713100919,MDEyOklzc3VlQ29tbWVudDcxMzEwMDkxOQ==,2020-10-20T19:52:46Z,2020-10-20T19:52:46Z,COLLABORATOR,"The problem with straight up changing it to 2GB is if someone is using say a 4GB GPU they're going to run into problems. Can we somehow make it something like: `min(2GB, (1/8)*gpu_mem)`?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713100919/reactions,0,0,0,0,0,0,0,0,0,6560
404,https://api.github.com/repos/rapidsai/cudf/issues/comments/713117579,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713117579,https://api.github.com/repos/rapidsai/cudf/issues/6560,713117579,MDEyOklzc3VlQ29tbWVudDcxMzExNzU3OQ==,2020-10-20T20:23:57Z,2020-10-20T20:23:57Z,MEMBER,"> The problem with straight up changing it to 2GB is if someone is using say a 4GB GPU they're going to run into problems. Can we somehow make it something like: `min(2GB, (1/8)*gpu_mem)`?

As this happens in the client process, I am unsure of a clean way to query `gpu_mem`,  as the worker processes might have different memory than the client.  Maybe @quasiben  will know. 

If we can make the simplifying assumption here that `gpu_mem` is the memory of the client process this should be doable. ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713117579/reactions,0,0,0,0,0,0,0,0,0,6560
405,https://api.github.com/repos/rapidsai/cudf/issues/comments/713174495,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713174495,https://api.github.com/repos/rapidsai/cudf/issues/6560,713174495,MDEyOklzc3VlQ29tbWVudDcxMzE3NDQ5NQ==,2020-10-20T22:23:18Z,2020-10-20T22:23:18Z,MEMBER,"Also, it's available / free GPU mem, not total memory, right? That also depends on what RMM memory resource you are using, and not all are queryable...",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713174495/reactions,0,0,0,0,0,0,0,0,0,6560
406,https://api.github.com/repos/rapidsai/cudf/issues/comments/713222767,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713222767,https://api.github.com/repos/rapidsai/cudf/issues/6560,713222767,MDEyOklzc3VlQ29tbWVudDcxMzIyMjc2Nw==,2020-10-21T00:50:23Z,2020-10-21T00:50:23Z,COLLABORATOR,"It would be based on available, not free. Dask manages spilling as needed so you don't want to change configuration based on the amount of GPU memory available generally.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713222767/reactions,0,0,0,0,0,0,0,0,0,6560
407,https://api.github.com/repos/rapidsai/cudf/issues/comments/713223746,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713223746,https://api.github.com/repos/rapidsai/cudf/issues/6560,713223746,MDEyOklzc3VlQ29tbWVudDcxMzIyMzc0Ng==,2020-10-21T00:54:05Z,2020-10-21T00:54:05Z,MEMBER,"In my book, ""available"" and ""free"" memory are the same thing.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713223746/reactions,0,0,0,0,0,0,0,0,0,6560
408,https://api.github.com/repos/rapidsai/cudf/issues/comments/713224048,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713224048,https://api.github.com/repos/rapidsai/cudf/issues/6560,713224048,MDEyOklzc3VlQ29tbWVudDcxMzIyNDA0OA==,2020-10-21T00:55:12Z,2020-10-21T00:55:12Z,COLLABORATOR,"> In my book, ""available"" and ""free"" memory are the same thing.

Sorry, by ""available"" I interpreted as the configured maximum pool size (if applicable) or the total amount of GPU memory.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713224048/reactions,0,0,0,0,0,0,0,0,0,6560
409,https://api.github.com/repos/rapidsai/cudf/issues/comments/713642263,https://github.com/rapidsai/cudf/issues/6560#issuecomment-713642263,https://api.github.com/repos/rapidsai/cudf/issues/6560,713642263,MDEyOklzc3VlQ29tbWVudDcxMzY0MjI2Mw==,2020-10-21T15:02:42Z,2020-10-21T15:02:59Z,MEMBER,"NVTabular uses pynvml to get the total memory, and uses that to set `chunksize`.  We used to use rmm, until it (understandably) dropped reliable support for this.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/713642263/reactions,0,0,0,0,0,0,0,0,0,6560
410,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123096,https://github.com/rapidsai/cudf/issues/6560#issuecomment-780123096,https://api.github.com/repos/rapidsai/cudf/issues/6560,780123096,MDEyOklzc3VlQ29tbWVudDc4MDEyMzA5Ng==,2021-02-16T21:16:59Z,2021-02-16T21:16:59Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123096/reactions,0,0,0,0,0,0,0,0,0,6560
411,https://api.github.com/repos/rapidsai/cudf/issues/comments/889902667,https://github.com/rapidsai/cudf/issues/6560#issuecomment-889902667,https://api.github.com/repos/rapidsai/cudf/issues/6560,889902667,IC_kwDOBWUGps41CtZL,2021-07-30T13:44:05Z,2021-07-30T13:44:05Z,MEMBER,@VibhuJawa is this still relevant?,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/889902667/reactions,0,0,0,0,0,0,0,0,0,6560
412,https://api.github.com/repos/rapidsai/cudf/issues/comments/890073860,https://github.com/rapidsai/cudf/issues/6560#issuecomment-890073860,https://api.github.com/repos/rapidsai/cudf/issues/6560,890073860,IC_kwDOBWUGps41DXME,2021-07-30T18:24:40Z,2021-07-30T18:24:40Z,MEMBER,"> @VibhuJawa is this still relevant?

Given the above problems i think changing default is not an option in the short term. 

That said may be we need a best-practices page like dask has (see [doc]( https://docs.dask.org/en/latest/dataframe-best-practices.html )) to inform users about the best practices around chunk size .  ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/890073860/reactions,0,0,0,0,0,0,0,0,0,6560
413,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123080,https://github.com/rapidsai/cudf/issues/6561#issuecomment-780123080,https://api.github.com/repos/rapidsai/cudf/issues/6561,780123080,MDEyOklzc3VlQ29tbWVudDc4MDEyMzA4MA==,2021-02-16T21:16:57Z,2021-02-16T21:16:57Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123080/reactions,0,0,0,0,0,0,0,0,0,6561
414,https://api.github.com/repos/rapidsai/cudf/issues/comments/780996824,https://github.com/rapidsai/cudf/issues/6561#issuecomment-780996824,https://api.github.com/repos/rapidsai/cudf/issues/6561,780996824,MDEyOklzc3VlQ29tbWVudDc4MDk5NjgyNA==,2021-02-18T02:25:16Z,2021-02-18T02:25:16Z,CONTRIBUTOR,Still an open issue. ,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780996824/reactions,0,0,0,0,0,0,0,0,0,6561
415,https://api.github.com/repos/rapidsai/cudf/issues/comments/844392414,https://github.com/rapidsai/cudf/issues/6561#issuecomment-844392414,https://api.github.com/repos/rapidsai/cudf/issues/6561,844392414,MDEyOklzc3VlQ29tbWVudDg0NDM5MjQxNA==,2021-05-19T19:11:49Z,2021-05-19T19:11:49Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844392414/reactions,0,0,0,0,0,0,0,0,0,6561
416,https://api.github.com/repos/rapidsai/cudf/issues/comments/884639568,https://github.com/rapidsai/cudf/issues/6561#issuecomment-884639568,https://api.github.com/repos/rapidsai/cudf/issues/6561,884639568,IC_kwDOBWUGps40uodQ,2021-07-22T03:52:29Z,2021-07-22T03:52:29Z,CONTRIBUTOR,Still needed.  ,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884639568/reactions,0,0,0,0,0,0,0,0,0,6561
417,https://api.github.com/repos/rapidsai/cudf/issues/comments/714821931,https://github.com/rapidsai/cudf/issues/6572#issuecomment-714821931,https://api.github.com/repos/rapidsai/cudf/issues/6572,714821931,MDEyOklzc3VlQ29tbWVudDcxNDgyMTkzMQ==,2020-10-22T23:46:59Z,2020-10-22T23:46:59Z,COLLABORATOR,+1 to supporting this from the Python side as well,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/714821931/reactions,0,0,0,0,0,0,0,0,0,6572
418,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123064,https://github.com/rapidsai/cudf/issues/6572#issuecomment-780123064,https://api.github.com/repos/rapidsai/cudf/issues/6572,780123064,MDEyOklzc3VlQ29tbWVudDc4MDEyMzA2NA==,2021-02-16T21:16:56Z,2021-02-16T21:16:56Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123064/reactions,0,0,0,0,0,0,0,0,0,6572
419,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123043,https://github.com/rapidsai/cudf/issues/6574#issuecomment-780123043,https://api.github.com/repos/rapidsai/cudf/issues/6574,780123043,MDEyOklzc3VlQ29tbWVudDc4MDEyMzA0Mw==,2021-02-16T21:16:54Z,2021-02-16T21:16:54Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780123043/reactions,0,0,0,0,0,0,0,0,0,6574
420,https://api.github.com/repos/rapidsai/cudf/issues/comments/780169581,https://github.com/rapidsai/cudf/issues/6574#issuecomment-780169581,https://api.github.com/repos/rapidsai/cudf/issues/6574,780169581,MDEyOklzc3VlQ29tbWVudDc4MDE2OTU4MQ==,2021-02-16T22:52:38Z,2021-02-16T22:52:38Z,CONTRIBUTOR,"This is still an issue and should be addressed, but it is not a high priority",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780169581/reactions,0,0,0,0,0,0,0,0,0,6574
421,https://api.github.com/repos/rapidsai/cudf/issues/comments/842698042,https://github.com/rapidsai/cudf/issues/6574#issuecomment-842698042,https://api.github.com/repos/rapidsai/cudf/issues/6574,842698042,MDEyOklzc3VlQ29tbWVudDg0MjY5ODA0Mg==,2021-05-17T23:04:53Z,2021-05-17T23:04:53Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842698042/reactions,0,0,0,0,0,0,0,0,0,6574
422,https://api.github.com/repos/rapidsai/cudf/issues/comments/844113202,https://github.com/rapidsai/cudf/issues/6574#issuecomment-844113202,https://api.github.com/repos/rapidsai/cudf/issues/6574,844113202,MDEyOklzc3VlQ29tbWVudDg0NDExMzIwMg==,2021-05-19T13:35:54Z,2021-05-19T13:35:54Z,CONTRIBUTOR,This is still an issue,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844113202/reactions,0,0,0,0,0,0,0,0,0,6574
423,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093441,https://github.com/rapidsai/cudf/issues/6587#issuecomment-780093441,https://api.github.com/repos/rapidsai/cudf/issues/6587,780093441,MDEyOklzc3VlQ29tbWVudDc4MDA5MzQ0MQ==,2021-02-16T20:19:54Z,2021-02-16T20:19:54Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093441/reactions,0,0,0,0,0,0,0,0,0,6587
424,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094480,https://github.com/rapidsai/cudf/issues/6587#issuecomment-780094480,https://api.github.com/repos/rapidsai/cudf/issues/6587,780094480,MDEyOklzc3VlQ29tbWVudDc4MDA5NDQ4MA==,2021-02-16T20:21:06Z,2021-02-16T20:21:06Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094480/reactions,0,0,0,0,0,0,0,0,0,6587
425,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093432,https://github.com/rapidsai/cudf/issues/6604#issuecomment-780093432,https://api.github.com/repos/rapidsai/cudf/issues/6604,780093432,MDEyOklzc3VlQ29tbWVudDc4MDA5MzQzMg==,2021-02-16T20:19:52Z,2021-02-16T20:19:52Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093432/reactions,0,0,0,0,0,0,0,0,0,6604
426,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094469,https://github.com/rapidsai/cudf/issues/6604#issuecomment-780094469,https://api.github.com/repos/rapidsai/cudf/issues/6604,780094469,MDEyOklzc3VlQ29tbWVudDc4MDA5NDQ2OQ==,2021-02-16T20:21:05Z,2021-02-16T20:21:05Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094469/reactions,0,0,0,0,0,0,0,0,0,6604
427,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093410,https://github.com/rapidsai/cudf/issues/6630#issuecomment-780093410,https://api.github.com/repos/rapidsai/cudf/issues/6630,780093410,MDEyOklzc3VlQ29tbWVudDc4MDA5MzQxMA==,2021-02-16T20:19:50Z,2021-02-16T20:19:50Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093410/reactions,0,0,0,0,0,0,0,0,0,6630
428,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094450,https://github.com/rapidsai/cudf/issues/6630#issuecomment-780094450,https://api.github.com/repos/rapidsai/cudf/issues/6630,780094450,MDEyOklzc3VlQ29tbWVudDc4MDA5NDQ1MA==,2021-02-16T20:21:02Z,2021-02-16T20:21:02Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094450/reactions,0,0,0,0,0,0,0,0,0,6630
429,https://api.github.com/repos/rapidsai/cudf/issues/comments/781004008,https://github.com/rapidsai/cudf/issues/6630#issuecomment-781004008,https://api.github.com/repos/rapidsai/cudf/issues/6630,781004008,MDEyOklzc3VlQ29tbWVudDc4MTAwNDAwOA==,2021-02-18T02:45:01Z,2021-02-18T02:45:01Z,CONTRIBUTOR,@jlowe is this still needed?  ,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/781004008/reactions,0,0,0,0,0,0,0,0,0,6630
430,https://api.github.com/repos/rapidsai/cudf/issues/comments/781372399,https://github.com/rapidsai/cudf/issues/6630#issuecomment-781372399,https://api.github.com/repos/rapidsai/cudf/issues/6630,781372399,MDEyOklzc3VlQ29tbWVudDc4MTM3MjM5OQ==,2021-02-18T14:14:23Z,2021-02-18T14:14:23Z,MEMBER,"Yes, the description is still accurate.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/781372399/reactions,0,0,0,0,0,0,0,0,0,6630
431,https://api.github.com/repos/rapidsai/cudf/issues/comments/844392388,https://github.com/rapidsai/cudf/issues/6630#issuecomment-844392388,https://api.github.com/repos/rapidsai/cudf/issues/6630,844392388,MDEyOklzc3VlQ29tbWVudDg0NDM5MjM4OA==,2021-05-19T19:11:46Z,2021-05-19T19:11:46Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844392388/reactions,0,0,0,0,0,0,0,0,0,6630
432,https://api.github.com/repos/rapidsai/cudf/issues/comments/844394358,https://github.com/rapidsai/cudf/issues/6630#issuecomment-844394358,https://api.github.com/repos/rapidsai/cudf/issues/6630,844394358,MDEyOklzc3VlQ29tbWVudDg0NDM5NDM1OA==,2021-05-19T19:14:35Z,2021-05-19T19:14:35Z,MEMBER,Still desired but low priority,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844394358/reactions,0,0,0,0,0,0,0,0,0,6630
433,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093373,https://github.com/rapidsai/cudf/issues/6659#issuecomment-780093373,https://api.github.com/repos/rapidsai/cudf/issues/6659,780093373,MDEyOklzc3VlQ29tbWVudDc4MDA5MzM3Mw==,2021-02-16T20:19:46Z,2021-02-16T20:19:46Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093373/reactions,0,0,0,0,0,0,0,0,0,6659
434,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094411,https://github.com/rapidsai/cudf/issues/6659#issuecomment-780094411,https://api.github.com/repos/rapidsai/cudf/issues/6659,780094411,MDEyOklzc3VlQ29tbWVudDc4MDA5NDQxMQ==,2021-02-16T20:20:58Z,2021-02-16T20:20:58Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094411/reactions,0,0,0,0,0,0,0,0,0,6659
435,https://api.github.com/repos/rapidsai/cudf/issues/comments/724382470,https://github.com/rapidsai/cudf/issues/6660#issuecomment-724382470,https://api.github.com/repos/rapidsai/cudf/issues/6660,724382470,MDEyOklzc3VlQ29tbWVudDcyNDM4MjQ3MA==,2020-11-10T01:07:46Z,2020-11-10T01:07:46Z,COLLABORATOR,"@galipremsagar does Pandas always trim the subsecond data, or only when the element has a value of 0 for the subsecond data?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/724382470/reactions,0,0,0,0,0,0,0,0,0,6660
436,https://api.github.com/repos/rapidsai/cudf/issues/comments/725464440,https://github.com/rapidsai/cudf/issues/6660#issuecomment-725464440,https://api.github.com/repos/rapidsai/cudf/issues/6660,725464440,MDEyOklzc3VlQ29tbWVudDcyNTQ2NDQ0MA==,2020-11-11T14:47:10Z,2020-11-11T14:47:10Z,CONTRIBUTOR,@kkraus14 Pandas trims subsecond data only when it's subsecond data is 0,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/725464440/reactions,0,0,0,0,0,0,0,0,0,6660
437,https://api.github.com/repos/rapidsai/cudf/issues/comments/725493433,https://github.com/rapidsai/cudf/issues/6660#issuecomment-725493433,https://api.github.com/repos/rapidsai/cudf/issues/6660,725493433,MDEyOklzc3VlQ29tbWVudDcyNTQ5MzQzMw==,2020-11-11T15:38:07Z,2020-11-11T15:38:07Z,COLLABORATOR,"> @kkraus14 Pandas trims subsecond data only when it's subsecond data is 0

I don't know if this is something we can match or even should match then. Is Pandas able to read how we write the data successfully?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/725493433/reactions,0,0,0,0,0,0,0,0,0,6660
438,https://api.github.com/repos/rapidsai/cudf/issues/comments/760296010,https://github.com/rapidsai/cudf/issues/6660#issuecomment-760296010,https://api.github.com/repos/rapidsai/cudf/issues/6660,760296010,MDEyOklzc3VlQ29tbWVudDc2MDI5NjAxMA==,2021-01-14T16:09:57Z,2021-01-14T16:09:57Z,CONTRIBUTOR,"This looks possible to do.
The code for this is isolated in this aptly named function
https://github.com/rapidsai/cudf/blob/e0e2cf88c0f0bb4887f2cb25d7df054972d4fba3/cpp/src/io/csv/durations.cu#L225",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/760296010/reactions,0,0,0,0,0,0,0,0,0,6660
439,https://api.github.com/repos/rapidsai/cudf/issues/comments/760318955,https://github.com/rapidsai/cudf/issues/6660#issuecomment-760318955,https://api.github.com/repos/rapidsai/cudf/issues/6660,760318955,MDEyOklzc3VlQ29tbWVudDc2MDMxODk1NQ==,2021-01-14T16:46:31Z,2021-01-14T16:46:31Z,COLLABORATOR,I don't think this is something we should prioritize unless someone comes along and provides sufficient reasoning for why it's an issue for them.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/760318955/reactions,1,1,0,0,0,0,0,0,0,6660
440,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094399,https://github.com/rapidsai/cudf/issues/6660#issuecomment-780094399,https://api.github.com/repos/rapidsai/cudf/issues/6660,780094399,MDEyOklzc3VlQ29tbWVudDc4MDA5NDM5OQ==,2021-02-16T20:20:57Z,2021-02-16T20:20:57Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094399/reactions,0,0,0,0,0,0,0,0,0,6660
441,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638698,https://github.com/rapidsai/cudf/issues/6660#issuecomment-842638698,https://api.github.com/repos/rapidsai/cudf/issues/6660,842638698,MDEyOklzc3VlQ29tbWVudDg0MjYzODY5OA==,2021-05-17T21:05:20Z,2021-05-17T21:05:20Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638698/reactions,0,0,0,0,0,0,0,0,0,6660
442,https://api.github.com/repos/rapidsai/cudf/issues/comments/842448807,https://github.com/rapidsai/cudf/issues/6697#issuecomment-842448807,https://api.github.com/repos/rapidsai/cudf/issues/6697,842448807,MDEyOklzc3VlQ29tbWVudDg0MjQ0ODgwNw==,2021-05-17T16:07:38Z,2021-05-17T16:07:38Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842448807/reactions,0,0,0,0,0,0,0,0,0,6697
443,https://api.github.com/repos/rapidsai/cudf/issues/comments/844413617,https://github.com/rapidsai/cudf/issues/6697#issuecomment-844413617,https://api.github.com/repos/rapidsai/cudf/issues/6697,844413617,MDEyOklzc3VlQ29tbWVudDg0NDQxMzYxNw==,2021-05-19T19:41:50Z,2021-05-19T19:41:50Z,CONTRIBUTOR,This is still wanted,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844413617/reactions,0,0,0,0,0,0,0,0,0,6697
444,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093318,https://github.com/rapidsai/cudf/issues/6724#issuecomment-780093318,https://api.github.com/repos/rapidsai/cudf/issues/6724,780093318,MDEyOklzc3VlQ29tbWVudDc4MDA5MzMxOA==,2021-02-16T20:19:40Z,2021-02-16T20:19:40Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093318/reactions,0,0,0,0,0,0,0,0,0,6724
445,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094343,https://github.com/rapidsai/cudf/issues/6724#issuecomment-780094343,https://api.github.com/repos/rapidsai/cudf/issues/6724,780094343,MDEyOklzc3VlQ29tbWVudDc4MDA5NDM0Mw==,2021-02-16T20:20:49Z,2021-02-16T20:20:49Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094343/reactions,0,0,0,0,0,0,0,0,0,6724
446,https://api.github.com/repos/rapidsai/cudf/issues/comments/1824685381,https://github.com/rapidsai/cudf/issues/6724#issuecomment-1824685381,https://api.github.com/repos/rapidsai/cudf/issues/6724,1824685381,IC_kwDOBWUGps5swn1F,2023-11-23T16:20:34Z,2023-11-23T16:20:34Z,CONTRIBUTOR,Could be implemented by calling `result.fillna(map.__missing__(object))` after merging the results.,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1824685381/reactions,0,0,0,0,0,0,0,0,0,6724
447,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094278,https://github.com/rapidsai/cudf/issues/6759#issuecomment-780094278,https://api.github.com/repos/rapidsai/cudf/issues/6759,780094278,MDEyOklzc3VlQ29tbWVudDc4MDA5NDI3OA==,2021-02-16T20:20:42Z,2021-02-16T20:20:42Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094278/reactions,0,0,0,0,0,0,0,0,0,6759
448,https://api.github.com/repos/rapidsai/cudf/issues/comments/789360224,https://github.com/rapidsai/cudf/issues/6759#issuecomment-789360224,https://api.github.com/repos/rapidsai/cudf/issues/6759,789360224,MDEyOklzc3VlQ29tbWVudDc4OTM2MDIyNA==,2021-03-03T01:43:28Z,2021-03-03T01:43:28Z,CONTRIBUTOR,Still a valid [FEA],,randerzander,1692914,MDQ6VXNlcjE2OTI5MTQ=,https://avatars.githubusercontent.com/u/1692914?v=4,,https://api.github.com/users/randerzander,https://github.com/randerzander,https://api.github.com/users/randerzander/followers,https://api.github.com/users/randerzander/following{/other_user},https://api.github.com/users/randerzander/gists{/gist_id},https://api.github.com/users/randerzander/starred{/owner}{/repo},https://api.github.com/users/randerzander/subscriptions,https://api.github.com/users/randerzander/orgs,https://api.github.com/users/randerzander/repos,https://api.github.com/users/randerzander/events{/privacy},https://api.github.com/users/randerzander/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/789360224/reactions,0,0,0,0,0,0,0,0,0,6759
449,https://api.github.com/repos/rapidsai/cudf/issues/comments/851770539,https://github.com/rapidsai/cudf/issues/6759#issuecomment-851770539,https://api.github.com/repos/rapidsai/cudf/issues/6759,851770539,MDEyOklzc3VlQ29tbWVudDg1MTc3MDUzOQ==,2021-06-01T03:03:00Z,2021-06-01T03:03:00Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/851770539/reactions,0,0,0,0,0,0,0,0,0,6759
450,https://api.github.com/repos/rapidsai/cudf/issues/comments/852187745,https://github.com/rapidsai/cudf/issues/6759#issuecomment-852187745,https://api.github.com/repos/rapidsai/cudf/issues/6759,852187745,MDEyOklzc3VlQ29tbWVudDg1MjE4Nzc0NQ==,2021-06-01T14:48:40Z,2021-06-01T14:48:40Z,CONTRIBUTOR,Still valid,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/852187745/reactions,0,0,0,0,0,0,0,0,0,6759
451,https://api.github.com/repos/rapidsai/cudf/issues/comments/729287184,https://github.com/rapidsai/cudf/issues/6763#issuecomment-729287184,https://api.github.com/repos/rapidsai/cudf/issues/6763,729287184,MDEyOklzc3VlQ29tbWVudDcyOTI4NzE4NA==,2020-11-18T00:00:58Z,2020-11-18T00:00:58Z,CONTRIBUTOR,"Based on the offline discussion with @rgsl888prabhu , this is potentially a Pyarrow issue, as they don't handle the way our writer splits boolean data streams into stripes.
Keeping the priority for now.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/729287184/reactions,0,0,0,0,0,0,0,0,0,6763
452,https://api.github.com/repos/rapidsai/cudf/issues/comments/729300061,https://github.com/rapidsai/cudf/issues/6763#issuecomment-729300061,https://api.github.com/repos/rapidsai/cudf/issues/6763,729300061,MDEyOklzc3VlQ29tbWVudDcyOTMwMDA2MQ==,2020-11-18T00:36:50Z,2020-11-18T00:39:05Z,CONTRIBUTOR,"For the reference,  https://issues.apache.org/jira/browse/ARROW-10635

And assumption in cudf ORC writer
https://github.com/rapidsai/cudf/blob/01b8b5c5d0735b5a1c1df4e967fc929b337a9926/cpp/src/io/orc/orc.cpp#L210",,rgsl888prabhu,42624703,MDQ6VXNlcjQyNjI0NzAz,https://avatars.githubusercontent.com/u/42624703?v=4,,https://api.github.com/users/rgsl888prabhu,https://github.com/rgsl888prabhu,https://api.github.com/users/rgsl888prabhu/followers,https://api.github.com/users/rgsl888prabhu/following{/other_user},https://api.github.com/users/rgsl888prabhu/gists{/gist_id},https://api.github.com/users/rgsl888prabhu/starred{/owner}{/repo},https://api.github.com/users/rgsl888prabhu/subscriptions,https://api.github.com/users/rgsl888prabhu/orgs,https://api.github.com/users/rgsl888prabhu/repos,https://api.github.com/users/rgsl888prabhu/events{/privacy},https://api.github.com/users/rgsl888prabhu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/729300061/reactions,0,0,0,0,0,0,0,0,0,6763
453,https://api.github.com/repos/rapidsai/cudf/issues/comments/764907171,https://github.com/rapidsai/cudf/issues/6763#issuecomment-764907171,https://api.github.com/repos/rapidsai/cudf/issues/6763,764907171,MDEyOklzc3VlQ29tbWVudDc2NDkwNzE3MQ==,2021-01-21T20:10:53Z,2021-01-21T20:10:53Z,CONTRIBUTOR,"We got confirmation that the issue also repros with Spark reader, so treating this as a cuIO bug (not Pyarrow bug).",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/764907171/reactions,0,0,0,0,0,0,0,0,0,6763
454,https://api.github.com/repos/rapidsai/cudf/issues/comments/765803312,https://github.com/rapidsai/cudf/issues/6763#issuecomment-765803312,https://api.github.com/repos/rapidsai/cudf/issues/6763,765803312,MDEyOklzc3VlQ29tbWVudDc2NTgwMzMxMg==,2021-01-23T00:50:16Z,2021-01-23T00:50:16Z,CONTRIBUTOR,"[bool_pq.zip](https://github.com/rapidsai/cudf/files/5859314/bool_pq.zip)

code to reproduce 

```
import cudf
import pandas as pd
df = cudf.read_parquet(""bool_pq.parquet"")
df.to_orc(""broken_bool.orc"")
pdf = pd.read_orc(""broken_bool.orc"")
gdf = cudf.read_orc(""broken_bool.orc"")
# test pandas and cudf orc read
pdf.dropna()[gdf.dropna().to_pandas()['col_bool'] != pdf.dropna()['col_bool']]
# Compare parquet and orc cudf read
gdf.dropna()[df.dropna().to_pandas()['col_bool'] != gdf.dropna().to_pandas()['col_bool']]
```",,rgsl888prabhu,42624703,MDQ6VXNlcjQyNjI0NzAz,https://avatars.githubusercontent.com/u/42624703?v=4,,https://api.github.com/users/rgsl888prabhu,https://github.com/rgsl888prabhu,https://api.github.com/users/rgsl888prabhu/followers,https://api.github.com/users/rgsl888prabhu/following{/other_user},https://api.github.com/users/rgsl888prabhu/gists{/gist_id},https://api.github.com/users/rgsl888prabhu/starred{/owner}{/repo},https://api.github.com/users/rgsl888prabhu/subscriptions,https://api.github.com/users/rgsl888prabhu/orgs,https://api.github.com/users/rgsl888prabhu/repos,https://api.github.com/users/rgsl888prabhu/events{/privacy},https://api.github.com/users/rgsl888prabhu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/765803312/reactions,0,0,0,0,0,0,0,0,0,6763
455,https://api.github.com/repos/rapidsai/cudf/issues/comments/767854968,https://github.com/rapidsai/cudf/issues/6763#issuecomment-767854968,https://api.github.com/repos/rapidsai/cudf/issues/6763,767854968,MDEyOklzc3VlQ29tbWVudDc2Nzg1NDk2OA==,2021-01-26T21:59:33Z,2021-01-26T21:59:33Z,CONTRIBUTOR,"Root cause:
ORC encodes bools as bits, where null values are omitted from the data stream. Row groups have 10k elements, so when there are no nulls they fill 1250 bytes completely. 
When nulls are present, the last byte might be incomplete. Other readers (pyarrow, Spark) expect all bits in encoded column to be valid (with the exception of last byte in the stripe).

Thus, we need to encode bool values from the next row group into the incomplete byte and set the next row group starting offset to the correct bit within the data encoded as part of the current row group. This offsets the encoding of the next row groups and the effect ripples over the entire stripe. Significant changes are needed to the current implementation to be able to support this.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/767854968/reactions,0,0,0,0,0,0,0,0,0,6763
456,https://api.github.com/repos/rapidsai/cudf/issues/comments/767898116,https://github.com/rapidsai/cudf/issues/6763#issuecomment-767898116,https://api.github.com/repos/rapidsai/cudf/issues/6763,767898116,MDEyOklzc3VlQ29tbWVudDc2Nzg5ODExNg==,2021-01-26T23:30:09Z,2021-01-26T23:30:09Z,CONTRIBUTOR,"Suggested approach:

1. Gather row ranges that need to be encoded together (new step/code):
    1. Gather null counts per row group.
    2. Apply `thrust::inclusive_scan` on the null counts.
    3. Modulo 8 each element to get the number of bits that this row group borrow from the next one (as part of `inclusive_scan`?).
    4. Find the row number of the last row each row group encoder needs to encode (might be larger than the number of borrowed bits, as nulls are not encoded in the data stream) - thread per row group.
2. Encode kernel changes:
    1. Pass the information about bool row ranges to the encode kernel.
    2. Encode the bool column rows in the range, instead of rows in the row group.
    3. Save the location of the last batch of encoded (Byte RLE) values .
3. Row group offset computation: use information about last encoded batch and the number of borrowed bits.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/767898116/reactions,0,0,0,0,0,0,0,0,0,6763
457,https://api.github.com/repos/rapidsai/cudf/issues/comments/786327834,https://github.com/rapidsai/cudf/issues/6763#issuecomment-786327834,https://api.github.com/repos/rapidsai/cudf/issues/6763,786327834,MDEyOklzc3VlQ29tbWVudDc4NjMyNzgzNA==,2021-02-26T00:40:07Z,2021-02-26T00:40:07Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786327834/reactions,0,0,0,0,0,0,0,0,0,6763
458,https://api.github.com/repos/rapidsai/cudf/issues/comments/849246769,https://github.com/rapidsai/cudf/issues/6763#issuecomment-849246769,https://api.github.com/repos/rapidsai/cudf/issues/6763,849246769,MDEyOklzc3VlQ29tbWVudDg0OTI0Njc2OQ==,2021-05-27T01:33:11Z,2021-05-27T01:33:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849246769/reactions,0,0,0,0,0,0,0,0,0,6763
459,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093213,https://github.com/rapidsai/cudf/issues/6795#issuecomment-780093213,https://api.github.com/repos/rapidsai/cudf/issues/6795,780093213,MDEyOklzc3VlQ29tbWVudDc4MDA5MzIxMw==,2021-02-16T20:19:31Z,2021-02-16T20:19:31Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093213/reactions,0,0,0,0,0,0,0,0,0,6795
460,https://api.github.com/repos/rapidsai/cudf/issues/comments/737884507,https://github.com/rapidsai/cudf/issues/6797#issuecomment-737884507,https://api.github.com/repos/rapidsai/cudf/issues/6797,737884507,MDEyOklzc3VlQ29tbWVudDczNzg4NDUwNw==,2020-12-03T11:31:26Z,2020-12-03T11:31:26Z,MEMBER,@kuhushukla @sameerz can this be moved to the 0.18  project board?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/737884507/reactions,0,0,0,0,0,0,0,0,0,6797
461,https://api.github.com/repos/rapidsai/cudf/issues/comments/738050142,https://github.com/rapidsai/cudf/issues/6797#issuecomment-738050142,https://api.github.com/repos/rapidsai/cudf/issues/6797,738050142,MDEyOklzc3VlQ29tbWVudDczODA1MDE0Mg==,2020-12-03T15:00:53Z,2020-12-03T15:00:53Z,CONTRIBUTOR,">@kuhushukla @sameerz can this be moved to the 0.18 project board?
> 
Done. Thanks!",,kuhushukla,20541681,MDQ6VXNlcjIwNTQxNjgx,https://avatars.githubusercontent.com/u/20541681?v=4,,https://api.github.com/users/kuhushukla,https://github.com/kuhushukla,https://api.github.com/users/kuhushukla/followers,https://api.github.com/users/kuhushukla/following{/other_user},https://api.github.com/users/kuhushukla/gists{/gist_id},https://api.github.com/users/kuhushukla/starred{/owner}{/repo},https://api.github.com/users/kuhushukla/subscriptions,https://api.github.com/users/kuhushukla/orgs,https://api.github.com/users/kuhushukla/repos,https://api.github.com/users/kuhushukla/events{/privacy},https://api.github.com/users/kuhushukla/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/738050142/reactions,0,0,0,0,0,0,0,0,0,6797
462,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094268,https://github.com/rapidsai/cudf/issues/6797#issuecomment-780094268,https://api.github.com/repos/rapidsai/cudf/issues/6797,780094268,MDEyOklzc3VlQ29tbWVudDc4MDA5NDI2OA==,2021-02-16T20:20:41Z,2021-02-16T20:20:41Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094268/reactions,0,0,0,0,0,0,0,0,0,6797
463,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638661,https://github.com/rapidsai/cudf/issues/6797#issuecomment-842638661,https://api.github.com/repos/rapidsai/cudf/issues/6797,842638661,MDEyOklzc3VlQ29tbWVudDg0MjYzODY2MQ==,2021-05-17T21:05:16Z,2021-05-17T21:05:16Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638661/reactions,0,0,0,0,0,0,0,0,0,6797
464,https://api.github.com/repos/rapidsai/cudf/issues/comments/844412784,https://github.com/rapidsai/cudf/issues/6797#issuecomment-844412784,https://api.github.com/repos/rapidsai/cudf/issues/6797,844412784,MDEyOklzc3VlQ29tbWVudDg0NDQxMjc4NA==,2021-05-19T19:40:32Z,2021-05-19T19:40:32Z,CONTRIBUTOR,This is still wanted,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844412784/reactions,0,0,0,0,0,0,0,0,0,6797
465,https://api.github.com/repos/rapidsai/cudf/issues/comments/884639611,https://github.com/rapidsai/cudf/issues/6797#issuecomment-884639611,https://api.github.com/repos/rapidsai/cudf/issues/6797,884639611,IC_kwDOBWUGps40uod7,2021-07-22T03:52:44Z,2021-07-22T03:52:44Z,CONTRIBUTOR,Sill needed. ,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884639611/reactions,0,0,0,0,0,0,0,0,0,6797
466,https://api.github.com/repos/rapidsai/cudf/issues/comments/731331227,https://github.com/rapidsai/cudf/issues/6810#issuecomment-731331227,https://api.github.com/repos/rapidsai/cudf/issues/6810,731331227,MDEyOklzc3VlQ29tbWVudDczMTMzMTIyNw==,2020-11-20T18:14:57Z,2020-11-20T18:14:57Z,COLLABORATOR,"cc @jrhemstad I think this would require an option in libcudf to control `NaN` behavior in groupby aggregations, but I'm not sure what our thoughts are from the libcudf side.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/731331227/reactions,0,0,0,0,0,0,0,0,0,6810
467,https://api.github.com/repos/rapidsai/cudf/issues/comments/731342821,https://github.com/rapidsai/cudf/issues/6810#issuecomment-731342821,https://api.github.com/repos/rapidsai/cudf/issues/6810,731342821,MDEyOklzc3VlQ29tbWVudDczMTM0MjgyMQ==,2020-11-20T18:40:26Z,2020-11-20T18:40:47Z,CONTRIBUTOR,`NaN + x == NaN ∀ x` ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/731342821/reactions,0,0,0,0,0,0,0,0,0,6810
468,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094234,https://github.com/rapidsai/cudf/issues/6810#issuecomment-780094234,https://api.github.com/repos/rapidsai/cudf/issues/6810,780094234,MDEyOklzc3VlQ29tbWVudDc4MDA5NDIzNA==,2021-02-16T20:20:38Z,2021-02-16T20:20:38Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780094234/reactions,0,0,0,0,0,0,0,0,0,6810
469,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638631,https://github.com/rapidsai/cudf/issues/6810#issuecomment-842638631,https://api.github.com/repos/rapidsai/cudf/issues/6810,842638631,MDEyOklzc3VlQ29tbWVudDg0MjYzODYzMQ==,2021-05-17T21:05:14Z,2021-05-17T21:05:14Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638631/reactions,0,0,0,0,0,0,0,0,0,6810
470,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281632376,https://github.com/rapidsai/cudf/issues/6810#issuecomment-1281632376,https://api.github.com/repos/rapidsai/cudf/issues/6810,1281632376,IC_kwDOBWUGps5MZCh4,2022-10-17T23:38:18Z,2022-10-17T23:38:18Z,CONTRIBUTOR,"@shwina @brandon-b-miller what do we want to do with something like this? I think with a lot of our more recent discussions around NaN and NULL we have been OK accepting this kind of discrepancy based on the fact that we don't conflate the two, right?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281632376/reactions,0,0,0,0,0,0,0,0,0,6810
471,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282562605,https://github.com/rapidsai/cudf/issues/6810#issuecomment-1282562605,https://api.github.com/repos/rapidsai/cudf/issues/6810,1282562605,IC_kwDOBWUGps5Mclot,2022-10-18T15:16:33Z,2022-10-18T15:17:53Z,CONTRIBUTOR,"I don't think this is related to the NaN v/s N/A discussion. Pandas seems to ignore both in groupby reductions:

```python
In [86]: df = pd.DataFrame({'key':[0,0,0],'val':[pd.NA, 1, pd.NA]})

In [87]: df
Out[87]: 
   key   val
0    0  <NA>
1    0     1
2    0  <NA>

In [88]: df.groupby('key').sum()
Out[88]: 
     val
key     
0      1

In [89]: df = pd.DataFrame({'key':[0,0,0],'val':[np.nan, 1, np.nan]})

In [90]: df
Out[90]: 
   key  val
0    0  NaN
1    0  1.0
2    0  NaN

In [91]: df.groupby('key').sum()
Out[91]: 
     val
key     
0    1.0
```

FWIW, cuDF _also_ ignore nulls and NaNs for plain (i.e., not grouped) reductions:

```python
In [92]: cudf.Series([1, 2, None]).sum()
Out[92]: 3

In [93]: cudf.Series([1, 2, np.nan], nan_as_null=False).sum()
Out[93]: 3.0
```

Note that a `skipna=` kwarg can be used to control null handling in plain reductions:

```python
cudf.Series([1, 2, None]).sum(skipna=False)
nan
```

`GroupBy.sum()` (both in Pandas and cuDF) lacks a similar `skipna=` kwarg. In Pandas, you can work around this using a callable aggregation:

```python
df.groupby('key').agg(lambda x: x.sum(skipna=False))
```

---

Here are a few proposals for how to proceed:

1. We consider this a bug and change our groupby reduction behaviour to ignore nulls, exactly like Pandas
2. We change nothing, and document the difference in behaviour in our [user guide](https://docs.rapids.ai/api/cudf/stable/user_guide/groupby.html).
3. We introduce a `skipna=` argument to group reductions, allowing the user to control whether or not nulls should be skipped, defaulting to `True` to match Pandas behaviour, and allowing `False` to support cuDF's current behaviour:

   ```python
   df.groupby('key').sum(skipna=False)
   ```

We could also ask if Pandas would be interested in supporting (3).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282562605/reactions,0,0,0,0,0,0,0,0,0,6810
472,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093981,https://github.com/rapidsai/cudf/issues/6895#issuecomment-780093981,https://api.github.com/repos/rapidsai/cudf/issues/6895,780093981,MDEyOklzc3VlQ29tbWVudDc4MDA5Mzk4MQ==,2021-02-16T20:20:25Z,2021-02-16T20:20:25Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093981/reactions,0,0,0,0,0,0,0,0,0,6895
473,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638503,https://github.com/rapidsai/cudf/issues/6895#issuecomment-842638503,https://api.github.com/repos/rapidsai/cudf/issues/6895,842638503,MDEyOklzc3VlQ29tbWVudDg0MjYzODUwMw==,2021-05-17T21:05:01Z,2021-05-17T21:05:01Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638503/reactions,0,0,0,0,0,0,0,0,0,6895
474,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093905,https://github.com/rapidsai/cudf/issues/6933#issuecomment-780093905,https://api.github.com/repos/rapidsai/cudf/issues/6933,780093905,MDEyOklzc3VlQ29tbWVudDc4MDA5MzkwNQ==,2021-02-16T20:20:15Z,2021-02-16T20:20:15Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093905/reactions,0,0,0,0,0,0,0,0,0,6933
475,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638418,https://github.com/rapidsai/cudf/issues/6933#issuecomment-842638418,https://api.github.com/repos/rapidsai/cudf/issues/6933,842638418,MDEyOklzc3VlQ29tbWVudDg0MjYzODQxOA==,2021-05-17T21:04:53Z,2021-05-17T21:04:53Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638418/reactions,0,0,0,0,0,0,0,0,0,6933
476,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093898,https://github.com/rapidsai/cudf/issues/6946#issuecomment-780093898,https://api.github.com/repos/rapidsai/cudf/issues/6946,780093898,MDEyOklzc3VlQ29tbWVudDc4MDA5Mzg5OA==,2021-02-16T20:20:14Z,2021-02-16T20:20:14Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093898/reactions,0,0,0,0,0,0,0,0,0,6946
477,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638397,https://github.com/rapidsai/cudf/issues/6946#issuecomment-842638397,https://api.github.com/repos/rapidsai/cudf/issues/6946,842638397,MDEyOklzc3VlQ29tbWVudDg0MjYzODM5Nw==,2021-05-17T21:04:51Z,2021-05-17T21:04:51Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638397/reactions,0,0,0,0,0,0,0,0,0,6946
478,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093524,https://github.com/rapidsai/cudf/issues/7015#issuecomment-780093524,https://api.github.com/repos/rapidsai/cudf/issues/7015,780093524,MDEyOklzc3VlQ29tbWVudDc4MDA5MzUyNA==,2021-02-16T20:19:58Z,2021-02-16T20:19:58Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093524/reactions,0,0,0,0,0,0,0,0,0,7015
479,https://api.github.com/repos/rapidsai/cudf/issues/comments/780898058,https://github.com/rapidsai/cudf/issues/7015#issuecomment-780898058,https://api.github.com/repos/rapidsai/cudf/issues/7015,780898058,MDEyOklzc3VlQ29tbWVudDc4MDg5ODA1OA==,2021-02-17T22:31:38Z,2021-02-17T22:31:38Z,CONTRIBUTOR,Issue still relevant.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780898058/reactions,0,0,0,0,0,0,0,0,0,7015
480,https://api.github.com/repos/rapidsai/cudf/issues/comments/803447879,https://github.com/rapidsai/cudf/issues/7015#issuecomment-803447879,https://api.github.com/repos/rapidsai/cudf/issues/7015,803447879,MDEyOklzc3VlQ29tbWVudDgwMzQ0Nzg3OQ==,2021-03-20T19:13:14Z,2021-03-20T19:13:14Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/803447879/reactions,0,0,0,0,0,0,0,0,0,7015
481,https://api.github.com/repos/rapidsai/cudf/issues/comments/755533049,https://github.com/rapidsai/cudf/issues/7088#issuecomment-755533049,https://api.github.com/repos/rapidsai/cudf/issues/7088,755533049,MDEyOklzc3VlQ29tbWVudDc1NTUzMzA0OQ==,2021-01-06T19:07:39Z,2021-01-06T19:07:39Z,CONTRIBUTOR,cc: @kaatish @vuule ,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/755533049/reactions,0,0,0,0,0,0,0,0,0,7088
482,https://api.github.com/repos/rapidsai/cudf/issues/comments/755797936,https://github.com/rapidsai/cudf/issues/7088#issuecomment-755797936,https://api.github.com/repos/rapidsai/cudf/issues/7088,755797936,MDEyOklzc3VlQ29tbWVudDc1NTc5NzkzNg==,2021-01-07T00:37:41Z,2021-01-07T00:37:41Z,COLLABORATOR,"> If the values overflow `int` & `uint` types, they should be inferred as `string` column.

I don't think we want this behavior. Pandas infers as `object` which are Python integers as opposed to strings, no?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/755797936/reactions,0,0,0,0,0,0,0,0,0,7088
483,https://api.github.com/repos/rapidsai/cudf/issues/comments/756171820,https://github.com/rapidsai/cudf/issues/7088#issuecomment-756171820,https://api.github.com/repos/rapidsai/cudf/issues/7088,756171820,MDEyOklzc3VlQ29tbWVudDc1NjE3MTgyMA==,2021-01-07T15:05:36Z,2021-01-07T15:05:36Z,CONTRIBUTOR,"
> Pandas infers as `object` which are Python integers as opposed to strings, no?

Not actually, pandas appears to be storing them as strings:

```python
>>> import pandas as pd
>>> df = pd.read_csv('a.csv')
>>> df['3']
0                          
1      17758512297797920768
2                          
3       3374168267804635136
4                          
               ...         
365                        
366                        
367                        
368    14301866441110444032
369                        
Name: 3, Length: 370, dtype: object
>>> df['3'][1]
'17758512297797920768'
>>> type(df['3'][1])
<class 'str'>
```",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/756171820/reactions,0,0,0,0,0,0,0,0,0,7088
484,https://api.github.com/repos/rapidsai/cudf/issues/comments/756213308,https://github.com/rapidsai/cudf/issues/7088#issuecomment-756213308,https://api.github.com/repos/rapidsai/cudf/issues/7088,756213308,MDEyOklzc3VlQ29tbWVudDc1NjIxMzMwOA==,2021-01-07T16:10:57Z,2021-01-07T16:10:57Z,COLLABORATOR,"TIL... Either way, I would defer to what makes sense from a general C++ perspective instead of forcing Pandas semantics.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/756213308/reactions,1,1,0,0,0,0,0,0,0,7088
485,https://api.github.com/repos/rapidsai/cudf/issues/comments/756308092,https://github.com/rapidsai/cudf/issues/7088#issuecomment-756308092,https://api.github.com/repos/rapidsai/cudf/issues/7088,756308092,MDEyOklzc3VlQ29tbWVudDc1NjMwODA5Mg==,2021-01-07T18:48:47Z,2021-01-07T18:48:47Z,CONTRIBUTOR,"> In this case, cudf CSV reader is inferring the column type to be float column. This will lead to loss of data partially.

IMO this is a good reason to use strings here.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/756308092/reactions,2,2,0,0,0,0,0,0,0,7088
486,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093341,https://github.com/rapidsai/cudf/issues/7088#issuecomment-780093341,https://api.github.com/repos/rapidsai/cudf/issues/7088,780093341,MDEyOklzc3VlQ29tbWVudDc4MDA5MzM0MQ==,2021-02-16T20:19:43Z,2021-02-16T20:19:43Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093341/reactions,0,0,0,0,0,0,0,0,0,7088
487,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638154,https://github.com/rapidsai/cudf/issues/7088#issuecomment-842638154,https://api.github.com/repos/rapidsai/cudf/issues/7088,842638154,MDEyOklzc3VlQ29tbWVudDg0MjYzODE1NA==,2021-05-17T21:04:30Z,2021-05-17T21:04:30Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638154/reactions,0,0,0,0,0,0,0,0,0,7088
488,https://api.github.com/repos/rapidsai/cudf/issues/comments/755842829,https://github.com/rapidsai/cudf/issues/7093#issuecomment-755842829,https://api.github.com/repos/rapidsai/cudf/issues/7093,755842829,MDEyOklzc3VlQ29tbWVudDc1NTg0MjgyOQ==,2021-01-07T02:29:48Z,2021-01-07T02:29:48Z,MEMBER,"Another important current example:

```c++
// auto col = {1, 2, 3, 4, 5};
cudf::rolling_window(col, 0, 0, 1, ???); // null, null, null, null, null
cudf::rolling_window(col, 0, 0, 1, min); // null, null, null, null, null
etc.
```

I just worked through the logic of some corner cases, and thought I would document it to help improve understanding and help others work examples. Here's the current logic for computing the window start and end.

```c++
size_type preceding_window = preceding_window_begin[i];
size_type following_window = following_window_begin[i];

// compute bounds
size_type start       = min(input.size(), max(0, i - preceding_window + 1));
size_type end         = min(input.size(), max(0, i + following_window + 1));
size_type start_index = min(start, end);
size_type end_index   = max(start, end); 
```

And the window processing loops all look like `for (size_type j = start_index; j < end_index; j++) { ... }`  -- so `end_index` is not included.

I guess what is being proposed is to change it so that passing [0, 0, 1] for preceding, following, min_periods gives you the identity, rather than the current behavior where [1, 0, 1] gives you the identity. So my first attempt at the new logic would be:

```c++
size_type preceding_window = preceding_window_begin[i];
size_type following_window = following_window_begin[i];

// compute bounds
size_type start       = min(input.size(), max(0, i - preceding_window));
size_type end         = min(input.size(), max(0, i + following_window + 1));
size_type start_index = min(start, end);
size_type end_index   = max(start, end); 
```
(Leaving the processing loop alone.)
Notably, my example above would now produce non-null results. 

```c++
// auto col = {1, 2, 3, 4, 5};
cudf::rolling_window(col, 0, 0, 1, ???); // [1], [2], [3], [4], [5]
cudf::rolling_window(col, 0, 0, 1, min); //  1,   2,   3,   4,   5
etc.
```

To recover the previous zero-window-size behavior would require passing `-1` for *either* one of the window sizes.

```c++
// auto col = {1, 2, 3, 4, 5};
cudf::rolling_window(col, -1, 0, 1, ???); // null, null, null, null, null
cudf::rolling_window(col, 0, -1, 1, ???); // null, null, null, null, null
```
But (I think surprisingly), passing `-1` for both would be the same as passing zero for both!

```c++
// auto col = {1, 2, 3, 4, 5};
cudf::rolling_window(col, -1, -1, 1, ???); // [1], [2], [3], [4], [5]
```

I would think that (-1, -1) should result in the reverse of (1, 1).  This makes me think that we would instead want to change the implementation to this:

```c++
size_type preceding_window = preceding_window_begin[i];
size_type following_window = following_window_begin[i];

// compute bounds
size_type start       = min(input.size() - 1, max(0, i - preceding_window));
size_type end         = min(input.size() - 1, max(0, i + following_window));
size_type start_index = min(start, end);
size_type end_index   = max(start, end); 
```

And change the for loop to be inclusive. `for (size_type j = start_index; j <= end_index; j++) { ... }`

Important to also note the changes to the first argument to `min()` for `start` and `end`.

```c++
// auto col = {1, 2, 3, 4, 5};

// 0, 0, 1 still gives the identity
cudf::rolling_window(col, 0, 0, 1, ???); // [1], [2], [3], [4], [5]

// Note the difference here: 
cudf::rolling_window(col, -1, 0, 1, ???); // [1 2], [2 3], [3 4], [4 5], [5]
cudf::rolling_window(col, 0, -1, 1, ???); // [1], [1 2], [2 3], [3 4], [4 5]

// The above are the same as the reversed, negated windows (this seems consistent)
cudf::rolling_window(col, 0, 1, 1, ???); // [1 2], [2 3], [3 4], [4 5], [5]
cudf::rolling_window(col, 1, 0, 1, ???); // [1], [1 2], [2 3], [3 4], [4 5]

// -1 twice is the same as 1 twice, as expected
cudf::rolling_window(col, 1, 1, 1, ???);   // [1 2], [2 3], [3 4], [4 5], [5]
cudf::rolling_window(col, -1, -1, 1, ???); // [1 2], [2 3], [3 4], [4 5], [5]
```

But now how do we do a zero window size? The only way is to set `min_periods` greater than 1.

```c++
cudf::rolling_window(col, 0, 0, 2, ???);   // null, null, null, null, null
```

This kind of bothers me, but at least there is a way. And the rest of the cases are more self consistent than other implementations.

",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/755842829/reactions,0,0,0,0,0,0,0,0,0,7093
489,https://api.github.com/repos/rapidsai/cudf/issues/comments/755846977,https://github.com/rapidsai/cudf/issues/7093#issuecomment-755846977,https://api.github.com/repos/rapidsai/cudf/issues/7093,755846977,MDEyOklzc3VlQ29tbWVudDc1NTg0Njk3Nw==,2021-01-07T02:43:37Z,2021-01-07T02:44:07Z,MEMBER,"BTW, I found the original negative window sizes request. https://github.com/rapidsai/cudf/issues/3650

Interestingly, the reason for the request was to enable windows that DO NOT include the current row/element. So I don't think negative window sizes are strictly necessary, just a way to exclude the current row. The assumption that the current row should always be included is not a valid assumption, it seems.

Let's take the example from that issue: 

> So for example I may want the MAX of the 5 entries just before the current one.

The existing behavior where one of the two window sizes is exclusive makes this possible (along with negative window sizes). 

```c++
cudf::rolling_window(col, 6, -1, 1, max); // Admittedly, this is awkward!
```

The proposed new behavior would make it impossible to express -- the current element is always included.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/755846977/reactions,0,0,0,0,0,0,0,0,0,7093
490,https://api.github.com/repos/rapidsai/cudf/issues/comments/756490766,https://github.com/rapidsai/cudf/issues/7093#issuecomment-756490766,https://api.github.com/repos/rapidsai/cudf/issues/7093,756490766,MDEyOklzc3VlQ29tbWVudDc1NjQ5MDc2Ng==,2021-01-08T01:32:40Z,2021-01-08T01:32:40Z,MEMBER,"I need to correct myself. Using 5, -1, 1 should work for a window that only includes the 5 elements before the current element, and not the current element!",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/756490766/reactions,0,0,0,0,0,0,0,0,0,7093
491,https://api.github.com/repos/rapidsai/cudf/issues/comments/756491043,https://github.com/rapidsai/cudf/issues/7093#issuecomment-756491043,https://api.github.com/repos/rapidsai/cudf/issues/7093,756491043,MDEyOklzc3VlQ29tbWVudDc1NjQ5MTA0Mw==,2021-01-08T01:33:34Z,2021-01-08T01:33:34Z,MEMBER,"Before we do anything here, we need to gather further requirements. For example @mythrocks mentioned the need for offset windows. @mythrocks can you please elaborate?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/756491043/reactions,0,0,0,0,0,0,0,0,0,7093
492,https://api.github.com/repos/rapidsai/cudf/issues/comments/758287090,https://github.com/rapidsai/cudf/issues/7093#issuecomment-758287090,https://api.github.com/repos/rapidsai/cudf/issues/7093,758287090,MDEyOklzc3VlQ29tbWVudDc1ODI4NzA5MA==,2021-01-11T23:22:49Z,2021-01-11T23:22:49Z,CONTRIBUTOR,"> For example @mythrocks mentioned the need for offset windows. @mythrocks can you please elaborate?

An offset window is one where the two ends of the window do not straddle the row itself. For instance, consider this column:
```
// auto col = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
```
Consider a `SUM()` operation over records in a span [`2 ROWS PRECEDING`, `1 ROW PRECEDING`]. All the rows participating in a window appear before (i.e. to the left) of the current row. E.g. For row at index `5`, the sum is `7` (i.e. `3+4`). 
Assuming the current semantics of `preceding`/`following`, we might represent this as:
```
cudf::rolling_window(col, 3, -1, 1, sum); // {ω, 0, 1, 3, 5, 9, 11, 13, 15}
```

We will need to add checks so that the left bound do not appear to the right of the right bound. (E.g. `rolling_window(col 3, -3, ?, ???)`.)

This gets slightly more involved for timestamp-based queries, where the window might be from `7 DAYS PRECEDING` to `1 DAY PRECEDING`.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/758287090/reactions,0,0,0,0,0,0,0,0,0,7093
493,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093309,https://github.com/rapidsai/cudf/issues/7093#issuecomment-780093309,https://api.github.com/repos/rapidsai/cudf/issues/7093,780093309,MDEyOklzc3VlQ29tbWVudDc4MDA5MzMwOQ==,2021-02-16T20:19:40Z,2021-02-16T20:19:40Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780093309/reactions,0,0,0,0,0,0,0,0,0,7093
494,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638114,https://github.com/rapidsai/cudf/issues/7093#issuecomment-842638114,https://api.github.com/repos/rapidsai/cudf/issues/7093,842638114,MDEyOklzc3VlQ29tbWVudDg0MjYzODExNA==,2021-05-17T21:04:26Z,2021-05-17T21:04:26Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/842638114/reactions,0,0,0,0,0,0,0,0,0,7093
495,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281633229,https://github.com/rapidsai/cudf/issues/7093#issuecomment-1281633229,https://api.github.com/repos/rapidsai/cudf/issues/7093,1281633229,IC_kwDOBWUGps5MZCvN,2022-10-17T23:39:50Z,2022-10-17T23:39:50Z,CONTRIBUTOR,@harrism @mythrocks do either of you recall the motivations for this discussion or know if it's still something that we should be pursuing?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281633229/reactions,0,0,0,0,0,0,0,0,0,7093
496,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281740553,https://github.com/rapidsai/cudf/issues/7093#issuecomment-1281740553,https://api.github.com/repos/rapidsai/cudf/issues/7093,1281740553,IC_kwDOBWUGps5MZc8J,2022-10-18T02:42:39Z,2022-10-18T02:42:39Z,MEMBER,"I'm sorry, I don't.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1281740553/reactions,0,0,0,0,0,0,0,0,0,7093
497,https://api.github.com/repos/rapidsai/cudf/issues/comments/1284442003,https://github.com/rapidsai/cudf/issues/7093#issuecomment-1284442003,https://api.github.com/repos/rapidsai/cudf/issues/7093,1284442003,IC_kwDOBWUGps5MjweT,2022-10-19T18:56:12Z,2022-10-19T18:56:12Z,CONTRIBUTOR,"At the risk of repeating what @codereport covered in the description, I can try provide a summary:

Window bounds are defined in CUDF via a ""preceding"" and ""following"" row-count. For reasons that predate my work on window functions, the ""preceding"" count *includes* the current row. This is not intuitive:
1. A window defined as `[1,1]` should intuitively cover *3* rows (1 preceding, 1 current, 1 following), as in SQL. But as per CUDF convention, it covers *2* (1 current, 1 following).
2. A window of `[0,1]` is now a negative offset. :/

The Spark code currently passes `preceding - 1` before calling into CUDF, to match the semantics.

@codereport's suggestion is to undo this, and make ""preceding"" ""actually preceding"" again.
But this needs to be done in lockstep with Spark (and Python), to reduce errors. There are also a metric tonne of tests to modify.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1284442003/reactions,0,0,0,0,0,0,0,0,0,7093
498,https://api.github.com/repos/rapidsai/cudf/issues/comments/1284522934,https://github.com/rapidsai/cudf/issues/7093#issuecomment-1284522934,https://api.github.com/repos/rapidsai/cudf/issues/7093,1284522934,IC_kwDOBWUGps5MkEO2,2022-10-19T20:14:47Z,2022-10-19T20:14:47Z,MEMBER,I definitely won't stand in your way. :),,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1284522934/reactions,0,0,0,0,0,0,0,0,0,7093
499,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287136019,https://github.com/rapidsai/cudf/issues/7093#issuecomment-1287136019,https://api.github.com/repos/rapidsai/cudf/issues/7093,1287136019,IC_kwDOBWUGps5MuCMT,2022-10-21T15:39:30Z,2022-10-21T15:39:30Z,CONTRIBUTOR,@mythrocks would you be up for taking this on at some point? I'm happy to help make the Python changes if you'd like help there!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287136019/reactions,0,0,0,0,0,0,0,0,0,7093
500,https://api.github.com/repos/rapidsai/cudf/issues/comments/782734818,https://github.com/rapidsai/cudf/issues/7108#issuecomment-782734818,https://api.github.com/repos/rapidsai/cudf/issues/7108,782734818,MDEyOklzc3VlQ29tbWVudDc4MjczNDgxOA==,2021-02-20T19:11:39Z,2021-02-20T19:11:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/782734818/reactions,0,0,0,0,0,0,0,0,0,7108
501,https://api.github.com/repos/rapidsai/cudf/issues/comments/846189416,https://github.com/rapidsai/cudf/issues/7108#issuecomment-846189416,https://api.github.com/repos/rapidsai/cudf/issues/7108,846189416,MDEyOklzc3VlQ29tbWVudDg0NjE4OTQxNg==,2021-05-21T19:15:56Z,2021-05-21T19:15:56Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/846189416/reactions,0,0,0,0,0,0,0,0,0,7108
502,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749888,https://github.com/rapidsai/cudf/issues/7130#issuecomment-786749888,https://api.github.com/repos/rapidsai/cudf/issues/7130,786749888,MDEyOklzc3VlQ29tbWVudDc4Njc0OTg4OA==,2021-02-26T16:26:25Z,2021-02-26T16:26:25Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749888/reactions,0,0,0,0,0,0,0,0,0,7130
503,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811872,https://github.com/rapidsai/cudf/issues/7130#issuecomment-849811872,https://api.github.com/repos/rapidsai/cudf/issues/7130,849811872,MDEyOklzc3VlQ29tbWVudDg0OTgxMTg3Mg==,2021-05-27T17:31:06Z,2021-05-27T17:31:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811872/reactions,0,0,0,0,0,0,0,0,0,7130
504,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749814,https://github.com/rapidsai/cudf/issues/7184#issuecomment-786749814,https://api.github.com/repos/rapidsai/cudf/issues/7184,786749814,MDEyOklzc3VlQ29tbWVudDc4Njc0OTgxNA==,2021-02-26T16:26:18Z,2021-02-26T16:26:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749814/reactions,0,0,0,0,0,0,0,0,0,7184
505,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811842,https://github.com/rapidsai/cudf/issues/7184#issuecomment-849811842,https://api.github.com/repos/rapidsai/cudf/issues/7184,849811842,MDEyOklzc3VlQ29tbWVudDg0OTgxMTg0Mg==,2021-05-27T17:31:04Z,2021-05-27T17:31:04Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811842/reactions,0,0,0,0,0,0,0,0,0,7184
506,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165218998,https://github.com/rapidsai/cudf/issues/7184#issuecomment-1165218998,https://api.github.com/repos/rapidsai/cudf/issues/7184,1165218998,IC_kwDOBWUGps5Fc9S2,2022-06-24T05:43:23Z,2022-06-24T05:43:23Z,NONE,"Hi,

I wanted to use this feature on a large dataset (for both skewness and kurtosis). Is there an alternative way of doing this. I tried using cudf.DataFrame.kurt but got a warning saying _f""GroupBy.apply() performance scales poorly with ""_

Thanks",,rafatsiddiqui9,74584041,MDQ6VXNlcjc0NTg0MDQx,https://avatars.githubusercontent.com/u/74584041?v=4,,https://api.github.com/users/rafatsiddiqui9,https://github.com/rafatsiddiqui9,https://api.github.com/users/rafatsiddiqui9/followers,https://api.github.com/users/rafatsiddiqui9/following{/other_user},https://api.github.com/users/rafatsiddiqui9/gists{/gist_id},https://api.github.com/users/rafatsiddiqui9/starred{/owner}{/repo},https://api.github.com/users/rafatsiddiqui9/subscriptions,https://api.github.com/users/rafatsiddiqui9/orgs,https://api.github.com/users/rafatsiddiqui9/repos,https://api.github.com/users/rafatsiddiqui9/events{/privacy},https://api.github.com/users/rafatsiddiqui9/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165218998/reactions,0,0,0,0,0,0,0,0,0,7184
507,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188813637,https://github.com/rapidsai/cudf/issues/7184#issuecomment-1188813637,https://api.github.com/repos/rapidsai/cudf/issues/7184,1188813637,IC_kwDOBWUGps5G29tF,2022-07-19T09:22:43Z,2022-07-19T09:22:43Z,NONE,"@galipremsagar Hi, can you help me on how to work around this?",,rafatsiddiqui9,74584041,MDQ6VXNlcjc0NTg0MDQx,https://avatars.githubusercontent.com/u/74584041?v=4,,https://api.github.com/users/rafatsiddiqui9,https://github.com/rafatsiddiqui9,https://api.github.com/users/rafatsiddiqui9/followers,https://api.github.com/users/rafatsiddiqui9/following{/other_user},https://api.github.com/users/rafatsiddiqui9/gists{/gist_id},https://api.github.com/users/rafatsiddiqui9/starred{/owner}{/repo},https://api.github.com/users/rafatsiddiqui9/subscriptions,https://api.github.com/users/rafatsiddiqui9/orgs,https://api.github.com/users/rafatsiddiqui9/repos,https://api.github.com/users/rafatsiddiqui9/events{/privacy},https://api.github.com/users/rafatsiddiqui9/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188813637/reactions,0,0,0,0,0,0,0,0,0,7184
508,https://api.github.com/repos/rapidsai/cudf/issues/comments/1190752344,https://github.com/rapidsai/cudf/issues/7184#issuecomment-1190752344,https://api.github.com/repos/rapidsai/cudf/issues/7184,1190752344,IC_kwDOBWUGps5G-XBY,2022-07-20T20:59:37Z,2022-07-20T20:59:37Z,CONTRIBUTOR,"@rafatsiddiqui9 Can you share the example you have tried and saw the `f""GroupBy.apply() performance scales poorly with ""` message? ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1190752344/reactions,0,0,0,0,0,0,0,0,0,7184
509,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749797,https://github.com/rapidsai/cudf/issues/7185#issuecomment-786749797,https://api.github.com/repos/rapidsai/cudf/issues/7185,786749797,MDEyOklzc3VlQ29tbWVudDc4Njc0OTc5Nw==,2021-02-26T16:26:16Z,2021-02-26T16:26:16Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786749797/reactions,0,0,0,0,0,0,0,0,0,7185
510,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811822,https://github.com/rapidsai/cudf/issues/7185#issuecomment-849811822,https://api.github.com/repos/rapidsai/cudf/issues/7185,849811822,MDEyOklzc3VlQ29tbWVudDg0OTgxMTgyMg==,2021-05-27T17:31:02Z,2021-05-27T17:31:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811822/reactions,0,0,0,0,0,0,0,0,0,7185
511,https://api.github.com/repos/rapidsai/cudf/issues/comments/904310152,https://github.com/rapidsai/cudf/issues/7185#issuecomment-904310152,https://api.github.com/repos/rapidsai/cudf/issues/7185,904310152,IC_kwDOBWUGps415q2I,2021-08-24T04:17:37Z,2021-08-24T04:17:37Z,NONE,"I am seeing something similar to this for powers as well: 

```
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-28-56dd126ffdea> in <module>
----> 1 book_train_df.groupby(['time_id'], as_index=False).agg({'log_return1':[realized_volatility]})

/opt/conda/lib/python3.7/contextlib.py in inner(*args, **kwds)
     72         def inner(*args, **kwds):
     73             with self._recreate_cm():
---> 74                 return func(*args, **kwds)
     75         return inner
     76 

/opt/conda/lib/python3.7/site-packages/cudf/core/groupby/groupby.py in agg(self, func)
    179         # a Float64Index, while Pandas returns an Int64Index
    180         # (GH: 6945)
--> 181         result = self._groupby.aggregate(self.obj, normalized_aggs)
    182 
    183         result = cudf.DataFrame._from_table(result)

cudf/_lib/groupby.pyx in cudf._lib.groupby.GroupBy.aggregate()

cudf/_lib/aggregation.pyx in cudf._lib.aggregation.make_aggregation()

<ipython-input-27-404c0c674354> in realized_volatility(series)
      8 def realized_volatility(series):
      9     #series=list(series)
---> 10     return np.sqrt(np.sum(series**2))

TypeError: unsupported operand type(s) for ** or pow(): 'type' and 'int'
```

My version is '21.06.01+2.g101fc0fda4' (from kaggle)",,kevinbird15,7451178,MDQ6VXNlcjc0NTExNzg=,https://avatars.githubusercontent.com/u/7451178?v=4,,https://api.github.com/users/kevinbird15,https://github.com/kevinbird15,https://api.github.com/users/kevinbird15/followers,https://api.github.com/users/kevinbird15/following{/other_user},https://api.github.com/users/kevinbird15/gists{/gist_id},https://api.github.com/users/kevinbird15/starred{/owner}{/repo},https://api.github.com/users/kevinbird15/subscriptions,https://api.github.com/users/kevinbird15/orgs,https://api.github.com/users/kevinbird15/repos,https://api.github.com/users/kevinbird15/events{/privacy},https://api.github.com/users/kevinbird15/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904310152/reactions,0,0,0,0,0,0,0,0,0,7185
512,https://api.github.com/repos/rapidsai/cudf/issues/comments/904310554,https://github.com/rapidsai/cudf/issues/7185#issuecomment-904310554,https://api.github.com/repos/rapidsai/cudf/issues/7185,904310554,IC_kwDOBWUGps415q8a,2021-08-24T04:18:39Z,2021-08-24T04:18:39Z,NONE,"(in case the args from %debug are helpful)
![image](https://user-images.githubusercontent.com/7451178/130555017-e61f3223-0859-4693-80eb-bf0d9d0daacf.png)
",,kevinbird15,7451178,MDQ6VXNlcjc0NTExNzg=,https://avatars.githubusercontent.com/u/7451178?v=4,,https://api.github.com/users/kevinbird15,https://github.com/kevinbird15,https://api.github.com/users/kevinbird15/followers,https://api.github.com/users/kevinbird15/following{/other_user},https://api.github.com/users/kevinbird15/gists{/gist_id},https://api.github.com/users/kevinbird15/starred{/owner}{/repo},https://api.github.com/users/kevinbird15/subscriptions,https://api.github.com/users/kevinbird15/orgs,https://api.github.com/users/kevinbird15/repos,https://api.github.com/users/kevinbird15/events{/privacy},https://api.github.com/users/kevinbird15/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904310554/reactions,0,0,0,0,0,0,0,0,0,7185
513,https://api.github.com/repos/rapidsai/cudf/issues/comments/904654262,https://github.com/rapidsai/cudf/issues/7185#issuecomment-904654262,https://api.github.com/repos/rapidsai/cudf/issues/7185,904654262,IC_kwDOBWUGps416-22,2021-08-24T13:42:39Z,2021-08-24T13:43:11Z,MEMBER,"If you're using a custom aggregation function (`realized_volatility`), you'll want to use the `groupby.apply` API. Note that this API will operate serially on a per group basis, so it will not be performant if you have many small groups.

It may be possible to convert your function into a combination of built-in operations, which would be high performance.

```python
df[""squared""] = df.col.pow(2)
df.groupby(['key']).squared.sum() ** 0.5
```

EDIT: This would be higher performance in pandas as well, if it accomplishes the desired goal",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904654262/reactions,1,1,0,0,0,0,0,0,0,7185
514,https://api.github.com/repos/rapidsai/cudf/issues/comments/766591738,https://github.com/rapidsai/cudf/issues/7188#issuecomment-766591738,https://api.github.com/repos/rapidsai/cudf/issues/7188,766591738,MDEyOklzc3VlQ29tbWVudDc2NjU5MTczOA==,2021-01-25T06:55:33Z,2021-01-25T06:55:33Z,MEMBER,"This seems like a feature request, not a bug report?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/766591738/reactions,0,0,0,0,0,0,0,0,0,7188
515,https://api.github.com/repos/rapidsai/cudf/issues/comments/786785989,https://github.com/rapidsai/cudf/issues/7188#issuecomment-786785989,https://api.github.com/repos/rapidsai/cudf/issues/7188,786785989,MDEyOklzc3VlQ29tbWVudDc4Njc4NTk4OQ==,2021-02-26T17:29:31Z,2021-02-26T17:29:31Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786785989/reactions,0,0,0,0,0,0,0,0,0,7188
516,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811802,https://github.com/rapidsai/cudf/issues/7188#issuecomment-849811802,https://api.github.com/repos/rapidsai/cudf/issues/7188,849811802,MDEyOklzc3VlQ29tbWVudDg0OTgxMTgwMg==,2021-05-27T17:31:01Z,2021-05-27T17:31:01Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811802/reactions,0,0,0,0,0,0,0,0,0,7188
517,https://api.github.com/repos/rapidsai/cudf/issues/comments/786812236,https://github.com/rapidsai/cudf/issues/7225#issuecomment-786812236,https://api.github.com/repos/rapidsai/cudf/issues/7225,786812236,MDEyOklzc3VlQ29tbWVudDc4NjgxMjIzNg==,2021-02-26T18:17:27Z,2021-02-26T18:17:27Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786812236/reactions,0,0,0,0,0,0,0,0,0,7225
518,https://api.github.com/repos/rapidsai/cudf/issues/comments/849851037,https://github.com/rapidsai/cudf/issues/7225#issuecomment-849851037,https://api.github.com/repos/rapidsai/cudf/issues/7225,849851037,MDEyOklzc3VlQ29tbWVudDg0OTg1MTAzNw==,2021-05-27T18:33:04Z,2021-05-27T18:33:04Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849851037/reactions,0,0,0,0,0,0,0,0,0,7225
519,https://api.github.com/repos/rapidsai/cudf/issues/comments/769210220,https://github.com/rapidsai/cudf/issues/7231#issuecomment-769210220,https://api.github.com/repos/rapidsai/cudf/issues/7231,769210220,MDEyOklzc3VlQ29tbWVudDc2OTIxMDIyMA==,2021-01-28T16:35:07Z,2021-01-28T16:35:07Z,CONTRIBUTOR,Would it make since to use the existing make_nth_element_aggregation for this?  This is how we implement first and last for hash aggregates.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/769210220/reactions,0,0,0,0,0,0,0,0,0,7231
520,https://api.github.com/repos/rapidsai/cudf/issues/comments/788151573,https://github.com/rapidsai/cudf/issues/7231#issuecomment-788151573,https://api.github.com/repos/rapidsai/cudf/issues/7231,788151573,MDEyOklzc3VlQ29tbWVudDc4ODE1MTU3Mw==,2021-03-01T18:02:10Z,2021-03-01T18:02:10Z,CONTRIBUTOR,"@revans2, Is it possible to get some unit tests from `rolling_test.cpp` using `make_nth_element_aggregation` ?. When I tried to use this aggregation with `grouped_rolling_window().` I got  this error: `../rolling_detail.cuh:738: Aggregation operator and/or input type combination is invalid`",,Christian8491,20308634,MDQ6VXNlcjIwMzA4NjM0,https://avatars.githubusercontent.com/u/20308634?v=4,,https://api.github.com/users/Christian8491,https://github.com/Christian8491,https://api.github.com/users/Christian8491/followers,https://api.github.com/users/Christian8491/following{/other_user},https://api.github.com/users/Christian8491/gists{/gist_id},https://api.github.com/users/Christian8491/starred{/owner}{/repo},https://api.github.com/users/Christian8491/subscriptions,https://api.github.com/users/Christian8491/orgs,https://api.github.com/users/Christian8491/repos,https://api.github.com/users/Christian8491/events{/privacy},https://api.github.com/users/Christian8491/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/788151573/reactions,0,0,0,0,0,0,0,0,0,7231
521,https://api.github.com/repos/rapidsai/cudf/issues/comments/789099682,https://github.com/rapidsai/cudf/issues/7231#issuecomment-789099682,https://api.github.com/repos/rapidsai/cudf/issues/7231,789099682,MDEyOklzc3VlQ29tbWVudDc4OTA5OTY4Mg==,2021-03-02T18:01:29Z,2021-03-02T18:01:29Z,CONTRIBUTOR,@Christian8491 I don't think that `make_nth_element_aggregation` is supported by grouped rolling window yet.  I was mostly suggesting that perhaps we should reuse the aggregation for this use case instead of creating a new one.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/789099682/reactions,1,1,0,0,0,0,0,0,0,7231
522,https://api.github.com/repos/rapidsai/cudf/issues/comments/812084357,https://github.com/rapidsai/cudf/issues/7231#issuecomment-812084357,https://api.github.com/repos/rapidsai/cudf/issues/7231,812084357,MDEyOklzc3VlQ29tbWVudDgxMjA4NDM1Nw==,2021-04-01T18:15:40Z,2021-04-01T18:15:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812084357/reactions,0,0,0,0,0,0,0,0,0,7231
523,https://api.github.com/repos/rapidsai/cudf/issues/comments/776117973,https://github.com/rapidsai/cudf/issues/7354#issuecomment-776117973,https://api.github.com/repos/rapidsai/cudf/issues/7354,776117973,MDEyOklzc3VlQ29tbWVudDc3NjExNzk3Mw==,2021-02-09T17:45:33Z,2021-02-09T17:45:33Z,COLLABORATOR,Relevant Pandas API Docs: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.DataFrameGroupBy.filter.html,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/776117973/reactions,0,0,0,0,0,0,0,0,0,7354
524,https://api.github.com/repos/rapidsai/cudf/issues/comments/776123610,https://github.com/rapidsai/cudf/issues/7354#issuecomment-776123610,https://api.github.com/repos/rapidsai/cudf/issues/7354,776123610,MDEyOklzc3VlQ29tbWVudDc3NjEyMzYxMA==,2021-02-09T17:54:16Z,2021-02-09T17:57:55Z,CONTRIBUTOR,Similar to `apply()` the best approach we have right now for this is to iterate over the groups sequentially and apply the UDF on each group. This will only be efficient on the GPU for a small number of large groups (and slow for a large number of small groups).,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/776123610/reactions,0,0,0,0,0,0,0,0,0,7354
525,https://api.github.com/repos/rapidsai/cudf/issues/comments/776297620,https://github.com/rapidsai/cudf/issues/7354#issuecomment-776297620,https://api.github.com/repos/rapidsai/cudf/issues/7354,776297620,MDEyOklzc3VlQ29tbWVudDc3NjI5NzYyMA==,2021-02-09T22:51:26Z,2021-02-09T22:51:26Z,MEMBER,">  This will only be efficient on the GPU for a small number of large groups (and slow for a large number of small groups).

But can be improved with multi-stream concurrency, which we plan to add in the future.

If we can use Numba to compile a (limited) filter syntax to PTX, we could apply this in parallel in a single kernel. How general are the filters that people want to run? Is it as broad as `apply()`?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/776297620/reactions,1,1,0,0,0,0,0,0,0,7354
526,https://api.github.com/repos/rapidsai/cudf/issues/comments/776298701,https://github.com/rapidsai/cudf/issues/7354#issuecomment-776298701,https://api.github.com/repos/rapidsai/cudf/issues/7354,776298701,MDEyOklzc3VlQ29tbWVudDc3NjI5ODcwMQ==,2021-02-09T22:54:04Z,2021-02-09T22:54:04Z,COLLABORATOR,"> How general are the filters that people want to run? Is it as broad as `apply()`?

Yes, it's unfortunately similar to apply where it expects a function that takes in a DataFrame and returns either a scalar boolean value or a column of boolean values. Because the function expects to take in a DataFrame, it can use completely arbitrary DataFrame APIs so there's no easy way for us to pipeline it through Numba.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/776298701/reactions,0,0,0,0,0,0,0,0,0,7354
527,https://api.github.com/repos/rapidsai/cudf/issues/comments/797114567,https://github.com/rapidsai/cudf/issues/7354#issuecomment-797114567,https://api.github.com/repos/rapidsai/cudf/issues/7354,797114567,MDEyOklzc3VlQ29tbWVudDc5NzExNDU2Nw==,2021-03-11T23:17:24Z,2021-03-11T23:17:24Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/797114567/reactions,0,0,0,0,0,0,0,0,0,7354
528,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500609702,https://github.com/rapidsai/cudf/issues/7354#issuecomment-1500609702,https://api.github.com/repos/rapidsai/cudf/issues/7354,1500609702,IC_kwDOBWUGps5ZcXym,2023-04-07T20:17:06Z,2023-04-07T20:19:30Z,CONTRIBUTOR,"Note that for many simple cases, there's a way to work around the lack of support for `groupby.filter` using `groupby.apply` + `merge`:

```python
def groupby_filter(df, key, func):
    if not isinstance(key, list):
        key = [key]
    keep_group = df.groupby(key).apply(func).to_frame()
    keep_group.columns = [""_""]
    keep_row = df[key].merge(keep_group, left_on=key, right_index=True)[""_""].sort_index()
    return df.loc[keep_row]
```

Example usage:

```python
>>> df = cudf.datasets.randomdata(100_000)
>>> pdf = df.to_pandas()
```

```python
# Pandas:
>>> pdf.groupby('id').filter(lambda group: (group.x > group.y).all())                                                                                                                                              
         id         x         y
5222   1106 -0.394735 -0.787261
16999  1120  0.849243  0.171776
17870  1113 -0.270606 -0.938197
20487  1106  0.392992 -0.868924
24426   863 -0.199523 -0.831697
33665  1124  0.915199 -0.033524
34860  1122  0.305254  0.244650
37147  1122  0.982420 -0.252851
53573  1119 -0.457173 -0.575891
63077   874  0.914197 -0.133111
72263  1106  0.924446  0.187110
75129  1126 -0.820924 -0.831940
77157   874  0.286803 -0.908891
80028  1117  0.182344 -0.297617
85099  1124  0.454558  0.011887
93097   889  0.333730 -0.539914
93482  1106 -0.448811 -0.646975
```

```python
# cuDF:
In [39]: groupby_filter(df, 'id', lambda group: (group.x > group.y).all())
Out[39]: 
         id         x         y
5222   1106 -0.394735 -0.787261
16999  1120  0.849243  0.171776
17870  1113 -0.270606 -0.938197
20487  1106  0.392992 -0.868924
24426   863 -0.199523 -0.831697
33665  1124  0.915199 -0.033524
34860  1122  0.305254  0.244650
37147  1122  0.982420 -0.252851
53573  1119 -0.457173 -0.575891
63077   874  0.914197 -0.133111
72263  1106  0.924446  0.187110
75129  1126 -0.820924 -0.831940
77157   874  0.286803 -0.908891
80028  1117  0.182344 -0.297617
85099  1124  0.454558  0.011887
93097   889  0.333730 -0.539914
93482  1106 -0.448811 -0.646975
```

Some things to keep in mind:

* The `groupby_filter` function above assumes the default index (`RangeIndex`) on the input dataframe `df` -- or at least, a monotonically increasing index.
* The groupby keys are always assumed to be column names of the input DataFrame
* In general, the performance will be good only for a small number of large groups, and quite bad for a large number of small groups.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500609702/reactions,0,0,0,0,0,0,0,0,0,7354
529,https://api.github.com/repos/rapidsai/cudf/issues/comments/778240211,https://github.com/rapidsai/cudf/issues/7379#issuecomment-778240211,https://api.github.com/repos/rapidsai/cudf/issues/7379,778240211,MDEyOklzc3VlQ29tbWVudDc3ODI0MDIxMQ==,2021-02-12T14:50:14Z,2021-02-12T14:50:14Z,CONTRIBUTOR,"I don't quite follow the psuedocode. Using a priority queue will break the original input ordering. It looks like you're just suggesting merging `(0,1)` then merginging that result with `2`, e.g., `(((0,1), 2), 3)),...`? Is that right?

That would work, but would defeat the optimization of always merging the smallest tables first (which makes a significant difference).

It should be possible to still maintain the original order and merge the smallest tables first, it will just be a bit complicated. E.g., if we have 5 tables A, B, C, D, E whose sizes are (100, 10, 50, 10, 100) then we could merge `B' = (B,D)`  (size is 20) then `B'' = (B', C)` (size is 70), then `A' = (A, B'')` (size is 170) and finally `Result = (A', E)` (size is 270).

So long as we always merge right to left, that should still result in the same order as if we did `((((A,B), C), D), E)`.  There's probably a clever algorithm to do this nicely. Maybe @codereport can think of it. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/778240211/reactions,0,0,0,0,0,0,0,0,0,7379
530,https://api.github.com/repos/rapidsai/cudf/issues/comments/778252274,https://github.com/rapidsai/cudf/issues/7379#issuecomment-778252274,https://api.github.com/repos/rapidsai/cudf/issues/7379,778252274,MDEyOklzc3VlQ29tbWVudDc3ODI1MjI3NA==,2021-02-12T15:11:24Z,2021-02-12T15:28:45Z,MEMBER,"> It should be possible to still maintain the original order and merge the smallest tables first

I don't think that sort remains stable.  I'm assuming the final table ordering between tied sort keys needs to be A->E to match the order in which the tables were generated. No matter whether we merge (B,D) with C or C with (B,D), the stable ordering between B, C, and D has been violated.  (B,D) will be treated as a new input table, and there's no way to properly insert the C keys since we lost the ability to distinguish B from D once they merged. I think we'd have to manifest a discriminator column (e.g.: table ID) to be able to skip table ordering when finding a pair to merge yet maintain a stable sort.

Without a discriminator we could still be smart about merging smaller pairs first, but those pairs always have to be adjacent tables in the table ordering.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/778252274/reactions,0,0,0,0,0,0,0,0,0,7379
531,https://api.github.com/repos/rapidsai/cudf/issues/comments/778300513,https://github.com/rapidsai/cudf/issues/7379#issuecomment-778300513,https://api.github.com/repos/rapidsai/cudf/issues/7379,778300513,MDEyOklzc3VlQ29tbWVudDc3ODMwMDUxMw==,2021-02-12T16:34:01Z,2021-02-12T16:34:01Z,CONTRIBUTOR,"> No matter whether we merge (B,D) with C or C with (B,D), the stable ordering between B, C, and D has been violated. (B,D) will be treated as a new input table, and there's no way to properly insert the C keys since we lost the ability to distinguish B from D once they merged.

Yeah, that's a good point. My idea won't work.

> we could still be smart about merging smaller pairs first, but those pairs always have to be adjacent tables in the table ordering.

Yeah, this would work. It may not be as optimal as merging the exact smallest tables first, but it would at least be better than the naive left fold. 

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/778300513/reactions,0,0,0,0,0,0,0,0,0,7379
532,https://api.github.com/repos/rapidsai/cudf/issues/comments/779980098,https://github.com/rapidsai/cudf/issues/7379#issuecomment-779980098,https://api.github.com/repos/rapidsai/cudf/issues/7379,779980098,MDEyOklzc3VlQ29tbWVudDc3OTk4MDA5OA==,2021-02-16T17:08:03Z,2021-02-16T17:08:03Z,CONTRIBUTOR,I do want to reiterate that this is for a minor corner case in Spark. We don't have a customer yet that is complaining about the corner case either. The priority should be fairly low until we do hit a customer complaint.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/779980098/reactions,0,0,0,0,0,0,0,0,0,7379
533,https://api.github.com/repos/rapidsai/cudf/issues/comments/780222938,https://github.com/rapidsai/cudf/issues/7379#issuecomment-780222938,https://api.github.com/repos/rapidsai/cudf/issues/7379,780222938,MDEyOklzc3VlQ29tbWVudDc4MDIyMjkzOA==,2021-02-17T01:07:58Z,2021-02-17T01:07:58Z,MEMBER,Why not just provide a choice between fast and stable?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780222938/reactions,0,0,0,0,0,0,0,0,0,7379
534,https://api.github.com/repos/rapidsai/cudf/issues/comments/802455359,https://github.com/rapidsai/cudf/issues/7379#issuecomment-802455359,https://api.github.com/repos/rapidsai/cudf/issues/7379,802455359,MDEyOklzc3VlQ29tbWVudDgwMjQ1NTM1OQ==,2021-03-19T01:51:14Z,2021-03-19T01:51:14Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/802455359/reactions,0,0,0,0,0,0,0,0,0,7379
535,https://api.github.com/repos/rapidsai/cudf/issues/comments/802822291,https://github.com/rapidsai/cudf/issues/7379#issuecomment-802822291,https://api.github.com/repos/rapidsai/cudf/issues/7379,802822291,MDEyOklzc3VlQ29tbWVudDgwMjgyMjI5MQ==,2021-03-19T13:11:24Z,2021-03-19T13:11:24Z,MEMBER,This is still desired but not high priority.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/802822291/reactions,0,0,0,0,0,0,0,0,0,7379
536,https://api.github.com/repos/rapidsai/cudf/issues/comments/802843672,https://github.com/rapidsai/cudf/issues/7379#issuecomment-802843672,https://api.github.com/repos/rapidsai/cudf/issues/7379,802843672,MDEyOklzc3VlQ29tbWVudDgwMjg0MzY3Mg==,2021-03-19T13:44:46Z,2021-03-19T13:44:46Z,CONTRIBUTOR,"As @harrism mentioned, I think we can just have `merge` and `stable_merge` APIs to satisfy the different requirements. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/802843672/reactions,0,0,0,0,0,0,0,0,0,7379
537,https://api.github.com/repos/rapidsai/cudf/issues/comments/821996834,https://github.com/rapidsai/cudf/issues/7379#issuecomment-821996834,https://api.github.com/repos/rapidsai/cudf/issues/7379,821996834,MDEyOklzc3VlQ29tbWVudDgyMTk5NjgzNA==,2021-04-18T14:04:51Z,2021-04-18T14:04:51Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/821996834/reactions,0,0,0,0,0,0,0,0,0,7379
538,https://api.github.com/repos/rapidsai/cudf/issues/comments/822491055,https://github.com/rapidsai/cudf/issues/7379#issuecomment-822491055,https://api.github.com/repos/rapidsai/cudf/issues/7379,822491055,MDEyOklzc3VlQ29tbWVudDgyMjQ5MTA1NQ==,2021-04-19T14:01:49Z,2021-04-19T14:01:49Z,MEMBER,Still desired.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/822491055/reactions,0,0,0,0,0,0,0,0,0,7379
539,https://api.github.com/repos/rapidsai/cudf/issues/comments/786021836,https://github.com/rapidsai/cudf/issues/7447#issuecomment-786021836,https://api.github.com/repos/rapidsai/cudf/issues/7447,786021836,MDEyOklzc3VlQ29tbWVudDc4NjAyMTgzNg==,2021-02-25T16:17:29Z,2021-02-25T16:17:29Z,CONTRIBUTOR,"It looks like the main issue is that `tests/grouped_rolling` and `tests/collect_list` should be moved under `tests/rolling`? 

> There are tests in tests/column/colum_view_test.cpp which are actually testing logical_cast (or bit_cast), so they should be put together with the tests in tests/unary/cast_tests.cpp.

Technically, `tests/unary` are testing the `cudf::unary_op` functionality. I'm not sure if `bit_cast` belongs there. 

> There are tests/utilities and tests/utilities_test which have confusing names.

Can you elaborate? The former are test utilities and the latter are tests _of_ the utilities. 

> File name/extensions are inconsistent. For example, many unit tests in the tests/<some test name> are written in both .cu and .cpp extensions. Of course, .cu file may be required here, but having the tests written in two file extensions at the same time make things look messy.

This one doesn't sound like an issue to me. We prefer to write tests as `.cpp` files when we can as they usually compile faster, but sometimes they need to be `.cu` if they have device code.",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786021836/reactions,0,0,0,0,0,0,0,0,0,7447
540,https://api.github.com/repos/rapidsai/cudf/issues/comments/786078156,https://github.com/rapidsai/cudf/issues/7447#issuecomment-786078156,https://api.github.com/repos/rapidsai/cudf/issues/7447,786078156,MDEyOklzc3VlQ29tbWVudDc4NjA3ODE1Ng==,2021-02-25T17:38:23Z,2021-02-25T17:38:23Z,CONTRIBUTOR,"> > There are tests/utilities and tests/utilities_test which have confusing names.
> 
> Can you elaborate? The former are test utilities and the latter are tests _of_ the utilities.

Their names already expose confusion. Which one is ""utilities"" of the test suite (utilities or utilities_test)? And which one is the unit tests for `src/utilities` (`tests/utilities`?)??? 

This is just one example. I would like to rename the folders that contain implementation for testing helpers to something like `_utilities` so we can know they are private helpers, not the unit tests.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/786078156/reactions,0,0,0,0,0,0,0,0,0,7447
541,https://api.github.com/repos/rapidsai/cudf/issues/comments/812267686,https://github.com/rapidsai/cudf/issues/7447#issuecomment-812267686,https://api.github.com/repos/rapidsai/cudf/issues/7447,812267686,MDEyOklzc3VlQ29tbWVudDgxMjI2NzY4Ng==,2021-04-02T01:30:29Z,2021-04-02T01:30:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812267686/reactions,0,0,0,0,0,0,0,0,0,7447
542,https://api.github.com/repos/rapidsai/cudf/issues/comments/808794998,https://github.com/rapidsai/cudf/issues/7448#issuecomment-808794998,https://api.github.com/repos/rapidsai/cudf/issues/7448,808794998,MDEyOklzc3VlQ29tbWVudDgwODc5NDk5OA==,2021-03-27T20:04:50Z,2021-03-27T20:04:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/808794998/reactions,0,0,0,0,0,0,0,0,0,7448
543,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105393817,https://github.com/rapidsai/cudf/issues/7448#issuecomment-2105393817,https://api.github.com/repos/rapidsai/cudf/issues/7448,2105393817,IC_kwDOBWUGps59fcKZ,2024-05-11T00:01:37Z,2024-05-11T00:01:37Z,CONTRIBUTOR,"This still fails, but differently now. I end up with `ValueError: Merge operands must have same number of join key columns `
",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105393817/reactions,0,0,0,0,0,0,0,0,0,7448
544,https://api.github.com/repos/rapidsai/cudf/issues/comments/2107173915,https://github.com/rapidsai/cudf/issues/7448#issuecomment-2107173915,https://api.github.com/repos/rapidsai/cudf/issues/7448,2107173915,IC_kwDOBWUGps59mOwb,2024-05-13T10:11:02Z,2024-05-13T10:11:02Z,CONTRIBUTOR,"> This still fails, but differently now. I end up with `ValueError: Merge operands must have same number of join key columns `

I think the narrow issue is that `Series._loc_to_iloc` doesn't have a carve-out for desugaring tuple keys, so they are treated like a list-like. This patch fixes the narrow issue:
```patch
diff --git a/python/cudf/cudf/core/series.py b/python/cudf/cudf/core/series.py
index c7bc97edd6..f55fd460e4 100644
--- a/python/cudf/cudf/core/series.py
+++ b/python/cudf/cudf/core/series.py
@@ -403,7 +403,9 @@ class _SeriesLocIndexer(_FrameIndexer):
                 arg = cudf.MultiIndex.from_pandas(arg)
 
             return _indices_from_labels(self._frame, arg)
-
+        elif isinstance(self._frame.index, cudf.MultiIndex) and isinstance(arg, tuple):
+            arg = cudf.MultiIndex.from_tuples([arg])
+            return _indices_from_labels(self._frame, arg)
         else:
             arg = cudf.core.series.Series(cudf.core.column.as_column(arg))
             if arg.dtype in (bool, np.bool_):
```

But doesn't address the broader issue that multiindex labels are not handled well: it breaks as soon as you say `gs[[(1, 3), (2, 3)]]`, say.
",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2107173915/reactions,0,0,0,0,0,0,0,0,0,7448
545,https://api.github.com/repos/rapidsai/cudf/issues/comments/788333441,https://github.com/rapidsai/cudf/issues/7478#issuecomment-788333441,https://api.github.com/repos/rapidsai/cudf/issues/7478,788333441,MDEyOklzc3VlQ29tbWVudDc4ODMzMzQ0MQ==,2021-03-01T22:06:09Z,2021-03-01T22:06:09Z,CONTRIBUTOR,relevant https://github.com/pandas-dev/pandas/issues/29997 ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/788333441/reactions,0,0,0,0,0,0,0,0,0,7478
546,https://api.github.com/repos/rapidsai/cudf/issues/comments/811521389,https://github.com/rapidsai/cudf/issues/7478#issuecomment-811521389,https://api.github.com/repos/rapidsai/cudf/issues/7478,811521389,MDEyOklzc3VlQ29tbWVudDgxMTUyMTM4OQ==,2021-03-31T23:04:40Z,2021-03-31T23:04:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/811521389/reactions,0,0,0,0,0,0,0,0,0,7478
547,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031923063,https://github.com/rapidsai/cudf/issues/7478#issuecomment-1031923063,https://api.github.com/repos/rapidsai/cudf/issues/7478,1031923063,IC_kwDOBWUGps49geV3,2022-02-07T21:05:30Z,2022-02-07T21:05:30Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031923063/reactions,0,0,0,0,0,0,0,0,0,7478
548,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339744205,https://github.com/rapidsai/cudf/issues/7478#issuecomment-1339744205,https://api.github.com/repos/rapidsai/cudf/issues/7478,1339744205,IC_kwDOBWUGps5P2t_N,2022-12-06T17:43:28Z,2022-12-06T17:43:28Z,CONTRIBUTOR,"Pandas matches the behaviour of floating point nan in these circumstances, whereas cudf doesn't. Arguably matching nan-behaviour is less surprising.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339744205/reactions,0,0,0,0,0,0,0,0,0,7478
549,https://api.github.com/repos/rapidsai/cudf/issues/comments/816787413,https://github.com/rapidsai/cudf/issues/7553#issuecomment-816787413,https://api.github.com/repos/rapidsai/cudf/issues/7553,816787413,MDEyOklzc3VlQ29tbWVudDgxNjc4NzQxMw==,2021-04-09T16:05:16Z,2021-04-09T16:05:16Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/816787413/reactions,0,0,0,0,0,0,0,0,0,7553
550,https://api.github.com/repos/rapidsai/cudf/issues/comments/818857553,https://github.com/rapidsai/cudf/issues/7553#issuecomment-818857553,https://api.github.com/repos/rapidsai/cudf/issues/7553,818857553,MDEyOklzc3VlQ29tbWVudDgxODg1NzU1Mw==,2021-04-13T16:08:08Z,2021-04-13T16:08:08Z,CONTRIBUTOR,This is still needed,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/818857553/reactions,0,0,0,0,0,0,0,0,0,7553
551,https://api.github.com/repos/rapidsai/cudf/issues/comments/840738690,https://github.com/rapidsai/cudf/issues/7553#issuecomment-840738690,https://api.github.com/repos/rapidsai/cudf/issues/7553,840738690,MDEyOklzc3VlQ29tbWVudDg0MDczODY5MA==,2021-05-13T18:14:11Z,2021-05-13T18:14:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/840738690/reactions,0,0,0,0,0,0,0,0,0,7553
552,https://api.github.com/repos/rapidsai/cudf/issues/comments/840756113,https://github.com/rapidsai/cudf/issues/7553#issuecomment-840756113,https://api.github.com/repos/rapidsai/cudf/issues/7553,840756113,MDEyOklzc3VlQ29tbWVudDg0MDc1NjExMw==,2021-05-13T18:44:10Z,2021-05-13T18:44:10Z,MEMBER,Still desired,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/840756113/reactions,0,0,0,0,0,0,0,0,0,7553
553,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922998,https://github.com/rapidsai/cudf/issues/7553#issuecomment-1031922998,https://api.github.com/repos/rapidsai/cudf/issues/7553,1031922998,IC_kwDOBWUGps49geU2,2022-02-07T21:05:26Z,2022-02-07T21:05:26Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922998/reactions,0,0,0,0,0,0,0,0,0,7553
554,https://api.github.com/repos/rapidsai/cudf/issues/comments/816971022,https://github.com/rapidsai/cudf/issues/7556#issuecomment-816971022,https://api.github.com/repos/rapidsai/cudf/issues/7556,816971022,MDEyOklzc3VlQ29tbWVudDgxNjk3MTAyMg==,2021-04-09T21:04:39Z,2021-04-09T21:04:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/816971022/reactions,0,0,0,0,0,0,0,0,0,7556
555,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922982,https://github.com/rapidsai/cudf/issues/7556#issuecomment-1031922982,https://api.github.com/repos/rapidsai/cudf/issues/7556,1031922982,IC_kwDOBWUGps49geUm,2022-02-07T21:05:25Z,2022-02-07T21:05:25Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922982/reactions,0,0,0,0,0,0,0,0,0,7556
556,https://api.github.com/repos/rapidsai/cudf/issues/comments/1823241958,https://github.com/rapidsai/cudf/issues/7556#issuecomment-1823241958,https://api.github.com/repos/rapidsai/cudf/issues/7556,1823241958,IC_kwDOBWUGps5srHbm,2023-11-22T18:04:16Z,2023-11-22T18:04:16Z,CONTRIBUTOR,"Amusingly this only happens with `DataFrame.isin`, if asking `isin` of _`Series`_ objects, pandas does like cudf.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1823241958/reactions,0,0,0,0,0,0,0,0,0,7556
557,https://api.github.com/repos/rapidsai/cudf/issues/comments/797855696,https://github.com/rapidsai/cudf/issues/7590#issuecomment-797855696,https://api.github.com/repos/rapidsai/cudf/issues/7590,797855696,MDEyOklzc3VlQ29tbWVudDc5Nzg1NTY5Ng==,2021-03-13T03:04:13Z,2021-03-13T03:04:13Z,CONTRIBUTOR,I think https://github.com/rapidsai/cudf/issues/904 is something that would have helped in this situation as well. There are some bugs that are either extremely difficult or impossible to hit with unit tests alone. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/797855696/reactions,1,1,0,0,0,0,0,0,0,7590
558,https://api.github.com/repos/rapidsai/cudf/issues/comments/817448871,https://github.com/rapidsai/cudf/issues/7590#issuecomment-817448871,https://api.github.com/repos/rapidsai/cudf/issues/7590,817448871,MDEyOklzc3VlQ29tbWVudDgxNzQ0ODg3MQ==,2021-04-12T03:11:52Z,2021-04-12T03:11:52Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/817448871/reactions,0,0,0,0,0,0,0,0,0,7590
559,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922928,https://github.com/rapidsai/cudf/issues/7590#issuecomment-1031922928,https://api.github.com/repos/rapidsai/cudf/issues/7590,1031922928,IC_kwDOBWUGps49geTw,2022-02-07T21:05:21Z,2022-02-07T21:05:21Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922928/reactions,0,0,0,0,0,0,0,0,0,7590
560,https://api.github.com/repos/rapidsai/cudf/issues/comments/799834811,https://github.com/rapidsai/cudf/issues/7602#issuecomment-799834811,https://api.github.com/repos/rapidsai/cudf/issues/7602,799834811,MDEyOklzc3VlQ29tbWVudDc5OTgzNDgxMQ==,2021-03-15T23:43:40Z,2021-03-15T23:43:40Z,NONE,"Still digging in... I think this may have to do with one of the columns being called ""index""",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/799834811/reactions,0,0,0,0,0,0,0,0,0,7602
561,https://api.github.com/repos/rapidsai/cudf/issues/comments/800021148,https://github.com/rapidsai/cudf/issues/7602#issuecomment-800021148,https://api.github.com/repos/rapidsai/cudf/issues/7602,800021148,MDEyOklzc3VlQ29tbWVudDgwMDAyMTE0OA==,2021-03-16T07:23:58Z,2021-03-16T07:23:58Z,NONE,"Still not sure what's going on. What does make it through, including with readback testing, is switching to dask/pandas:


```python
 dgdf = dask_cudf.read_csv(
        f'{DOWNLOAD_DIR}/{file}',
        parse_dates=['_time'],
        dtype=dtypes,
        columns=cols,
        chunksize='64 MiB')

dgdf2 = dgdf.map_partitions(lambda gdf: gdf.to_pandas(), schema=schema, meta=meta)

dgdf2.to_parquet(
        '/tmp/out.parquet',
        compression='snappy',
        write_index=False)
```",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/800021148/reactions,0,0,0,0,0,0,0,0,0,7602
562,https://api.github.com/repos/rapidsai/cudf/issues/comments/808505826,https://github.com/rapidsai/cudf/issues/7602#issuecomment-808505826,https://api.github.com/repos/rapidsai/cudf/issues/7602,808505826,MDEyOklzc3VlQ29tbWVudDgwODUwNTgyNg==,2021-03-26T21:01:39Z,2021-03-26T21:01:39Z,COLLABORATOR,I'm guessing this is a case of nulls differing between files that we need to handle.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/808505826/reactions,0,0,0,0,0,0,0,0,0,7602
563,https://api.github.com/repos/rapidsai/cudf/issues/comments/812177898,https://github.com/rapidsai/cudf/issues/7602#issuecomment-812177898,https://api.github.com/repos/rapidsai/cudf/issues/7602,812177898,MDEyOklzc3VlQ29tbWVudDgxMjE3Nzg5OA==,2021-04-01T21:17:32Z,2021-04-01T21:17:32Z,CONTRIBUTOR,"From some local testing I did, I looks like the CSV reader is unable to correctly read the file, probably because of the string column that has very large elements that include newline characters. With `byte_range` option (which I assume is what dask is using to split the work), disambiguating actual row ends from in-string newline characters is tricky, and this is probably what is going wrong here.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812177898/reactions,1,1,0,0,0,0,0,0,0,7602
564,https://api.github.com/repos/rapidsai/cudf/issues/comments/812228852,https://github.com/rapidsai/cudf/issues/7602#issuecomment-812228852,https://api.github.com/repos/rapidsai/cudf/issues/7602,812228852,MDEyOklzc3VlQ29tbWVudDgxMjIyODg1Mg==,2021-04-01T23:22:33Z,2021-04-01T23:25:13Z,NONE,"Thanks for picking up! Fwiw, I also had issues w/ the json versions at the same url. In both cases, I ended up having to do cpu dask read -> write parquet -> gpu dask read. And an unfortunate amount of experimentation to push them through.

Sometimes the failure was silent. To more explicitly test, later, I did a cudf loop like:

```python
# test opts for dask / dask_cudf configs
variant.read_csv('abc.csv').to_parquet('abc.parquet')
for i in range(n_parts - 1):
   # will fail if 2 partitions have mismatching schema
    cudf.read_parquet([f'abc.parquet/part{i}.parquet', f'abc.parquet/part{i+1}.parquet'])
```

And had all sorts of `metadata`, `schema`, `write_index`, `ignore_pandas_metadata` flags. An esp weird one was complaints about not finding `""index""` in index/cols.

These are big windows log files (and others there) for ~real data, so a good challenge case that's not fake and represents a lot of sec/it data.",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812228852/reactions,0,0,0,0,0,0,0,0,0,7602
565,https://api.github.com/repos/rapidsai/cudf/issues/comments/830713148,https://github.com/rapidsai/cudf/issues/7602#issuecomment-830713148,https://api.github.com/repos/rapidsai/cudf/issues/7602,830713148,MDEyOklzc3VlQ29tbWVudDgzMDcxMzE0OA==,2021-05-02T00:11:31Z,2021-05-02T00:11:31Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/830713148/reactions,0,0,0,0,0,0,0,0,0,7602
566,https://api.github.com/repos/rapidsai/cudf/issues/comments/830714805,https://github.com/rapidsai/cudf/issues/7602#issuecomment-830714805,https://api.github.com/repos/rapidsai/cudf/issues/7602,830714805,MDEyOklzc3VlQ29tbWVudDgzMDcxNDgwNQ==,2021-05-02T00:28:47Z,2021-05-02T00:28:47Z,NONE,"I'm not sure this is fixed

We'll be wrapping up the work where this was hit into an OSS repo, so can share when up",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/830714805/reactions,0,0,0,0,0,0,0,0,0,7602
567,https://api.github.com/repos/rapidsai/cudf/issues/comments/851744509,https://github.com/rapidsai/cudf/issues/7602#issuecomment-851744509,https://api.github.com/repos/rapidsai/cudf/issues/7602,851744509,MDEyOklzc3VlQ29tbWVudDg1MTc0NDUwOQ==,2021-06-01T01:34:18Z,2021-06-01T01:34:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/851744509/reactions,0,0,0,0,0,0,0,0,0,7602
568,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922901,https://github.com/rapidsai/cudf/issues/7602#issuecomment-1031922901,https://api.github.com/repos/rapidsai/cudf/issues/7602,1031922901,IC_kwDOBWUGps49geTV,2022-02-07T21:05:20Z,2022-02-07T21:05:20Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922901/reactions,0,0,0,0,0,0,0,0,0,7602
569,https://api.github.com/repos/rapidsai/cudf/issues/comments/821989354,https://github.com/rapidsai/cudf/issues/7644#issuecomment-821989354,https://api.github.com/repos/rapidsai/cudf/issues/7644,821989354,MDEyOklzc3VlQ29tbWVudDgyMTk4OTM1NA==,2021-04-18T13:09:24Z,2021-04-18T13:09:24Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/821989354/reactions,0,0,0,0,0,0,0,0,0,7644
570,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922872,https://github.com/rapidsai/cudf/issues/7644#issuecomment-1031922872,https://api.github.com/repos/rapidsai/cudf/issues/7644,1031922872,IC_kwDOBWUGps49geS4,2022-02-07T21:05:19Z,2022-02-07T21:05:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922872/reactions,0,0,0,0,0,0,0,0,0,7644
571,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105395707,https://github.com/rapidsai/cudf/issues/7644#issuecomment-2105395707,https://api.github.com/repos/rapidsai/cudf/issues/7644,2105395707,IC_kwDOBWUGps59fcn7,2024-05-11T00:05:22Z,2024-05-11T00:05:22Z,CONTRIBUTOR,We will want to revisit something like this when we refactor cudf internals around pylibcudf. The translation layer can then be in pure Python with the C++/libcudf complexities abstracted away by pylibcudf.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105395707/reactions,0,0,0,0,0,0,0,0,0,7644
572,https://api.github.com/repos/rapidsai/cudf/issues/comments/826389741,https://github.com/rapidsai/cudf/issues/7654#issuecomment-826389741,https://api.github.com/repos/rapidsai/cudf/issues/7654,826389741,MDEyOklzc3VlQ29tbWVudDgyNjM4OTc0MQ==,2021-04-25T21:04:54Z,2021-04-25T21:04:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/826389741/reactions,0,0,0,0,0,0,0,0,0,7654
573,https://api.github.com/repos/rapidsai/cudf/issues/comments/827164643,https://github.com/rapidsai/cudf/issues/7654#issuecomment-827164643,https://api.github.com/repos/rapidsai/cudf/issues/7654,827164643,MDEyOklzc3VlQ29tbWVudDgyNzE2NDY0Mw==,2021-04-26T21:42:53Z,2021-04-26T21:42:53Z,CONTRIBUTOR,This is still a valid issue,,razajafri,8813002,MDQ6VXNlcjg4MTMwMDI=,https://avatars.githubusercontent.com/u/8813002?v=4,,https://api.github.com/users/razajafri,https://github.com/razajafri,https://api.github.com/users/razajafri/followers,https://api.github.com/users/razajafri/following{/other_user},https://api.github.com/users/razajafri/gists{/gist_id},https://api.github.com/users/razajafri/starred{/owner}{/repo},https://api.github.com/users/razajafri/subscriptions,https://api.github.com/users/razajafri/orgs,https://api.github.com/users/razajafri/repos,https://api.github.com/users/razajafri/events{/privacy},https://api.github.com/users/razajafri/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/827164643/reactions,0,0,0,0,0,0,0,0,0,7654
574,https://api.github.com/repos/rapidsai/cudf/issues/comments/827195595,https://github.com/rapidsai/cudf/issues/7654#issuecomment-827195595,https://api.github.com/repos/rapidsai/cudf/issues/7654,827195595,MDEyOklzc3VlQ29tbWVudDgyNzE5NTU5NQ==,2021-04-26T23:03:49Z,2021-04-26T23:03:49Z,MEMBER,@vuule is this on your radar?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/827195595/reactions,0,0,0,0,0,0,0,0,0,7654
575,https://api.github.com/repos/rapidsai/cudf/issues/comments/827196302,https://github.com/rapidsai/cudf/issues/7654#issuecomment-827196302,https://api.github.com/repos/rapidsai/cudf/issues/7654,827196302,MDEyOklzc3VlQ29tbWVudDgyNzE5NjMwMg==,2021-04-26T23:05:35Z,2021-04-26T23:05:35Z,CONTRIBUTOR,CC @devavret ,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/827196302/reactions,0,0,0,0,0,0,0,0,0,7654
576,https://api.github.com/repos/rapidsai/cudf/issues/comments/827312174,https://github.com/rapidsai/cudf/issues/7654#issuecomment-827312174,https://api.github.com/repos/rapidsai/cudf/issues/7654,827312174,MDEyOklzc3VlQ29tbWVudDgyNzMxMjE3NA==,2021-04-27T04:56:45Z,2021-04-27T04:56:45Z,CONTRIBUTOR,"Do you mean this: https://github.com/rapidsai/cudf/blob/3c050bbcf369c7d6b56e1fd561e1e4efe1b7b64b/cpp/src/io/parquet/writer_impl.cu#L388-L406

If so, I'm not sure this is really a bug. We have to check whether there can be nulls otherwise we'd break downstream in the reader. So it either has to be `has_nulls()` or `nullable()`. The former incurs a kernel call for each column. That's why the latter was chosen. With the understanding, that if the user knew there wouldn't be nulls, they'd drop the mask before passing it in.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/827312174/reactions,0,0,0,0,0,0,0,0,0,7654
577,https://api.github.com/repos/rapidsai/cudf/issues/comments/848291464,https://github.com/rapidsai/cudf/issues/7654#issuecomment-848291464,https://api.github.com/repos/rapidsai/cudf/issues/7654,848291464,MDEyOklzc3VlQ29tbWVudDg0ODI5MTQ2NA==,2021-05-25T21:55:11Z,2021-05-25T21:55:11Z,CONTRIBUTOR,"Sorry about the delay in the response. I understand why nullable was chosen, but the issue I run into is that it is very easy to have something that is nullable, but has no nulls. This happens quite often in Spark. We can analyze the query we are able to tell that something will never have a null in it, but the last cudf call was not able to make the same decision and ended up including a validity column. For example we could filter out all of the nulls from a column. In spark we know that all of the nulls are gone, but cudf just called `filter` on it. It has no knowledge that the boolean mask is correlated to the validity column in any way. I just knows that the input has nulls so there is the possibility that the output will have nulls, and it needs to allocate a validity mask. If you don't do this then I have to figure out a way to walk through all of the columns/child columns and strip out the validity mask if it exists for things that I know don't need it, which then I would also want to run a kernel on it to be sure that there was no bug in the code.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/848291464/reactions,0,0,0,0,0,0,0,0,0,7654
578,https://api.github.com/repos/rapidsai/cudf/issues/comments/848305387,https://github.com/rapidsai/cudf/issues/7654#issuecomment-848305387,https://api.github.com/repos/rapidsai/cudf/issues/7654,848305387,MDEyOklzc3VlQ29tbWVudDg0ODMwNTM4Nw==,2021-05-25T22:15:24Z,2021-05-25T22:15:24Z,CONTRIBUTOR,"IMO we can think of this as a perf vs. memory trade off. For ORC/Parquet ATM we generally lean on the side of reducing the memory use, so it would make sense to have a slight perf overhead to avoid allocating the null masks.
I've just realized that the memory use impact would be ~1%, so I'm not sure if my reasoning stands. Still, for your consideration :) 
We could also make it a writer option, but that seems like an overkill to me.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/848305387/reactions,0,0,0,0,0,0,0,0,0,7654
579,https://api.github.com/repos/rapidsai/cudf/issues/comments/848664965,https://github.com/rapidsai/cudf/issues/7654#issuecomment-848664965,https://api.github.com/repos/rapidsai/cudf/issues/7654,848664965,MDEyOklzc3VlQ29tbWVudDg0ODY2NDk2NQ==,2021-05-26T10:43:14Z,2021-05-26T10:43:14Z,CONTRIBUTOR,"@revans2 Then how about a libcudf API (maybe called `prune_masks`) that takes a table and removes null masks from all columns that have no nulls. This API could be optimized to call a single kernel for the table rather than separate kernels for each column. Filter your tables through it before passing to anything. It will be a one stop optimized solution for all cuIO writers and more (like calling joins on it etc.)

@vuule This doesn't need extra memory because this is the writer. It might create a slightly larger file. But if there are no nulls then all the definition values will be 1 and running it through RLE will all but remove it. Think 8 bytes per 1 MB page.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/848664965/reactions,0,0,0,0,0,0,0,0,0,7654
580,https://api.github.com/repos/rapidsai/cudf/issues/comments/848668976,https://github.com/rapidsai/cudf/issues/7654#issuecomment-848668976,https://api.github.com/repos/rapidsai/cudf/issues/7654,848668976,MDEyOklzc3VlQ29tbWVudDg0ODY2ODk3Ng==,2021-05-26T10:50:15Z,2021-05-26T10:50:15Z,CONTRIBUTOR,"I think a `prune_masks` would be fine. To be clear my concern is not about the size of the file or how much memory/time it takes to compute.  It is about trying to match the same output as Spark does. This is not a high priority right now because if the data is read back in by Spark it will still treat it as nullable, even if all of the input files say that the column is not nullable. I am less sure about other tools, so I want to match it as closely as possible.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/848668976/reactions,0,0,0,0,0,0,0,0,0,7654
581,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922842,https://github.com/rapidsai/cudf/issues/7654#issuecomment-1031922842,https://api.github.com/repos/rapidsai/cudf/issues/7654,1031922842,IC_kwDOBWUGps49geSa,2022-02-07T21:05:17Z,2022-02-07T21:05:17Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922842/reactions,0,0,0,0,0,0,0,0,0,7654
582,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622064040,https://github.com/rapidsai/cudf/issues/7654#issuecomment-1622064040,https://api.github.com/repos/rapidsai/cudf/issues/7654,1622064040,IC_kwDOBWUGps5grruo,2023-07-05T16:05:16Z,2023-07-05T16:05:16Z,MEMBER,"This issue is still relevant, ran into it again recently.  Seems related to #13010.

Note that now that null counts are required to be computed on column construction per the recent null_count changes, there's no longer a potential kernel launch cost to checking has_nulls.  Seems like that would be the preferable choice, allow columns with no nulls (validity buffer or not) to meet the criteria of a schema calling for no nulls.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622064040/reactions,0,0,0,0,0,0,0,0,0,7654
583,https://api.github.com/repos/rapidsai/cudf/issues/comments/1626247601,https://github.com/rapidsai/cudf/issues/7654#issuecomment-1626247601,https://api.github.com/repos/rapidsai/cudf/issues/7654,1626247601,IC_kwDOBWUGps5g7pGx,2023-07-07T22:04:39Z,2023-07-07T22:04:39Z,CONTRIBUTOR,"Opened https://github.com/rapidsai/cudf/pull/13675 to fix this limitation.
@jlowe The improvement does not cover sliced columns, is that needed for your use case?",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1626247601/reactions,0,0,0,0,0,0,0,0,0,7654
584,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628964922,https://github.com/rapidsai/cudf/issues/7654#issuecomment-1628964922,https://api.github.com/repos/rapidsai/cudf/issues/7654,1628964922,IC_kwDOBWUGps5hGAg6,2023-07-10T13:31:02Z,2023-07-10T13:31:02Z,MEMBER,"> The improvement does not cover sliced columns, is that needed for your use case?

The Java cudf API currently does not provide a way to zero-copy slice columns (it has an interface to slice, but it copies the result to separate columns).  Therefore we should be fine with that limitation.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628964922/reactions,0,0,0,0,0,0,0,0,0,7654
585,https://api.github.com/repos/rapidsai/cudf/issues/comments/826389730,https://github.com/rapidsai/cudf/issues/7666#issuecomment-826389730,https://api.github.com/repos/rapidsai/cudf/issues/7666,826389730,MDEyOklzc3VlQ29tbWVudDgyNjM4OTczMA==,2021-04-25T21:04:50Z,2021-04-25T21:04:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/826389730/reactions,0,0,0,0,0,0,0,0,0,7666
586,https://api.github.com/repos/rapidsai/cudf/issues/comments/877206360,https://github.com/rapidsai/cudf/issues/7666#issuecomment-877206360,https://api.github.com/repos/rapidsai/cudf/issues/7666,877206360,MDEyOklzc3VlQ29tbWVudDg3NzIwNjM2MA==,2021-07-09T13:53:24Z,2021-07-09T13:53:24Z,MEMBER,"Thanks for filing this issue @kidman99 . At the moment, cuDF doesn't support this functionality out of the box. We support a `rolling.apply` API, but it's currently not designed to operate on multiple columns at once. To do something like this today, you'd likely need to do something like write a custom numba kernel.

I'm going to update this issue to file this as a feature request.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/877206360/reactions,0,0,0,0,0,0,0,0,0,7666
587,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922774,https://github.com/rapidsai/cudf/issues/7666#issuecomment-1031922774,https://api.github.com/repos/rapidsai/cudf/issues/7666,1031922774,IC_kwDOBWUGps49geRW,2022-02-07T21:05:13Z,2022-02-07T21:05:13Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922774/reactions,0,0,0,0,0,0,0,0,0,7666
588,https://api.github.com/repos/rapidsai/cudf/issues/comments/812069650,https://github.com/rapidsai/cudf/issues/7680#issuecomment-812069650,https://api.github.com/repos/rapidsai/cudf/issues/7680,812069650,MDEyOklzc3VlQ29tbWVudDgxMjA2OTY1MA==,2021-04-01T17:49:15Z,2021-04-01T17:49:15Z,CONTRIBUTOR,Reopening this as there's a piece of the ask here that isn't implemented yet: `Decimal` vs `int` binary ops. ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812069650/reactions,0,0,0,0,0,0,0,0,0,7680
589,https://api.github.com/repos/rapidsai/cudf/issues/comments/813632947,https://github.com/rapidsai/cudf/issues/7680#issuecomment-813632947,https://api.github.com/repos/rapidsai/cudf/issues/7680,813632947,MDEyOklzc3VlQ29tbWVudDgxMzYzMjk0Nw==,2021-04-05T20:32:31Z,2021-04-05T20:32:31Z,CONTRIBUTOR,"@randerzander PR #7859 should close the second part of this - however I think we decided we can't do decimal<->float as we'd need to do some implicit rounding for the user there. 

That said since integers are exact numbers I went ahead and added that. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/813632947/reactions,0,0,0,0,0,0,0,0,0,7680
590,https://api.github.com/repos/rapidsai/cudf/issues/comments/817976126,https://github.com/rapidsai/cudf/issues/7680#issuecomment-817976126,https://api.github.com/repos/rapidsai/cudf/issues/7680,817976126,MDEyOklzc3VlQ29tbWVudDgxNzk3NjEyNg==,2021-04-12T17:05:20Z,2021-04-12T17:05:20Z,CONTRIBUTOR,"@brandon-b-miller I understand the concern about users not realizing rounding happens in an implicit cast, but it would be nice to allow configurable implicit cast behavior.

For what it's worth, Spark automatically converts (somewhat surprisingly) to a Double:
```
from pyspark.sql import SparkSession

spark = SparkSession \
    .builder \
    .getOrCreate()

df = spark.createDataFrame(
    [
        (1, 1.0), # create your data here, be consistent in the types.
        (2, 2.0),
    ],
    ['id', 'doubleCol'] # add your columns label here
)

df = df.withColumn('floatCol', df['doubleCol'].cast('float'))
df = df.withColumn('decCol', df['doubleCol'].cast('decimal(7,2)'))

df.withColumn('mixedResult', df['floatCol'] + df['decCol']).schema
```
```
StructType(List(StructField(id,LongType,true),StructField(doubleCol,DoubleType,true),StructField(floatCol,FloatType,true),StructField(decCol,DecimalType(7,2),true),StructField(mixedResult,DoubleType,true)))

```",,randerzander,1692914,MDQ6VXNlcjE2OTI5MTQ=,https://avatars.githubusercontent.com/u/1692914?v=4,,https://api.github.com/users/randerzander,https://github.com/randerzander,https://api.github.com/users/randerzander/followers,https://api.github.com/users/randerzander/following{/other_user},https://api.github.com/users/randerzander/gists{/gist_id},https://api.github.com/users/randerzander/starred{/owner}{/repo},https://api.github.com/users/randerzander/subscriptions,https://api.github.com/users/randerzander/orgs,https://api.github.com/users/randerzander/repos,https://api.github.com/users/randerzander/events{/privacy},https://api.github.com/users/randerzander/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/817976126/reactions,0,0,0,0,0,0,0,0,0,7680
591,https://api.github.com/repos/rapidsai/cudf/issues/comments/818773484,https://github.com/rapidsai/cudf/issues/7680#issuecomment-818773484,https://api.github.com/repos/rapidsai/cudf/issues/7680,818773484,MDEyOklzc3VlQ29tbWVudDgxODc3MzQ4NA==,2021-04-13T14:18:12Z,2021-04-13T14:18:12Z,CONTRIBUTOR,"@randerzander thank you for that example. As long as there's some authoritative source for what the rules should be, I'd be comfortable adopting that standard and allowing the behavior. Let me dig into spark a bit and figure out where it derives its casting rules and then follow up here. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/818773484/reactions,1,1,0,0,0,0,0,0,0,7680
592,https://api.github.com/repos/rapidsai/cudf/issues/comments/821577340,https://github.com/rapidsai/cudf/issues/7680#issuecomment-821577340,https://api.github.com/repos/rapidsai/cudf/issues/7680,821577340,MDEyOklzc3VlQ29tbWVudDgyMTU3NzM0MA==,2021-04-16T21:38:45Z,2021-04-16T21:39:42Z,CONTRIBUTOR,"So ideally here we'd like to follow spark's rules because they seem fairly robust and also, because we try and avoid inventing casting rules. Here are those rules ([github link](https://github.com/apache/spark/blob/0bfcf9c21069cabafc6fff47a801aa86ca13c608/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/analysis/DecimalPrecision.scala#L56-L62))

```
 * In addition, when mixing non-decimal types with decimals, we use the following rules:
 * - BYTE gets turned into DECIMAL(3, 0)
 * - SHORT gets turned into DECIMAL(5, 0)
 * - INT gets turned into DECIMAL(10, 0)
 * - LONG gets turned into DECIMAL(20, 0)
 * - FLOAT and DOUBLE cause fixed-length decimals to turn into DOUBLE
 * - Literals INT and LONG get turned into DECIMAL with the precision strictly needed by the value
```

This basically means that when performing a binary op between a decimal column and an integer column, the integer column is cast to decimal with precision `p`, where `p` is the maximum number of digits in the maximum representable value corresponding to the integer columns dtype. 

The problem is we only support precision 18, and this number is `9223372036854775807` which contains 19 digits. Technically that number itself is representable as decimal in libcudf, but a `Decimal64Dtype(19,0)` isn't valid in cuDF python, because it implies that _any_ 19 digit number can be represented. 

This leaves us at a bit of an impasse because if we try and cast an `int64` column to decimal in the way the spark rules specify, we run into our own constraint. Fundamentally spark doesn't have this problem because it supports 38 digits of precision. The problem gets worse when we consider [the rules for precision](https://docs.microsoft.com/en-us/sql/t-sql/data-types/precision-scale-and-length-transact-sql?view=sql-server-ver15) in decimal arithmetic ops. Basically most ops tend to create a result that has a higher precision than the inputs, so even if we elected to use precision 18 for `int64` since it's technically safe there's not much we could do with it at that point, since the resulting precision isn't compatible with cudf.

There seem to be 3 options:
1. Use spark's rules and disable ops involving one decimal and one `int64` or `uint64` column
2. Don't use spark's rules, invent our own, possibly scan the data and cast to the minimum required precision
3. Wait for 128 bit types 

None of these seem like great options for me, but I am open to opinions.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/821577340/reactions,0,0,0,0,0,0,0,0,0,7680
593,https://api.github.com/repos/rapidsai/cudf/issues/comments/841883855,https://github.com/rapidsai/cudf/issues/7680#issuecomment-841883855,https://api.github.com/repos/rapidsai/cudf/issues/7680,841883855,MDEyOklzc3VlQ29tbWVudDg0MTg4Mzg1NQ==,2021-05-16T22:04:30Z,2021-05-16T22:04:30Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/841883855/reactions,0,0,0,0,0,0,0,0,0,7680
594,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922733,https://github.com/rapidsai/cudf/issues/7680#issuecomment-1031922733,https://api.github.com/repos/rapidsai/cudf/issues/7680,1031922733,IC_kwDOBWUGps49geQt,2022-02-07T21:05:11Z,2022-02-07T21:05:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922733/reactions,0,0,0,0,0,0,0,0,0,7680
595,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182619778,https://github.com/rapidsai/cudf/issues/7680#issuecomment-1182619778,https://api.github.com/repos/rapidsai/cudf/issues/7680,1182619778,IC_kwDOBWUGps5GfViC,2022-07-13T00:21:39Z,2022-07-13T00:21:39Z,CONTRIBUTOR,@shwina @isVoid this seems like another potential candidate for #11193 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182619778/reactions,0,0,0,0,0,0,0,0,0,7680
596,https://api.github.com/repos/rapidsai/cudf/issues/comments/825682651,https://github.com/rapidsai/cudf/issues/7700#issuecomment-825682651,https://api.github.com/repos/rapidsai/cudf/issues/7700,825682651,MDEyOklzc3VlQ29tbWVudDgyNTY4MjY1MQ==,2021-04-23T14:04:58Z,2021-04-23T14:04:58Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/825682651/reactions,0,0,0,0,0,0,0,0,0,7700
597,https://api.github.com/repos/rapidsai/cudf/issues/comments/825694567,https://github.com/rapidsai/cudf/issues/7700#issuecomment-825694567,https://api.github.com/repos/rapidsai/cudf/issues/7700,825694567,MDEyOklzc3VlQ29tbWVudDgyNTY5NDU2Nw==,2021-04-23T14:23:26Z,2021-04-23T14:23:26Z,MEMBER,"Would still like to see this, but it is not high priority.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/825694567/reactions,0,0,0,0,0,0,0,0,0,7700
598,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185026937,https://github.com/rapidsai/cudf/issues/7700#issuecomment-1185026937,https://api.github.com/repos/rapidsai/cudf/issues/7700,1185026937,IC_kwDOBWUGps5GohN5,2022-07-14T23:37:17Z,2022-07-14T23:37:17Z,CONTRIBUTOR,"@bdice given all your ongoing work involving hashing (including testing like #11145 but also new hash functions that require tests like #9215) would you be open to taking this on? The key is finding suitable reference implementations, which may not be the same for all hash functions, but otherwise the logic for the tests seems like they would be identical (up to maybe some edge cases that we expect some hashes to support but not others).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185026937/reactions,0,0,0,0,0,0,0,0,0,7700
599,https://api.github.com/repos/rapidsai/cudf/issues/comments/966575259,https://github.com/rapidsai/cudf/issues/7704#issuecomment-966575259,https://api.github.com/repos/rapidsai/cudf/issues/7704,966575259,IC_kwDOBWUGps45nMSb,2021-11-11T19:42:57Z,2021-11-11T19:42:57Z,CONTRIBUTOR,Could use the new [`cudf::strings::format_list_column`](https://github.com/rapidsai/cudf/blob/branch-21.12/cpp/include/cudf/strings/convert/convert_lists.hpp#L57) to build the CSV output for a lists column.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/966575259/reactions,0,0,0,0,0,0,0,0,0,7704
600,https://api.github.com/repos/rapidsai/cudf/issues/comments/812683079,https://github.com/rapidsai/cudf/issues/7742#issuecomment-812683079,https://api.github.com/repos/rapidsai/cudf/issues/7742,812683079,MDEyOklzc3VlQ29tbWVudDgxMjY4MzA3OQ==,2021-04-02T19:45:07Z,2021-04-02T19:45:07Z,NONE,"Hi @lmeyerov,

We were struggling with these issues some weeks ago and did not found a decent solution.
As we are using Dask-cuDF behind a low-code solution we don't want the user to be struggling in finding the right data types when they are just loading the data.
As @lmeyerov comments maybe are out of the scope of Dask-cuDF.
For the RAPIDS team any idea of a possible approach to handling this?
",,argenisleon,37144,MDQ6VXNlcjM3MTQ0,https://avatars.githubusercontent.com/u/37144?v=4,,https://api.github.com/users/argenisleon,https://github.com/argenisleon,https://api.github.com/users/argenisleon/followers,https://api.github.com/users/argenisleon/following{/other_user},https://api.github.com/users/argenisleon/gists{/gist_id},https://api.github.com/users/argenisleon/starred{/owner}{/repo},https://api.github.com/users/argenisleon/subscriptions,https://api.github.com/users/argenisleon/orgs,https://api.github.com/users/argenisleon/repos,https://api.github.com/users/argenisleon/events{/privacy},https://api.github.com/users/argenisleon/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812683079/reactions,0,0,0,0,0,0,0,0,0,7742
601,https://api.github.com/repos/rapidsai/cudf/issues/comments/833665866,https://github.com/rapidsai/cudf/issues/7742#issuecomment-833665866,https://api.github.com/repos/rapidsai/cudf/issues/7742,833665866,MDEyOklzc3VlQ29tbWVudDgzMzY2NTg2Ng==,2021-05-06T16:31:41Z,2021-05-06T16:31:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833665866/reactions,0,0,0,0,0,0,0,0,0,7742
602,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922653,https://github.com/rapidsai/cudf/issues/7742#issuecomment-1031922653,https://api.github.com/repos/rapidsai/cudf/issues/7742,1031922653,IC_kwDOBWUGps49gePd,2022-02-07T21:05:06Z,2022-02-07T21:05:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922653/reactions,0,0,0,0,0,0,0,0,0,7742
603,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811922,https://github.com/rapidsai/cudf/issues/7756#issuecomment-849811922,https://api.github.com/repos/rapidsai/cudf/issues/7756,849811922,MDEyOklzc3VlQ29tbWVudDg0OTgxMTkyMg==,2021-05-27T17:31:11Z,2021-05-27T17:31:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849811922/reactions,0,0,0,0,0,0,0,0,0,7756
604,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922618,https://github.com/rapidsai/cudf/issues/7756#issuecomment-1031922618,https://api.github.com/repos/rapidsai/cudf/issues/7756,1031922618,IC_kwDOBWUGps49geO6,2022-02-07T21:05:04Z,2022-02-07T21:05:04Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922618/reactions,0,0,0,0,0,0,0,0,0,7756
605,https://api.github.com/repos/rapidsai/cudf/issues/comments/811586979,https://github.com/rapidsai/cudf/issues/7795#issuecomment-811586979,https://api.github.com/repos/rapidsai/cudf/issues/7795,811586979,MDEyOklzc3VlQ29tbWVudDgxMTU4Njk3OQ==,2021-04-01T02:13:32Z,2021-04-01T02:13:32Z,MEMBER,@karthikeyann please be aware of this with respect to #7713 ,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/811586979/reactions,0,0,0,0,0,0,0,0,0,7795
606,https://api.github.com/repos/rapidsai/cudf/issues/comments/811587411,https://github.com/rapidsai/cudf/issues/7795#issuecomment-811587411,https://api.github.com/repos/rapidsai/cudf/issues/7795,811587411,MDEyOklzc3VlQ29tbWVudDgxMTU4NzQxMQ==,2021-04-01T02:14:57Z,2021-04-01T02:15:11Z,MEMBER,"> At the very least, we should be preferring CUDA_HOST_DEVICE_CALLABLE whenever possible.

No, we should prefer `CUDA_DEVICE_CALLABLE` or no annotation whenever possible. We should use `CUDA_HOST_DEVICE_CALLABLE` only for functions that are required to be called from both host and device.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/811587411/reactions,0,0,0,0,0,0,0,0,0,7795
607,https://api.github.com/repos/rapidsai/cudf/issues/comments/811920077,https://github.com/rapidsai/cudf/issues/7795#issuecomment-811920077,https://api.github.com/repos/rapidsai/cudf/issues/7795,811920077,MDEyOklzc3VlQ29tbWVudDgxMTkyMDA3Nw==,2021-04-01T13:46:47Z,2021-04-01T13:46:47Z,CONTRIBUTOR,"
> only for functions that are required to be called from both host and device.

This was implied. The whole point of `--expt-relaxed-constexpr` is to call existing host `constexpr` functions from device, which implies it can be/is called from both host and device. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/811920077/reactions,0,0,0,0,0,0,0,0,0,7795
608,https://api.github.com/repos/rapidsai/cudf/issues/comments/813362278,https://github.com/rapidsai/cudf/issues/7795#issuecomment-813362278,https://api.github.com/repos/rapidsai/cudf/issues/7795,813362278,MDEyOklzc3VlQ29tbWVudDgxMzM2MjI3OA==,2021-04-05T12:09:14Z,2021-04-05T12:09:14Z,MEMBER,I want to be very explicit because it is not obvious to everyone (a fact that is evident in our code).,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/813362278/reactions,4,2,0,0,0,0,2,0,0,7795
609,https://api.github.com/repos/rapidsai/cudf/issues/comments/832645494,https://github.com/rapidsai/cudf/issues/7795#issuecomment-832645494,https://api.github.com/repos/rapidsai/cudf/issues/7795,832645494,MDEyOklzc3VlQ29tbWVudDgzMjY0NTQ5NA==,2021-05-05T12:25:15Z,2021-05-05T12:25:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/832645494/reactions,0,0,0,0,0,0,0,0,0,7795
610,https://api.github.com/repos/rapidsai/cudf/issues/comments/833152347,https://github.com/rapidsai/cudf/issues/7795#issuecomment-833152347,https://api.github.com/repos/rapidsai/cudf/issues/7795,833152347,MDEyOklzc3VlQ29tbWVudDgzMzE1MjM0Nw==,2021-05-06T01:08:43Z,2021-05-06T01:08:43Z,MEMBER,Still valid,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833152347/reactions,0,0,0,0,0,0,0,0,0,7795
611,https://api.github.com/repos/rapidsai/cudf/issues/comments/833725176,https://github.com/rapidsai/cudf/issues/7819#issuecomment-833725176,https://api.github.com/repos/rapidsai/cudf/issues/7819,833725176,MDEyOklzc3VlQ29tbWVudDgzMzcyNTE3Ng==,2021-05-06T17:40:30Z,2021-05-06T17:40:30Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833725176/reactions,0,0,0,0,0,0,0,0,0,7819
612,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922512,https://github.com/rapidsai/cudf/issues/7819#issuecomment-1031922512,https://api.github.com/repos/rapidsai/cudf/issues/7819,1031922512,IC_kwDOBWUGps49geNQ,2022-02-07T21:04:58Z,2022-02-07T21:04:58Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922512/reactions,0,0,0,0,0,0,0,0,0,7819
613,https://api.github.com/repos/rapidsai/cudf/issues/comments/830720903,https://github.com/rapidsai/cudf/issues/7827#issuecomment-830720903,https://api.github.com/repos/rapidsai/cudf/issues/7827,830720903,MDEyOklzc3VlQ29tbWVudDgzMDcyMDkwMw==,2021-05-02T01:30:22Z,2021-05-02T01:30:22Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/830720903/reactions,0,0,0,0,0,0,0,0,0,7827
614,https://api.github.com/repos/rapidsai/cudf/issues/comments/963484029,https://github.com/rapidsai/cudf/issues/7827#issuecomment-963484029,https://api.github.com/repos/rapidsai/cudf/issues/7827,963484029,IC_kwDOBWUGps45bZl9,2021-11-08T19:07:45Z,2021-11-08T19:07:45Z,CONTRIBUTOR,"@shwina should we introduce Decimal[32/64/128]Index classes? Making this work requires that the index of the groupby result is the decimal column, which is one of the underlying problems (it manifests quite differently now, as opposed to back in the 0.19 release, but same problem).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/963484029/reactions,0,0,0,0,0,0,0,0,0,7827
615,https://api.github.com/repos/rapidsai/cudf/issues/comments/963547738,https://github.com/rapidsai/cudf/issues/7827#issuecomment-963547738,https://api.github.com/repos/rapidsai/cudf/issues/7827,963547738,IC_kwDOBWUGps45bpJa,2021-11-08T20:30:44Z,2021-11-08T20:30:44Z,CONTRIBUTOR,Yes - likely we're going to have to go down that route.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/963547738/reactions,0,0,0,0,0,0,0,0,0,7827
616,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922490,https://github.com/rapidsai/cudf/issues/7827#issuecomment-1031922490,https://api.github.com/repos/rapidsai/cudf/issues/7827,1031922490,IC_kwDOBWUGps49geM6,2022-02-07T21:04:57Z,2022-02-07T21:04:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922490/reactions,0,0,0,0,0,0,0,0,0,7827
617,https://api.github.com/repos/rapidsai/cudf/issues/comments/812511054,https://github.com/rapidsai/cudf/issues/7835#issuecomment-812511054,https://api.github.com/repos/rapidsai/cudf/issues/7835,812511054,MDEyOklzc3VlQ29tbWVudDgxMjUxMTA1NA==,2021-04-02T12:34:46Z,2021-04-02T12:34:46Z,CONTRIBUTOR,"I think there can be three scenarios when `astype` is called on a cudf scalar `s`:

- `s` host value is present, and its device value is not. This returns a new python object with a new host value, but still no device value.
- both the host and device values are present for `s`. In this case, we cast the host value, and construct a new cudf scalar from the result. The question is should the device value be set. My initial thought is that there's no reason to set it until it's actually needed, and `.device_value` is accessed. 
- `s` device value is present, and the host value is not. Here I think we need to move the device value to host, cast it there and construct a new scalar again. The question is again should the device value be set - and I lean towards no for the same reasons as above - it shouldn't harm anything to leave it unsynchronized until it's used. 

Most of the time we'll obtain a numpy scalar and we can just use numpy casting to get the new scalar. But we'll need special handling for strings and decimals.
",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/812511054/reactions,0,0,0,0,0,0,0,0,0,7835
618,https://api.github.com/repos/rapidsai/cudf/issues/comments/833665676,https://github.com/rapidsai/cudf/issues/7835#issuecomment-833665676,https://api.github.com/repos/rapidsai/cudf/issues/7835,833665676,MDEyOklzc3VlQ29tbWVudDgzMzY2NTY3Ng==,2021-05-06T16:31:35Z,2021-05-06T16:31:35Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833665676/reactions,0,0,0,0,0,0,0,0,0,7835
619,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922472,https://github.com/rapidsai/cudf/issues/7835#issuecomment-1031922472,https://api.github.com/repos/rapidsai/cudf/issues/7835,1031922472,IC_kwDOBWUGps49geMo,2022-02-07T21:04:55Z,2022-02-07T21:04:55Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922472/reactions,0,0,0,0,0,0,0,0,0,7835
620,https://api.github.com/repos/rapidsai/cudf/issues/comments/833725140,https://github.com/rapidsai/cudf/issues/7850#issuecomment-833725140,https://api.github.com/repos/rapidsai/cudf/issues/7850,833725140,MDEyOklzc3VlQ29tbWVudDgzMzcyNTE0MA==,2021-05-06T17:40:27Z,2021-05-06T17:40:27Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833725140/reactions,0,0,0,0,0,0,0,0,0,7850
621,https://api.github.com/repos/rapidsai/cudf/issues/comments/834008609,https://github.com/rapidsai/cudf/issues/7850#issuecomment-834008609,https://api.github.com/repos/rapidsai/cudf/issues/7850,834008609,MDEyOklzc3VlQ29tbWVudDgzNDAwODYwOQ==,2021-05-07T02:16:28Z,2021-05-07T02:16:28Z,CONTRIBUTOR,Will take this on for 0.20.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/834008609/reactions,0,0,0,0,0,0,0,0,0,7850
622,https://api.github.com/repos/rapidsai/cudf/issues/comments/836459976,https://github.com/rapidsai/cudf/issues/7850#issuecomment-836459976,https://api.github.com/repos/rapidsai/cudf/issues/7850,836459976,MDEyOklzc3VlQ29tbWVudDgzNjQ1OTk3Ng==,2021-05-10T09:27:03Z,2021-05-10T09:27:03Z,NONE,Thanks @shwina !,,usertoroot,12981866,MDQ6VXNlcjEyOTgxODY2,https://avatars.githubusercontent.com/u/12981866?v=4,,https://api.github.com/users/usertoroot,https://github.com/usertoroot,https://api.github.com/users/usertoroot/followers,https://api.github.com/users/usertoroot/following{/other_user},https://api.github.com/users/usertoroot/gists{/gist_id},https://api.github.com/users/usertoroot/starred{/owner}{/repo},https://api.github.com/users/usertoroot/subscriptions,https://api.github.com/users/usertoroot/orgs,https://api.github.com/users/usertoroot/repos,https://api.github.com/users/usertoroot/events{/privacy},https://api.github.com/users/usertoroot/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/836459976/reactions,0,0,0,0,0,0,0,0,0,7850
623,https://api.github.com/repos/rapidsai/cudf/issues/comments/963433513,https://github.com/rapidsai/cudf/issues/7850#issuecomment-963433513,https://api.github.com/repos/rapidsai/cudf/issues/7850,963433513,IC_kwDOBWUGps45bNQp,2021-11-08T18:17:31Z,2021-11-08T18:17:31Z,CONTRIBUTOR,@isVoid Do you think we can close this issue because of changes in #9522?,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/963433513/reactions,0,0,0,0,0,0,0,0,0,7850
624,https://api.github.com/repos/rapidsai/cudf/issues/comments/963631027,https://github.com/rapidsai/cudf/issues/7850#issuecomment-963631027,https://api.github.com/repos/rapidsai/cudf/issues/7850,963631027,IC_kwDOBWUGps45b9ez,2021-11-08T22:24:58Z,2021-11-08T22:24:58Z,CONTRIBUTOR,"I think this feature request eventually asks for `args` and `kwargs` support for `rolling.apply`, which was not addressed yet.",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/963631027/reactions,0,0,0,0,0,0,0,0,0,7850
625,https://api.github.com/repos/rapidsai/cudf/issues/comments/975704906,https://github.com/rapidsai/cudf/issues/7850#issuecomment-975704906,https://api.github.com/repos/rapidsai/cudf/issues/7850,975704906,IC_kwDOBWUGps46KBNK,2021-11-22T16:34:05Z,2021-11-22T16:34:05Z,MEMBER,"@usertoroot , could you share an example of the kind of function you're trying to run with rolling window apply?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/975704906/reactions,0,0,0,0,0,0,0,0,0,7850
626,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185055154,https://github.com/rapidsai/cudf/issues/7850#issuecomment-1185055154,https://api.github.com/repos/rapidsai/cudf/issues/7850,1185055154,IC_kwDOBWUGps5GooGy,2022-07-15T00:38:04Z,2022-07-15T00:38:04Z,CONTRIBUTOR,"@brandon-b-miller given your work in adding support for `args` in `apply`, do you think it would be feasible to do something similar here? I know we don't want to add `kwargs` right now given the potential concerns with introducing numba incompatibilities, but perhaps `args` would be feasible?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185055154/reactions,0,0,0,0,0,0,0,0,0,7850
627,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185586132,https://github.com/rapidsai/cudf/issues/7850#issuecomment-1185586132,https://api.github.com/repos/rapidsai/cudf/issues/7850,1185586132,IC_kwDOBWUGps5GqpvU,2022-07-15T14:11:24Z,2022-07-15T14:11:24Z,CONTRIBUTOR,"Really good question. The answer for now seems to be that this would take some work. The main reason is that the `rolling` UDF pipeline is still based on the original numba-libcudf_parser-jitify approach. The central UDF is compiled by numba into PTX for a single thread [here](https://github.com/rapidsai/cudf/blob/branch-22.08/python/cudf/cudf/_lib/aggregation.pyx#L215) and injected into a kernel that lives in c++ [here](https://github.com/rapidsai/cudf/blob/branch-22.08/cpp/src/rolling/detail/rolling.cuh#L1266). This makes it a little harder to generalize. 

Seeing these things on the horizon is one of the main reasons we moved `.apply` to generate/launch the kernel from numba rather than using c++/jitify. Python just makes it easier to programmatically generate kernels that have, say, an arbitrary number of `*args` rather that trying to do it in c++. Hence when it came time to do that it wasn't too big of a leap.

I'd want to transition this API in much the same way if possible first. I'm guessing we'd pick up null support along the way and then `*args` shouldn't be too bad after that. 

",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185586132/reactions,0,0,0,0,0,0,0,0,0,7850
628,https://api.github.com/repos/rapidsai/cudf/issues/comments/1387244599,https://github.com/rapidsai/cudf/issues/7850#issuecomment-1387244599,https://api.github.com/repos/rapidsai/cudf/issues/7850,1387244599,IC_kwDOBWUGps5Sr6w3,2023-01-18T15:20:57Z,2023-01-18T15:21:11Z,CONTRIBUTOR,Support for rolling apply `*args` was also requested by @Franc-Z in #12561.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1387244599/reactions,0,0,0,0,0,0,0,0,0,7850
629,https://api.github.com/repos/rapidsai/cudf/issues/comments/844728564,https://github.com/rapidsai/cudf/issues/7905#issuecomment-844728564,https://api.github.com/repos/rapidsai/cudf/issues/7905,844728564,MDEyOklzc3VlQ29tbWVudDg0NDcyODU2NA==,2021-05-20T06:04:41Z,2021-05-20T06:04:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844728564/reactions,0,0,0,0,0,0,0,0,0,7905
630,https://api.github.com/repos/rapidsai/cudf/issues/comments/863401719,https://github.com/rapidsai/cudf/issues/7905#issuecomment-863401719,https://api.github.com/repos/rapidsai/cudf/issues/7905,863401719,MDEyOklzc3VlQ29tbWVudDg2MzQwMTcxOQ==,2021-06-17T16:52:18Z,2021-06-17T16:52:18Z,MEMBER,@Nicholas-7 could you provide a reproducible example and additional context around whether you have a workaround?,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/863401719/reactions,0,0,0,0,0,0,0,0,0,7905
631,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922365,https://github.com/rapidsai/cudf/issues/7905#issuecomment-1031922365,https://api.github.com/repos/rapidsai/cudf/issues/7905,1031922365,IC_kwDOBWUGps49geK9,2022-02-07T21:04:48Z,2022-02-07T21:04:48Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922365/reactions,0,0,0,0,0,0,0,0,0,7905
632,https://api.github.com/repos/rapidsai/cudf/issues/comments/844728470,https://github.com/rapidsai/cudf/issues/7908#issuecomment-844728470,https://api.github.com/repos/rapidsai/cudf/issues/7908,844728470,MDEyOklzc3VlQ29tbWVudDg0NDcyODQ3MA==,2021-05-20T06:04:39Z,2021-05-20T06:04:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/844728470/reactions,0,0,0,0,0,0,0,0,0,7908
633,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922339,https://github.com/rapidsai/cudf/issues/7908#issuecomment-1031922339,https://api.github.com/repos/rapidsai/cudf/issues/7908,1031922339,IC_kwDOBWUGps49geKj,2022-02-07T21:04:47Z,2022-02-07T21:04:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922339/reactions,0,0,0,0,0,0,0,0,0,7908
634,https://api.github.com/repos/rapidsai/cudf/issues/comments/841737202,https://github.com/rapidsai/cudf/issues/7947#issuecomment-841737202,https://api.github.com/repos/rapidsai/cudf/issues/7947,841737202,MDEyOklzc3VlQ29tbWVudDg0MTczNzIwMg==,2021-05-15T23:05:18Z,2021-05-15T23:05:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/841737202/reactions,0,0,0,0,0,0,0,0,0,7947
635,https://api.github.com/repos/rapidsai/cudf/issues/comments/969363929,https://github.com/rapidsai/cudf/issues/7947#issuecomment-969363929,https://api.github.com/repos/rapidsai/cudf/issues/7947,969363929,IC_kwDOBWUGps45x1HZ,2021-11-15T22:03:32Z,2021-11-15T22:03:32Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969363929/reactions,0,0,0,0,0,0,0,0,0,7947
636,https://api.github.com/repos/rapidsai/cudf/issues/comments/845157894,https://github.com/rapidsai/cudf/issues/8003#issuecomment-845157894,https://api.github.com/repos/rapidsai/cudf/issues/8003,845157894,MDEyOklzc3VlQ29tbWVudDg0NTE1Nzg5NA==,2021-05-20T14:09:44Z,2021-05-20T14:09:44Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/845157894/reactions,0,0,0,0,0,0,0,0,0,8003
637,https://api.github.com/repos/rapidsai/cudf/issues/comments/845164191,https://github.com/rapidsai/cudf/issues/8003#issuecomment-845164191,https://api.github.com/repos/rapidsai/cudf/issues/8003,845164191,MDEyOklzc3VlQ29tbWVudDg0NTE2NDE5MQ==,2021-05-20T14:17:53Z,2021-05-20T14:17:53Z,MEMBER,Still desired,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/845164191/reactions,0,0,0,0,0,0,0,0,0,8003
638,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319471,https://github.com/rapidsai/cudf/issues/8003#issuecomment-969319471,https://api.github.com/repos/rapidsai/cudf/issues/8003,969319471,IC_kwDOBWUGps45xqQv,2021-11-15T21:04:38Z,2021-11-15T21:04:38Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319471/reactions,0,0,0,0,0,0,0,0,0,8003
639,https://api.github.com/repos/rapidsai/cudf/issues/comments/969328072,https://github.com/rapidsai/cudf/issues/8003#issuecomment-969328072,https://api.github.com/repos/rapidsai/cudf/issues/8003,969328072,IC_kwDOBWUGps45xsXI,2021-11-15T21:15:07Z,2021-11-15T21:15:07Z,MEMBER,"Still desired, low priority",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969328072/reactions,0,0,0,0,0,0,0,0,0,8003
640,https://api.github.com/repos/rapidsai/cudf/issues/comments/846147049,https://github.com/rapidsai/cudf/issues/8020#issuecomment-846147049,https://api.github.com/repos/rapidsai/cudf/issues/8020,846147049,MDEyOklzc3VlQ29tbWVudDg0NjE0NzA0OQ==,2021-05-21T18:16:00Z,2021-05-21T18:16:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/846147049/reactions,0,0,0,0,0,0,0,0,0,8020
641,https://api.github.com/repos/rapidsai/cudf/issues/comments/846230960,https://github.com/rapidsai/cudf/issues/8020#issuecomment-846230960,https://api.github.com/repos/rapidsai/cudf/issues/8020,846230960,MDEyOklzc3VlQ29tbWVudDg0NjIzMDk2MA==,2021-05-21T20:19:47Z,2021-05-21T20:19:47Z,CONTRIBUTOR,we still want this,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/846230960/reactions,0,0,0,0,0,0,0,0,0,8020
642,https://api.github.com/repos/rapidsai/cudf/issues/comments/1602801102,https://github.com/rapidsai/cudf/issues/8020#issuecomment-1602801102,https://api.github.com/repos/rapidsai/cudf/issues/8020,1602801102,IC_kwDOBWUGps5fiM3O,2023-06-22T15:02:43Z,2023-06-22T15:02:43Z,CONTRIBUTOR,"Just wanted to update this since libcudf has a [cudf::segmented_reduce](https://docs.rapids.ai/api/libcudf/stable/group__aggregation__reduction.html#gaade4393b8cd1fa9ddfec0f3f1e7f63cf) API which supports MIN,MAX,SUM and may be a possible usage here (that is, if you can determine the aggregation type ahead of time).

Assuming a non-nested list column, the first parameter would be the list's child data column and the second parameter would be the list's offsets.
The `null_handling` parameter can be set to `INCLUDE` to set the row result to NULL if any element is null.
The overall nulls could then be computed by using [cudf::bitmask_and](https://docs.rapids.ai/api/libcudf/stable/group__column__nullmask.html#ga81f65c5ef8c216335f02e9f4e4b5ddcc) with the returned result and the original lists column.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1602801102/reactions,0,0,0,0,0,0,0,0,0,8020
643,https://api.github.com/repos/rapidsai/cudf/issues/comments/846451644,https://github.com/rapidsai/cudf/issues/8039#issuecomment-846451644,https://api.github.com/repos/rapidsai/cudf/issues/8039,846451644,MDEyOklzc3VlQ29tbWVudDg0NjQ1MTY0NA==,2021-05-22T19:13:47Z,2021-05-22T19:13:47Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/846451644/reactions,0,0,0,0,0,0,0,0,0,8039
644,https://api.github.com/repos/rapidsai/cudf/issues/comments/1147826942,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1147826942,https://api.github.com/repos/rapidsai/cudf/issues/8039,1147826942,IC_kwDOBWUGps5EanL-,2022-06-06T19:33:45Z,2022-06-06T19:33:45Z,CONTRIBUTOR,This is partially resolved by #10770. The remaining work to close this issue is to implement lexicographical comparators `<` to enable sort-based groupby.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1147826942/reactions,0,0,0,0,0,0,0,0,0,8039
645,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265850780,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1265850780,https://api.github.com/repos/rapidsai/cudf/issues/8039,1265850780,IC_kwDOBWUGps5Lc1mc,2022-10-03T18:20:56Z,2022-10-03T18:20:56Z,CONTRIBUTOR,"This looks closer after merging #11129 but not quite working yet. 

sorting on list columns works:
```
>>> import cudf
>>> df = cudf.DataFrame({'a':[[1,2],[1,1]], 'b':[1,2]})
>>> df.sort_values('a')
        a  b
1  [1, 1]  2
0  [1, 2]  1
```

but groupby does not due to a cuDF error. Perhaps list types aren't supported in the index as groupby would require
```
>>> df.groupby('a').mean()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/mixins/mixin_factory.py"", line 11, in wrapper
    return method(self, *args1, *args2, **kwargs1, **kwargs2)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/groupby/groupby.py"", line 530, in _reduce
    return self.agg(op)
  File ""/opt/conda/envs/rapids/lib/python3.8/contextlib.py"", line 75, in inner
    return func(*args, **kwds)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/groupby/groupby.py"", line 458, in agg
    ) = self._groupby.aggregate(columns, normalized_aggs)
  File ""/opt/conda/envs/rapids/lib/python3.8/functools.py"", line 967, in __get__
    val = self.func(instance)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/groupby/groupby.py"", line 378, in _groupby
    [*self.grouping.keys._columns], dropna=self._dropna
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/groupby/groupby.py"", line 1745, in keys
    return cudf.core.index.as_index(
  File ""/opt/conda/envs/rapids/lib/python3.8/contextlib.py"", line 75, in inner
    return func(*args, **kwds)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/index.py"", line 2848, in as_index
    return _index_from_data({kwargs.get(""name"", None): arbitrary})
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/index.py"", line 116, in _index_from_data
    return index_class_type._from_data(data, name)
UnboundLocalError: local variable 'index_class_type' referenced before assignment
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265850780/reactions,0,0,0,0,0,0,0,0,0,8039
646,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265853343,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1265853343,https://api.github.com/repos/rapidsai/cudf/issues/8039,1265853343,IC_kwDOBWUGps5Lc2Of,2022-10-03T18:22:56Z,2022-10-03T18:22:56Z,MEMBER,"> This looks closer after merging #11129 but not quite working yet.

The issue would be resolved by #11792. ",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265853343/reactions,2,2,0,0,0,0,0,0,0,8039
647,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265884115,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1265884115,https://api.github.com/repos/rapidsai/cudf/issues/8039,1265884115,IC_kwDOBWUGps5Lc9vT,2022-10-03T18:47:59Z,2022-10-03T18:47:59Z,CONTRIBUTOR,"> Perhaps list types aren't supported in the index as groupby would require

Correct -- there's no `ListIndex` type in cuDF (or Pandas for that matter). There are two ways we could resolve this:

1. Add a `ListIndex` type
2. Support grouping on a list column only when `as_index=False`. At the same time, we could improve the error message when `as_index=True`.


For now I think (2) would be the simpler/faster option.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1265884115/reactions,1,0,0,0,0,0,1,0,0,8039
648,https://api.github.com/repos/rapidsai/cudf/issues/comments/1273989430,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1273989430,https://api.github.com/repos/rapidsai/cudf/issues/8039,1273989430,IC_kwDOBWUGps5L74k2,2022-10-11T02:01:43Z,2022-10-11T02:02:17Z,CONTRIBUTOR,Note: Implementing the `ListIndex` type would also solve #6932,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1273989430/reactions,0,0,0,0,0,0,0,0,0,8039
649,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274798662,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1274798662,https://api.github.com/repos/rapidsai/cudf/issues/8039,1274798662,IC_kwDOBWUGps5L--JG,2022-10-11T14:35:49Z,2022-10-11T14:35:49Z,CONTRIBUTOR,"Understood. I'd be hesitant to expand our API surface area by introducing a new `ListIndex` type until we have compelling use cases. This is especially true around indexes, as we are concurrently pushing for Pandas to rely _less_ on indexes (https://github.com/pandas-dev/pandas/issues/48880).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274798662/reactions,0,0,0,0,0,0,0,0,0,8039
650,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298622450,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1298622450,https://api.github.com/repos/rapidsai/cudf/issues/8039,1298622450,IC_kwDOBWUGps5NZ2fy,2022-11-01T14:51:44Z,2022-11-01T20:00:30Z,CONTRIBUTOR,"@randerzander, is this request still a high priority for you? @PointKernel and I have been experimenting with [exposing list-groupby in Python](https://github.com/rapidsai/cudf/pull/11792) and have run into a few different issues.

Notably, even Pandas does not support the example snippet first posted, so we have nothing to test against:

```python
import pandas as pd

df = pd.DataFrame({
    'id': [0, 1],
    'id_lst': [[0, 0], [1, 1]],
    'val': [0, 1]
})

df.groupby(['id', 'id_lst']).val.sum()
# TypeError: unhashable type: 'list'
```

Supporting grouping by lists in Python will need us to define and document semantics different from Pandas, and involves some non-trivial [refactoring](https://github.com/rapidsai/cudf/issues/12037) of our code. I'm trying to understand if there's a pressing need to do that.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298622450/reactions,0,0,0,0,0,0,0,0,0,8039
651,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298848265,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1298848265,https://api.github.com/repos/rapidsai/cudf/issues/8039,1298848265,IC_kwDOBWUGps5NatoJ,2022-11-01T17:10:46Z,2022-11-01T17:10:46Z,CONTRIBUTOR,">@randerzander, is this request still a high priority for you? 

It's not high priority, no",,randerzander,1692914,MDQ6VXNlcjE2OTI5MTQ=,https://avatars.githubusercontent.com/u/1692914?v=4,,https://api.github.com/users/randerzander,https://github.com/randerzander,https://api.github.com/users/randerzander/followers,https://api.github.com/users/randerzander/following{/other_user},https://api.github.com/users/randerzander/gists{/gist_id},https://api.github.com/users/randerzander/starred{/owner}{/repo},https://api.github.com/users/randerzander/subscriptions,https://api.github.com/users/randerzander/orgs,https://api.github.com/users/randerzander/repos,https://api.github.com/users/randerzander/events{/privacy},https://api.github.com/users/randerzander/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298848265/reactions,0,0,0,0,0,0,0,0,0,8039
652,https://api.github.com/repos/rapidsai/cudf/issues/comments/1299069974,https://github.com/rapidsai/cudf/issues/8039#issuecomment-1299069974,https://api.github.com/repos/rapidsai/cudf/issues/8039,1299069974,IC_kwDOBWUGps5NbjwW,2022-11-01T20:01:17Z,2022-11-01T20:39:28Z,MEMBER,"#11792 partially solves the issue and now lists can be used as groupby keys in libcudf.

Further work to close this issue will be tracked via #12037 ",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1299069974/reactions,0,0,0,0,0,0,0,0,0,8039
653,https://api.github.com/repos/rapidsai/cudf/issues/comments/849177493,https://github.com/rapidsai/cudf/issues/8064#issuecomment-849177493,https://api.github.com/repos/rapidsai/cudf/issues/8064,849177493,MDEyOklzc3VlQ29tbWVudDg0OTE3NzQ5Mw==,2021-05-26T23:07:46Z,2021-05-26T23:07:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/849177493/reactions,0,0,0,0,0,0,0,0,0,8064
654,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319419,https://github.com/rapidsai/cudf/issues/8064#issuecomment-969319419,https://api.github.com/repos/rapidsai/cudf/issues/8064,969319419,IC_kwDOBWUGps45xqP7,2021-11-15T21:04:35Z,2021-11-15T21:04:35Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319419/reactions,0,0,0,0,0,0,0,0,0,8064
655,https://api.github.com/repos/rapidsai/cudf/issues/comments/969328430,https://github.com/rapidsai/cudf/issues/8064#issuecomment-969328430,https://api.github.com/repos/rapidsai/cudf/issues/8064,969328430,IC_kwDOBWUGps45xscu,2021-11-15T21:15:39Z,2021-11-15T21:15:39Z,CONTRIBUTOR,This issue still needs to be addressed,,robertmaynard,215756,MDQ6VXNlcjIxNTc1Ng==,https://avatars.githubusercontent.com/u/215756?v=4,,https://api.github.com/users/robertmaynard,https://github.com/robertmaynard,https://api.github.com/users/robertmaynard/followers,https://api.github.com/users/robertmaynard/following{/other_user},https://api.github.com/users/robertmaynard/gists{/gist_id},https://api.github.com/users/robertmaynard/starred{/owner}{/repo},https://api.github.com/users/robertmaynard/subscriptions,https://api.github.com/users/robertmaynard/orgs,https://api.github.com/users/robertmaynard/repos,https://api.github.com/users/robertmaynard/events{/privacy},https://api.github.com/users/robertmaynard/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969328430/reactions,0,0,0,0,0,0,0,0,0,8064
656,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319270,https://github.com/rapidsai/cudf/issues/8147#issuecomment-969319270,https://api.github.com/repos/rapidsai/cudf/issues/8147,969319270,IC_kwDOBWUGps45xqNm,2021-11-15T21:04:24Z,2021-11-15T21:04:24Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319270/reactions,0,0,0,0,0,0,0,0,0,8147
657,https://api.github.com/repos/rapidsai/cudf/issues/comments/833695055,https://github.com/rapidsai/cudf/issues/8175#issuecomment-833695055,https://api.github.com/repos/rapidsai/cudf/issues/8175,833695055,MDEyOklzc3VlQ29tbWVudDgzMzY5NTA1NQ==,2021-05-06T17:10:10Z,2021-05-06T17:10:10Z,COLLABORATOR,"Hmm, this is problematic for us in handling things like strings or decimal values which can't be supported by arrays as of now. @shwina is scoping building `cudf.arrays` similar to `pandas.arrays` which would potentially give a path forward in the future.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/833695055/reactions,2,2,0,0,0,0,0,0,0,8175
658,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319230,https://github.com/rapidsai/cudf/issues/8175#issuecomment-969319230,https://api.github.com/repos/rapidsai/cudf/issues/8175,969319230,IC_kwDOBWUGps45xqM-,2021-11-15T21:04:22Z,2021-11-15T21:04:22Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319230/reactions,0,0,0,0,0,0,0,0,0,8175
659,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116171281,https://github.com/rapidsai/cudf/issues/8175#issuecomment-2116171281,https://api.github.com/repos/rapidsai/cudf/issues/8175,2116171281,IC_kwDOBWUGps5-IjYR,2024-05-16T21:02:09Z,2024-05-16T21:02:09Z,CONTRIBUTOR,"I'm not sure what we should do about this. I don't think extension arrays are on our roadmap for any time soon. @galipremsagar WDYT? We could match the type for types supported by cupy, but returning a different object based on the data type seems even worse than the status quo. Fundamentally I don't know that we'll ever be able to solve this since we have other types that cupy will probably never support (list and struct, for instance). ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2116171281/reactions,0,0,0,0,0,0,0,0,0,8175
660,https://api.github.com/repos/rapidsai/cudf/issues/comments/845354431,https://github.com/rapidsai/cudf/issues/8178#issuecomment-845354431,https://api.github.com/repos/rapidsai/cudf/issues/8178,845354431,MDEyOklzc3VlQ29tbWVudDg0NTM1NDQzMQ==,2021-05-20T18:14:57Z,2021-05-20T18:14:57Z,CONTRIBUTOR,I believe we have everything we need to do this now.  `make_column_from_scalar()` now supports structs and lists,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/845354431/reactions,1,1,0,0,0,0,0,0,0,8178
661,https://api.github.com/repos/rapidsai/cudf/issues/comments/847492156,https://github.com/rapidsai/cudf/issues/8178#issuecomment-847492156,https://api.github.com/repos/rapidsai/cudf/issues/8178,847492156,MDEyOklzc3VlQ29tbWVudDg0NzQ5MjE1Ng==,2021-05-25T02:59:41Z,2021-05-25T03:00:10Z,CONTRIBUTOR,"> I believe we have everything we need to do this now. `make_column_from_scalar()` now supports structs and lists

Thanks for the information, however seems this is not related to the `make_column_from_scalar`.  Instead it is about creating an empty column according to the nested data type, not a scalar.

The key point for this issue is how to pass the nested data type to the native via JNI.",,firestarman,7280411,MDQ6VXNlcjcyODA0MTE=,https://avatars.githubusercontent.com/u/7280411?v=4,,https://api.github.com/users/firestarman,https://github.com/firestarman,https://api.github.com/users/firestarman/followers,https://api.github.com/users/firestarman/following{/other_user},https://api.github.com/users/firestarman/gists{/gist_id},https://api.github.com/users/firestarman/starred{/owner}{/repo},https://api.github.com/users/firestarman/subscriptions,https://api.github.com/users/firestarman/orgs,https://api.github.com/users/firestarman/repos,https://api.github.com/users/firestarman/events{/privacy},https://api.github.com/users/firestarman/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/847492156/reactions,0,0,0,0,0,0,0,0,0,8178
662,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319217,https://github.com/rapidsai/cudf/issues/8178#issuecomment-969319217,https://api.github.com/repos/rapidsai/cudf/issues/8178,969319217,IC_kwDOBWUGps45xqMx,2021-11-15T21:04:20Z,2021-11-15T21:04:20Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319217/reactions,0,0,0,0,0,0,0,0,0,8178
663,https://api.github.com/repos/rapidsai/cudf/issues/comments/834834910,https://github.com/rapidsai/cudf/issues/8182#issuecomment-834834910,https://api.github.com/repos/rapidsai/cudf/issues/8182,834834910,MDEyOklzc3VlQ29tbWVudDgzNDgzNDkxMA==,2021-05-07T22:47:58Z,2021-05-07T22:47:58Z,MEMBER,"Hey  Lai, 

Seems like you are running into this issue because the output merge of small chunks may be too big (> 2,147,483,648) .  

This can happen if you have a lot of repeated keys as we repeat each row in the right table that matches the left table. See the below example for an explanation. 

```python
df_1 = cudf.DataFrame({'id_a':[1,2,3,4,5,6],'key':[0,0,0,0,0,0]})
df_2 = cudf.DataFrame({'id_b':[10,20],'key':[0,0]})
df_1.merge(df_2)
```

```
	id_a	key	id_b
0	1	0	10
1	2	0	10
2	3	0	10
3	4	0	10
4	5	0	10
5	6	0	10
6	1	0	20
7	2	0	20
8	3	0	20
9	4	0	20
10	5	0	20
11	6	0	20
````

Now mitigating this can be done in multiple ways : 

### 1.  If one of the frames is a single partitions (For broadcast joints) :

Repartition the multi partitioned table upfront into  more partitions:

```python
## the right frame is a single partition
assert ddf_2.npartitions == 1 

merged_df = ddf_1 = ddf_1.repartition(npartitions=ddf_1.npartitions*2) 
ddf_1.merge(ddf_2,how=inner)

```

### 2.  If both of them have multiple partitions (Hash-Join)

Using `npartitions`: This argument controls the number of output partitions. 

o_partitions = max(ddf_1.npartitions, ddf_2.npartitions )*2 

```python
merged_df = ddf_1.merge(ddf_2,npartitions= o_partitions,  how=inner)
``` 



It's still tough to know how to mitigate this error without more information like the `number of left `and `right` partitions but I hope that this still helps. 
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/834834910/reactions,0,0,0,0,0,0,0,0,0,8182
664,https://api.github.com/repos/rapidsai/cudf/issues/comments/834904729,https://github.com/rapidsai/cudf/issues/8182#issuecomment-834904729,https://api.github.com/repos/rapidsai/cudf/issues/8182,834904729,MDEyOklzc3VlQ29tbWVudDgzNDkwNDcyOQ==,2021-05-08T00:37:44Z,2021-05-08T00:37:44Z,COLLABORATOR,"@rjzamora @shwina this is something that we have primitives to potential handle within dask-cudf. We have APIs that can now return a pair of device vectors to use for gather maps to materialize the join output. The device vectors don't have this int32 size limitation, so we can logically split them into multiple gather calls and output multiple partitions instead of a single partition.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/834904729/reactions,0,0,0,0,0,0,0,0,0,8182
665,https://api.github.com/repos/rapidsai/cudf/issues/comments/835260421,https://github.com/rapidsai/cudf/issues/8182#issuecomment-835260421,https://api.github.com/repos/rapidsai/cudf/issues/8182,835260421,MDEyOklzc3VlQ29tbWVudDgzNTI2MDQyMQ==,2021-05-08T10:01:20Z,2021-05-08T10:01:20Z,CONTRIBUTOR,"Ideally I'd like for dask-cudf to do this in a way that doesn't interact with cudf internals. To that end, I think it makes sense to expose a join API that returns either (1) chunked results or (2) the gathermaps as CuPy arrays.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/835260421/reactions,0,0,0,0,0,0,0,0,0,8182
666,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319185,https://github.com/rapidsai/cudf/issues/8182#issuecomment-969319185,https://api.github.com/repos/rapidsai/cudf/issues/8182,969319185,IC_kwDOBWUGps45xqMR,2021-11-15T21:04:19Z,2021-11-15T21:04:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319185/reactions,0,0,0,0,0,0,0,0,0,8182
667,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319156,https://github.com/rapidsai/cudf/issues/8184#issuecomment-969319156,https://api.github.com/repos/rapidsai/cudf/issues/8184,969319156,IC_kwDOBWUGps45xqL0,2021-11-15T21:04:17Z,2021-11-15T21:04:17Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319156/reactions,0,0,0,0,0,0,0,0,0,8184
668,https://api.github.com/repos/rapidsai/cudf/issues/comments/837013132,https://github.com/rapidsai/cudf/issues/8196#issuecomment-837013132,https://api.github.com/repos/rapidsai/cudf/issues/8196,837013132,MDEyOklzc3VlQ29tbWVudDgzNzAxMzEzMg==,2021-05-10T17:31:33Z,2021-05-10T17:31:58Z,MEMBER,"This came up while @shaneding was working on #7997 , as this presents when ~accessing~ returning list.leaves ",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/837013132/reactions,0,0,0,0,0,0,0,0,0,8196
669,https://api.github.com/repos/rapidsai/cudf/issues/comments/837091532,https://github.com/rapidsai/cudf/issues/8196#issuecomment-837091532,https://api.github.com/repos/rapidsai/cudf/issues/8196,837091532,MDEyOklzc3VlQ29tbWVudDgzNzA5MTUzMg==,2021-05-10T18:21:47Z,2021-05-10T18:21:47Z,MEMBER,"Thinking more, the monotonically increasing index in the original example is due to how this is constructed here (from a cuDF object). I think this may simply be fine as is. The computed index is just the collection of the the underlying indexes.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/837091532/reactions,0,0,0,0,0,0,0,0,0,8196
670,https://api.github.com/repos/rapidsai/cudf/issues/comments/837210073,https://github.com/rapidsai/cudf/issues/8196#issuecomment-837210073,https://api.github.com/repos/rapidsai/cudf/issues/8196,837210073,MDEyOklzc3VlQ29tbWVudDgzNzIxMDA3Mw==,2021-05-10T19:36:30Z,2021-05-10T19:36:30Z,COLLABORATOR,"I think specifically that the `character_tokenize` function resets the index because there isn't a clean way to maintain it, so when the function is run against each dask partition, each partition gets a reset index.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/837210073/reactions,0,0,0,0,0,0,0,0,0,8196
671,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319136,https://github.com/rapidsai/cudf/issues/8196#issuecomment-969319136,https://api.github.com/repos/rapidsai/cudf/issues/8196,969319136,IC_kwDOBWUGps45xqLg,2021-11-15T21:04:16Z,2021-11-15T21:04:16Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319136/reactions,0,0,0,0,0,0,0,0,0,8196
672,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289369123,https://github.com/rapidsai/cudf/issues/8196#issuecomment-1289369123,https://api.github.com/repos/rapidsai/cudf/issues/8196,1289369123,IC_kwDOBWUGps5M2jYj,2022-10-24T17:38:20Z,2022-10-24T17:38:20Z,CONTRIBUTOR,"@beckernick do you think there's anything to do here, or should we close this issue as expected behavior?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289369123/reactions,0,0,0,0,0,0,0,0,0,8196
673,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105397156,https://github.com/rapidsai/cudf/issues/8196#issuecomment-2105397156,https://api.github.com/repos/rapidsai/cudf/issues/8196,2105397156,IC_kwDOBWUGps59fc-k,2024-05-11T00:07:57Z,2024-05-11T00:07:57Z,CONTRIBUTOR,"Hmm the current results here seem to have gotten worse. @beckernick WDYT of this? I'm not familiar with the API or what it's meant to do, but this seems quite wrong.
```
In [105]: import cudf
     ...: import dask_cudf
     ...: s = cudf.Series([""ab"", ""cd"", ""ef"", ""gh"", ""ij""])
     ...: ds = dask_cudf.from_cudf(s, 2)
     ...: print(ds.compute())
     ...: print(ds.map_partitions(lambda x: x.str.character_tokenize(), meta=ds._meta).compute())
0    ab
1    cd
2    ef
3    gh
4    ij
dtype: object
0    a
0    b
1    c
1    d
2    e
2    f
3    j
3    
4    
4    
dtype: object
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105397156/reactions,0,0,0,0,0,0,0,0,0,8196
674,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319123,https://github.com/rapidsai/cudf/issues/8227#issuecomment-969319123,https://api.github.com/repos/rapidsai/cudf/issues/8227,969319123,IC_kwDOBWUGps45xqLT,2021-11-15T21:04:14Z,2021-11-15T21:04:14Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319123/reactions,0,0,0,0,0,0,0,0,0,8227
675,https://api.github.com/repos/rapidsai/cudf/issues/comments/969332061,https://github.com/rapidsai/cudf/issues/8227#issuecomment-969332061,https://api.github.com/repos/rapidsai/cudf/issues/8227,969332061,IC_kwDOBWUGps45xtVd,2021-11-15T21:20:33Z,2021-11-15T21:20:33Z,MEMBER,"Still desired, low priority.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969332061/reactions,0,0,0,0,0,0,0,0,0,8227
676,https://api.github.com/repos/rapidsai/cudf/issues/comments/977962351,https://github.com/rapidsai/cudf/issues/8230#issuecomment-977962351,https://api.github.com/repos/rapidsai/cudf/issues/8230,977962351,IC_kwDOBWUGps46SoVv,2021-11-24T15:04:15Z,2021-11-24T15:04:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/977962351/reactions,0,0,0,0,0,0,0,0,0,8230
677,https://api.github.com/repos/rapidsai/cudf/issues/comments/925100507,https://github.com/rapidsai/cudf/issues/8250#issuecomment-925100507,https://api.github.com/repos/rapidsai/cudf/issues/8250,925100507,IC_kwDOBWUGps43I-nb,2021-09-22T16:43:10Z,2021-09-22T16:43:10Z,CONTRIBUTOR,@vyasr Can we move this to `21.12`?,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/925100507/reactions,0,0,0,0,0,0,0,0,0,8250
678,https://api.github.com/repos/rapidsai/cudf/issues/comments/925243526,https://github.com/rapidsai/cudf/issues/8250#issuecomment-925243526,https://api.github.com/repos/rapidsai/cudf/issues/8250,925243526,IC_kwDOBWUGps43JhiG,2021-09-22T19:20:09Z,2021-09-22T19:20:09Z,CONTRIBUTOR,"Yup, moved.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/925243526/reactions,0,0,0,0,0,0,0,0,0,8250
679,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922227,https://github.com/rapidsai/cudf/issues/8250#issuecomment-1031922227,https://api.github.com/repos/rapidsai/cudf/issues/8250,1031922227,IC_kwDOBWUGps49geIz,2022-02-07T21:04:40Z,2022-02-07T21:04:40Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031922227/reactions,0,0,0,0,0,0,0,0,0,8250
680,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319027,https://github.com/rapidsai/cudf/issues/8305#issuecomment-969319027,https://api.github.com/repos/rapidsai/cudf/issues/8305,969319027,IC_kwDOBWUGps45xqJz,2021-11-15T21:04:09Z,2021-11-15T21:04:09Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319027/reactions,0,0,0,0,0,0,0,0,0,8305
681,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535815422,https://github.com/rapidsai/cudf/issues/8305#issuecomment-1535815422,https://api.github.com/repos/rapidsai/cudf/issues/8305,1535815422,IC_kwDOBWUGps5biq7-,2023-05-05T07:06:08Z,2023-05-05T07:06:08Z,NONE,Any news?,,yanxiu0614,11772496,MDQ6VXNlcjExNzcyNDk2,https://avatars.githubusercontent.com/u/11772496?v=4,,https://api.github.com/users/yanxiu0614,https://github.com/yanxiu0614,https://api.github.com/users/yanxiu0614/followers,https://api.github.com/users/yanxiu0614/following{/other_user},https://api.github.com/users/yanxiu0614/gists{/gist_id},https://api.github.com/users/yanxiu0614/starred{/owner}{/repo},https://api.github.com/users/yanxiu0614/subscriptions,https://api.github.com/users/yanxiu0614/orgs,https://api.github.com/users/yanxiu0614/repos,https://api.github.com/users/yanxiu0614/events{/privacy},https://api.github.com/users/yanxiu0614/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535815422/reactions,0,0,0,0,0,0,0,0,0,8305
682,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536205347,https://github.com/rapidsai/cudf/issues/8305#issuecomment-1536205347,https://api.github.com/repos/rapidsai/cudf/issues/8305,1536205347,IC_kwDOBWUGps5bkKIj,2023-05-05T12:42:16Z,2023-05-05T12:42:57Z,CONTRIBUTOR,"Hi @yanxiu0614 -- we don't have this feature yet. But I believe you can work around it using something like this:

```python
>>> s = cudf.Series([1, None, 2, None, None, 3, 2])
>>> null_counts = s.isna().cumsum()
>>> s[(s.isna()) & (null_counts <= 2)] = 0  # replace only the first 2 nulls with 0
>>> s
0       1,
1       0
2       2
3       0
4    <NA>
5       3
6       2
dtype: int64
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536205347/reactions,1,1,0,0,0,0,0,0,0,8305
683,https://api.github.com/repos/rapidsai/cudf/issues/comments/845954893,https://github.com/rapidsai/cudf/issues/8311#issuecomment-845954893,https://api.github.com/repos/rapidsai/cudf/issues/8311,845954893,MDEyOklzc3VlQ29tbWVudDg0NTk1NDg5Mw==,2021-05-21T13:35:36Z,2021-05-21T13:35:36Z,MEMBER,@rjzamora is this something we need to fix in ArrowEngine or in type handling similar to `strings_to_categorical` ?,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/845954893/reactions,0,0,0,0,0,0,0,0,0,8311
684,https://api.github.com/repos/rapidsai/cudf/issues/comments/845959381,https://github.com/rapidsai/cudf/issues/8311#issuecomment-845959381,https://api.github.com/repos/rapidsai/cudf/issues/8311,845959381,MDEyOklzc3VlQ29tbWVudDg0NTk1OTM4MQ==,2021-05-21T13:42:36Z,2021-05-21T13:42:36Z,MEMBER,"I'll need to experiment a bit, but I suspect that you are correct @quasiben - This is likely a metadata issue.  @ChrisJar, do you know if calling `compute` produces the correct dtypes?",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/845959381/reactions,0,0,0,0,0,0,0,0,0,8311
685,https://api.github.com/repos/rapidsai/cudf/issues/comments/846021533,https://github.com/rapidsai/cudf/issues/8311#issuecomment-846021533,https://api.github.com/repos/rapidsai/cudf/issues/8311,846021533,MDEyOklzc3VlQ29tbWVudDg0NjAyMTUzMw==,2021-05-21T15:10:22Z,2021-05-21T15:10:22Z,CONTRIBUTOR,@rjzamora Yep! Calling `compute` produces the correct dtypes,,ChrisJar,13131098,MDQ6VXNlcjEzMTMxMDk4,https://avatars.githubusercontent.com/u/13131098?v=4,,https://api.github.com/users/ChrisJar,https://github.com/ChrisJar,https://api.github.com/users/ChrisJar/followers,https://api.github.com/users/ChrisJar/following{/other_user},https://api.github.com/users/ChrisJar/gists{/gist_id},https://api.github.com/users/ChrisJar/starred{/owner}{/repo},https://api.github.com/users/ChrisJar/subscriptions,https://api.github.com/users/ChrisJar/orgs,https://api.github.com/users/ChrisJar/repos,https://api.github.com/users/ChrisJar/events{/privacy},https://api.github.com/users/ChrisJar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/846021533/reactions,1,1,0,0,0,0,0,0,0,8311
686,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319012,https://github.com/rapidsai/cudf/issues/8311#issuecomment-969319012,https://api.github.com/repos/rapidsai/cudf/issues/8311,969319012,IC_kwDOBWUGps45xqJk,2021-11-15T21:04:08Z,2021-11-15T21:04:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319012/reactions,0,0,0,0,0,0,0,0,0,8311
687,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318875,https://github.com/rapidsai/cudf/issues/8394#issuecomment-969318875,https://api.github.com/repos/rapidsai/cudf/issues/8394,969318875,IC_kwDOBWUGps45xqHb,2021-11-15T21:03:57Z,2021-11-15T21:03:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318875/reactions,0,0,0,0,0,0,0,0,0,8394
688,https://api.github.com/repos/rapidsai/cudf/issues/comments/856414825,https://github.com/rapidsai/cudf/issues/8454#issuecomment-856414825,https://api.github.com/repos/rapidsai/cudf/issues/8454,856414825,MDEyOklzc3VlQ29tbWVudDg1NjQxNDgyNQ==,2021-06-08T03:43:55Z,2021-06-08T03:43:55Z,MEMBER,I don't think we should force null counting until we have memoization of the null count.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/856414825/reactions,0,0,0,0,0,0,0,0,0,8454
689,https://api.github.com/repos/rapidsai/cudf/issues/comments/856418983,https://github.com/rapidsai/cudf/issues/8454#issuecomment-856418983,https://api.github.com/repos/rapidsai/cudf/issues/8454,856418983,MDEyOklzc3VlQ29tbWVudDg1NjQxODk4Mw==,2021-06-08T03:57:44Z,2021-06-08T03:57:44Z,CONTRIBUTOR,Does that mean we already have a plan for implementing null count memoization?,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/856418983/reactions,0,0,0,0,0,0,0,0,0,8454
690,https://api.github.com/repos/rapidsai/cudf/issues/comments/856424267,https://github.com/rapidsai/cudf/issues/8454#issuecomment-856424267,https://api.github.com/repos/rapidsai/cudf/issues/8454,856424267,MDEyOklzc3VlQ29tbWVudDg1NjQyNDI2Nw==,2021-06-08T04:12:52Z,2021-06-08T04:12:52Z,MEMBER,Please ignore my comment. Column null_count is already memoized. I was thinking of something else.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/856424267/reactions,0,0,0,0,0,0,0,0,0,8454
691,https://api.github.com/repos/rapidsai/cudf/issues/comments/856715663,https://github.com/rapidsai/cudf/issues/8454#issuecomment-856715663,https://api.github.com/repos/rapidsai/cudf/issues/8454,856715663,MDEyOklzc3VlQ29tbWVudDg1NjcxNTY2Mw==,2021-06-08T12:18:32Z,2021-06-08T12:18:32Z,CONTRIBUTOR,"I think the issue is the handling of sliced columns specifically but maybe there are other examples.

If a column does not contain a bitmask, then a sliced column will also not have a bitmask and `copy_bitmask` returns a nullptr bitmask.

If a column does contain a bitmask, then a sliced column will also have a bitmask but the sliced region _may_ technically contain no null entries regardless if the source column contains nulls or not. Here, `copy_bitmask` will create an appropriate sliced copy of the bitmask. Having `copy_bitmask` also check to see if all the copied bits are also all set (non-null) seems unnecessarily expensive.

I think it is reasonable for `copy_bitmask` to return a bitmask if the input `column_view` contains a bitmask without requiring it to also check the bits within the `column_view`'s range.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/856715663/reactions,1,1,0,0,0,0,0,0,0,8454
692,https://api.github.com/repos/rapidsai/cudf/issues/comments/856726821,https://github.com/rapidsai/cudf/issues/8454#issuecomment-856726821,https://api.github.com/repos/rapidsai/cudf/issues/8454,856726821,MDEyOklzc3VlQ29tbWVudDg1NjcyNjgyMQ==,2021-06-08T12:34:43Z,2021-06-08T12:34:43Z,CONTRIBUTOR,"Thanks David. I raised this issue that includes such specific case but not just for it. More generally, I see that there are a lot of places where people mixing `nullable` and `null_count`. These APIs are similar but may yield different/unexpected/wrong results if we don't pay enough attention to their use contexts.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/856726821/reactions,0,0,0,0,0,0,0,0,0,8454
693,https://api.github.com/repos/rapidsai/cudf/issues/comments/857072801,https://github.com/rapidsai/cudf/issues/8454#issuecomment-857072801,https://api.github.com/repos/rapidsai/cudf/issues/8454,857072801,MDEyOklzc3VlQ29tbWVudDg1NzA3MjgwMQ==,2021-06-08T19:57:35Z,2021-06-08T19:57:35Z,CONTRIBUTOR,"I interpret `nullable` as ""this column may contain nulls"" and `has_nulls` (`null_count() > 0`) as ""this column currently contains nulls"". The former is a semantic distinction about the type of data that is up to the user, whereas the latter is a less fundamental property that only describes the current state of the data. As a consumer of this API I would not expect non-nullable outputs from a `libcudf` function that I called with nullable inputs, except in specific scenarios like reductions where there is some well-defined expected behavior for how nulls are removed. Assuming that you're not proposing to make columns always nullable (which I assume is a non-starter) I wouldn't want nullability to suddenly vanish in the middle of a pipeline.

That said, while I don't think we can optimize away the allocation of the bitmask, parts of libcudf can probably benefit significantly by using `has_nulls` rather than `nullable` to dispatch code paths. By that, I mean that in many cases the only difference between how some function should operate on a non-nullable column and a nullable column with zero nulls is the allocation of the null mask. In cases where that is true, it should be sufficient to simply allocate an all valid null mask and then follow the same code path that would be used for a non-nullable column. I don't know if/how much we leverage that throughout libcudf. Taking advantage of that would not address your concerns about misuse of `has_nulls` vs `nullable` leading to incorrect behavior, but it might help ameliorate performance issues in the case of nullable columns that have no nulls.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/857072801/reactions,0,0,0,0,0,0,0,0,0,8454
694,https://api.github.com/repos/rapidsai/cudf/issues/comments/857120688,https://github.com/rapidsai/cudf/issues/8454#issuecomment-857120688,https://api.github.com/repos/rapidsai/cudf/issues/8454,857120688,MDEyOklzc3VlQ29tbWVudDg1NzEyMDY4OA==,2021-06-08T20:42:01Z,2021-06-08T20:42:01Z,CONTRIBUTOR,"> These APIs are similar but may yield different/unexpected/wrong results if we don't pay enough attention to their use contexts.

I'm not familiar with a case where the choice of `nullable` vs `has_nulls` will end up in wrong results. I'd think the only difference is in performance. Do you have an example of a bug because of this? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/857120688/reactions,0,0,0,0,0,0,0,0,0,8454
695,https://api.github.com/repos/rapidsai/cudf/issues/comments/857134837,https://github.com/rapidsai/cudf/issues/8454#issuecomment-857134837,https://api.github.com/repos/rapidsai/cudf/issues/8454,857134837,MDEyOklzc3VlQ29tbWVudDg1NzEzNDgzNw==,2021-06-08T20:54:27Z,2021-06-09T00:18:55Z,CONTRIBUTOR,"Hi Jake. This is an example: https://github.com/rapidsai/cudf/pull/8374/files. The bug was reported from the Spark team when the given data have inconsistency in nullability (comparing two structs columns both having no null but one has a bitmask). We have that bug not because we implemented the library incorrectly at the beginning. It is just a hole in functionalities of `nullable` and `null_count` that we support.

One can argue that if we are careful enough, pay attention enough to the meaning of `nullable` and `has_null` then we can avoid all bugs in our softwares. However, how can we guarantee that we will always pay ""enough attention"" throughout the development time? Everybody can make a mistake. If there exists any potential way leading to that mistake, we may accidentally step on that way eventually. The best (and only) way to avoid mistake(s) is to totally remove such potential way from our path.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/857134837/reactions,0,0,0,0,0,0,0,0,0,8454
696,https://api.github.com/repos/rapidsai/cudf/issues/comments/857140983,https://github.com/rapidsai/cudf/issues/8454#issuecomment-857140983,https://api.github.com/repos/rapidsai/cudf/issues/8454,857140983,MDEyOklzc3VlQ29tbWVudDg1NzE0MDk4Mw==,2021-06-08T20:59:40Z,2021-06-08T20:59:40Z,CONTRIBUTOR,"> We have that bug not because we implemented the library incorrectly at the beginning. 

My understanding is that that bug was because we weren't passing `column_nullability::FORCE` like was done in https://github.com/rapidsai/cudf/pull/7963 ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/857140983/reactions,0,0,0,0,0,0,0,0,0,8454
697,https://api.github.com/repos/rapidsai/cudf/issues/comments/857145741,https://github.com/rapidsai/cudf/issues/8454#issuecomment-857145741,https://api.github.com/repos/rapidsai/cudf/issues/8454,857145741,MDEyOklzc3VlQ29tbWVudDg1NzE0NTc0MQ==,2021-06-08T21:04:06Z,2021-06-08T21:04:43Z,CONTRIBUTOR,"Yes, passing in `...::FORCE` will produce the correct result. However, you will always pay for the cost of materializing the nullability into a real column.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/857145741/reactions,0,0,0,0,0,0,0,0,0,8454
698,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318668,https://github.com/rapidsai/cudf/issues/8454#issuecomment-969318668,https://api.github.com/repos/rapidsai/cudf/issues/8454,969318668,IC_kwDOBWUGps45xqEM,2021-11-15T21:03:45Z,2021-11-15T21:03:45Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318668/reactions,0,0,0,0,0,0,0,0,0,8454
699,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318642,https://github.com/rapidsai/cudf/issues/8455#issuecomment-969318642,https://api.github.com/repos/rapidsai/cudf/issues/8455,969318642,IC_kwDOBWUGps45xqDy,2021-11-15T21:03:44Z,2021-11-15T21:03:44Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318642/reactions,0,0,0,0,0,0,0,0,0,8455
700,https://api.github.com/repos/rapidsai/cudf/issues/comments/861822495,https://github.com/rapidsai/cudf/issues/8520#issuecomment-861822495,https://api.github.com/repos/rapidsai/cudf/issues/8520,861822495,MDEyOklzc3VlQ29tbWVudDg2MTgyMjQ5NQ==,2021-06-15T20:51:09Z,2021-06-15T20:51:09Z,MEMBER,"I thought this is already supported:

```python
In [3]: df = cudf.DataFrame(
   ...:     {
   ...:         'a':['aa','aa','cc'],
   ...:         'd':[{""b"": '1', ""c"": ""one""}, {""b"": '2', ""c"": ""two""}, {""b"": '3', ""c"": ""one""}]
   ...:      }
   ...: )

In [4]: df.groupby('a').collect()
   ...:
Out[4]:
                                                   d
a
aa  [{'0': '1', '1': 'one'}, {'0': '2', '1': 'two'}]
cc                          [{'0': '3', '1': 'one'}]
```",,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/861822495/reactions,0,0,0,0,0,0,0,0,0,8520
701,https://api.github.com/repos/rapidsai/cudf/issues/comments/861825005,https://github.com/rapidsai/cudf/issues/8520#issuecomment-861825005,https://api.github.com/repos/rapidsai/cudf/issues/8520,861825005,MDEyOklzc3VlQ29tbWVudDg2MTgyNTAwNQ==,2021-06-15T20:55:35Z,2021-06-15T20:55:35Z,MEMBER,Based on the discussion in #8474 it seems like it was not supported but working anyway which was resolved in #8499 ,,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/861825005/reactions,0,0,0,0,0,0,0,0,0,8520
702,https://api.github.com/repos/rapidsai/cudf/issues/comments/861837974,https://github.com/rapidsai/cudf/issues/8520#issuecomment-861837974,https://api.github.com/repos/rapidsai/cudf/issues/8520,861837974,MDEyOklzc3VlQ29tbWVudDg2MTgzNzk3NA==,2021-06-15T21:17:34Z,2021-06-15T21:17:34Z,MEMBER,Are you ok if we close ?,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/861837974/reactions,0,0,0,0,0,0,0,0,0,8520
703,https://api.github.com/repos/rapidsai/cudf/issues/comments/861841835,https://github.com/rapidsai/cudf/issues/8520#issuecomment-861841835,https://api.github.com/repos/rapidsai/cudf/issues/8520,861841835,MDEyOklzc3VlQ29tbWVudDg2MTg0MTgzNQ==,2021-06-15T21:20:48Z,2021-06-15T21:20:48Z,MEMBER,"@quasiben Sorry for not clarifying further. The resolution in #8499 was disallowing aggregations on Struct Columns, so this is no longer supported. ",,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/861841835/reactions,0,0,0,0,0,0,0,0,0,8520
704,https://api.github.com/repos/rapidsai/cudf/issues/comments/878508740,https://github.com/rapidsai/cudf/issues/8520#issuecomment-878508740,https://api.github.com/repos/rapidsai/cudf/issues/8520,878508740,MDEyOklzc3VlQ29tbWVudDg3ODUwODc0MA==,2021-07-12T18:44:31Z,2021-07-12T18:45:05Z,MEMBER,"It sounds like this was disallowed because it was erroneously going down a codepath meant for string aggregations (and thus potentially brittle when used with structs/lists). 

@ayushdg is the expectation that these operations would behave as before, but by going down a well-tested codepath?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878508740/reactions,0,0,0,0,0,0,0,0,0,8520
705,https://api.github.com/repos/rapidsai/cudf/issues/comments/878509833,https://github.com/rapidsai/cudf/issues/8520#issuecomment-878509833,https://api.github.com/repos/rapidsai/cudf/issues/8520,878509833,MDEyOklzc3VlQ29tbWVudDg3ODUwOTgzMw==,2021-07-12T18:46:31Z,2021-07-12T18:46:31Z,MEMBER,"> @ayushdg is the expectation that these operations would behave as before, but by going down a well-tested codepath?

Yup, that's the expectation.",,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878509833/reactions,0,0,0,0,0,0,0,0,0,8520
706,https://api.github.com/repos/rapidsai/cudf/issues/comments/878587990,https://github.com/rapidsai/cudf/issues/8520#issuecomment-878587990,https://api.github.com/repos/rapidsai/cudf/issues/8520,878587990,MDEyOklzc3VlQ29tbWVudDg3ODU4Nzk5MA==,2021-07-12T20:54:22Z,2021-07-12T20:54:22Z,CONTRIBUTOR,"cc: @vyasr (just FYI), as I think we disabled these aggs on struct columns on one of your groupby cleanup PRs",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878587990/reactions,0,0,0,0,0,0,0,0,0,8520
707,https://api.github.com/repos/rapidsai/cudf/issues/comments/879487879,https://github.com/rapidsai/cudf/issues/8520#issuecomment-879487879,https://api.github.com/repos/rapidsai/cudf/issues/8520,879487879,MDEyOklzc3VlQ29tbWVudDg3OTQ4Nzg3OQ==,2021-07-14T00:19:26Z,2021-07-14T00:19:26Z,CONTRIBUTOR,"Perhaps you're thinking of [these changes](https://github.com/rapidsai/cudf/pull/7731/files#diff-455db1b90348b170b8f09780ea1d04001247b8190b77fe0010ad725a5b2c5b2f) on #7731? Prior to this, there were a number of dtypes for which unsupported aggregations weren't being checked.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/879487879/reactions,0,0,0,0,0,0,0,0,0,8520
708,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318570,https://github.com/rapidsai/cudf/issues/8520#issuecomment-969318570,https://api.github.com/repos/rapidsai/cudf/issues/8520,969318570,IC_kwDOBWUGps45xqCq,2021-11-15T21:03:39Z,2021-11-15T21:03:39Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318570/reactions,0,0,0,0,0,0,0,0,0,8520
709,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318491,https://github.com/rapidsai/cudf/issues/8573#issuecomment-969318491,https://api.github.com/repos/rapidsai/cudf/issues/8573,969318491,IC_kwDOBWUGps45xqBb,2021-11-15T21:03:34Z,2021-11-15T21:03:34Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318491/reactions,0,0,0,0,0,0,0,0,0,8573
710,https://api.github.com/repos/rapidsai/cudf/issues/comments/1729311428,https://github.com/rapidsai/cudf/issues/8573#issuecomment-1729311428,https://api.github.com/repos/rapidsai/cudf/issues/8573,1729311428,IC_kwDOBWUGps5nEzLE,2023-09-21T10:40:20Z,2023-09-21T10:40:20Z,CONTRIBUTOR,"This desire came up again recently in relation to #14138, where it is noted that we implement a lot of ""heavyweight"" algorithms as a sequence of calls in Python, rather than pushing down into libcudf.

@isVoid's implementation work in #8567 stalled due to some differences in the way libcudf and pandas (and hence cudf) choose to model dictionary-encoded columns.

In libcudf, the keys of the dictionary are required to be sorted, and the encoding looks up the value by indexing into the keys array. This restricts dictionary encoding to keys that admit a total order, and (I think) doesn't have a hook for a user-provided comparator.

In pandas, categoricals (dictionary encoded columns) come in two flavours

1. ordered
2. unordered

The latter do not require that the keys admit a total order (or indeed a partial one), and can be applied even in the case where the key type does have a ""natural"" ordering, e.g.:

```
n [5]: col = pd.Categorical([1, 2, 3], ordered=False)

In [6]: col.min() # => TypeError
```

Ordered categoricals either use the natural ordering induced by the key type (this matches libcudf), _or_ allow for a user-defined ordering. This enables the user to impose a total order on naturally unordered key types (for example floats), and/or provide one that is different from the natural order:

```
col = pd.Categorical([3, 2, 1], ordered=True)
col.min() # => 1

col = pd.Categorical([3, 2, 1], categories=[3, 1, 2], ordered=True)
col.min() # => 3
```

AIUI, it was interfacing these differences that caused too many hacks/workarounds on the python side.

In light of this, we should consider if the libcudf side would need some extensions to support cudf's use case of dictionary encoding. Or if there is a smart way of managing things in a translation layer that doesn't require huge amounts of special-casing.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1729311428/reactions,0,0,0,0,0,0,0,0,0,8573
711,https://api.github.com/repos/rapidsai/cudf/issues/comments/1732112550,https://github.com/rapidsai/cudf/issues/8573#issuecomment-1732112550,https://api.github.com/repos/rapidsai/cudf/issues/8573,1732112550,IC_kwDOBWUGps5nPfCm,2023-09-22T23:03:22Z,2023-09-22T23:03:22Z,CONTRIBUTOR,"Another reason Michael's work stalled is that due to the fact that it's not directly mapping to a libcudf type categorical data in cudf is special-cased all over the place and therefore requires a large amount of work to track. We were hoping that it would be simpler to work on that after we had refactored cudf internals to a place where the categorical logic was better isolated to just the categorical column, or at least more contained in some other way. I'm not opposed to revisiting the work now, but just an FYI that I'd hope this would become substantially easier after we restructure cudf internals around pylibcudf over the next couple of releases.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1732112550/reactions,2,2,0,0,0,0,0,0,0,8573
712,https://api.github.com/repos/rapidsai/cudf/issues/comments/866132729,https://github.com/rapidsai/cudf/issues/8585#issuecomment-866132729,https://api.github.com/repos/rapidsai/cudf/issues/8585,866132729,MDEyOklzc3VlQ29tbWVudDg2NjEzMjcyOQ==,2021-06-22T16:21:33Z,2021-06-22T16:21:33Z,MEMBER,"Thanks for including a simple reproducer gist. I've included it below for ease of access.

```python
import pandas as pd
import cudf
import numpy as np
​
start = pd.Timestamp(datetime.strptime('2021-03-12 00:00+0000',  '%Y-%m-%d %H:%M%z'))
end = pd.Timestamp(datetime.strptime('2021-03-12 03:00+0000',  '%Y-%m-%d %H:%M%z'))
timestamps = pd.date_range(start, end, freq='1H')
labels = ['A', 'B', 'C']
index = pd.MultiIndex.from_product([timestamps, labels], names=[""timestamp"", ""label""])
value = np.random.normal(size=12)
df = pd.DataFrame(value, index=index, columns=['value'])
df_gpu = cudf.from_pandas(df)
​
stamp = pd.Timestamp(datetime.strptime('2021-03-12 02:00+0000',  '%Y-%m-%d %H:%M%z'))
​
print(df.loc[stamp]) # SUCCEEDS
print(df_gpu.loc[stamp]) # FAILS
          value
label          
A      1.184793
B     -0.253166
C     -0.790236
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/indexing.py in __getitem__(self, arg)
    234             try:
--> 235                 return self._getitem_tuple_arg(arg)
    236             except (TypeError, KeyError, IndexError, ValueError):

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/contextlib.py in inner(*args, **kwds)
     74             with self._recreate_cm():
---> 75                 return func(*args, **kwds)
     76         return inner

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/indexing.py in _getitem_tuple_arg(self, arg)
    360                 else:
--> 361                     return columns_df.index._get_row_major(columns_df, arg)
    362         else:

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/multiindex.py in _get_row_major(self, df, row_tuple)
    926                 row_tuple = slice(row_tuple.start, self[-1], row_tuple.step)
--> 927         self._validate_indexer(row_tuple)
    928         valid_indices = self._get_valid_indices_by_tuple(

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/multiindex.py in _validate_indexer(self, indexer)
    958         else:
--> 959             for i in indexer:
    960                 self._validate_indexer(i)

TypeError: 'Timestamp' object is not iterable

During handling of the above exception, another exception occurred:

TypeError                                 Traceback (most recent call last)
<ipython-input-87-fe779946243b> in <module>
     15 
     16 print(df.loc[stamp]) # SUCCEEDS
---> 17 print(df_gpu.loc[stamp]) # FAILS

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/indexing.py in __getitem__(self, arg)
    235                 return self._getitem_tuple_arg(arg)
    236             except (TypeError, KeyError, IndexError, ValueError):
--> 237                 return self._getitem_tuple_arg((arg, slice(None)))
    238         else:
    239             if not isinstance(arg, tuple):

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/contextlib.py in inner(*args, **kwds)
     73         def inner(*args, **kwds):
     74             with self._recreate_cm():
---> 75                 return func(*args, **kwds)
     76         return inner
     77 

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/indexing.py in _getitem_tuple_arg(self, arg)
    357             else:
    358                 if isinstance(arg, tuple):
--> 359                     return columns_df.index._get_row_major(columns_df, arg[0])
    360                 else:
    361                     return columns_df.index._get_row_major(columns_df, arg)

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/multiindex.py in _get_row_major(self, df, row_tuple)
    925             if row_tuple.stop is None:
    926                 row_tuple = slice(row_tuple.start, self[-1], row_tuple.step)
--> 927         self._validate_indexer(row_tuple)
    928         valid_indices = self._get_valid_indices_by_tuple(
    929             df.index, row_tuple, len(df.index)

/raid/nicholasb/miniconda3/envs/rapids-21.08/lib/python3.8/site-packages/cudf/core/multiindex.py in _validate_indexer(self, indexer)
    957             self._validate_indexer(indexer.stop)
    958         else:
--> 959             for i in indexer:
    960                 self._validate_indexer(i)
    961 

TypeError: 'Timestamp' object is not iterable
```

It looks like we go down a codepath that expects an iterable, which explains why wrapping with a tuple works (and may resolve your problem in the short term):

```python
print(df_gpu.loc[(stamp,)]) # SUCCEEDS
          value
label          
A      1.184793
B     -0.253166
C     -0.790236
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/866132729/reactions,0,0,0,0,0,0,0,0,0,8585
713,https://api.github.com/repos/rapidsai/cudf/issues/comments/867041028,https://github.com/rapidsai/cudf/issues/8585#issuecomment-867041028,https://api.github.com/repos/rapidsai/cudf/issues/8585,867041028,MDEyOklzc3VlQ29tbWVudDg2NzA0MTAyOA==,2021-06-23T17:52:44Z,2021-06-23T17:52:44Z,NONE,"Hi @beckernick, thanks for the answer!

The ""tuple trick"" above seems to do the job for accessing a single value. However, I'm back into trouble if I want to fetch values for a timestamp range.

Elaborating from my previous gist example, if I type:

```
start = pd.Timestamp(datetime.strptime('2021-03-12 01:00+0000',  '%Y-%m-%d %H:%M%z'))
end = pd.Timestamp(datetime.strptime('2021-03-12 02:00+0000',  '%Y-%m-%d %H:%M%z'))
print(df.loc[start:end])
```

I get the expected result:

```
                                    value
timestamp                 label          
2021-03-12 01:00:00+00:00 A     -0.466112
                          B     -0.781473
                          C     -1.010174
2021-03-12 02:00:00+00:00 A      0.160179
                          B      1.007183
                          C     -1.053772
```

With cuDF, the following gets the usual `TypeError: 'Timestamp' object is not iterable`:

```
print(df_gpu.loc[start:end])
```

Alternatively, trying:

```
print(df_gpu.loc[(start:end,)])
```

gets a `SyntaxError: invalid syntax`. Using a _regular_ Timestamp range with:

```
start = pd.Timestamp(datetime.strptime('2021-03-12 01:00+0000',  '%Y-%m-%d %H:%M%z'))
end = pd.Timestamp(datetime.strptime('2021-03-12 02:00+0000',  '%Y-%m-%d %H:%M%z'))
timestamps = pd.date_range(start, end, freq='1H')
print(df_gpu.loc[(timestamps,)])
```

I get `ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()`. Any idea for circumventing this issue?",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/867041028/reactions,0,0,0,0,0,0,0,0,0,8585
714,https://api.github.com/repos/rapidsai/cudf/issues/comments/877636167,https://github.com/rapidsai/cudf/issues/8585#issuecomment-877636167,https://api.github.com/repos/rapidsai/cudf/issues/8585,877636167,MDEyOklzc3VlQ29tbWVudDg3NzYzNjE2Nw==,2021-07-10T13:14:38Z,2021-07-10T13:14:38Z,NONE,"Hi,

I'm following up about the bug reported above,
as reported in my last answer, using a tuple to access a Timestamp first level of a MultiIndex circumvents the issue pointed out initially,
but the proposed solution fails if one wants to access a Timestamp range.

I realize that the title is not accurately reflecting the actually remaining bug: should I create a new issue which singles out the Timestamp range bug, or rename this one?",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/877636167/reactions,0,0,0,0,0,0,0,0,0,8585
715,https://api.github.com/repos/rapidsai/cudf/issues/comments/953187085,https://github.com/rapidsai/cudf/issues/8585#issuecomment-953187085,https://api.github.com/repos/rapidsai/cudf/issues/8585,953187085,IC_kwDOBWUGps440HsN,2021-10-27T18:12:16Z,2021-10-27T18:12:16Z,MEMBER,We've been refactoring our MultiIndex implementation to help make it more efficient and maintainable. Is the pandas snippet in the comment above a minimal example of the desired behavior @pbruneau ?,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/953187085/reactions,0,0,0,0,0,0,0,0,0,8585
716,https://api.github.com/repos/rapidsai/cudf/issues/comments/957636459,https://github.com/rapidsai/cudf/issues/8585#issuecomment-957636459,https://api.github.com/repos/rapidsai/cudf/issues/8585,957636459,IC_kwDOBWUGps45FF9r,2021-11-02T13:59:15Z,2021-11-02T13:59:15Z,NONE,"Hi @beckernick,

[Here is an updated minimal gist](https://gist.github.com/pbruneau/53312fe4bef649b7780f8f63bf09fbe1) which lists in details what works, does not work, and workarounds (as of version 21.08.02 installed on my side).

In a nutshell (please refer to the gist for details): with a MultiIndex and timestamps as primary key, pandas allows to do this kind of operation:

```
df.loc[stamp]
df.loc[timestamps]
```
with `stamp` and `timestamps` valid timestamp and timestamp range, respectively. I would like to do the same with cudf, but as of v21.08.02, it is impossible.",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/957636459/reactions,0,0,0,0,0,0,0,0,0,8585
717,https://api.github.com/repos/rapidsai/cudf/issues/comments/1025774228,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1025774228,https://api.github.com/repos/rapidsai/cudf/issues/8585,1025774228,IC_kwDOBWUGps49JBKU,2022-01-31T14:07:30Z,2022-01-31T14:07:30Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1025774228/reactions,0,0,0,0,0,0,0,0,0,8585
718,https://api.github.com/repos/rapidsai/cudf/issues/comments/1027915260,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1027915260,https://api.github.com/repos/rapidsai/cudf/issues/8585,1027915260,IC_kwDOBWUGps49RL38,2022-02-02T12:57:38Z,2022-02-02T12:57:38Z,NONE,"The problems reported above and highlighted [in this minimal gist](https://gist.github.com/pbruneau/53312fe4bef649b7780f8f63bf09fbe1) still occur with v21.12, with exactly the same error messages.",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1027915260/reactions,0,0,0,0,0,0,0,0,0,8585
719,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531749435,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1531749435,https://api.github.com/repos/rapidsai/cudf/issues/8585,1531749435,IC_kwDOBWUGps5bTKQ7,2023-05-02T16:13:46Z,2023-05-02T16:18:39Z,CONTRIBUTOR,"An update here (I am working through many indexing corner cases), apologies for the very slow responses.

In 23.06 (the current development version) there is an error constructing time-zone aware timestamps (previously they were accepted but handled incorrectly, now they are not accepted, soon they will be accepted and handled correctly). However, if I remove the timezone portion of the timestamps, then only your last example now fails (I reproduce here for posterity):
```python
import pandas as pd
from datetime import datetime
import cudf
import numpy as np

start = pd.Timestamp(datetime.strptime('2021-03-12 00:00',  '%Y-%m-%d %H:%M'))
end = pd.Timestamp(datetime.strptime('2021-03-12 03:00',  '%Y-%m-%d %H:%M'))
timestamps = pd.date_range(start, end, freq='1H')
labels = ['A', 'B', 'C']
index = pd.MultiIndex.from_product([timestamps, labels], names=[""timestamp"", ""label""])
value = np.random.normal(size=12)
df = pd.DataFrame(value, index=index, columns=['value'])

df_gpu = cudf.from_pandas(df)

start = pd.Timestamp(datetime.strptime('2021-03-12 01:00',  '%Y-%m-%d %H:%M'))
end = pd.Timestamp(datetime.strptime('2021-03-12 02:00',  '%Y-%m-%d %H:%M'))
timestamps = pd.date_range(start, end, freq='1H')

# SUCCEEDS
print(df.loc[timestamps])

# FAILS
print(df_gpu.loc[timestamps])

# indexing with a slice range also fails in this case.
df_gpu.loc[start:end] # Fails
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531749435/reactions,0,0,0,0,0,0,0,0,0,8585
720,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532505485,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1532505485,https://api.github.com/repos/rapidsai/cudf/issues/8585,1532505485,IC_kwDOBWUGps5bWC2N,2023-05-03T06:29:04Z,2023-05-03T06:29:04Z,NONE,"Hi @wence-,

I'm installing via Docker, so I can't check out by myself (23.06 does not seem to be available then),

If I get it right, this means that:
```
print(df_gpu.loc[timestamps])
```
works fine? I would already have a workaround, then!",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532505485/reactions,0,0,0,0,0,0,0,0,0,8585
721,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532657541,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1532657541,https://api.github.com/repos/rapidsai/cudf/issues/8585,1532657541,IC_kwDOBWUGps5bWn-F,2023-05-03T08:44:42Z,2023-05-03T08:44:42Z,CONTRIBUTOR,"> Hi @wence-,
> 
> I'm installing via Docker, so I can't check out by myself (23.06 does not seem to be available then),
> 
> If I get it right, this means that:
> 
> ```
> print(df_gpu.loc[timestamps])
> ```
> 
> works fine? I would already have a workaround, then!

If your dataframe has a multiindex, that example does not _yet_ work. If you just have a normal index, it does work.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532657541/reactions,0,0,0,0,0,0,0,0,0,8585
722,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532779661,https://github.com/rapidsai/cudf/issues/8585#issuecomment-1532779661,https://api.github.com/repos/rapidsai/cudf/issues/8585,1532779661,IC_kwDOBWUGps5bXFyN,2023-05-03T10:19:40Z,2023-05-03T10:19:40Z,NONE,"> > Hi @wence-,
> > I'm installing via Docker, so I can't check out by myself (23.06 does not seem to be available then),
> > If I get it right, this means that:
> > ```
> > print(df_gpu.loc[timestamps])
> > ```
> > 
> > 
> >     
> >       
> >     
> > 
> >       
> >     
> > 
> >     
> >   
> > works fine? I would already have a workaround, then!
> 
> If your dataframe has a multiindex, that example does not _yet_ work. If you just have a normal index, it does work.

OK! Good luck with the development then (even if luck has nothing to do with it :)",,pbruneau,4252621,MDQ6VXNlcjQyNTI2MjE=,https://avatars.githubusercontent.com/u/4252621?v=4,,https://api.github.com/users/pbruneau,https://github.com/pbruneau,https://api.github.com/users/pbruneau/followers,https://api.github.com/users/pbruneau/following{/other_user},https://api.github.com/users/pbruneau/gists{/gist_id},https://api.github.com/users/pbruneau/starred{/owner}{/repo},https://api.github.com/users/pbruneau/subscriptions,https://api.github.com/users/pbruneau/orgs,https://api.github.com/users/pbruneau/repos,https://api.github.com/users/pbruneau/events{/privacy},https://api.github.com/users/pbruneau/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532779661/reactions,0,0,0,0,0,0,0,0,0,8585
723,https://api.github.com/repos/rapidsai/cudf/issues/comments/982782419,https://github.com/rapidsai/cudf/issues/8623#issuecomment-982782419,https://api.github.com/repos/rapidsai/cudf/issues/8623,982782419,IC_kwDOBWUGps46lBHT,2021-11-30T16:07:47Z,2021-11-30T16:07:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/982782419/reactions,0,0,0,0,0,0,0,0,0,8623
724,https://api.github.com/repos/rapidsai/cudf/issues/comments/871645009,https://github.com/rapidsai/cudf/issues/8633#issuecomment-871645009,https://api.github.com/repos/rapidsai/cudf/issues/8633,871645009,MDEyOklzc3VlQ29tbWVudDg3MTY0NTAwOQ==,2021-06-30T18:47:37Z,2021-06-30T18:47:37Z,CONTRIBUTOR,"The reason is because if you're constructing the scalar with an existing value, then it wouldn't make sense for it to be null. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/871645009/reactions,0,0,0,0,0,0,0,0,0,8633
725,https://api.github.com/repos/rapidsai/cudf/issues/comments/871652003,https://github.com/rapidsai/cudf/issues/8633#issuecomment-871652003,https://api.github.com/repos/rapidsai/cudf/issues/8633,871652003,MDEyOklzc3VlQ29tbWVudDg3MTY1MjAwMw==,2021-06-30T18:59:15Z,2021-06-30T18:59:15Z,CONTRIBUTOR,"The case here was for testing.  Creating a null scalar and doing some interesting things with it (exploding it to a column, running copy_if_else(), etc)",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/871652003/reactions,1,1,0,0,0,0,0,0,0,8633
726,https://api.github.com/repos/rapidsai/cudf/issues/comments/871668445,https://github.com/rapidsai/cudf/issues/8633#issuecomment-871668445,https://api.github.com/repos/rapidsai/cudf/issues/8633,871668445,MDEyOklzc3VlQ29tbWVudDg3MTY2ODQ0NQ==,2021-06-30T19:26:09Z,2021-06-30T19:26:09Z,CONTRIBUTOR,"> The case here was for testing. Creating a null scalar and doing some interesting things with it (exploding it to a column, running copy_if_else(), etc)

I don't think you'd use a factory then. I think you can just create a default constructed scalar of the appropriate type.",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/871668445/reactions,0,0,0,0,0,0,0,0,0,8633
727,https://api.github.com/repos/rapidsai/cudf/issues/comments/871673819,https://github.com/rapidsai/cudf/issues/8633#issuecomment-871673819,https://api.github.com/repos/rapidsai/cudf/issues/8633,871673819,MDEyOklzc3VlQ29tbWVudDg3MTY3MzgxOQ==,2021-06-30T19:35:24Z,2021-06-30T19:35:24Z,CONTRIBUTOR,"Another reason this doesn't work is:  for nested types, you need to have a fully formed hierarchy of columns (the type-is-defined-by-the-hierarchy issue), even if the root scalar is null.  So any constructor that takes just a validity bool isn't sufficient.",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/871673819/reactions,1,1,0,0,0,0,0,0,0,8633
728,https://api.github.com/repos/rapidsai/cudf/issues/comments/871716399,https://github.com/rapidsai/cudf/issues/8633#issuecomment-871716399,https://api.github.com/repos/rapidsai/cudf/issues/8633,871716399,MDEyOklzc3VlQ29tbWVudDg3MTcxNjM5OQ==,2021-06-30T20:46:58Z,2021-06-30T20:47:06Z,CONTRIBUTOR,"> Another reason this doesn't work is: for nested types, you need to have a fully formed hierarchy of columns (the type-is-defined-by-the-hierarchy issue), even if the root scalar is null. So any constructor that takes just a validity bool isn't sufficient.

dropping in to say we're running into this as well on the python side and creating basically an empty placeholder hierarchy and directly constructing the scalars without using the factories. cc @shaneding ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/871716399/reactions,1,1,0,0,0,0,0,0,0,8633
729,https://api.github.com/repos/rapidsai/cudf/issues/comments/872243866,https://github.com/rapidsai/cudf/issues/8633#issuecomment-872243866,https://api.github.com/repos/rapidsai/cudf/issues/8633,872243866,MDEyOklzc3VlQ29tbWVudDg3MjI0Mzg2Ng==,2021-07-01T13:22:45Z,2021-07-01T13:22:45Z,CONTRIBUTOR,I've no problem with changing the current design. I was only explaining the rational of the way things are now. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/872243866/reactions,0,0,0,0,0,0,0,0,0,8633
730,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318377,https://github.com/rapidsai/cudf/issues/8633#issuecomment-969318377,https://api.github.com/repos/rapidsai/cudf/issues/8633,969318377,IC_kwDOBWUGps45xp_p,2021-11-15T21:03:28Z,2021-11-15T21:03:28Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318377/reactions,0,0,0,0,0,0,0,0,0,8633
731,https://api.github.com/repos/rapidsai/cudf/issues/comments/888276544,https://github.com/rapidsai/cudf/issues/8634#issuecomment-888276544,https://api.github.com/repos/rapidsai/cudf/issues/8634,888276544,IC_kwDOBWUGps408gZA,2021-07-28T12:41:52Z,2021-07-28T12:41:52Z,CONTRIBUTOR,Is this issue different than #8659 ?,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/888276544/reactions,0,0,0,0,0,0,0,0,0,8634
732,https://api.github.com/repos/rapidsai/cudf/issues/comments/888351279,https://github.com/rapidsai/cudf/issues/8634#issuecomment-888351279,https://api.github.com/repos/rapidsai/cudf/issues/8634,888351279,IC_kwDOBWUGps408yov,2021-07-28T14:22:55Z,2021-07-28T14:22:55Z,CONTRIBUTOR,"> Is this issue different than #8659 ?

lol, no. Apparently I just have early onset dementia. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/888351279/reactions,0,0,0,0,0,0,0,0,0,8634
733,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318336,https://github.com/rapidsai/cudf/issues/8634#issuecomment-969318336,https://api.github.com/repos/rapidsai/cudf/issues/8634,969318336,IC_kwDOBWUGps45xp_A,2021-11-15T21:03:26Z,2021-11-15T21:03:26Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318336/reactions,0,0,0,0,0,0,0,0,0,8634
734,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009264199,https://github.com/rapidsai/cudf/issues/8634#issuecomment-1009264199,https://api.github.com/repos/rapidsai/cudf/issues/8634,1009264199,IC_kwDOBWUGps48KCZH,2022-01-10T19:19:52Z,2022-01-10T19:19:52Z,CONTRIBUTOR,"I did some investigation on this now that thrust 1.15 has been integrated into libcudf builds. The [`thrust::sort` and `thrust::stable_sort`](https://github.com/rapidsai/cudf/blob/0d5ec7f8902cbf3d5b73b037b9d0f5db66506d86/cpp/src/sort/sort_impl.cuh#L136-L146) functions are used to sort a table view using the `cudf::detail::sorted_order` function to build the sorted indices which are then used in a call to `cudf::gather`. Since `thrust::sort` and `thrust::stable_sort` sort in-place, the [`thrust::sequence`](https://github.com/rapidsai/cudf/blob/0d5ec7f8902cbf3d5b73b037b9d0f5db66506d86/cpp/src/sort/sort_impl.cuh#L121) function is called before the sort. 

The `cub:DeviceMergeSort::SortKeysCopy` allows specifying a separate, immutable input eliminating the need for the call to `thrust::sequence`.  Therefore, `SortKeysCopy` can replace the `thrust::sort` by passing a counting-iterator as the input. However, though there is a [`cub::DeviceMergeSort::StableSortKeys`](https://github.com/NVIDIA/cub/blob/main/cub/device/device_merge_sort.cuh#L858) there currently is no `cub::DeviceMergeSort::StableSortKeysCopy` available. So the `thrust::stable_sort` equivalent would still require a `thrust::sequence` call.

Also, an initial prototype showed that `cub::DeviceMergeSort` has the same compile time issues as `thrust::sort` in that the aggressive inlining increases compile time by at least 10x. So moving to cub for sort will likely require disabling some `pragma unroll` statements in the cub header files like we did for thrust.

Finally, running benchmarks with `thrust::sequence/sort` compared to `cub::DeviceMergeSort:SortKeysCopy` (no sequence call) showed no significant change in performance.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009264199/reactions,0,0,0,0,0,0,0,0,0,8634
735,https://api.github.com/repos/rapidsai/cudf/issues/comments/1268952542,https://github.com/rapidsai/cudf/issues/8634#issuecomment-1268952542,https://api.github.com/repos/rapidsai/cudf/issues/8634,1268952542,IC_kwDOBWUGps5Loq3e,2022-10-05T20:42:31Z,2023-01-09T17:26:36Z,CONTRIBUTOR,"Possible optimized implementations for single-column, integral types -- using radix-sort (no comparator allowed)

| API | `cub::Device` | Notes |
| ---- | ---- | ---- |
| `cudf::sorted_order` | `RadixSort::SortPairs` | `thrust::sort_by_key` calls this internally |
| `cudf::stable_sorted_order` | `RadixSort::SortPairs` | `thrust::stable_sort_by_key` calls this internally  |
| `cudf::sort` | `RadixSort::SortKeys` |  `thrust::sort` calls this internally |
| `cudf::sort_by_key` | `RadixSort::SortPairs` | `thrust::sort_by_key` calls this internally |
| `cudf::stable_sort_by_key` | `RadixSort::SortPairs` | `thrust::stable_sort_by_key` calls this internally |
| `cudf::segmented_sorted_order` | `DeviceSegmentedSort::SortPairs` | |
| `cudf::stable_segmented_sorted_order` | `DeviceSegmentedSort::StableSortPairs` |  |
| `cudf::segmented_sort_by_key` | `DeviceSegmentedSort::SortPairs` |  |
| `cudf::stable_segmented_sort_by_key` | `DeviceSegmentedSort::StableSortPairs` |  |
| `cudf::lists::sort_lists` |  | call `cudf::detail::segmented_sort_by_key` |
| `cudf::lists::stable_sort_lists` |  | call `cudf::detail::stable_segmented_sort_by_key` |

The `DeviceRadixSort:SortKeys/Pairs` is not in-place and take separate parameters for input and output keys. So copying the input column is not required. Likewise, there are separate input and output parameters for the values in `SortPairs`. Unfortunately, these must be the same type and cannot except a counting iterator. So a prefilled indices column is still required.

The non-integral types can all use merge-sort since these accept a comparator.

| API | `cub::Device` | Notes |
| ---- | ---- | ---- |
| `cudf::sorted_order` | `MergeSort::SortPairsCopy` |  |
| `cudf::stable_sorted_order` | `MergeSort::StableSortPairsCopy` | N/A yet  |
| `cudf::sort` | `MergeSort::SortKeysCopy` |  |
| `cudf::sort_by_key` | `MergeSort::SortPairsCopy` |  |
| `cudf::stable_sort_by_key` | `MergeSort::StableSortPairsCopy` | N/A yet |
| `cudf::segmented_sorted_order` | `SegmentedSort::SortPairs` | |
| `cudf::stable_segmented_sorted_order` | `SegmentedSort::StableSortPairs` |  |
| `cudf::segmented_sort_by_key` | `SegmentedSort::SortPairs` |  |
| `cudf::stable_segmented_sort_by_key` | `SegmentedSort::StableSortPairs` | `cudf::detail::stable_segmented_sort_by_key` |
| `cudf::lists::sort_lists` |  | call `cudf::detail::segmented_sort_by_key` |
| `cudf::lists::stable_sort_lists` |  | call `cudf::detail::stable_segmented_sort_by_key` |

The `DeviceMergeSort::Sort*Copy` functions take separate parameters (both keys and values) for input and output. This means the input column does not need to be copied. The function signature also allows these corresponding types to be different meaning a counting iterator can be used for the input indices.

The `DeviceMergeSort::StableSort*Copy` functions are in https://github.com/NVIDIA/cub/pull/565 which has not yet made it into libcudf dependencies.

",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1268952542/reactions,1,1,0,0,0,0,0,0,0,8634
736,https://api.github.com/repos/rapidsai/cudf/issues/comments/873045046,https://github.com/rapidsai/cudf/issues/8639#issuecomment-873045046,https://api.github.com/repos/rapidsai/cudf/issues/8639,873045046,MDEyOklzc3VlQ29tbWVudDg3MzA0NTA0Ng==,2021-07-02T14:34:25Z,2021-07-02T14:36:36Z,MEMBER,@bryevdv it looks like we've been delegating to `from_arrow` for quite a while based on the [git blame](https://github.com/rapidsai/cudf/blame/fba09e66d822ee55654d6a362abb5190dd2c1521/python/cudf/cudf/core/column/column.py#L285) [history](https://github.com/rapidsai/cudf/blame/7ad07b49e73ddbaca32e16cf491953a5e98b79bf/python/cudf/cudf/core/column/column.py#L433) (two separate hyperlinks). Is this a recent change in behavior?,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/873045046/reactions,0,0,0,0,0,0,0,0,0,8639
737,https://api.github.com/repos/rapidsai/cudf/issues/comments/873105630,https://github.com/rapidsai/cudf/issues/8639#issuecomment-873105630,https://api.github.com/repos/rapidsai/cudf/issues/8639,873105630,MDEyOklzc3VlQ29tbWVudDg3MzEwNTYzMA==,2021-07-02T16:07:03Z,2021-07-02T16:07:03Z,CONTRIBUTOR,"@beckernick no, the change happened when we switched Python to using `libcudf.from_arrow`. Previously all the [`from_arrow` logic was handled in Python](https://github.com/rapidsai/cudf/blob/b164b382b9b778d3eccf643e533b30afe955ddab/python/cudf/cudf/core/column/column.py#L1106-L1108), and we zero-copy moved the Arrow buffers into cuDF buffers [via `buffers_from_pyarrow`](https://github.com/rapidsai/cudf/blob/b164b382b9b778d3eccf643e533b30afe955ddab/python/cudf/cudf/utils/utils.py#L110-L173).",,trxcllnt,178183,MDQ6VXNlcjE3ODE4Mw==,https://avatars.githubusercontent.com/u/178183?v=4,,https://api.github.com/users/trxcllnt,https://github.com/trxcllnt,https://api.github.com/users/trxcllnt/followers,https://api.github.com/users/trxcllnt/following{/other_user},https://api.github.com/users/trxcllnt/gists{/gist_id},https://api.github.com/users/trxcllnt/starred{/owner}{/repo},https://api.github.com/users/trxcllnt/subscriptions,https://api.github.com/users/trxcllnt/orgs,https://api.github.com/users/trxcllnt/repos,https://api.github.com/users/trxcllnt/events{/privacy},https://api.github.com/users/trxcllnt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/873105630/reactions,1,1,0,0,0,0,0,0,0,8639
738,https://api.github.com/repos/rapidsai/cudf/issues/comments/977207865,https://github.com/rapidsai/cudf/issues/8639#issuecomment-977207865,https://api.github.com/repos/rapidsai/cudf/issues/8639,977207865,IC_kwDOBWUGps46PwI5,2021-11-23T22:03:15Z,2021-11-23T22:03:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/977207865/reactions,0,0,0,0,0,0,0,0,0,8639
739,https://api.github.com/repos/rapidsai/cudf/issues/comments/977209877,https://github.com/rapidsai/cudf/issues/8639#issuecomment-977209877,https://api.github.com/repos/rapidsai/cudf/issues/8639,977209877,IC_kwDOBWUGps46PwoV,2021-11-23T22:05:45Z,2021-11-23T22:05:45Z,NONE,"Still needs to be addressed, AFAIK.",,bryevdv,1078448,MDQ6VXNlcjEwNzg0NDg=,https://avatars.githubusercontent.com/u/1078448?v=4,,https://api.github.com/users/bryevdv,https://github.com/bryevdv,https://api.github.com/users/bryevdv/followers,https://api.github.com/users/bryevdv/following{/other_user},https://api.github.com/users/bryevdv/gists{/gist_id},https://api.github.com/users/bryevdv/starred{/owner}{/repo},https://api.github.com/users/bryevdv/subscriptions,https://api.github.com/users/bryevdv/orgs,https://api.github.com/users/bryevdv/repos,https://api.github.com/users/bryevdv/events{/privacy},https://api.github.com/users/bryevdv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/977209877/reactions,1,1,0,0,0,0,0,0,0,8639
740,https://api.github.com/repos/rapidsai/cudf/issues/comments/977235753,https://github.com/rapidsai/cudf/issues/8639#issuecomment-977235753,https://api.github.com/repos/rapidsai/cudf/issues/8639,977235753,IC_kwDOBWUGps46P28p,2021-11-23T22:37:10Z,2021-11-23T22:37:10Z,CONTRIBUTOR,Is it not possible for C++ to also zero copy similarly where applicable? The reason we moved to the C++ impl was to avoid duplicates logic between C++ and Python. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/977235753/reactions,0,0,0,0,0,0,0,0,0,8639
741,https://api.github.com/repos/rapidsai/cudf/issues/comments/980824109,https://github.com/rapidsai/cudf/issues/8639#issuecomment-980824109,https://api.github.com/repos/rapidsai/cudf/issues/8639,980824109,IC_kwDOBWUGps46djAt,2021-11-28T02:20:11Z,2021-11-28T02:20:11Z,CONTRIBUTOR,"@shwina yeah it would be possible, but the current implementation returns a `unique_ptr<cudf::table>`, meaning it must copy the input data so the return can be a valid owning type. For true zero-copy, we'd need a version that returns a `cudf::table_view` (from which a `cudf::table` could be constructed if a copy was desired).",,trxcllnt,178183,MDQ6VXNlcjE3ODE4Mw==,https://avatars.githubusercontent.com/u/178183?v=4,,https://api.github.com/users/trxcllnt,https://github.com/trxcllnt,https://api.github.com/users/trxcllnt/followers,https://api.github.com/users/trxcllnt/following{/other_user},https://api.github.com/users/trxcllnt/gists{/gist_id},https://api.github.com/users/trxcllnt/starred{/owner}{/repo},https://api.github.com/users/trxcllnt/subscriptions,https://api.github.com/users/trxcllnt/orgs,https://api.github.com/users/trxcllnt/repos,https://api.github.com/users/trxcllnt/events{/privacy},https://api.github.com/users/trxcllnt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/980824109/reactions,0,0,0,0,0,0,0,0,0,8639
742,https://api.github.com/repos/rapidsai/cudf/issues/comments/983042662,https://github.com/rapidsai/cudf/issues/8639#issuecomment-983042662,https://api.github.com/repos/rapidsai/cudf/issues/8639,983042662,IC_kwDOBWUGps46mApm,2021-11-30T21:36:59Z,2021-11-30T21:36:59Z,CONTRIBUTOR,"cc @jrhemstad for advice on the API here, but maybe we could return something like a `pair<table_view, memory_owner>`? In the IPC case, the `memory_owner` would own nothing?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/983042662/reactions,0,0,0,0,0,0,0,0,0,8639
743,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105399697,https://github.com/rapidsai/cudf/issues/8639#issuecomment-2105399697,https://api.github.com/repos/rapidsai/cudf/issues/8639,2105399697,IC_kwDOBWUGps59fdmR,2024-05-11T00:12:13Z,2024-05-11T00:12:13Z,CONTRIBUTOR,I think the new solutions to this issue will come from work on https://github.com/rapidsai/cudf/issues/14926.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105399697/reactions,0,0,0,0,0,0,0,0,0,8639
744,https://api.github.com/repos/rapidsai/cudf/issues/comments/878456097,https://github.com/rapidsai/cudf/issues/8689#issuecomment-878456097,https://api.github.com/repos/rapidsai/cudf/issues/8689,878456097,MDEyOklzc3VlQ29tbWVudDg3ODQ1NjA5Nw==,2021-07-12T17:22:23Z,2021-07-12T17:22:23Z,MEMBER,"@charlesbluca is this affecting work related to pack/unpack, or just discovered during testing?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878456097/reactions,0,0,0,0,0,0,0,0,0,8689
745,https://api.github.com/repos/rapidsai/cudf/issues/comments/878457150,https://github.com/rapidsai/cudf/issues/8689#issuecomment-878457150,https://api.github.com/repos/rapidsai/cudf/issues/8689,878457150,MDEyOklzc3VlQ29tbWVudDg3ODQ1NzE1MA==,2021-07-12T17:24:07Z,2021-07-12T17:24:07Z,MEMBER,"Yes, this bug means that attempts to pack dataframes with a `DatetimeIndex` will error.",,charlesbluca,20627856,MDQ6VXNlcjIwNjI3ODU2,https://avatars.githubusercontent.com/u/20627856?v=4,,https://api.github.com/users/charlesbluca,https://github.com/charlesbluca,https://api.github.com/users/charlesbluca/followers,https://api.github.com/users/charlesbluca/following{/other_user},https://api.github.com/users/charlesbluca/gists{/gist_id},https://api.github.com/users/charlesbluca/starred{/owner}{/repo},https://api.github.com/users/charlesbluca/subscriptions,https://api.github.com/users/charlesbluca/orgs,https://api.github.com/users/charlesbluca/repos,https://api.github.com/users/charlesbluca/events{/privacy},https://api.github.com/users/charlesbluca/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/878457150/reactions,1,1,0,0,0,0,0,0,0,8689
746,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318270,https://github.com/rapidsai/cudf/issues/8689#issuecomment-969318270,https://api.github.com/repos/rapidsai/cudf/issues/8689,969318270,IC_kwDOBWUGps45xp9-,2021-11-15T21:03:22Z,2021-11-15T21:03:22Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318270/reactions,0,0,0,0,0,0,0,0,0,8689
747,https://api.github.com/repos/rapidsai/cudf/issues/comments/1129068314,https://github.com/rapidsai/cudf/issues/8689#issuecomment-1129068314,https://api.github.com/repos/rapidsai/cudf/issues/8689,1129068314,IC_kwDOBWUGps5DTDca,2022-05-17T16:19:59Z,2022-05-17T16:19:59Z,MEMBER,"Bumping with the new traceback I'm getting for this:

```
RuntimeError                              Traceback (most recent call last)
Input In [1], in <cell line: 5>()
      2 import cudf
      4 df = cudf.from_pandas(pd._testing.makeTimeDataFrame())  # len(df.index) == 30
----> 5 df.index.equals(cudf.RangeIndex(start=0, stop=30, step=1))

File ~/compose/etc/conda/cuda_11.5/envs/rapids/lib/python3.9/contextlib.py:79, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)
     76 @wraps(func)
     77 def inner(*args, **kwds):
     78     with self._recreate_cm():
---> 79         return func(*args, **kwds)

File ~/cudf/python/cudf/cudf/core/index.py:971, in GenericIndex.equals(self, other, **kwargs)
    968     check_dtypes = True
    970 try:
--> 971     return self._column.equals(
    972         other._column, check_dtypes=check_dtypes
    973     )
    974 except TypeError:
    975     return False

File ~/cudf/python/cudf/cudf/core/column/column.py:188, in ColumnBase.equals(self, other, check_dtypes)
    186 if check_dtypes and (self.dtype != other.dtype):
    187     return False
--> 188 ret = self._binaryop(other, ""NULL_EQUALS"")
    189 if ret is NotImplemented:
    190     raise TypeError(f""Cannot compare equality with {type(other)}"")

File ~/cudf/python/cudf/cudf/core/column/datetime.py:448, in DatetimeColumn._binaryop(self, other, op)
    445 if out_dtype is None:
    446     return NotImplemented
--> 448 return libcudf.binaryop.binaryop(lhs, rhs, op, out_dtype)

File ~/cudf/python/cudf/cudf/_lib/binaryop.pyx:197, in cudf._lib.binaryop.binaryop()

File ~/cudf/python/cudf/cudf/_lib/binaryop.pyx:109, in cudf._lib.binaryop.binaryop_v_v()

RuntimeError: cuDF failure at: /datasets/charlesb/dev/rapids/cudf/cpp/src/binaryop/binaryop.cpp:202: Unsupported operator for these types
```

Looking through the code for `DatetimeColumn._binaryop`, seems like maybe we would want some handling here to ensure that the columns can be compared properly before passing off to libcudf? I assume adding a condition here

https://github.com/rapidsai/cudf/blob/80e4262d115e1e11607e599ed2539c110fe516bf/python/cudf/cudf/core/column/datetime.py#L413-L417

Should do the trick, though I'm not sure if we're able to compute `NULL_EQUALS` with columns of a non-datetime dtype.",,charlesbluca,20627856,MDQ6VXNlcjIwNjI3ODU2,https://avatars.githubusercontent.com/u/20627856?v=4,,https://api.github.com/users/charlesbluca,https://github.com/charlesbluca,https://api.github.com/users/charlesbluca/followers,https://api.github.com/users/charlesbluca/following{/other_user},https://api.github.com/users/charlesbluca/gists{/gist_id},https://api.github.com/users/charlesbluca/starred{/owner}{/repo},https://api.github.com/users/charlesbluca/subscriptions,https://api.github.com/users/charlesbluca/orgs,https://api.github.com/users/charlesbluca/repos,https://api.github.com/users/charlesbluca/events{/privacy},https://api.github.com/users/charlesbluca/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1129068314/reactions,0,0,0,0,0,0,0,0,0,8689
748,https://api.github.com/repos/rapidsai/cudf/issues/comments/877191858,https://github.com/rapidsai/cudf/issues/8703#issuecomment-877191858,https://api.github.com/repos/rapidsai/cudf/issues/8703,877191858,MDEyOklzc3VlQ29tbWVudDg3NzE5MTg1OA==,2021-07-09T13:34:47Z,2021-07-09T13:34:47Z,MEMBER,"Thanks for the clear issue. We'll look into it.

As a general note, `inplace=True` is not usually going to save memory / avoid a copy in Pandas. Instead, it often essentially assigns the new data to the same name. For more information, please see https://github.com/pandas-dev/pandas/issues/16529#issuecomment-451001804 for a more detailed discussion and why some folks want to deprecate this parameter.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/877191858/reactions,1,1,0,0,0,0,0,0,0,8703
749,https://api.github.com/repos/rapidsai/cudf/issues/comments/877825854,https://github.com/rapidsai/cudf/issues/8703#issuecomment-877825854,https://api.github.com/repos/rapidsai/cudf/issues/8703,877825854,MDEyOklzc3VlQ29tbWVudDg3NzgyNTg1NA==,2021-07-11T16:06:38Z,2021-07-11T16:06:38Z,NONE,"@beckernick I didn't know that about  `inplace=True`, thanks for the insight :)",,BassemKaroui,23449512,MDQ6VXNlcjIzNDQ5NTEy,https://avatars.githubusercontent.com/u/23449512?v=4,,https://api.github.com/users/BassemKaroui,https://github.com/BassemKaroui,https://api.github.com/users/BassemKaroui/followers,https://api.github.com/users/BassemKaroui/following{/other_user},https://api.github.com/users/BassemKaroui/gists{/gist_id},https://api.github.com/users/BassemKaroui/starred{/owner}{/repo},https://api.github.com/users/BassemKaroui/subscriptions,https://api.github.com/users/BassemKaroui/orgs,https://api.github.com/users/BassemKaroui/repos,https://api.github.com/users/BassemKaroui/events{/privacy},https://api.github.com/users/BassemKaroui/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/877825854/reactions,0,0,0,0,0,0,0,0,0,8703
750,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318218,https://github.com/rapidsai/cudf/issues/8703#issuecomment-969318218,https://api.github.com/repos/rapidsai/cudf/issues/8703,969318218,IC_kwDOBWUGps45xp9K,2021-11-15T21:03:19Z,2021-11-15T21:03:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318218/reactions,0,0,0,0,0,0,0,0,0,8703
751,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318192,https://github.com/rapidsai/cudf/issues/8708#issuecomment-969318192,https://api.github.com/repos/rapidsai/cudf/issues/8708,969318192,IC_kwDOBWUGps45xp8w,2021-11-15T21:03:17Z,2021-11-15T21:03:17Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318192/reactions,0,0,0,0,0,0,0,0,0,8708
752,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318165,https://github.com/rapidsai/cudf/issues/8710#issuecomment-969318165,https://api.github.com/repos/rapidsai/cudf/issues/8710,969318165,IC_kwDOBWUGps45xp8V,2021-11-15T21:03:16Z,2021-11-15T21:03:16Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318165/reactions,0,0,0,0,0,0,0,0,0,8710
753,https://api.github.com/repos/rapidsai/cudf/issues/comments/970614565,https://github.com/rapidsai/cudf/issues/8710#issuecomment-970614565,https://api.github.com/repos/rapidsai/cudf/issues/8710,970614565,IC_kwDOBWUGps452mcl,2021-11-16T19:37:37Z,2021-11-16T19:37:37Z,CONTRIBUTOR,"Still would like this. We have a work around, but it is not ideal.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/970614565/reactions,0,0,0,0,0,0,0,0,0,8710
754,https://api.github.com/repos/rapidsai/cudf/issues/comments/1602837726,https://github.com/rapidsai/cudf/issues/8710#issuecomment-1602837726,https://api.github.com/repos/rapidsai/cudf/issues/8710,1602837726,IC_kwDOBWUGps5fiVze,2023-06-22T15:24:42Z,2023-06-22T15:24:42Z,CONTRIBUTOR,"Just want to clarify this is requesting support for `COUNT_VALID` in groupby-scan since `COUNT_ALL` is already supported.
And to support both `COUNT_VALID` and `COUNT_ALL` for `cudf::scan`.
Could you describe what a COUNT aggregation result would look like for scan? ",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1602837726/reactions,0,0,0,0,0,0,0,0,0,8710
755,https://api.github.com/repos/rapidsai/cudf/issues/comments/879103336,https://github.com/rapidsai/cudf/issues/8725#issuecomment-879103336,https://api.github.com/repos/rapidsai/cudf/issues/8725,879103336,MDEyOklzc3VlQ29tbWVudDg3OTEwMzMzNg==,2021-07-13T13:47:09Z,2021-07-13T13:47:09Z,MEMBER,"Thanks for filing an issue @Kkrishnaa . It looks like the cuDF DataFrame constructor is not able to handle the nested dictionary input.

```python
import cudf
import pandas as pd
​
d = {""a"": {""b"":[1,2,3,4]}}
​
print(pd.DataFrame(d))
print(cudf.DataFrame(d))
              a
b  [1, 2, 3, 4]
   a
0  b
```

In the future, if you believe you've run into a bug, please select the ""Bug Report"" issue option and follow [this guide](http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports) to craft a minimal bug report. This helps us reproduce the issue you're having and resolve the issue more quickly.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/879103336/reactions,0,0,0,0,0,0,0,0,0,8725
756,https://api.github.com/repos/rapidsai/cudf/issues/comments/888298797,https://github.com/rapidsai/cudf/issues/8725#issuecomment-888298797,https://api.github.com/repos/rapidsai/cudf/issues/8725,888298797,IC_kwDOBWUGps408l0t,2021-07-28T13:13:23Z,2021-07-28T13:13:55Z,MEMBER,"As a note, this outcome can be accomplished today by representing the original data differently (as a list of lists, with a separate index list):

```python
import cudf
​
df = cudf.DataFrame({
    ""a"":[
        [1,2,3,4],
        [2,3,4,5]
    ]},
    index=[""b"", ""c""]
)
print(df)
              a
b  [1, 2, 3, 4]
c  [2, 3, 4, 5]
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/888298797/reactions,0,0,0,0,0,0,0,0,0,8725
757,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318121,https://github.com/rapidsai/cudf/issues/8725#issuecomment-969318121,https://api.github.com/repos/rapidsai/cudf/issues/8725,969318121,IC_kwDOBWUGps45xp7p,2021-11-15T21:03:13Z,2021-11-15T21:03:13Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318121/reactions,0,0,0,0,0,0,0,0,0,8725
758,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318066,https://github.com/rapidsai/cudf/issues/8743#issuecomment-969318066,https://api.github.com/repos/rapidsai/cudf/issues/8743,969318066,IC_kwDOBWUGps45xp6y,2021-11-15T21:03:10Z,2021-11-15T21:03:10Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318066/reactions,0,0,0,0,0,0,0,0,0,8743
759,https://api.github.com/repos/rapidsai/cudf/issues/comments/882530478,https://github.com/rapidsai/cudf/issues/8754#issuecomment-882530478,https://api.github.com/repos/rapidsai/cudf/issues/8754,882530478,IC_kwDOBWUGps40mliu,2021-07-19T13:05:31Z,2021-07-19T13:05:31Z,CONTRIBUTOR,Thanks for reporting. Definitely a bug and not a feature :-) ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/882530478/reactions,0,0,0,0,0,0,0,0,0,8754
760,https://api.github.com/repos/rapidsai/cudf/issues/comments/963493356,https://github.com/rapidsai/cudf/issues/8754#issuecomment-963493356,https://api.github.com/repos/rapidsai/cudf/issues/8754,963493356,IC_kwDOBWUGps45bb3s,2021-11-08T19:19:05Z,2021-11-08T19:19:05Z,CONTRIBUTOR,"Here is what is happening after some debugging. A column may or may not have nulls, and therefore may or may not have an associated mask. When we take a slice of a column, that view may or may not have an associated mask, depending on if the parent column did or did not have one. If the parent column did have a mask, it can be accessed through `base_mask`.

In this example, we're starting with a column that has no mask and assigning a null. The code detects that the slice does not possess a mask, and so creates a new one, which is then associated with the **slice** but not the **parent** mask. The data is written to the data buffer successfully, but the parent column still has no mask. This is why the problem goes away if the original column contains even one null - because then the child column can mutate `base_mask` and the result will propagate to the parent. 

I am looking into a few solutions here but I am worried the result won't be pretty. More to come here.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/963493356/reactions,1,1,0,0,0,0,0,0,0,8754
761,https://api.github.com/repos/rapidsai/cudf/issues/comments/965799859,https://github.com/rapidsai/cudf/issues/8754#issuecomment-965799859,https://api.github.com/repos/rapidsai/cudf/issues/8754,965799859,IC_kwDOBWUGps45kO-z,2021-11-10T22:20:26Z,2021-11-10T22:20:26Z,CONTRIBUTOR,"Moving this issue to the next release, as it likely requires some non-trivial design changes that we won't be able to do well in time for this release.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/965799859/reactions,0,0,0,0,0,0,0,0,0,8754
762,https://api.github.com/repos/rapidsai/cudf/issues/comments/1033148225,https://github.com/rapidsai/cudf/issues/8754#issuecomment-1033148225,https://api.github.com/repos/rapidsai/cudf/issues/8754,1033148225,IC_kwDOBWUGps49lJdB,2022-02-08T23:03:13Z,2022-02-08T23:03:13Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1033148225/reactions,0,0,0,0,0,0,0,0,0,8754
763,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108654568,https://github.com/rapidsai/cudf/issues/8754#issuecomment-2108654568,https://api.github.com/repos/rapidsai/cudf/issues/8754,2108654568,IC_kwDOBWUGps59r4Po,2024-05-13T19:35:06Z,2024-05-13T19:35:06Z,CONTRIBUTOR,"The original snippet no longer works exactly as expected because None cannot be assigned directly to the value of a column and needs to be wrapped in a list (or as in the pandas assignment, assigned to a specific element). However, with that fix the underlying issue no longer persists, but it's because copy/view semantics are different and we don't modify in place at all (note that the parent is unchanged in the cudf case)
```
In [1]: import cudf                                                                                                                                                                                         
   ...: import pandas as pd                                                                                                                                                                                 
   ...:                                                                                                                                                                                                     
   ...: cudf0 = cudf.DataFrame([[1.], [2.]], columns=[""A""])                       
   ...: cudf1 = cudf0[:1]                          
   ...: cudf1[""A""][0] = None  
   ...:                                            
   ...: print(""cuDF (parent):"")                                                                                                                                                                             
   ...: print(cudf0, end='\n\n')                                                                      
   ...: print(""cuDF (view):"")                                                                                                                                                                               
   ...: print(cudf1, end='\n\n')                                                                      
   ...:             
   ...: pd0 = pd.DataFrame([[1.], [2.]], columns=[""A""])    
   ...: pd1 = pd0[:1]                                                                                 
   ...: pd1[""A""][0] = None                                                                            
   ...:                                                                                                                                                                                                     
   ...: print(""pandas (parent):"")
   ...: print(pd0, end='\n\n')                                                                        
   ...: print(""pandas (view):"")
   ...: print(pd1, end='\n\n')
cuDF (parent):
     A                                             
0  1.0        
1  2.0                                        
                                                   
cuDF (view):                                                                                                                                                                                                
      A                                            
0  <NA>                                       
                                                                                                      
<ipython-input-1-6df2d8c7d8ef>:15: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to updat
e the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df[""col""][row_indexer] = value

Use `df.loc[row_indexer, ""col""] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  pd1[""A""][0] = None
<ipython-input-1-6df2d8c7d8ef>:15: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  pd1[""A""][0] = None
pandas (parent):
     A
0  NaN
1  2.0

pandas (view):
    A
0 NaN
```

With copy-on-write on, I see a different issue in cudf because it seems like we are modifying something that we shouldn't:
```
In [1]: import cudf
   ...: cudf.set_option(""copy_on_write"", True)
   ...: import pandas as pd
   ...: pd.options.mode.copy_on_write = True
   ...: 
   ...: cudf0 = cudf.DataFrame([[1.], [2.]], columns=[""A""])
   ...: cudf1 = cudf0[:1]
   ...: cudf1[""A""][0] = None
   ...: 
   ...: print(""cuDF (parent):"")
   ...: print(cudf0, end='\n\n')
   ...: print(""cuDF (view):"")
   ...: print(cudf1, end='\n\n')
   ...: 
   ...: pd0 = pd.DataFrame([[1.], [2.]], columns=[""A""])
   ...: pd1 = pd0[:1]
   ...: pd1[""A""][0] = None
   ...: 
   ...: print(""pandas (parent):"")
   ...: print(pd0, end='\n\n')
   ...: print(""pandas (view):"")
   ...: print(pd1, end='\n\n')
   ...: 
cuDF (parent):
     A
0  1.0
1  2.0

cuDF (view):
      A
0  <NA>

<ipython-input-1-6f655a450cfc>:17: ChainedAssignmentError: A value is trying to be set on a copy of a DataFrame or Series through chained assignment.
When using the Copy-on-Write mode, such chained assignment never works to update the original DataFrame or Series, because the intermediate object on which we are setting values always behaves as a copy.

Try using '.loc[row_indexer, col_indexer] = value' instead, to perform the assignment in a single step.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  pd1[""A""][0] = None
pandas (parent):
     A
0  1.0
1  2.0

pandas (view):
     A
0  1.0
```

Note that the so-called ""cuDF view"" contains NA, which I believe is unexpected here. With copy-on-write on, `cudf1[""A""][0] = None` should have meant that `cudf1[""A""]` is copied the moment element 0 is assigned to. If I'm reading this right, it indicates a bug in cudf's copy-on-write implementation that we should address.

CC @galipremsagar 
",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108654568/reactions,0,0,0,0,0,0,0,0,0,8754
764,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109130824,https://github.com/rapidsai/cudf/issues/8754#issuecomment-2109130824,https://api.github.com/repos/rapidsai/cudf/issues/8754,2109130824,IC_kwDOBWUGps59tshI,2024-05-14T01:55:18Z,2024-05-14T01:55:18Z,CONTRIBUTOR,"Yes, I think it is a bug. I can take a look at it for next release (24.08). Can you create an issue for it and assign it to me, Vyas?",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109130824/reactions,0,0,0,0,0,0,0,0,0,8754
765,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113622469,https://github.com/rapidsai/cudf/issues/8754#issuecomment-2113622469,https://api.github.com/repos/rapidsai/cudf/issues/8754,2113622469,IC_kwDOBWUGps59-1HF,2024-05-15T23:04:07Z,2024-05-15T23:04:07Z,CONTRIBUTOR,Any reason that we can't just use this issue? I've assigned it to you now.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113622469/reactions,0,0,0,0,0,0,0,0,0,8754
766,https://api.github.com/repos/rapidsai/cudf/issues/comments/882832523,https://github.com/rapidsai/cudf/issues/8774#issuecomment-882832523,https://api.github.com/repos/rapidsai/cudf/issues/8774,882832523,IC_kwDOBWUGps40nvSL,2021-07-19T20:18:57Z,2021-07-19T20:18:57Z,CONTRIBUTOR,How would you communicate this situation from inside the kernel to Python in order to throw? ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/882832523/reactions,0,0,0,0,0,0,0,0,0,8774
767,https://api.github.com/repos/rapidsai/cudf/issues/comments/883393570,https://github.com/rapidsai/cudf/issues/8774#issuecomment-883393570,https://api.github.com/repos/rapidsai/cudf/issues/8774,883393570,IC_kwDOBWUGps40p4Qi,2021-07-20T13:29:17Z,2021-07-20T13:29:17Z,CONTRIBUTOR,"> How would you communicate this situation from inside the kernel to Python in order to throw?

Numba writes the PTX functions such that the return value of the actual logical operation is returned through the functions first parameter. This leaves the actual return value of the function available to signal an exception. What we'd do is make it so that when this situation is detected, the thread in question returns a nonzero exit code, and then IIUC numba already has most of the machinery needed to scan the results, look up any nonzero codes and if necessary propagate an exception to the user. 

This comes with a perf penalty of course which definitely needs really good benchmarking, but I speculate it may not make a noticeable difference after everything is said and done in python. 

cc @gmarkall who can hopefully correct anything I just said. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/883393570/reactions,0,0,0,0,0,0,0,0,0,8774
768,https://api.github.com/repos/rapidsai/cudf/issues/comments/883435398,https://github.com/rapidsai/cudf/issues/8774#issuecomment-883435398,https://api.github.com/repos/rapidsai/cudf/issues/8774,883435398,IC_kwDOBWUGps40qCeG,2021-07-20T14:22:50Z,2021-07-20T14:22:50Z,CONTRIBUTOR,"What @brandon-b-miller said is correct, but there are some changes that would be needed in Numba to properly support this, because:

- Numba only checks for exceptions and reports them back in the kernel when `debug=True` is passed to the `@cuda.jit` decorator
- Passing `debug=True` requires optimization to be turned off, because NVVM technically doesn't support optimization and emitting debug info (see e.g. numba/numba#7214) - it works most of the time, but sometimes NVVM segfaults, which is not very desirable.

Ideally we need a new kwarg for Numba's `@cuda.jit` decorator (something like `check_exceptions=True`) that we can use to get Numba to generate the exception-checking code, but without enabling all the other debuginfo generation.",,gmarkall,535640,MDQ6VXNlcjUzNTY0MA==,https://avatars.githubusercontent.com/u/535640?v=4,,https://api.github.com/users/gmarkall,https://github.com/gmarkall,https://api.github.com/users/gmarkall/followers,https://api.github.com/users/gmarkall/following{/other_user},https://api.github.com/users/gmarkall/gists{/gist_id},https://api.github.com/users/gmarkall/starred{/owner}{/repo},https://api.github.com/users/gmarkall/subscriptions,https://api.github.com/users/gmarkall/orgs,https://api.github.com/users/gmarkall/repos,https://api.github.com/users/gmarkall/events{/privacy},https://api.github.com/users/gmarkall/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/883435398/reactions,0,0,0,0,0,0,0,0,0,8774
769,https://api.github.com/repos/rapidsai/cudf/issues/comments/1021217501,https://github.com/rapidsai/cudf/issues/8774#issuecomment-1021217501,https://api.github.com/repos/rapidsai/cudf/issues/8774,1021217501,IC_kwDOBWUGps483ord,2022-01-25T14:07:35Z,2022-01-25T14:07:35Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1021217501/reactions,0,0,0,0,0,0,0,0,0,8774
770,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317991,https://github.com/rapidsai/cudf/issues/8795#issuecomment-969317991,https://api.github.com/repos/rapidsai/cudf/issues/8795,969317991,IC_kwDOBWUGps45xp5n,2021-11-15T21:03:05Z,2021-11-15T21:03:05Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317991/reactions,0,0,0,0,0,0,0,0,0,8795
771,https://api.github.com/repos/rapidsai/cudf/issues/comments/969336847,https://github.com/rapidsai/cudf/issues/8795#issuecomment-969336847,https://api.github.com/repos/rapidsai/cudf/issues/8795,969336847,IC_kwDOBWUGps45xugP,2021-11-15T21:26:22Z,2021-11-15T21:26:22Z,MEMBER,Still desired for this to be fixed.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969336847/reactions,0,0,0,0,0,0,0,0,0,8795
772,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450180,https://github.com/rapidsai/cudf/issues/8795#issuecomment-1038450180,https://api.github.com/repos/rapidsai/cudf/issues/8795,1038450180,IC_kwDOBWUGps495X4E,2022-02-13T22:03:57Z,2022-02-13T22:03:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450180/reactions,0,0,0,0,0,0,0,0,0,8795
773,https://api.github.com/repos/rapidsai/cudf/issues/comments/1039150766,https://github.com/rapidsai/cudf/issues/8795#issuecomment-1039150766,https://api.github.com/repos/rapidsai/cudf/issues/8795,1039150766,IC_kwDOBWUGps498C6u,2022-02-14T14:28:05Z,2022-02-14T14:28:05Z,MEMBER,Still desired.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1039150766/reactions,0,0,0,0,0,0,0,0,0,8795
774,https://api.github.com/repos/rapidsai/cudf/issues/comments/883737673,https://github.com/rapidsai/cudf/issues/8801#issuecomment-883737673,https://api.github.com/repos/rapidsai/cudf/issues/8801,883737673,IC_kwDOBWUGps40rMRJ,2021-07-20T22:05:35Z,2021-07-20T22:05:35Z,NONE,"**Describe the bug**
The workaround mentioned by @aerdem4 isn't working anymore.

This workaround isn't working

```
indices = cudf.MultiIndex.from_product([data_df.to_pandas().index.levels[0], np.arange(0,600)], names = ['time_id', 'seconds_in_bucket'])
data_df = cudf.DataFrame().set_index(indices).join(data_df, how=""left"").fillna(method='ffill').reset_index(drop=True)
```

[Kaggle notebook](https://www.kaggle.com/medali1992/optiver-train-dataset) mentioned above.

**Environment overview (please complete the following information)**
Kaggle GPU Docker, RAPIDS 21.06",,medAli-ai,42294664,MDQ6VXNlcjQyMjk0NjY0,https://avatars.githubusercontent.com/u/42294664?v=4,,https://api.github.com/users/medAli-ai,https://github.com/medAli-ai,https://api.github.com/users/medAli-ai/followers,https://api.github.com/users/medAli-ai/following{/other_user},https://api.github.com/users/medAli-ai/gists{/gist_id},https://api.github.com/users/medAli-ai/starred{/owner}{/repo},https://api.github.com/users/medAli-ai/subscriptions,https://api.github.com/users/medAli-ai/orgs,https://api.github.com/users/medAli-ai/repos,https://api.github.com/users/medAli-ai/events{/privacy},https://api.github.com/users/medAli-ai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/883737673/reactions,0,0,0,0,0,0,0,0,0,8801
775,https://api.github.com/repos/rapidsai/cudf/issues/comments/884254241,https://github.com/rapidsai/cudf/issues/8801#issuecomment-884254241,https://api.github.com/repos/rapidsai/cudf/issues/8801,884254241,IC_kwDOBWUGps40tKYh,2021-07-21T14:53:49Z,2021-07-21T14:53:49Z,CONTRIBUTOR,Thanks for reporting -- could you please point us to the `parquet` file being referenced in the code snippet above?,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884254241/reactions,0,0,0,0,0,0,0,0,0,8801
776,https://api.github.com/repos/rapidsai/cudf/issues/comments/884277409,https://github.com/rapidsai/cudf/issues/8801#issuecomment-884277409,https://api.github.com/repos/rapidsai/cudf/issues/8801,884277409,IC_kwDOBWUGps40tQCh,2021-07-21T15:23:31Z,2021-07-21T15:23:31Z,NONE,"Hi @shwina ,

You just need to click on this [link](https://www.kaggle.com/medali1992/optiver-train-dataset/edit/run/68651140).
This is a kaggle notebook I created solely for this issue.
You need to create a kaggle account and you are good to go.
To enable **GPU** on kaggle notebook, just press the button **Accelerator** on the right below Environment preferences.

And to use the notebook you need to press the **edit and copy** button on the right of the screen.

Hope the explanation is helpful.

",,medAli-ai,42294664,MDQ6VXNlcjQyMjk0NjY0,https://avatars.githubusercontent.com/u/42294664?v=4,,https://api.github.com/users/medAli-ai,https://github.com/medAli-ai,https://api.github.com/users/medAli-ai/followers,https://api.github.com/users/medAli-ai/following{/other_user},https://api.github.com/users/medAli-ai/gists{/gist_id},https://api.github.com/users/medAli-ai/starred{/owner}{/repo},https://api.github.com/users/medAli-ai/subscriptions,https://api.github.com/users/medAli-ai/orgs,https://api.github.com/users/medAli-ai/repos,https://api.github.com/users/medAli-ai/events{/privacy},https://api.github.com/users/medAli-ai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884277409/reactions,0,0,0,0,0,0,0,0,0,8801
777,https://api.github.com/repos/rapidsai/cudf/issues/comments/884278892,https://github.com/rapidsai/cudf/issues/8801#issuecomment-884278892,https://api.github.com/repos/rapidsai/cudf/issues/8801,884278892,IC_kwDOBWUGps40tQZs,2021-07-21T15:25:30Z,2021-07-21T15:25:30Z,NONE,Here is the [link](https://www.kaggle.com/c/optiver-realized-volatility-prediction/data) of the whole parquet dataset used in the competition.,,medAli-ai,42294664,MDQ6VXNlcjQyMjk0NjY0,https://avatars.githubusercontent.com/u/42294664?v=4,,https://api.github.com/users/medAli-ai,https://github.com/medAli-ai,https://api.github.com/users/medAli-ai/followers,https://api.github.com/users/medAli-ai/following{/other_user},https://api.github.com/users/medAli-ai/gists{/gist_id},https://api.github.com/users/medAli-ai/starred{/owner}{/repo},https://api.github.com/users/medAli-ai/subscriptions,https://api.github.com/users/medAli-ai/orgs,https://api.github.com/users/medAli-ai/repos,https://api.github.com/users/medAli-ai/events{/privacy},https://api.github.com/users/medAli-ai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/884278892/reactions,0,0,0,0,0,0,0,0,0,8801
778,https://api.github.com/repos/rapidsai/cudf/issues/comments/885720122,https://github.com/rapidsai/cudf/issues/8801#issuecomment-885720122,https://api.github.com/repos/rapidsai/cudf/issues/8801,885720122,IC_kwDOBWUGps40ywQ6,2021-07-23T15:29:58Z,2021-07-23T15:29:58Z,MEMBER,"Thanks for the additional context and links. Is there perhaps a direct link to the data, outside of Kaggle?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/885720122/reactions,0,0,0,0,0,0,0,0,0,8801
779,https://api.github.com/repos/rapidsai/cudf/issues/comments/885724639,https://github.com/rapidsai/cudf/issues/8801#issuecomment-885724639,https://api.github.com/repos/rapidsai/cudf/issues/8801,885724639,IC_kwDOBWUGps40yxXf,2021-07-23T15:36:59Z,2021-07-23T15:36:59Z,NONE,"I can put the data into my google drive and share it with you if you want and besides you could download them from the kaggle website.
Just create an account, sign in for the competition and you are good to go.",,medAli-ai,42294664,MDQ6VXNlcjQyMjk0NjY0,https://avatars.githubusercontent.com/u/42294664?v=4,,https://api.github.com/users/medAli-ai,https://github.com/medAli-ai,https://api.github.com/users/medAli-ai/followers,https://api.github.com/users/medAli-ai/following{/other_user},https://api.github.com/users/medAli-ai/gists{/gist_id},https://api.github.com/users/medAli-ai/starred{/owner}{/repo},https://api.github.com/users/medAli-ai/subscriptions,https://api.github.com/users/medAli-ai/orgs,https://api.github.com/users/medAli-ai/repos,https://api.github.com/users/medAli-ai/events{/privacy},https://api.github.com/users/medAli-ai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/885724639/reactions,0,0,0,0,0,0,0,0,0,8801
780,https://api.github.com/repos/rapidsai/cudf/issues/comments/885725805,https://github.com/rapidsai/cudf/issues/8801#issuecomment-885725805,https://api.github.com/repos/rapidsai/cudf/issues/8801,885725805,IC_kwDOBWUGps40yxpt,2021-07-23T15:38:55Z,2021-07-23T15:38:55Z,NONE,Because you can't work with the data unless you accept the terms of the competiton,,medAli-ai,42294664,MDQ6VXNlcjQyMjk0NjY0,https://avatars.githubusercontent.com/u/42294664?v=4,,https://api.github.com/users/medAli-ai,https://github.com/medAli-ai,https://api.github.com/users/medAli-ai/followers,https://api.github.com/users/medAli-ai/following{/other_user},https://api.github.com/users/medAli-ai/gists{/gist_id},https://api.github.com/users/medAli-ai/starred{/owner}{/repo},https://api.github.com/users/medAli-ai/subscriptions,https://api.github.com/users/medAli-ai/orgs,https://api.github.com/users/medAli-ai/repos,https://api.github.com/users/medAli-ai/events{/privacy},https://api.github.com/users/medAli-ai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/885725805/reactions,0,0,0,0,0,0,0,0,0,8801
781,https://api.github.com/repos/rapidsai/cudf/issues/comments/886798499,https://github.com/rapidsai/cudf/issues/8801#issuecomment-886798499,https://api.github.com/repos/rapidsai/cudf/issues/8801,886798499,IC_kwDOBWUGps4023ij,2021-07-26T15:22:14Z,2021-07-26T15:22:14Z,CONTRIBUTOR,"Hi @medAli-ai - thanks again. Are you able to reproduce the issue on a smaller dataset, or better yet, independent of any particular dataset? That would greatly help us triage and resolve the problem.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/886798499/reactions,0,0,0,0,0,0,0,0,0,8801
782,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317928,https://github.com/rapidsai/cudf/issues/8801#issuecomment-969317928,https://api.github.com/repos/rapidsai/cudf/issues/8801,969317928,IC_kwDOBWUGps45xp4o,2021-11-15T21:03:02Z,2021-11-15T21:03:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317928/reactions,0,0,0,0,0,0,0,0,0,8801
783,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108884453,https://github.com/rapidsai/cudf/issues/8801#issuecomment-2108884453,https://api.github.com/repos/rapidsai/cudf/issues/8801,2108884453,IC_kwDOBWUGps59swXl,2024-05-13T22:07:07Z,2024-05-13T22:07:07Z,CONTRIBUTOR,"This is not a MultiIndex issue, it's a data type issue.

Here is a minimal example that reproduces the problem without requiring the Kaggle dataset:
```
dtype = ""int16""
# dtype = ""int64"" # We get the expected output if we uncomment this line

data_df = cudf.DataFrame({
    ""time_id"": cudf.Series([5, 5, 5, 5, 5], dtype=dtype),
    ""seconds_in_bucket"": cudf.Series([0, 1, 5, 6, 7], dtype=dtype)
})

offsets = data_df.groupby(
    ['time_id'], as_index=False
).agg(
    {'seconds_in_bucket':'min'}
).reset_index(drop=True)
offsets.columns = ['time_id', 'offset']
data_df = cudf.merge(data_df, offsets, on = ['time_id'], how = 'left')
data_df = data_df.set_index(['time_id', 'seconds_in_bucket'])
columns = [col for col in data_df.columns.values]
midx = cudf.MultiIndex.from_product(
    [data_df.to_pandas().index.levels[0], np.arange(0,5)],
    names=['time_id', 'seconds_in_bucket']
)
data_df = data_df.reindex(midx, columns=columns).fillna(method='ffill').reset_index()
print(data_df['offset'])
```

Note that in the second line I don't observe the same issue with NaNs if I change the type. So what is happening?

Here is a stripped down example that demonstrates the problem
```
import cudf as pd
# import pandas as pd  # This works

starting_dtype = ""int16""
# starting_dtype = ""int64""  # This works
idx = pd.Series([0, 1, 2, 3, 4], dtype=starting_dtype)
data_df = pd.DataFrame({
    ""a"": idx,
    ""b"": [0, 1, 5, 6, 7]
}).set_index([""a""])
data_df = data_df.reindex(idx.astype(""int64"")).fillna(method='ffill')
assert data_df[""b""].isna().sum() == 0
```

The issue is that that in the dataset in question, the index columns are int16 columns, whereas the MultiIndex used for reindexing contains a int64 columns by virtue of the `np.arange` call. The smaller example above demonstrates that directly. In order to match pandas here we should be upcasting to handle a merge correctly. Under the hood reindexing involves a merge, so I think that this issue ultimately boils down to something like https://github.com/rapidsai/cudf/issues/14594.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108884453/reactions,0,0,0,0,0,0,0,0,0,8801
784,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108903682,https://github.com/rapidsai/cudf/issues/8801#issuecomment-2108903682,https://api.github.com/repos/rapidsai/cudf/issues/8801,2108903682,IC_kwDOBWUGps59s1EC,2024-05-13T22:23:22Z,2024-05-13T22:23:22Z,CONTRIBUTOR,@wence- @mroeschke do you have any thoughts on if/how we should be addressing the above?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108903682/reactions,0,0,0,0,0,0,0,0,0,8801
785,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109763557,https://github.com/rapidsai/cudf/issues/8801#issuecomment-2109763557,https://api.github.com/repos/rapidsai/cudf/issues/8801,2109763557,IC_kwDOBWUGps59wG_l,2024-05-14T09:48:31Z,2024-05-14T09:48:31Z,CONTRIBUTOR,"Merging already upcasts to a common dtype, so the problem is in reindexing, which has an explicit carve-out for whether the types in the left and right indices match:

```
# indexed_frame.py:_reindex
            idx_dtype_match = (df.index.nlevels == index.nlevels) and all(
                _is_same_dtype(left_dtype, right_dtype)
                for left_dtype, right_dtype in zip(
                    (col.dtype for col in df.index._data.columns),
                    (col.dtype for col in index._data.columns),
                )
            )

```

I think a good place to start would be to consolidate all of the dtype-matching/promotion utilities in one place. One of the whack-a-mole issues here is that right now we haven't codified anywhere the dtype promotion and matching rules (either in code or docs), so all of these different places have _sui generis_ implementations that don't necessarily agree with each other.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109763557/reactions,0,0,0,0,0,0,0,0,0,8801
786,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113621266,https://github.com/rapidsai/cudf/issues/8801#issuecomment-2113621266,https://api.github.com/repos/rapidsai/cudf/issues/8801,2113621266,IC_kwDOBWUGps59-00S,2024-05-15T23:02:48Z,2024-05-15T23:02:48Z,CONTRIBUTOR,"Good catch, thanks for pointing that out. We could definitely get a lot of mileage out of standardizing more of these kinds of internal helper logic functions.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113621266/reactions,0,0,0,0,0,0,0,0,0,8801
787,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317889,https://github.com/rapidsai/cudf/issues/8854#issuecomment-969317889,https://api.github.com/repos/rapidsai/cudf/issues/8854,969317889,IC_kwDOBWUGps45xp4B,2021-11-15T21:02:58Z,2021-11-15T21:02:58Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317889/reactions,0,0,0,0,0,0,0,0,0,8854
788,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319641,https://github.com/rapidsai/cudf/issues/8964#issuecomment-969319641,https://api.github.com/repos/rapidsai/cudf/issues/8964,969319641,IC_kwDOBWUGps45xqTZ,2021-11-15T21:04:49Z,2021-11-15T21:04:49Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319641/reactions,0,0,0,0,0,0,0,0,0,8964
789,https://api.github.com/repos/rapidsai/cudf/issues/comments/998407795,https://github.com/rapidsai/cudf/issues/8964#issuecomment-998407795,https://api.github.com/repos/rapidsai/cudf/issues/8964,998407795,IC_kwDOBWUGps47gn5z,2021-12-21T02:03:43Z,2021-12-21T02:03:43Z,CONTRIBUTOR,This is still required,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/998407795/reactions,0,0,0,0,0,0,0,0,0,8964
790,https://api.github.com/repos/rapidsai/cudf/issues/comments/1148129111,https://github.com/rapidsai/cudf/issues/8964#issuecomment-1148129111,https://api.github.com/repos/rapidsai/cudf/issues/8964,1148129111,IC_kwDOBWUGps5Ebw9X,2022-06-07T02:36:13Z,2022-06-07T02:36:13Z,CONTRIBUTOR,"This code snippet demonstrates some behavior with NaNs that I investigated with @rwlee. tl;dr Spark treats NaN the same in binary operators `<, <=, ==, ...` as in the comparators `<, ==` used for sorting and equality. This follows the rules in #4760 but with elementwise comparison of structs.

<details><summary>Show snippet</summary>

Save as `binops.scala` and run with: `$ spark-shell -i binops.scala`

```scala
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{DoubleType, StructType}
import org.apache.spark.sql.Row

val schema = new StructType()
  .add(""struct1"", new StructType()
    .add(""x"", DoubleType)
    .add(""y"", DoubleType))
  .add(""struct2"", new StructType()
    .add(""x"", DoubleType)
    .add(""y"", DoubleType))

val v1 = 1.0
val v2 = Double.NaN

val structData = Seq(
  Row(Row(v1, v1), Row(v1, v1)),
  Row(Row(v1, v1), Row(v1, v2)),
  Row(Row(v1, v1), Row(v2, v1)),
  Row(Row(v1, v1), Row(v2, v2)),
  Row(Row(v1, v2), Row(v1, v1)),
  Row(Row(v1, v2), Row(v1, v2)),
  Row(Row(v1, v2), Row(v2, v1)),
  Row(Row(v1, v2), Row(v2, v2)),
  Row(Row(v2, v1), Row(v1, v1)),
  Row(Row(v2, v1), Row(v1, v2)),
  Row(Row(v2, v1), Row(v2, v1)),
  Row(Row(v2, v1), Row(v2, v2)),
  Row(Row(v2, v2), Row(v1, v1)),
  Row(Row(v2, v2), Row(v1, v2)),
  Row(Row(v2, v2), Row(v2, v1)),
  Row(Row(v2, v2), Row(v2, v2)),
)

val df = spark.createDataFrame(
  spark.sparkContext.parallelize(structData), schema)
df.printSchema()
df.show(false)

val df2 = df.selectExpr(""struct1"", ""struct2"", ""struct1 < struct2"", ""struct1 <= struct2"", ""struct1 == struct2"")
df2.printSchema()
df2.show(false)
```

</details>

<details><summary>Show output</summary>

This is the relevant part of the output for understanding NaN behavior.

```
+----------+----------+-------------------+--------------------+-------------------+
|struct1   |struct2   |(struct1 < struct2)|(struct1 <= struct2)|(struct1 = struct2)|
+----------+----------+-------------------+--------------------+-------------------+
|{1.0, 1.0}|{1.0, 1.0}|false              |true                |true               |
|{1.0, 1.0}|{1.0, NaN}|true               |true                |false              |
|{1.0, 1.0}|{NaN, 1.0}|true               |true                |false              |
|{1.0, 1.0}|{NaN, NaN}|true               |true                |false              |
|{1.0, NaN}|{1.0, 1.0}|false              |false               |false              |
|{1.0, NaN}|{1.0, NaN}|false              |true                |true               |
|{1.0, NaN}|{NaN, 1.0}|true               |true                |false              |
|{1.0, NaN}|{NaN, NaN}|true               |true                |false              |
|{NaN, 1.0}|{1.0, 1.0}|false              |false               |false              |
|{NaN, 1.0}|{1.0, NaN}|false              |false               |false              |
|{NaN, 1.0}|{NaN, 1.0}|false              |true                |true               |
|{NaN, 1.0}|{NaN, NaN}|true               |true                |false              |
|{NaN, NaN}|{1.0, 1.0}|false              |false               |false              |
|{NaN, NaN}|{1.0, NaN}|false              |false               |false              |
|{NaN, NaN}|{NaN, 1.0}|false              |false               |false              |
|{NaN, NaN}|{NaN, NaN}|false              |true                |true               |
+----------+----------+-------------------+--------------------+-------------------+
```

</details>",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1148129111/reactions,0,0,0,0,0,0,0,0,0,8964
791,https://api.github.com/repos/rapidsai/cudf/issues/comments/944409814,https://github.com/rapidsai/cudf/issues/8974#issuecomment-944409814,https://api.github.com/repos/rapidsai/cudf/issues/8974,944409814,IC_kwDOBWUGps44SozW,2021-10-15T15:51:55Z,2021-10-15T15:51:55Z,CONTRIBUTOR,This issue should cover the previous one: https://github.com/rapidsai/cudf/issues/7995,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/944409814/reactions,0,0,0,0,0,0,0,0,0,8974
792,https://api.github.com/repos/rapidsai/cudf/issues/comments/982715097,https://github.com/rapidsai/cudf/issues/8974#issuecomment-982715097,https://api.github.com/repos/rapidsai/cudf/issues/8974,982715097,IC_kwDOBWUGps46kwrZ,2021-11-30T14:58:05Z,2021-11-30T14:58:05Z,CONTRIBUTOR,"Currently, there are two more places we need to support struct `min` and `max` ops:
  * Hash-based groupby aggregates
  * Window ops

In these places, currently the internal functions call a kernel very early, which prohibits injecting any additional host function call. As such, supporting structs in those functions requires refactoring the entire computation pipeline. Thus, supporting structs in them will be postponed until such refactoring is done.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/982715097/reactions,0,0,0,0,0,0,0,0,0,8974
793,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006400752,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006400752,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006400752,IC_kwDOBWUGps47_HTw,2022-01-06T09:15:51Z,2022-01-18T05:05:08Z,CONTRIBUTOR,"@ttnghia What's behavior when comparing struct with null in it?  For example:

 For max value of (2147483647,-930759675) and (2147483647,None), GPU returns (2147483647,None),  but CPU returns (2147483647,-930759675) 
All the configurations are default.

",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006400752/reactions,0,0,0,0,0,0,0,0,0,8974
794,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006594549,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006594549,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006594549,IC_kwDOBWUGps47_2n1,2022-01-06T13:31:00Z,2022-01-18T05:05:02Z,CONTRIBUTOR,"Null is considered as `less` in general (for example: `[null, 1] < [-1, 1]`). Null rows are treated differently. If there are only null rows, the result will be a null row. If there are non-null rows, the result will never be null row but instead be selected from the non-null rows.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006594549/reactions,0,0,0,0,0,0,0,0,0,8974
795,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006600231,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006600231,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006600231,IC_kwDOBWUGps47_4An,2022-01-06T13:40:17Z,2022-01-18T05:04:53Z,CONTRIBUTOR,"> @ttnghia What's behavior when comparing struct with null in it? For example:
> 
> For max value of (2147483647,-930759675) and (2147483647,None), GPU returns (2147483647,None), but CPU returns (2147483647,-930759675).

As from my test, I got different GPU exec result:
```
scala> import org.apache.spark.sql.types._
scala> import org.apache.spark.sql.Row
scala> val data = Seq(Row(1, Row(2147483647, -930759675)), Row(1, Row(2147483647, null)))
scala> val struct = StructType(Seq(StructField(""b"", IntegerType), StructField(""a"", StructType(Seq(StructField(""a_1"", IntegerType), StructField(""a_2"", IntegerType))))))
scala> val df = spark.createDataFrame(spark.sparkContext.parallelize(data), struct)

scala> df.show
+---+--------------------+
|  b|                   a|
+---+--------------------+
|  1|{2147483647, -930...|
|  1|  {2147483647, null}|
+---+--------------------+


scala> df.selectExpr(""max(a)"", ""min(a)"").show()
+--------------------+------------------+
|              max(a)|            min(a)|
+--------------------+------------------+
|{2147483647, -930...|{2147483647, null}|
+--------------------+------------------+

```",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006600231/reactions,0,0,0,0,0,0,0,0,0,8974
796,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006634705,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006634705,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006634705,IC_kwDOBWUGps48AAbR,2022-01-06T14:29:31Z,2022-01-18T05:04:45Z,CONTRIBUTOR,"I got the following result on CPU, the min value is different from yours.
Seems the Spark uses nulls first sorting.

Code is like you mentioned.
```
var ret = null
for each value
    compare by nulls first sorting (current, ret)
    if satisfies,  ret = current
return ret
```

detail log
```
$./spark-3.1.2-bin-hadoop3.2/bin/spark-shell 
scala> import org.apache.spark.sql.types._
import org.apache.spark.sql.types._

scala> import org.apache.spark.sql.Row
import org.apache.spark.sql.Row

scala> val data = Seq(Row(1, Row(2147483647, -930759675)), Row(1, Row(2147483647, null)))
data: Seq[org.apache.spark.sql.Row] = List([1,[2147483647,-930759675]], [1,[2147483647,null]])

scala> val struct = StructType(Seq(StructField(""b"", IntegerType), StructField(""a"", StructType(Seq(StructField(""a_1"", IntegerType), StructField(""a_2"", IntegerType))))))
struct: org.apache.spark.sql.types.StructType = StructType(StructField(b,IntegerType,true), StructField(a,StructType(StructField(a_1,IntegerType,true), StructField(a_2,IntegerType,true)),true))

scala> val df = spark.createDataFrame(spark.sparkContext.parallelize(data), struct)
df: org.apache.spark.sql.DataFrame = [b: int, a: struct<a_1: int, a_2: int>]

scala> df.show
+---+--------------------+                                                      
|  b|                   a|
+---+--------------------+
|  1|{2147483647, -930...|
|  1|  {2147483647, null}|
+---+--------------------+


scala> df.selectExpr(""max(a)"", ""min(a)"").show()
+--------------------+------------------+
|              max(a)|            min(a)|
+--------------------+------------------+
|{2147483647, -930...|{2147483647, null}|
+--------------------+------------------+


```",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006634705/reactions,0,0,0,0,0,0,0,0,0,8974
797,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006647237,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006647237,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006647237,IC_kwDOBWUGps48ADfF,2022-01-06T14:46:04Z,2022-01-18T05:04:38Z,CONTRIBUTOR,"Sorry didn't pull the latest branch. I updated the result above --- the same as your.
Nevertheless, the max value is always correct, not like what you mentioned.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006647237/reactions,0,0,0,0,0,0,0,0,0,8974
798,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006659513,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006659513,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006659513,IC_kwDOBWUGps48AGe5,2022-01-06T15:02:11Z,2022-01-18T05:04:33Z,CONTRIBUTOR,"When grouping, the max value is wrong

```
(base) [chong@chong-pc spark-rapids]$ $SPARK_HOME/bin/pyspark --master local[*] \
> --conf spark.executor.cores=12 \
> --driver-memory 40G  \
> --executor-memory 10G  \
> --conf spark.eventLog.enabled=true --conf spark.eventLog.dir=file:/tmp/spark-history \
> --conf spark.executor.extraClassPath=${ML_JAR}:${SPARK_CUDF_JAR}:${SPARK_RAPIDS_PLUGIN_JAR} \
> --conf spark.driver.extraClassPath=${ML_JAR}:${SPARK_CUDF_JAR}:${SPARK_RAPIDS_PLUGIN_JAR} \
> --jars ${SPARK_CUDF_JAR},${SPARK_RAPIDS_PLUGIN_JAR} \
> --conf spark.plugins=com.nvidia.spark.SQLPlugin \
> --conf spark.rapids.sql.enabled=true \
> --conf spark.rapids.memory.pinnedPool.size=1G \
> --conf spark.rapids.memory.gpu.allocFraction=0.35 \
> --conf spark.rapids.memory.gpu.maxAllocFraction=0.6 \
> --conf spark.rapids.memory.gpu.pooling.enabled=false \
> --conf spark.rapids.memory.gpu.pool=NONE \
> --conf spark.rapids.sql.explain=ALL \
> --conf spark.executor.extraJavaOptions=""-Dai.rapids.cudf.nvtx.enabled=true"" \
> --conf spark.driver.extraJavaOptions=""-Dai.rapids.cudf.nvtx.enabled=true""
Python 3.8.8 (default, Apr 13 2021, 19:58:26) 
[GCC 7.3.0] :: Anaconda, Inc. on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
22/01/06 22:57:14 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to ""WARN"".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
22/01/06 22:57:15 WARN RapidsPluginUtils: RAPIDS Accelerator 22.02.0-SNAPSHOT using cudf 22.02.0-SNAPSHOT. To disable GPU support set `spark.rapids.sql.enabled` to false


22/01/06 22:57:19 WARN Plugin: Installing rapids UDF compiler extensions to Spark. The compiler is disabled by default. To enable it, set `spark.rapids.sql.udfCompiler.enabled` to true
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /__ / .__/\_,_/_/ /_/\_\   version 3.0.1
      /_/

Using Python version 3.8.8 (default, Apr 13 2021 19:58:26)
SparkSession available as 'spark'.
>>> 
>>> 
>>> 
>>> from pyspark.sql.types import *
>>> schema = StructType([
...     StructField(""a"", 
...         StructType([
...             StructField(""aa"", IntegerType()),
...             StructField(""ab"", IntegerType()),
...         ])),
...     StructField(""b"", IntegerType()),
... ])
>>> 
>>> 
>>> data = [
...     ((2147483647,-930759675),1773868988),
...     ((2147483647,None),1773868988),
... ]
>>> 
>>> df = spark.createDataFrame(
...         SparkContext.getOrCreate().parallelize(data, numSlices=1),
...         schema)
>>> 
>>> df.createOrReplaceTempView(""t"")
>>> 
>>> spark.conf.set(""spark.rapids.sql.enabled"", True)
>>> spark.sql(""select b, max(a) from t group by b"").show()
22/01/06 22:57:40 WARN GpuOverrides: 
!Exec <CollectLimitExec> cannot run on GPU because the Exec CollectLimitExec has been disabled, and is disabled by default because Collect Limit replacement can be slower on the GPU, if huge number of rows in a batch it could help by limiting the number of rows transferred from GPU to CPU. Set spark.rapids.sql.exec.CollectLimitExec to true if you wish to enable it
  @Partitioning <SinglePartition$> could run on GPU
  *Exec <SortAggregateExec> will run on GPU
    *Expression <AggregateExpression> max(a#0) will run on GPU
      *Expression <Max> max(a#0) will run on GPU
    *Expression <Alias> cast(b#1 as string) AS b#10 will run on GPU
      *Expression <Cast> cast(b#1 as string) will run on GPU
    *Expression <Alias> cast(max(a#0)#4 as string) AS max(a)#11 will run on GPU
      *Expression <Cast> cast(max(a#0)#4 as string) will run on GPU
    #Exec <SortExec> could run on GPU but is going to be removed because replacing sort aggregate with hash aggregate
      #Expression <SortOrder> b#1 ASC NULLS FIRST could run on GPU but is going to be removed because parent plan is removed
      *Exec <ShuffleExchangeExec> will run on GPU
        *Partitioning <HashPartitioning> will run on GPU
        *Exec <SortAggregateExec> will run on GPU
          *Expression <AggregateExpression> partial_max(a#0) will run on GPU
            *Expression <Max> max(a#0) will run on GPU
          #Exec <SortExec> could run on GPU but is going to be removed because replacing sort aggregate with hash aggregate
            #Expression <SortOrder> b#1 ASC NULLS FIRST could run on GPU but is going to be removed because parent plan is removed
            ! <RDDScanExec> cannot run on GPU because GPU does not currently support the operator class org.apache.spark.sql.execution.RDDScanExec
              @Expression <AttributeReference> a#0 could run on GPU
              @Expression <AttributeReference> b#1 could run on GPU

+----------+-------------+                                                      
|         b|       max(a)|
+----------+-------------+
|1773868988|[2147483647,]|
+----------+-------------+

```",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006659513/reactions,0,0,0,0,0,0,0,0,0,8974
799,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006669282,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006669282,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006669282,IC_kwDOBWUGps48AI3i,2022-01-06T15:14:34Z,2022-01-18T05:04:26Z,CONTRIBUTOR,"This is my groupby result:
```
scala> df.groupBy(""b"").agg(max(col(""a"")), min(col(""a""))).show
+---+--------------------+------------------+
|  b|              max(a)|            min(a)|
+---+--------------------+------------------+
|  1|{2147483647, -930...|{2147483647, null}|
+---+--------------------+------------------+
```

Or:
```
scala> spark.sql(""select b, max(a) from t group by b"").show()
+---+--------------------+
|  b|              max(a)|
+---+--------------------+
|  1|{2147483647, -930...|
+---+--------------------+
```

PS: I'm running the latest spark-rapid branch.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006669282/reactions,0,0,0,0,0,0,0,0,0,8974
800,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006674857,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006674857,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006674857,IC_kwDOBWUGps48AKOp,2022-01-06T15:21:45Z,2022-01-18T05:04:20Z,CONTRIBUTOR,"BTW, make sure to enable struct for `min` and `max` expr:
```
diff --git a/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuOverrides.scala b/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuOverrides.scala
index abeb3f1fb..e987d6202 100644
--- a/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuOverrides.scala
+++ b/sql-plugin/src/main/scala/com/nvidia/spark/rapids/GpuOverrides.scala
@@ -2237,9 +2237,12 @@ object GpuOverrides extends Logging {
     expr[Max](
       ""Max aggregate operator"",
       ExprChecks.fullAgg(
-        TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL, TypeSig.orderable,
+        (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL +
+            TypeSig.STRUCT).nested(),
+        TypeSig.orderable,
         Seq(ParamCheck(""input"",
-          (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL)
+          (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL +
+              TypeSig.STRUCT).nested()
               .withPsNote(TypeEnum.DOUBLE, nanAggPsNote)
               .withPsNote(TypeEnum.FLOAT, nanAggPsNote),
           TypeSig.orderable))
@@ -2259,9 +2262,12 @@ object GpuOverrides extends Logging {
     expr[Min](
       ""Min aggregate operator"",
       ExprChecks.fullAgg(
-        TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL, TypeSig.orderable,
+        (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL +
+            TypeSig.STRUCT).nested(),
+        TypeSig.orderable,
         Seq(ParamCheck(""input"",
-          (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL)
+          (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL +
+              TypeSig.STRUCT).nested()
               .withPsNote(TypeEnum.DOUBLE, nanAggPsNote)
               .withPsNote(TypeEnum.FLOAT, nanAggPsNote),
           TypeSig.orderable))
```",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006674857/reactions,0,0,0,0,0,0,0,0,0,8974
801,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006696030,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1006696030,https://api.github.com/repos/rapidsai/cudf/issues/8974,1006696030,IC_kwDOBWUGps48APZe,2022-01-06T15:48:41Z,2022-01-18T05:04:13Z,CONTRIBUTOR,"Enabled: https://github.com/NVIDIA/spark-rapids/pull/4434/files
```
        ExprChecks.reductionAndGroupByAgg(
          // Max supports single level struct, e.g.:  max(struct(string, string))
          (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL + TypeSig.STRUCT)
            .nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL),
          TypeSig.orderable,
          Seq(ParamCheck(""input"",
            (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL + TypeSig.STRUCT)
              .nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128_FULL + TypeSig.NULL)

```
",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006696030/reactions,0,0,0,0,0,0,0,0,0,8974
802,https://api.github.com/repos/rapidsai/cudf/issues/comments/1010838803,https://github.com/rapidsai/cudf/issues/8974#issuecomment-1010838803,https://api.github.com/repos/rapidsai/cudf/issues/8974,1010838803,IC_kwDOBWUGps48QC0T,2022-01-12T09:36:43Z,2022-01-18T05:04:04Z,CONTRIBUTOR,"@ttnghia This case failed: 
```
data = [
    ((None,None),1773868988),
    ((-2147483648,None),1773868988),
]

// GPU
+----------+--------------+--------------+                                      
|         b|        min(a)|        max(a)|
+----------+--------------+--------------+
|1773868988|[-2147483648,]|[-2147483648,]|
+----------+--------------+--------------+

// CPU
+----------+------+--------------+
|         b|min(a)|        max(a)|
+----------+------+--------------+
|1773868988|   [,]|[-2147483648,]|
+----------+------+--------------+
```",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1010838803/reactions,0,0,0,0,0,0,0,0,0,8974
803,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319500,https://github.com/rapidsai/cudf/issues/8987#issuecomment-969319500,https://api.github.com/repos/rapidsai/cudf/issues/8987,969319500,IC_kwDOBWUGps45xqRM,2021-11-15T21:04:41Z,2021-11-15T21:04:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319500/reactions,0,0,0,0,0,0,0,0,0,8987
804,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450141,https://github.com/rapidsai/cudf/issues/8987#issuecomment-1038450141,https://api.github.com/repos/rapidsai/cudf/issues/8987,1038450141,IC_kwDOBWUGps495X3d,2022-02-13T22:03:49Z,2022-02-13T22:03:49Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450141/reactions,0,0,0,0,0,0,0,0,0,8987
805,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108915826,https://github.com/rapidsai/cudf/issues/8987#issuecomment-2108915826,https://api.github.com/repos/rapidsai/cudf/issues/8987,2108915826,IC_kwDOBWUGps59s4By,2024-05-13T22:34:29Z,2024-05-13T22:34:29Z,CONTRIBUTOR,"This still fails for me, but now it fails even earlier, on the pivot call:

<details><summary>Traceback</summary>

```
In [1]: import cudf                        
   ...: df=cudf.DataFrame()                                                                           
   ...: df['src_lat']=[-46.0,-46.0,-46.0, -34.0,-34.0,-34.0, 11.5, 11.5, 11.5]; df['src_long']=df['src_lat']+1
   ...: df['dst_lat']=[-46.0, -34.0,11.5,-46.0, -34.0,11.5,-46.0, -34.0,11.5];df['dst_long']=df['dst_lat']+1
   ...: df['val']=[0.1,0.2,0.1,0.3,0.2,0.1,0.3,0.3,0.1]                                  
   ...: df = df.pivot(index=['src_lat', 'src_long'], columns=['dst_lat', 'dst_long'], values=['val'])
   ...: df.columns = df.index
   ...: df.drop([(11.5, 12.5), (-46.0, -45.0)])                                                       
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[1], line 6         
      4 df['dst_lat']=[-46.0, -34.0,11.5,-46.0, -34.0,11.5,-46.0, -34.0,11.5];df['dst_long']=df['dst_lat']+1
      5 df['val']=[0.1,0.2,0.1,0.3,0.2,0.1,0.3,0.3,0.1]                                         
----> 6 df = df.pivot(index=['src_lat', 'src_long'], columns=['dst_lat', 'dst_long'], values=['val'])
      7 df.columns = df.index
      8 df.drop([(11.5, 12.5), (-46.0, -45.0)])
                                                   
File ~/.conda/envs/rapids/lib/python3.10/site-packages/nvtx/nvtx.py:116, in annotate.__call__.<locals>.inner(*args, **kwargs)
    113 @wraps(func)         
    114 def inner(*args, **kwargs):
    115     libnvtx_push_range(self.attributes, self.domain.handle)
--> 116     result = func(*args, **kwargs)
    117     libnvtx_pop_range(self.domain.handle)                                                                                                                                                           
    118     return result

File ~/cudf/python/cudf/cudf/core/dataframe.py:7300, in DataFrame.pivot(self, columns, index, values)
   7297 @_cudf_nvtx_annotate
   7298 @copy_docstring(reshape.pivot)
   7299 def pivot(self, *, columns, index=no_default, values=no_default):
-> 7300     return cudf.core.reshape.pivot(
   7301         self, index=index, columns=columns, values=values
   7302     )

File ~/cudf/python/cudf/cudf/core/reshape.py:1054, in pivot(data, columns, index, values)
   1052     index = df.index
   1053 else:
-> 1054     index = cudf.core.index.Index(df.loc[:, index])
   1055 columns = cudf.Index(df.loc[:, columns])
   1057 # Create a DataFrame composed of columns from both
   1058 # columns and index

File ~/cudf/python/cudf/cudf/core/index.py:78, in IndexMeta.__call__(cls, data, *args, **kwargs)
     76 def __call__(cls, data, *args, **kwargs):
     77     if cls is Index:
---> 78         return as_index(
     79             arbitrary=data,
     80             *args,
     81             **kwargs,
     82         )
     83     return super().__call__(data, *args, **kwargs)

File ~/.conda/envs/rapids/lib/python3.10/site-packages/nvtx/nvtx.py:116, in annotate.__call__.<locals>.inner(*args, **kwargs)
    113 @wraps(func)
    114 def inner(*args, **kwargs):
    115     libnvtx_push_range(self.attributes, self.domain.handle)
--> 116     result = func(*args, **kwargs)
    117     libnvtx_pop_range(self.domain.handle)
    118     return result

File ~/cudf/python/cudf/cudf/core/index.py:3061, in as_index(arbitrary, nan_as_null, copy, name, dtype)
   3057     return cudf.MultiIndex.from_pandas(
   3058         arbitrary.copy(deep=copy), nan_as_null=nan_as_null
   3059     )
   3060 elif isinstance(arbitrary, cudf.DataFrame) or is_scalar(arbitrary):
-> 3061     raise ValueError(""Index data must be 1-dimensional and list-like"")
   3062 else:
   3063     return as_index(
   3064         column.as_column(arbitrary, dtype=dtype, nan_as_null=nan_as_null),
   3065         copy=copy,
   3066         name=name,
   3067         dtype=dtype,
   3068     )

ValueError: Index data must be 1-dimensional and list-like
```
</details>
",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108915826/reactions,0,0,0,0,0,0,0,0,0,8987
806,https://api.github.com/repos/rapidsai/cudf/issues/comments/896365459,https://github.com/rapidsai/cudf/issues/9009#issuecomment-896365459,https://api.github.com/repos/rapidsai/cudf/issues/9009,896365459,IC_kwDOBWUGps41bXOT,2021-08-10T22:57:25Z,2021-08-10T22:57:25Z,CONTRIBUTOR,@vyasr assigned you based on our chat offline :) ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/896365459/reactions,1,1,0,0,0,0,0,0,0,9009
807,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317745,https://github.com/rapidsai/cudf/issues/9009#issuecomment-969317745,https://api.github.com/repos/rapidsai/cudf/issues/9009,969317745,IC_kwDOBWUGps45xp1x,2021-11-15T21:02:48Z,2021-11-15T21:02:48Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317745/reactions,0,0,0,0,0,0,0,0,0,9009
808,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319456,https://github.com/rapidsai/cudf/issues/9009#issuecomment-969319456,https://api.github.com/repos/rapidsai/cudf/issues/9009,969319456,IC_kwDOBWUGps45xqQg,2021-11-15T21:04:37Z,2021-11-15T21:04:37Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319456/reactions,0,0,0,0,0,0,0,0,0,9009
809,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108939630,https://github.com/rapidsai/cudf/issues/9009#issuecomment-2108939630,https://api.github.com/repos/rapidsai/cudf/issues/9009,2108939630,IC_kwDOBWUGps59s91u,2024-05-13T22:55:02Z,2024-05-13T22:55:02Z,CONTRIBUTOR,As of #10629 the `numeric_only` functionality is addressed. `min_count` remains unsupported for now.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108939630/reactions,0,0,0,0,0,0,0,0,0,9009
810,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319416,https://github.com/rapidsai/cudf/issues/9015#issuecomment-969319416,https://api.github.com/repos/rapidsai/cudf/issues/9015,969319416,IC_kwDOBWUGps45xqP4,2021-11-15T21:04:35Z,2021-11-15T21:04:35Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319416/reactions,0,0,0,0,0,0,0,0,0,9015
811,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450127,https://github.com/rapidsai/cudf/issues/9015#issuecomment-1038450127,https://api.github.com/repos/rapidsai/cudf/issues/9015,1038450127,IC_kwDOBWUGps495X3P,2022-02-13T22:03:47Z,2022-02-13T22:03:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450127/reactions,0,0,0,0,0,0,0,0,0,9015
812,https://api.github.com/repos/rapidsai/cudf/issues/comments/1409593006,https://github.com/rapidsai/cudf/issues/9015#issuecomment-1409593006,https://api.github.com/repos/rapidsai/cudf/issues/9015,1409593006,IC_kwDOBWUGps5UBK6u,2023-01-31T01:03:01Z,2023-01-31T01:03:01Z,NONE,"this reproduces with cudf 22.12.01

```
(rapids) root@184d4f7274bc:/rapids/notebooks# python 
Python 3.8.15 | packaged by conda-forge | (default, Nov 22 2022, 08:46:39) 
[GCC 10.4.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import cudf
>>> 
>>> filename = 'foo.csv'
>>> lines = [
...   ""num,text"",
...   ""123,abc"",
...   ""456,def"",
...   ""789,ghi""
... ]
>>> 
>>> with open(filename, 'w') as fp:
...     fp.write('\n'.join(lines)+'\n')
... 
33
>>> cudf.read_csv(filename, usecols=[2])
Segmentation fault (core dumped)
```",,mattf,112653,MDQ6VXNlcjExMjY1Mw==,https://avatars.githubusercontent.com/u/112653?v=4,,https://api.github.com/users/mattf,https://github.com/mattf,https://api.github.com/users/mattf/followers,https://api.github.com/users/mattf/following{/other_user},https://api.github.com/users/mattf/gists{/gist_id},https://api.github.com/users/mattf/starred{/owner}{/repo},https://api.github.com/users/mattf/subscriptions,https://api.github.com/users/mattf/orgs,https://api.github.com/users/mattf/repos,https://api.github.com/users/mattf/events{/privacy},https://api.github.com/users/mattf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1409593006/reactions,0,0,0,0,0,0,0,0,0,9015
813,https://api.github.com/repos/rapidsai/cudf/issues/comments/899892405,https://github.com/rapidsai/cudf/issues/9050#issuecomment-899892405,https://api.github.com/repos/rapidsai/cudf/issues/9050,899892405,IC_kwDOBWUGps41o0S1,2021-08-16T23:57:11Z,2021-08-16T23:57:11Z,CONTRIBUTOR,"Note that some utilities for this purpose already exist in [docutils.py](https://github.com/rapidsai/cudf/blob/branch-21.10/python/cudf/cudf/utils/docutils.py), my suggestion would be to make more extensive use of them.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/899892405/reactions,0,0,0,0,0,0,0,0,0,9050
814,https://api.github.com/repos/rapidsai/cudf/issues/comments/899931305,https://github.com/rapidsai/cudf/issues/9050#issuecomment-899931305,https://api.github.com/repos/rapidsai/cudf/issues/9050,899931305,IC_kwDOBWUGps41o9yp,2021-08-17T01:48:32Z,2021-08-17T01:48:32Z,CONTRIBUTOR,"A potential downside of this is that docs are no longer inline, and may pose difficulty to users who reach the codes by code browser.",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/899931305/reactions,0,0,0,0,0,0,0,0,0,9050
815,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317712,https://github.com/rapidsai/cudf/issues/9050#issuecomment-969317712,https://api.github.com/repos/rapidsai/cudf/issues/9050,969317712,IC_kwDOBWUGps45xp1Q,2021-11-15T21:02:47Z,2021-11-15T21:02:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317712/reactions,0,0,0,0,0,0,0,0,0,9050
816,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319335,https://github.com/rapidsai/cudf/issues/9050#issuecomment-969319335,https://api.github.com/repos/rapidsai/cudf/issues/9050,969319335,IC_kwDOBWUGps45xqOn,2021-11-15T21:04:29Z,2021-11-15T21:04:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319335/reactions,0,0,0,0,0,0,0,0,0,9050
817,https://api.github.com/repos/rapidsai/cudf/issues/comments/905088983,https://github.com/rapidsai/cudf/issues/9102#issuecomment-905088983,https://api.github.com/repos/rapidsai/cudf/issues/9102,905088983,IC_kwDOBWUGps418o_X,2021-08-25T01:05:01Z,2021-08-25T01:05:01Z,MEMBER,"> functions for which each point in the result sequence is dependent on all of the data 'before' it in the source sequence.

When the operator is associative, what you describe is a scan, so at the libcudf level, perhaps support for the operators listed that satisfy the requirements should just be added to `cudf::scan`. (We already have sum, min, max, rank, dense_rank. I'm sure count, mean etc. could be added)",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/905088983/reactions,1,1,0,0,0,0,0,0,0,9102
818,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319034,https://github.com/rapidsai/cudf/issues/9102#issuecomment-969319034,https://api.github.com/repos/rapidsai/cudf/issues/9102,969319034,IC_kwDOBWUGps45xqJ6,2021-11-15T21:04:09Z,2021-11-15T21:04:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319034/reactions,0,0,0,0,0,0,0,0,0,9102
819,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450058,https://github.com/rapidsai/cudf/issues/9102#issuecomment-1038450058,https://api.github.com/repos/rapidsai/cudf/issues/9102,1038450058,IC_kwDOBWUGps495X2K,2022-02-13T22:03:33Z,2022-02-13T22:03:33Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450058/reactions,0,0,0,0,0,0,0,0,0,9102
820,https://api.github.com/repos/rapidsai/cudf/issues/comments/904894524,https://github.com/rapidsai/cudf/issues/9105#issuecomment-904894524,https://api.github.com/repos/rapidsai/cudf/issues/9105,904894524,IC_kwDOBWUGps4175g8,2021-08-24T18:57:41Z,2021-08-24T18:57:41Z,CONTRIBUTOR,Does the need for this lead to any confusing name collisions with `BaseIndex` that would necessitate renaming that class?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904894524/reactions,0,0,0,0,0,0,0,0,0,9105
821,https://api.github.com/repos/rapidsai/cudf/issues/comments/904898214,https://github.com/rapidsai/cudf/issues/9105#issuecomment-904898214,https://api.github.com/repos/rapidsai/cudf/issues/9105,904898214,IC_kwDOBWUGps4176am,2021-08-24T19:02:48Z,2021-08-24T19:02:48Z,CONTRIBUTOR,"They would be staying in different `modules`, but seems this could introduce some kind of confusion with so similarly named classes :( ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904898214/reactions,0,0,0,0,0,0,0,0,0,9105
822,https://api.github.com/repos/rapidsai/cudf/issues/comments/904910565,https://github.com/rapidsai/cudf/issues/9105#issuecomment-904910565,https://api.github.com/repos/rapidsai/cudf/issues/9105,904910565,IC_kwDOBWUGps4179bl,2021-08-24T19:21:02Z,2021-08-24T19:21:02Z,CONTRIBUTOR,"#9039 moves `BaseIndex` to its own internal submodule `_base_index.py`, so we could also consider just making it a private class if we need to. Renaming might be a better option though since we now advise people to subclass `BaseIndex` rather than `Index` if subclassing is really necessary. I don't think it's a major issue, just something to consider.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/904910565/reactions,1,1,0,0,0,0,0,0,0,9105
823,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319009,https://github.com/rapidsai/cudf/issues/9105#issuecomment-969319009,https://api.github.com/repos/rapidsai/cudf/issues/9105,969319009,IC_kwDOBWUGps45xqJh,2021-11-15T21:04:07Z,2021-11-15T21:04:07Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969319009/reactions,0,0,0,0,0,0,0,0,0,9105
824,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450045,https://github.com/rapidsai/cudf/issues/9105#issuecomment-1038450045,https://api.github.com/repos/rapidsai/cudf/issues/9105,1038450045,IC_kwDOBWUGps495X19,2022-02-13T22:03:31Z,2022-02-13T22:03:31Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450045/reactions,0,0,0,0,0,0,0,0,0,9105
825,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318813,https://github.com/rapidsai/cudf/issues/9120#issuecomment-969318813,https://api.github.com/repos/rapidsai/cudf/issues/9120,969318813,IC_kwDOBWUGps45xqGd,2021-11-15T21:03:54Z,2021-11-15T21:03:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318813/reactions,0,0,0,0,0,0,0,0,0,9120
826,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450007,https://github.com/rapidsai/cudf/issues/9120#issuecomment-1038450007,https://api.github.com/repos/rapidsai/cudf/issues/9120,1038450007,IC_kwDOBWUGps495X1X,2022-02-13T22:03:25Z,2022-02-13T22:03:25Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038450007/reactions,0,0,0,0,0,0,0,0,0,9120
827,https://api.github.com/repos/rapidsai/cudf/issues/comments/909462219,https://github.com/rapidsai/cudf/issues/9151#issuecomment-909462219,https://api.github.com/repos/rapidsai/cudf/issues/9151,909462219,IC_kwDOBWUGps42NUrL,2021-08-31T17:57:58Z,2021-08-31T17:57:58Z,CONTRIBUTOR,"@jlowe points out that both the `hash_join` [constructor](https://github.com/rapidsai/cudf/blob/fdcb90a01fe84be8dbd83aa41bc5678b47185e16/cpp/include/cudf/join.hpp#L522-L524) and the [""probing"" member functions ](https://github.com/rapidsai/cudf/blob/fdcb90a01fe84be8dbd83aa41bc5678b47185e16/cpp/include/cudf/join.hpp#L545) allow specifying the `null_equality` parameter.

This is problematic as a user could specify contradicting options in the build vs probe. The `null_equality` should be specified exactly once in the `hash_join` constructor and then stored for future probing operations. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/909462219/reactions,0,0,0,0,0,0,0,0,0,9151
828,https://api.github.com/repos/rapidsai/cudf/issues/comments/909502620,https://github.com/rapidsai/cudf/issues/9151#issuecomment-909502620,https://api.github.com/repos/rapidsai/cudf/issues/9151,909502620,IC_kwDOBWUGps42Neic,2021-08-31T18:41:44Z,2021-08-31T18:41:44Z,MEMBER,Filed #9155 to track separately the potential `null_equality` parameter mismatch problem in the `cudf::hash_join` API.,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/909502620/reactions,0,0,0,0,0,0,0,0,0,9151
829,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318711,https://github.com/rapidsai/cudf/issues/9151#issuecomment-969318711,https://api.github.com/repos/rapidsai/cudf/issues/9151,969318711,IC_kwDOBWUGps45xqE3,2021-11-15T21:03:48Z,2021-11-15T21:03:48Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318711/reactions,0,0,0,0,0,0,0,0,0,9151
830,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449996,https://github.com/rapidsai/cudf/issues/9151#issuecomment-1038449996,https://api.github.com/repos/rapidsai/cudf/issues/9151,1038449996,IC_kwDOBWUGps495X1M,2022-02-13T22:03:24Z,2022-02-13T22:03:24Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449996/reactions,0,0,0,0,0,0,0,0,0,9151
831,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185739688,https://github.com/rapidsai/cudf/issues/9151#issuecomment-1185739688,https://api.github.com/repos/rapidsai/cudf/issues/9151,1185739688,IC_kwDOBWUGps5GrPOo,2022-07-15T17:11:09Z,2022-07-15T17:11:09Z,CONTRIBUTOR,"@PointKernel I think we can close this now, right? Based on the work in #10248 we don't actually see a perf benefit here due to the effects on the performance of the hash map when the load factor is higher?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185739688/reactions,0,0,0,0,0,0,0,0,0,9151
832,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185770045,https://github.com/rapidsai/cudf/issues/9151#issuecomment-1185770045,https://api.github.com/repos/rapidsai/cudf/issues/9151,1185770045,IC_kwDOBWUGps5GrWo9,2022-07-15T17:52:59Z,2022-07-15T17:52:59Z,MEMBER,This feature is still desired since #10248 is the exploration to reduce actual map size (thus memory footprint) by using precomputed row bitmasks while the goal of this work is to perform conditional probing when nulls are present. The issue depends on https://github.com/NVIDIA/cuCollections/pull/139.,,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185770045/reactions,0,0,0,0,0,0,0,0,0,9151
833,https://api.github.com/repos/rapidsai/cudf/issues/comments/912082973,https://github.com/rapidsai/cudf/issues/9175#issuecomment-912082973,https://api.github.com/repos/rapidsai/cudf/issues/9175,912082973,IC_kwDOBWUGps42XUgd,2021-09-02T21:50:06Z,2021-09-02T21:50:06Z,CONTRIBUTOR,"+1. I had a similar requirement in a previous PR (https://github.com/rapidsai/cudf/pull/5779), where I wanted to scatter values from a single column into multiple columns in a table.

I'm also just making the observation that if we ever supported the notion of ""chunked"" columns in libcudf, the regular `scatter` and `gather` APIs would suffice for all the use cases you mentioned, as we would then easily be able to convert tables <-> chunked columns.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/912082973/reactions,1,1,0,0,0,0,0,0,0,9175
834,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318588,https://github.com/rapidsai/cudf/issues/9175#issuecomment-969318588,https://api.github.com/repos/rapidsai/cudf/issues/9175,969318588,IC_kwDOBWUGps45xqC8,2021-11-15T21:03:41Z,2021-11-15T21:03:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318588/reactions,0,0,0,0,0,0,0,0,0,9175
835,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449980,https://github.com/rapidsai/cudf/issues/9175#issuecomment-1038449980,https://api.github.com/repos/rapidsai/cudf/issues/9175,1038449980,IC_kwDOBWUGps495X08,2022-02-13T22:03:21Z,2022-02-13T22:03:21Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449980/reactions,0,0,0,0,0,0,0,0,0,9175
836,https://api.github.com/repos/rapidsai/cudf/issues/comments/950022583,https://github.com/rapidsai/cudf/issues/9179#issuecomment-950022583,https://api.github.com/repos/rapidsai/cudf/issues/9179,950022583,IC_kwDOBWUGps44oDG3,2021-10-23T00:10:00Z,2021-10-23T00:12:58Z,CONTRIBUTOR,"Cudf supports constructing a `StructColumn` from a `StructArray`.
```python
In [14]: pa_struct = pa.StructArray.from_arrays([pa.array([1, 2, 3]), pa.array(['a', 'b', 'c'])], names=['num', 'str'])

In [16]: cudf.Series.from_arrow(pa_struct)
Out[16]: 
0    {'num': 1, 'str': 'a'}
1    {'num': 2, 'str': 'b'}
2    {'num': 3, 'str': 'c'}
dtype: struct
```

I believe the error you see here has to do with having `DictionaryArray` as one of the fields in the `StructArray`.

```python
In [5]: r = cudf.Series.from_arrow(pa.StructArray.from_arrays([s.to_arrow(), f], names=['a', 'd']))

In [6]: type(r)
Out[6]: cudf.core.series.Series

In [8]: r._column.children
Out[8]: 
(<cudf.core.column.categorical.CategoricalColumn object at 0x7f6459ceda70>
 
 -- dictionary:
   [
     1,
     2,
     3
   ]
 -- indices:
   [
     0,
     1,
     2
   ]
 dtype: category,
 <cudf.core.column.numerical.NumericalColumn object at 0x7f645a5a53b0>
 [
   1,
   2,
   3
 ]
 dtype: int64)
```

The result is well formed. But cannot convert the column back to arrow:

```python
In [11]: r.to_arrow()
---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
<ipython-input-11-77c2df0309ec> in <module>
----> 1 r.to_arrow()

~/cudf/python/cudf/cudf/core/single_column_frame.py in to_arrow(self)
    213         ]
    214         """"""
--> 215         return self._column.to_arrow()
    216 
    217     @property

~/cudf/python/cudf/cudf/core/column/struct.py in to_arrow(self)
     68             {
     69                 field: child.type
---> 70                 for field, child in zip(self.dtype.fields, children)
     71             }
     72         )

~/cudf/python/cudf/cudf/core/dtypes.py in fields(self)
    289         return {
    290             field.name: cudf.utils.dtypes.cudf_dtype_from_pa_type(field.type)
--> 291             for field in self._typ
    292         }
    293 

~/cudf/python/cudf/cudf/core/dtypes.py in <dictcomp>(.0)
    289         return {
    290             field.name: cudf.utils.dtypes.cudf_dtype_from_pa_type(field.type)
--> 291             for field in self._typ
    292         }
    293 

~/cudf/python/cudf/cudf/utils/dtypes.py in cudf_dtype_from_pa_type(typ)
    215         return cudf.core.dtypes.Decimal64Dtype.from_arrow(typ)
    216     else:
--> 217         return cudf.api.types.pandas_dtype(typ.to_pandas_dtype())
    218 
    219 

~/compose/etc/conda/cuda_11.2/envs/rapids/lib/python3.7/site-packages/pyarrow/types.pxi in pyarrow.lib.DataType.to_pandas_dtype()

NotImplementedError: dictionary<values=int64, indices=int8, ordered=0>
```",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/950022583/reactions,0,0,0,0,0,0,0,0,0,9179
837,https://api.github.com/repos/rapidsai/cudf/issues/comments/974989959,https://github.com/rapidsai/cudf/issues/9179#issuecomment-974989959,https://api.github.com/repos/rapidsai/cudf/issues/9179,974989959,IC_kwDOBWUGps46HSqH,2021-11-22T01:24:32Z,2021-11-22T01:24:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/974989959/reactions,0,0,0,0,0,0,0,0,0,9179
838,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046138500,https://github.com/rapidsai/cudf/issues/9179#issuecomment-1046138500,https://api.github.com/repos/rapidsai/cudf/issues/9179,1046138500,IC_kwDOBWUGps4-Ws6E,2022-02-20T01:29:52Z,2022-02-20T01:29:52Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046138500/reactions,0,0,0,0,0,0,0,0,0,9179
839,https://api.github.com/repos/rapidsai/cudf/issues/comments/930661711,https://github.com/rapidsai/cudf/issues/9209#issuecomment-930661711,https://api.github.com/repos/rapidsai/cudf/issues/9209,930661711,IC_kwDOBWUGps43eMVP,2021-09-30T01:06:38Z,2021-09-30T01:06:38Z,CONTRIBUTOR,"One issue that was raised was that a `DeviceMemoryBuffer` could instead be composed using a java ""MemoryResource"", rather than having to create other classes like `CudaMemoryBuffer` to accomplish this. We could then pass other resources like a potential ""AsyncMemoryResource"" instance, or some hierarchy of other resources (the logging resource + pool for example). Ideally this issue would tackle this problem as well.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/930661711/reactions,0,0,0,0,0,0,0,0,0,9209
840,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318509,https://github.com/rapidsai/cudf/issues/9209#issuecomment-969318509,https://api.github.com/repos/rapidsai/cudf/issues/9209,969318509,IC_kwDOBWUGps45xqBt,2021-11-15T21:03:35Z,2021-11-15T21:03:35Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318509/reactions,0,0,0,0,0,0,0,0,0,9209
841,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449975,https://github.com/rapidsai/cudf/issues/9209#issuecomment-1038449975,https://api.github.com/repos/rapidsai/cudf/issues/9209,1038449975,IC_kwDOBWUGps495X03,2022-02-13T22:03:19Z,2022-02-13T22:03:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449975/reactions,0,0,0,0,0,0,0,0,0,9209
842,https://api.github.com/repos/rapidsai/cudf/issues/comments/918491305,https://github.com/rapidsai/cudf/issues/9219#issuecomment-918491305,https://api.github.com/repos/rapidsai/cudf/issues/9219,918491305,IC_kwDOBWUGps42vxCp,2021-09-13T19:05:51Z,2021-09-13T19:05:51Z,CONTRIBUTOR,"> I would like to rewrite slice into deep slicing, i.e., recursively calling to slice on all children columns of the column being sliced. This way, when we access its children column through the APIs child_begin(), child_end, or child(idx) we will have the expected results all the time. 

This would break strings columns. And maybe lists? So this would only apply to structs, which would be pretty inconsistent behavior. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/918491305/reactions,0,0,0,0,0,0,0,0,0,9219
843,https://api.github.com/repos/rapidsai/cudf/issues/comments/918783715,https://github.com/rapidsai/cudf/issues/9219#issuecomment-918783715,https://api.github.com/repos/rapidsai/cudf/issues/9219,918783715,IC_kwDOBWUGps42w4bj,2021-09-14T04:11:17Z,2021-09-14T04:11:17Z,CONTRIBUTOR,"Another related-similar issue is not just `child` and `sliced_child` but also `offsets`. When dealing with `lists_column_view`, I discovered a bug that is due to accessing `lists_column_view::offsets()` of a sliced lists column. The `offsets` API returns the original `offsets`, not the sliced `offsets`.

I'm not sure if this is also the case for strings column.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/918783715/reactions,0,0,0,0,0,0,0,0,0,9219
844,https://api.github.com/repos/rapidsai/cudf/issues/comments/919211331,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919211331,https://api.github.com/repos/rapidsai/cudf/issues/9219,919211331,IC_kwDOBWUGps42yg1D,2021-09-14T14:34:15Z,2021-09-14T14:34:15Z,CONTRIBUTOR,"> The `offsets` API returns the original `offsets`, not the sliced `offsets`. I'm not sure if this is also the case for strings column.

Yes, it is. Otherwise it would require actually modifying device memory to update all of the values of the offset column to be relative to the offset of the parent. This is obviously expensive and not something we want to do except in cases where it is explicitly required. 

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919211331/reactions,0,0,0,0,0,0,0,0,0,9219
845,https://api.github.com/repos/rapidsai/cudf/issues/comments/919271378,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919271378,https://api.github.com/repos/rapidsai/cudf/issues/9219,919271378,IC_kwDOBWUGps42yvfS,2021-09-14T15:39:33Z,2021-09-14T15:39:54Z,CONTRIBUTOR,"I see. It seems that deep slicing is necessary to avoid bugs, but it is expensive thus we try to avoid.

I have an idea: Apply *lazy evaluation* concept: we do deep slicing but do not initialize the `offset` value until we actually need it. Instead, when doing deep slicing that needs `memcpy` from the device, we just store the device memory addresses to be copied from. Something similar to this:
```
class column_view {
.....
size_type _offset = INVALID_OFFSET;

size_type offset() const {
  if(_offset == INVALID_OFFSET) {
    cudaMemcpy(.....);
  }
  return _offset;
}

void set_offset(void const* device_add) { ....}
```

Of course, actual implementation is more complex than this. But the idea above can:
 * Avoid expensive memcpy and device sync when deep slicing is not needed, and
 * Eliminate potential bugs due to accessing non-sliced children, as it is deep slicing by default

Note that this is something similar to caching scalar value that we mentioned before.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919271378/reactions,0,0,0,0,0,0,0,0,0,9219
846,https://api.github.com/repos/rapidsai/cudf/issues/comments/919394666,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919394666,https://api.github.com/repos/rapidsai/cudf/issues/9219,919394666,IC_kwDOBWUGps42zNlq,2021-09-14T18:09:20Z,2021-09-14T18:09:20Z,CONTRIBUTOR,"Deep slicing is not always necessary. We could add a specific statement to the developer guide that child columns are not sliced.

This kind of coding error would ideally be caught by [an appropriate gtest](https://github.com/rapidsai/cudf/blob/branch-21.10/cpp/docs/TESTING.md#best-practices-what-should-we-test) or during a PR review.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919394666/reactions,0,0,0,0,0,0,0,0,0,9219
847,https://api.github.com/repos/rapidsai/cudf/issues/comments/919438298,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919438298,https://api.github.com/repos/rapidsai/cudf/issues/9219,919438298,IC_kwDOBWUGps42zYPa,2021-09-14T19:08:40Z,2021-09-14T19:08:40Z,CONTRIBUTOR,"> I have an idea: Apply lazy evaluation concept: we do deep slicing but do not initialize the offset value until we actually need it. Instead, when doing deep slicing that needs memcpy from the device, we just store the device memory addresses to be copied from.

Unfortunately its more complicated than that. When a strings/list column is sliced, the values of the offsets column remain unchanged. Meaning, the values of the offset column are still relative to the _un_sliced version of the parent.

For example, a strings column:

```
logical: {""a"", """", ""bc""}
offset: 0
chars: {abc}
offsets: {0, 1, 1, 3}
```

If you were to slice off the last two elements of this strings column you'd have:
```
logical: {"""", ""bc""}
offset: 1
chars: {abc}
offsets: {0, 1, 1, 3}
```

The values of the offsets column is still relative to the original unsliced column. 

So it's not just a matter of changing the singular offset of the `chars` and `offsets` column, but you'd also need to change the _values_ of the `offsets` child. 

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919438298/reactions,0,0,0,0,0,0,0,0,0,9219
848,https://api.github.com/repos/rapidsai/cudf/issues/comments/919447831,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919447831,https://api.github.com/repos/rapidsai/cudf/issues/9219,919447831,IC_kwDOBWUGps42zakX,2021-09-14T19:22:51Z,2021-09-14T19:22:51Z,CONTRIBUTOR,I see. This is really context-dependent :disappointed: ,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919447831/reactions,0,0,0,0,0,0,0,0,0,9219
849,https://api.github.com/repos/rapidsai/cudf/issues/comments/919451365,https://github.com/rapidsai/cudf/issues/9219#issuecomment-919451365,https://api.github.com/repos/rapidsai/cudf/issues/9219,919451365,IC_kwDOBWUGps42zbbl,2021-09-14T19:28:38Z,2021-09-14T19:28:38Z,CONTRIBUTOR,"One idea would be to add a `chars_begin` and `offsets_begin` functions to `strings_column_view` that return a transform iterator that automatically applies the offset of the parent. 

I don't think that would solve many of the problems you highlighted above, but still seems like a useful thing that would alleviate similar kinds of problems. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/919451365/reactions,0,0,0,0,0,0,0,0,0,9219
850,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318449,https://github.com/rapidsai/cudf/issues/9219#issuecomment-969318449,https://api.github.com/repos/rapidsai/cudf/issues/9219,969318449,IC_kwDOBWUGps45xqAx,2021-11-15T21:03:32Z,2021-11-15T21:03:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318449/reactions,0,0,0,0,0,0,0,0,0,9219
851,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449970,https://github.com/rapidsai/cudf/issues/9219#issuecomment-1038449970,https://api.github.com/repos/rapidsai/cudf/issues/9219,1038449970,IC_kwDOBWUGps495X0y,2022-02-13T22:03:17Z,2022-02-13T22:03:17Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449970/reactions,0,0,0,0,0,0,0,0,0,9219
852,https://api.github.com/repos/rapidsai/cudf/issues/comments/923280566,https://github.com/rapidsai/cudf/issues/9256#issuecomment-923280566,https://api.github.com/repos/rapidsai/cudf/issues/9256,923280566,IC_kwDOBWUGps43CCS2,2021-09-20T20:40:25Z,2021-09-20T20:40:25Z,CONTRIBUTOR,"Are there situations where we could instead create a transform iterator to materialize the ""clean"" offsets instead of needing to materialize the new offsets? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/923280566/reactions,0,0,0,0,0,0,0,0,0,9256
853,https://api.github.com/repos/rapidsai/cudf/issues/comments/923282399,https://github.com/rapidsai/cudf/issues/9256#issuecomment-923282399,https://api.github.com/repos/rapidsai/cudf/issues/9256,923282399,IC_kwDOBWUGps43CCvf,2021-09-20T20:43:06Z,2021-09-20T20:43:06Z,CONTRIBUTOR,"I believe the answer is yes. However, in the two files listed above, a new offsets column is needed to generating an output lists column (using `make_lists_column`).",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/923282399/reactions,0,0,0,0,0,0,0,0,0,9256
854,https://api.github.com/repos/rapidsai/cudf/issues/comments/923291158,https://github.com/rapidsai/cudf/issues/9256#issuecomment-923291158,https://api.github.com/repos/rapidsai/cudf/issues/9256,923291158,IC_kwDOBWUGps43CE4W,2021-09-20T20:51:44Z,2021-09-20T20:51:44Z,CONTRIBUTOR,Maybe the solution here can then be to add that iterator and then provide a convenience function that just uses that iterator to fill a new column. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/923291158/reactions,2,2,0,0,0,0,0,0,0,9256
855,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257968,https://github.com/rapidsai/cudf/issues/9256#issuecomment-991257968,https://api.github.com/repos/rapidsai/cudf/issues/9256,991257968,IC_kwDOBWUGps47FWVw,2021-12-10T20:03:09Z,2021-12-10T20:03:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257968/reactions,0,0,0,0,0,0,0,0,0,9256
856,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064454141,https://github.com/rapidsai/cudf/issues/9256#issuecomment-1064454141,https://api.github.com/repos/rapidsai/cudf/issues/9256,1064454141,IC_kwDOBWUGps4_ckf9,2022-03-10T20:03:25Z,2022-03-10T20:03:25Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064454141/reactions,0,0,0,0,0,0,0,0,0,9256
857,https://api.github.com/repos/rapidsai/cudf/issues/comments/925470928,https://github.com/rapidsai/cudf/issues/9269#issuecomment-925470928,https://api.github.com/repos/rapidsai/cudf/issues/9269,925470928,IC_kwDOBWUGps43KZDQ,2021-09-23T02:57:01Z,2021-09-23T02:57:01Z,CONTRIBUTOR,"I'm trying to understand this. So there's broadly two steps where parquet reader spends time:
1.  Reading rowgroup data from the file.
2. Decompressing and decoding said data.

In case of rowgroup based filtering, you can ask cudf for the rowgroups to read which means rest of the rowgroups are neither loaded from disk into host/device memory nor decompressed/decoded.
You can filter based on exact row numbers but that would mean the entire rowgroup is still read from disk but only the necessary pages are decompressed/decoded. So only partial time savings.

With this new page level filtering, you're trying to avoid reading unnecessary pages from _within_ the rowgroups, from disk. Is that correct?",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/925470928/reactions,0,0,0,0,0,0,0,0,0,9269
858,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318315,https://github.com/rapidsai/cudf/issues/9269#issuecomment-969318315,https://api.github.com/repos/rapidsai/cudf/issues/9269,969318315,IC_kwDOBWUGps45xp-r,2021-11-15T21:03:25Z,2021-11-15T21:03:25Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318315/reactions,0,0,0,0,0,0,0,0,0,9269
859,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449941,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1038449941,https://api.github.com/repos/rapidsai/cudf/issues/9269,1038449941,IC_kwDOBWUGps495X0V,2022-02-13T22:03:11Z,2022-02-13T22:03:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449941/reactions,0,0,0,0,0,0,0,0,0,9269
860,https://api.github.com/repos/rapidsai/cudf/issues/comments/1230983052,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1230983052,https://api.github.com/repos/rapidsai/cudf/issues/9269,1230983052,IC_kwDOBWUGps5JX0-M,2022-08-29T23:49:40Z,2022-08-29T23:49:40Z,CONTRIBUTOR,">  API where we can send compressed pages and metadata to CUDF for decoding. The metadata would include things like the file and row group that the pages came from and what range of column indicies within those pages we would like to be read.

@revans2 would you please share more about the API you have in mind? Would the inputs be a new metadata class, or are there existing ones that would suffice? Would the output be a table or an iterable of column fragments?
",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1230983052/reactions,0,0,0,0,0,0,0,0,0,9269
861,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251201505,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1251201505,https://api.github.com/repos/rapidsai/cudf/issues/9269,1251201505,IC_kwDOBWUGps5Kk9Hh,2022-09-19T15:44:51Z,2022-09-19T15:44:51Z,CONTRIBUTOR,"Sorry about the long delay for a response. I see two possible APIs.

The first would be that in Spark we add in a glue layer that would let the CUDF reader call back into java and the Hadoop File System API so we can properly support security and all of the various pluggable APIs that Spark/Java can support, but CUDF does not yet.

CUDF would then need to add in APIs that would allow us to partition the data the same way that Spark does, not hard I can show you how to do it. APIs to do predicate push down so row groups can be skipped if needed (and in this case possibly pages within a row group being skipped too). APIs to do column pruning so we can tell you exactly which columns we want read. A callback API so we know just before data is moved to the GPU so we can overlap I/O as much as possible, and not overload the GPU's memory. And an API, if it does not exist already, to be able to group multiple smaller files together so that the GPU can be more efficient when reading the data. Also we can use a thread pool to read data from some file systems, because the bandwidth for a lot of CSP blob stores is limited by each connection or single threaded CPU performance in decompressing/decrypting the data, so having more connections improves the total throughput.

I like this approach because it allows for more improvement in the future, including things like GPU direct storage and it bypasses having to read/write the footer multiple times.  But we would have to do a bunch of profiling to be sure that the java callback is efficient and not slowing things down, and it would be a lot of large changes to CUDF to add in all of the features that we have been doing directly in scala today.

The second approach would be something where we would pass down structured data to CUDF. So instead of passing down a buffer that holds a complete parquet file.  We would parse the footer and the ColumnIndex ourselves. Read the data that we know we need to read, and then pass the information to CUDF as almost a tree, where we would give you the some form of a footer that would point to the columns, row groups, pages, and row ranges that we care about and want read.

This approach is a lot more complicated to do, in my option, and is prone to also being slow because sending structured data through JNI is also rather problematic and slow. So I would prefer the first option, but...",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251201505/reactions,0,0,0,0,0,0,0,0,0,9269
862,https://api.github.com/repos/rapidsai/cudf/issues/comments/1515743905,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1515743905,https://api.github.com/repos/rapidsai/cudf/issues/9269,1515743905,IC_kwDOBWUGps5aWGqh,2023-04-20T05:40:18Z,2023-04-20T05:40:55Z,CONTRIBUTOR,"Thank you @revans2 for sharing these ideas for improving the IO pipeline in the Spark-RAPIDS plugin. I'd like to pick up this thread again now that I'm scoping predicate pushdown in the libcudf parquet reader.

> in Spark we [could] add in a glue layer that would let the CUDF reader call back into java and the Hadoop File System API

Is your idea that this glue layer would appear to libcudf as a new `datasource`?

> CUDF would then need to add in APIs that would allow us to partition the data the same way that Spark does

For predicate pushdown we are considering using an AST to represent the predicate. Do you already have tools to convert Spark expressions into libcudf ASTs?

> possibly pages within a row group being skipped too

Do you know for sure if Spark does page-level IO filtering with predicates? At least pyarrow, DuckDB and polars only do rowgroup-level filtering with predicates. 

> APIs to do column pruning

I believe we already support column pruning in `parquet_reader_options._columns`.

> an API, if it does not exist already, to be able to group multiple smaller files

I'll need to check on this. We have multi-source support for Parquet reading in cuDF-python, but I'm not sure how that maps into libcudf.

> Also we can use a thread pool to read data from some file systems

Does this have any implications for the API design in libcudf?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1515743905/reactions,0,0,0,0,0,0,0,0,0,9269
863,https://api.github.com/repos/rapidsai/cudf/issues/comments/1516477419,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1516477419,https://api.github.com/repos/rapidsai/cudf/issues/9269,1516477419,IC_kwDOBWUGps5aY5vr,2023-04-20T14:55:25Z,2023-04-20T14:55:25Z,CONTRIBUTOR,"> > in Spark we [could] add in a glue layer that would let the CUDF reader call back into java and the Hadoop File System API
> 
> Is your idea that this glue layer would appear to libcudf as a new `datasource`?

Yes. Currently we will use the built in Spark and Parquet java code to do predicate push down and see what columns we need to read based off of statistics in the footer and the section of the file that a given task is supposed to process.  After that we will read those parts of the file, write out a new file + new footer to a memory buffer and hand that memory buffer off to cudf to parse.  This gave us flexibility to do predicate push down, column pruning, partitioning, and even combining multiple small files together without having to wait for CUDF to add these features.  It also let us reduce the amount of data we read and parallelize fetching the data.

Because we have built so much outside of CUDF it makes me a little nervous to switch everything around unless we can find a way to get at least feature parity. 
 
> > CUDF would then need to add in APIs that would allow us to partition the data the same way that Spark does
> 
> For predicate pushdown we are considering using an AST to represent the predicate. Do you already have tools to convert Spark expressions into libcudf ASTs?

AST would be fine. The big issue for me is making sure that the AST can support all of the filtering that we currently support.

https://github.com/apache/parquet-mr/blob/master/parquet-column/src/main/java/org/apache/parquet/filter2/predicate/FilterApi.java
https://github.com/apache/parquet-mr/blob/master/parquet-column/src/main/java/org/apache/parquet/filter2/predicate/Operators.java

The big differences I see are `binaryColumn`, `in`, and `notIn`. We probably could simulate `in` and `notIn` using equality and binary operations.

> > possibly pages within a row group being skipped too
> 
> Do you know for sure if Spark does page-level IO filtering with predicates? At least pyarrow, DuckDB and polars only do rowgroup-level filtering with predicates.

That is what triggered me filing this issue.  Parquet-mr added the ability to do this and spark started to do it. They had a bug in their initial implementation which we found so I filed this to explore what it might take to support it here too. It might not be worth it because of the amount of change needed to support a feature like this.

> > APIs to do column pruning
> 
> I believe we already support column pruning in `parquet_reader_options._columns`.

Yes, but technically we can do sub-column pruning too.  Like what if I have a `foo:struct<a:Int, b:Int>`, but I know that foo.a is never touched, so all I want to load is `foo:struct<b:Int>` and skip `a` all together.

> > an API, if it does not exist already, to be able to group multiple smaller files
> 
> I'll need to check on this. We have multi-source support for Parquet reading in cuDF-python, but I'm not sure how that maps into libcudf.
> 
> > Also we can use a thread pool to read data from some file systems
> 
> Does this have any implications for the API design in libcudf?

Yes. The current data source API is single threaded/single buffer. Read this one buffer starting at offset X and with a size of Y.  Done? OK now read this buffer at offset X2 and size of Y2... 

If you could provide an API with something like `std::vector<request>` where `request` looks like `struct{buffer_type, offset, size, dst}` then we could decide how we do the I/O to best fulfill that request in the shortest time possible. It would also be great if we could make it async so it could return a `future` so for the small file issue you could send off requests for all of them in parallel so that we could schedule that appropriately too.

The reason that we do this is because blob stores can have very high time to first byte (so for random I/O when doing parquet or ORC it is good to coalesce reads and issues multiple requests at once)

https://docs.aws.amazon.com/AmazonS3/latest/userguide/optimizing-performance.html

>  These applications can achieve consistent small object latencies (and first-byte-out latencies for larger objects) of roughly 100–200 milliseconds.

We have also found that throughput can be throttled per connection and we need multiple open connections to saturate the bandwidth. 

https://docs.aws.amazon.com/AmazonS3/latest/userguide/optimizing-performance.html

> You can increase your read or write performance by using parallelization.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1516477419/reactions,1,1,0,0,0,0,0,0,0,9269
864,https://api.github.com/repos/rapidsai/cudf/issues/comments/1516678975,https://github.com/rapidsai/cudf/issues/9269#issuecomment-1516678975,https://api.github.com/repos/rapidsai/cudf/issues/9269,1516678975,IC_kwDOBWUGps5aZq8_,2023-04-20T17:14:11Z,2023-04-20T17:14:11Z,CONTRIBUTOR,"Chiming in here uninvited...

> Yes, but technically we can do sub-column pruning too. Like what if I have a `foo:struct<a:Int, b:Int>`, but I know that foo.a is never touched, so all I want to load is `foo:struct<b:Int>` and skip `a` all together.

The cudf parquet reader supports this as well, you just have to provide the fully quallified path.  You can set `columns` to something like `foo.item.b` (or maybe `foo.element.b` depending on the writer...the schema knows). 

And the current API does support multiple input files in the `source_info`, as well as specific row groups from those input files.

I've experimented with using the column index info on the read side to do page pruning, but for most of my use cases it wasn't worth it.  If I'm reading a range of a single file where the range spans multiple row groups, then I'm only saving a little bit on the first and last row group.  If I'm reading a range from a single row group, there's usually not enough columns being read to saturate the device, so there's no speed up (esp if there are dictionary pages to decompress/decode).  Reading a single row with no dictionaries can be significantly faster, and I'd imagine doing a targeted scan of multiple files would benefit as well.  But since spark can already do page pruning up front (and cudf lacks S3/HDFS support at the c++ layer AFAICT), I don't know if there's an easy win here.



",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1516678975/reactions,1,0,0,0,0,0,1,0,0,9269
865,https://api.github.com/repos/rapidsai/cudf/issues/comments/925874430,https://github.com/rapidsai/cudf/issues/9282#issuecomment-925874430,https://api.github.com/repos/rapidsai/cudf/issues/9282,925874430,IC_kwDOBWUGps43L7j-,2021-09-23T14:34:38Z,2021-09-23T14:34:38Z,CONTRIBUTOR,"I'm not quite following what you mean. Can you give an example (just numbers, not code) of what you mean? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/925874430/reactions,0,0,0,0,0,0,0,0,0,9282
866,https://api.github.com/repos/rapidsai/cudf/issues/comments/926069877,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926069877,https://api.github.com/repos/rapidsai/cudf/issues/9282,926069877,IC_kwDOBWUGps43MrR1,2021-09-23T18:52:47Z,2021-09-23T18:53:26Z,CONTRIBUTOR,"@jrhemstad

I have a DECIMAL64 value that is larger than can fit in an INT64.  A value of '999999999999999999' with scale 3 for example which is the equivalent of `999999999999999999000`.  Then I create a Scalar of INT64 with a value of `9223372036854775807` (`Long.MaxValue`). I ask cudf if my DECIMAL column > my INT64 scalar, logically it should say yes the decimal value is larger than the INT64 value, but cudf says false.  My guess is that cudf is casting the decimal to an INT64 first.  There is no int64 value that is > `Long.MaxValue`, so it will always return true.  This looks to be essentially the same kind of issue as was in the casting bug I filed, just in a separate place.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926069877/reactions,0,0,0,0,0,0,0,0,0,9282
867,https://api.github.com/repos/rapidsai/cudf/issues/comments/926082725,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926082725,https://api.github.com/repos/rapidsai/cudf/issues/9282,926082725,IC_kwDOBWUGps43Mual,2021-09-23T19:11:41Z,2021-09-23T19:11:41Z,CONTRIBUTOR,"Aha, that makes sense. Thanks. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926082725/reactions,0,0,0,0,0,0,0,0,0,9282
868,https://api.github.com/repos/rapidsai/cudf/issues/comments/926082959,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926082959,https://api.github.com/repos/rapidsai/cudf/issues/9282,926082959,IC_kwDOBWUGps43MueP,2021-09-23T19:12:04Z,2021-09-23T19:12:04Z,CONTRIBUTOR,@codereport this sounds like a similar kind of problem? ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926082959/reactions,0,0,0,0,0,0,0,0,0,9282
869,https://api.github.com/repos/rapidsai/cudf/issues/comments/926219655,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926219655,https://api.github.com/repos/rapidsai/cudf/issues/9282,926219655,IC_kwDOBWUGps43NP2H,2021-09-23T22:54:46Z,2021-09-23T22:54:46Z,CONTRIBUTOR,"> @codereport this sounds like a similar kind of problem?

This doesn't sound like the same thing. 

1. Comparing `INT64` and `Deimcal64` should not be possible
2. The correct way to do this is casting the `INT64` to `Decimal64` and then compare (ideally in the scale of the `Decimal64` number you are comparing it to)
3. If you only converted it to scale 0, I would expect the `Decimal64` number to potentially overflow, because the comparison operators are implemented using rescaling, similar to this:
```cpp
  auto const scale = std::min(lhs._scale, rhs._scale);
  return lhs.rescaled(scale)._value < rhs.rescaled(scale)._value;
```

**Note:** If you are currently able to compare `int64_t` with `decimal64` in libcudf, that might be a bug. While working on another job, I noticed that the compiled binary ops didn't have the same checks as the jit binary ops. I have fixed that in my other PR, but I haven't checked if that was introduced in my PR or in main.",,codereport,36027403,MDQ6VXNlcjM2MDI3NDAz,https://avatars.githubusercontent.com/u/36027403?v=4,,https://api.github.com/users/codereport,https://github.com/codereport,https://api.github.com/users/codereport/followers,https://api.github.com/users/codereport/following{/other_user},https://api.github.com/users/codereport/gists{/gist_id},https://api.github.com/users/codereport/starred{/owner}{/repo},https://api.github.com/users/codereport/subscriptions,https://api.github.com/users/codereport/orgs,https://api.github.com/users/codereport/repos,https://api.github.com/users/codereport/events{/privacy},https://api.github.com/users/codereport/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926219655/reactions,0,0,0,0,0,0,0,0,0,9282
870,https://api.github.com/repos/rapidsai/cudf/issues/comments/926340330,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926340330,https://api.github.com/repos/rapidsai/cudf/issues/9282,926340330,IC_kwDOBWUGps43NtTq,2021-09-24T04:44:43Z,2021-09-24T04:44:43Z,CONTRIBUTOR,"Hm, yeah, if the decimal64 number represents a value larger than INT64_MAX, how would you compare it to an int64? 

A quick and dirty way to do Bobby's check would be to convert the decimal64 to a `double` and then doing the comparison. You might get some weird effects due to the spacing between representable integers gets pretty far apart at that scale... I'm not sure if this would cause false negatives or false positives.  ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926340330/reactions,0,0,0,0,0,0,0,0,0,9282
871,https://api.github.com/repos/rapidsai/cudf/issues/comments/926346587,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926346587,https://api.github.com/repos/rapidsai/cudf/issues/9282,926346587,IC_kwDOBWUGps43Nu1b,2021-09-24T04:56:53Z,2021-09-24T04:59:59Z,CONTRIBUTOR,"> The correct way to do this is casting the INT64 to Decimal64 and then compare

Oh, right, this would work. So if you have `9223372036854775807`, you can create a `decimal64` with scale 3 to get the logical value `9223372036854775807000`. Then you can compare that against `999999999999999999000`. Since they have the same scale, it won't need to rescale either value and will just compare the rep between the two. 

Can't we do this automatically for binops? i.e., construct a decimal64 value around the integer value with the same scale as the other decimal value? This would essentially be like implicit conversion for an integer when comparing against a float. 

In fact, can't we just add an overload for `operator<(fixed_point, integer)`? Am I missing a situation where this would be unsafe? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926346587/reactions,0,0,0,0,0,0,0,0,0,9282
872,https://api.github.com/repos/rapidsai/cudf/issues/comments/926621688,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926621688,https://api.github.com/repos/rapidsai/cudf/issues/9282,926621688,IC_kwDOBWUGps43Ox_4,2021-09-24T13:23:42Z,2021-09-24T13:23:42Z,CONTRIBUTOR,"> The correct way to do this is casting the INT64 to Decimal64 and then compare

That is what I did as a work round in the Spark code.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926621688/reactions,1,1,0,0,0,0,0,0,0,9282
873,https://api.github.com/repos/rapidsai/cudf/issues/comments/926639477,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926639477,https://api.github.com/repos/rapidsai/cudf/issues/9282,926639477,IC_kwDOBWUGps43O2V1,2021-09-24T13:48:51Z,2021-09-24T13:49:07Z,CONTRIBUTOR,"> Am I missing a situation where this would be unsafe?

The first problem would show up for equality. `9223372036854775807` != `9223372036854775000` but if you automatically cast `9223372036854775807` to a DECIMAL64 with scale 3 you have lost some data and now it looks like they are equal. I think you can work around it and detect that you lost information when doing the cast to a decimal, and then always say that they are not equal.

The second issue would be with how you round.

For example: 

LONG `9223372036854775807` < DEC `9223372036854776000`

I would want to round the LONG towards 0 to get the right answer. But if I switch it (and adjust the DEC value so it shows the problem).

DEC `9223372036854775000` < LONG `9223372036854775807`

Now I want to round away from 0 for the long to give me the correct answer on the comparison.

I think that is correct.  Might need to play with some negative value examples to be sure that my rounding is spot on.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926639477/reactions,0,0,0,0,0,0,0,0,0,9282
874,https://api.github.com/repos/rapidsai/cudf/issues/comments/926641550,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926641550,https://api.github.com/repos/rapidsai/cudf/issues/9282,926641550,IC_kwDOBWUGps43O22O,2021-09-24T13:51:37Z,2021-09-24T13:51:37Z,CONTRIBUTOR,"@jrhemstad 
> Oh, right, this would work. So if you have 9223372036854775807, you can create a decimal64 with scale 3 to get the logical value 9223372036854775807000. Then you can compare that against 999999999999999999000. Since they have the same scale, it won't need to rescale either value and will just compare the rep between the two.

This is correct, however, to be specific your value of `9223372036854775807000` is `9223372036854775807 * 1000` whereas the actual value will be `9223372036854775807 / 1000` and then `9223372036854775` is stored and it represents `9223372036854775000`.

> Can't we do this automatically for binops? i.e., construct a decimal64 value around the integer value with the same scale as the other decimal value? This would essentially be like implicit conversion for an integer when comparing against a float.

We could do this automatically. It is worth discussing though. I don't think we would want to auto-construct same-scale values when multiplying or adding - which means that the behaviour would be custom depending on the binary operation.

> In fact, can't we just add an overload for operator<(fixed_point, integer)? Am I missing a situation where this would be unsafe?

No, it isn't this simple. The `fixed_point` `operator<` is not what is invoked during a binary op. It would be a change somewhere else in the compiled binary_ops code.",,codereport,36027403,MDQ6VXNlcjM2MDI3NDAz,https://avatars.githubusercontent.com/u/36027403?v=4,,https://api.github.com/users/codereport,https://github.com/codereport,https://api.github.com/users/codereport/followers,https://api.github.com/users/codereport/following{/other_user},https://api.github.com/users/codereport/gists{/gist_id},https://api.github.com/users/codereport/starred{/owner}{/repo},https://api.github.com/users/codereport/subscriptions,https://api.github.com/users/codereport/orgs,https://api.github.com/users/codereport/repos,https://api.github.com/users/codereport/events{/privacy},https://api.github.com/users/codereport/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926641550/reactions,0,0,0,0,0,0,0,0,0,9282
875,https://api.github.com/repos/rapidsai/cudf/issues/comments/926653261,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926653261,https://api.github.com/repos/rapidsai/cudf/issues/9282,926653261,IC_kwDOBWUGps43O5tN,2021-09-24T14:06:04Z,2021-09-24T14:06:04Z,CONTRIBUTOR,"@revans2 

> I think you can work around it and detect that you lost information when doing the cast to a decimal, and then always say that they are not equal.

Yea, I think it is possible for most case to construct to a scale n-1 and then do a `cudf::round`

> The second issue would be with how you round.
> DEC 9223372036854775000 < LONG 9223372036854775807

:arrow_up: this is the way it happens whenever `decimal` construction happens, truncation. This is the way CNL works and at one point we had rounding but it was decided to always truncate because of the complexity that it adds.",,codereport,36027403,MDQ6VXNlcjM2MDI3NDAz,https://avatars.githubusercontent.com/u/36027403?v=4,,https://api.github.com/users/codereport,https://github.com/codereport,https://api.github.com/users/codereport/followers,https://api.github.com/users/codereport/following{/other_user},https://api.github.com/users/codereport/gists{/gist_id},https://api.github.com/users/codereport/starred{/owner}{/repo},https://api.github.com/users/codereport/subscriptions,https://api.github.com/users/codereport/orgs,https://api.github.com/users/codereport/repos,https://api.github.com/users/codereport/events{/privacy},https://api.github.com/users/codereport/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926653261/reactions,0,0,0,0,0,0,0,0,0,9282
876,https://api.github.com/repos/rapidsai/cudf/issues/comments/926682046,https://github.com/rapidsai/cudf/issues/9282#issuecomment-926682046,https://api.github.com/repos/rapidsai/cudf/issues/9282,926682046,IC_kwDOBWUGps43PAu-,2021-09-24T14:41:22Z,2021-09-24T14:41:22Z,CONTRIBUTOR,"I get why you don't want the added complexity of round when constructing a decimal by default. But in this case we would probably want to construct the decimal with a scale of 0, and then explicitly round it to the appropriate scale using the correct rounding method based off of the operation being performed, along with all of the other gotchas involved with this type of an operation. There is a lot of very specific things that would need to be done correctly to make these comparison operations work correctly and generically. So I totally understand if the result of this BUG is simply CUDF does not support this type of operation and possibly some documentation why.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/926682046/reactions,0,0,0,0,0,0,0,0,0,9282
877,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318287,https://github.com/rapidsai/cudf/issues/9282#issuecomment-969318287,https://api.github.com/repos/rapidsai/cudf/issues/9282,969318287,IC_kwDOBWUGps45xp-P,2021-11-15T21:03:23Z,2021-11-15T21:03:23Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318287/reactions,0,0,0,0,0,0,0,0,0,9282
878,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449934,https://github.com/rapidsai/cudf/issues/9282#issuecomment-1038449934,https://api.github.com/repos/rapidsai/cudf/issues/9282,1038449934,IC_kwDOBWUGps495X0O,2022-02-13T22:03:10Z,2022-02-13T22:03:10Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449934/reactions,0,0,0,0,0,0,0,0,0,9282
879,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318263,https://github.com/rapidsai/cudf/issues/9313#issuecomment-969318263,https://api.github.com/repos/rapidsai/cudf/issues/9313,969318263,IC_kwDOBWUGps45xp93,2021-11-15T21:03:21Z,2021-11-15T21:03:21Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969318263/reactions,0,0,0,0,0,0,0,0,0,9313
880,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449929,https://github.com/rapidsai/cudf/issues/9313#issuecomment-1038449929,https://api.github.com/repos/rapidsai/cudf/issues/9313,1038449929,IC_kwDOBWUGps495X0J,2022-02-13T22:03:08Z,2022-02-13T22:03:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449929/reactions,0,0,0,0,0,0,0,0,0,9313
881,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203195415,https://github.com/rapidsai/cudf/issues/9313#issuecomment-1203195415,https://api.github.com/repos/rapidsai/cudf/issues/9313,1203195415,IC_kwDOBWUGps5Ht04X,2022-08-02T20:43:00Z,2022-08-02T20:43:00Z,CONTRIBUTOR,"This is a correctness issue, prioritizing for 22.10.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203195415/reactions,0,0,0,0,0,0,0,0,0,9313
882,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258626683,https://github.com/rapidsai/cudf/issues/9313#issuecomment-1258626683,https://api.github.com/repos/rapidsai/cudf/issues/9313,1258626683,IC_kwDOBWUGps5LBR57,2022-09-26T21:00:37Z,2022-09-26T21:00:37Z,CONTRIBUTOR,"Additional info related to the pyorc part of the issue: Spark is able to read ORC string column statistics, and uses them for predicate based filtering.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258626683/reactions,0,0,0,0,0,0,0,0,0,9313
883,https://api.github.com/repos/rapidsai/cudf/issues/comments/938855856,https://github.com/rapidsai/cudf/issues/9398#issuecomment-938855856,https://api.github.com/repos/rapidsai/cudf/issues/9398,938855856,IC_kwDOBWUGps439c2w,2021-10-08T16:57:09Z,2021-10-08T16:57:09Z,MEMBER,"Hi @esnvidia , thanks for filing an issue. Is it possible to reduce this to a minimal example? Or does it only reproduce in the context of cuML's distributed NearestNeighbors, concatenating, and other operations",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/938855856/reactions,0,0,0,0,0,0,0,0,0,9398
884,https://api.github.com/repos/rapidsai/cudf/issues/comments/939048176,https://github.com/rapidsai/cudf/issues/9398#issuecomment-939048176,https://api.github.com/repos/rapidsai/cudf/issues/9398,939048176,IC_kwDOBWUGps43-Lzw,2021-10-08T18:49:59Z,2021-10-08T18:49:59Z,NONE,"Hi @beckernick it's possible to make it work w/o Nearest Neighbors, I just needed a way to make  source-destination pairs, that I'm using for an example. It's pretty minimal. The issue is going from a dask array -> dask_cudf DataFrame. I generate the dask array with cuML because it's how I'm actually doing it and it should ensure that it's cupy aware too.",,esnvidia,80840697,MDQ6VXNlcjgwODQwNjk3,https://avatars.githubusercontent.com/u/80840697?v=4,,https://api.github.com/users/esnvidia,https://github.com/esnvidia,https://api.github.com/users/esnvidia/followers,https://api.github.com/users/esnvidia/following{/other_user},https://api.github.com/users/esnvidia/gists{/gist_id},https://api.github.com/users/esnvidia/starred{/owner}{/repo},https://api.github.com/users/esnvidia/subscriptions,https://api.github.com/users/esnvidia/orgs,https://api.github.com/users/esnvidia/repos,https://api.github.com/users/esnvidia/events{/privacy},https://api.github.com/users/esnvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/939048176/reactions,0,0,0,0,0,0,0,0,0,9398
885,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317874,https://github.com/rapidsai/cudf/issues/9398#issuecomment-969317874,https://api.github.com/repos/rapidsai/cudf/issues/9398,969317874,IC_kwDOBWUGps45xp3y,2021-11-15T21:02:57Z,2021-11-15T21:02:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317874/reactions,0,0,0,0,0,0,0,0,0,9398
886,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449862,https://github.com/rapidsai/cudf/issues/9398#issuecomment-1038449862,https://api.github.com/repos/rapidsai/cudf/issues/9398,1038449862,IC_kwDOBWUGps495XzG,2022-02-13T22:03:00Z,2022-02-13T22:03:00Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449862/reactions,0,0,0,0,0,0,0,0,0,9398
887,https://api.github.com/repos/rapidsai/cudf/issues/comments/942756046,https://github.com/rapidsai/cudf/issues/9426#issuecomment-942756046,https://api.github.com/repos/rapidsai/cudf/issues/9426,942756046,IC_kwDOBWUGps44MVDO,2021-10-13T22:06:12Z,2021-10-13T22:06:12Z,MEMBER,"If this is added, be sure to add a section to the libcudf DEVELOPER_GUIDE.md as well.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/942756046/reactions,1,1,0,0,0,0,0,0,0,9426
888,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317768,https://github.com/rapidsai/cudf/issues/9426#issuecomment-969317768,https://api.github.com/repos/rapidsai/cudf/issues/9426,969317768,IC_kwDOBWUGps45xp2I,2021-11-15T21:02:50Z,2021-11-15T21:02:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/969317768/reactions,0,0,0,0,0,0,0,0,0,9426
889,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449842,https://github.com/rapidsai/cudf/issues/9426#issuecomment-1038449842,https://api.github.com/repos/rapidsai/cudf/issues/9426,1038449842,IC_kwDOBWUGps495Xyy,2022-02-13T22:02:57Z,2022-02-13T22:02:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1038449842/reactions,0,0,0,0,0,0,0,0,0,9426
890,https://api.github.com/repos/rapidsai/cudf/issues/comments/942350143,https://github.com/rapidsai/cudf/issues/9430#issuecomment-942350143,https://api.github.com/repos/rapidsai/cudf/issues/9430,942350143,IC_kwDOBWUGps44Kx8_,2021-10-13T14:13:33Z,2021-10-13T14:13:33Z,CONTRIBUTOR,@vuule FYI,,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/942350143/reactions,0,0,0,0,0,0,0,0,0,9430
891,https://api.github.com/repos/rapidsai/cudf/issues/comments/942370858,https://github.com/rapidsai/cudf/issues/9430#issuecomment-942370858,https://api.github.com/repos/rapidsai/cudf/issues/9430,942370858,IC_kwDOBWUGps44K3Aq,2021-10-13T14:35:15Z,2021-10-13T14:36:19Z,CONTRIBUTOR,"Also, the reason this doesn't break in parquet is because it only uses `device_write_async`. ORC also has a couple of host writes mixed in. Those host writes depend on the `bytes_written` being updated after any previous write call.

Basically we need to rename `bytes_written` to mean offset in file to write into.

Also, this means this change in the tests is wrong: https://github.com/rapidsai/cudf/blob/8bb1e8603fbf5c41aad19bcbbfa39c249119b935/cpp/tests/io/parquet_test.cpp#L2061-L2073
This only worked because it's `launch::deferred`. Had it been `launch::async` then it would've broken too.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/942370858/reactions,1,0,0,0,0,0,0,0,1,9430
892,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149532,https://github.com/rapidsai/cudf/issues/9430#issuecomment-978149532,https://api.github.com/repos/rapidsai/cudf/issues/9430,978149532,IC_kwDOBWUGps46TWCc,2021-11-24T19:07:32Z,2021-11-24T19:07:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149532/reactions,0,0,0,0,0,0,0,0,0,9430
893,https://api.github.com/repos/rapidsai/cudf/issues/comments/978152606,https://github.com/rapidsai/cudf/issues/9430#issuecomment-978152606,https://api.github.com/repos/rapidsai/cudf/issues/9430,978152606,IC_kwDOBWUGps46TWye,2021-11-24T19:12:47Z,2021-11-24T19:12:47Z,CONTRIBUTOR,@devavret can we close this one? I think you merged a PR that addresses this.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978152606/reactions,0,0,0,0,0,0,0,0,0,9430
894,https://api.github.com/repos/rapidsai/cudf/issues/comments/978157206,https://github.com/rapidsai/cudf/issues/9430#issuecomment-978157206,https://api.github.com/repos/rapidsai/cudf/issues/9430,978157206,IC_kwDOBWUGps46TX6W,2021-11-24T19:20:20Z,2021-11-24T19:20:20Z,CONTRIBUTOR,"> @devavret can we close this one? I think you merged a PR that addresses this.

I don't recall.

To ""fix"" this, we might need to rename the `bytes_written` member to `bytes_committed` or something similar. And we should also change the code in parquet test to somehow update the `bytes_committed` before returning.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978157206/reactions,0,0,0,0,0,0,0,0,0,9430
895,https://api.github.com/repos/rapidsai/cudf/issues/comments/1000931036,https://github.com/rapidsai/cudf/issues/9430#issuecomment-1000931036,https://api.github.com/repos/rapidsai/cudf/issues/9430,1000931036,IC_kwDOBWUGps47qP7c,2021-12-24T21:03:09Z,2021-12-24T21:03:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1000931036/reactions,0,0,0,0,0,0,0,0,0,9430
896,https://api.github.com/repos/rapidsai/cudf/issues/comments/1005923211,https://github.com/rapidsai/cudf/issues/9430#issuecomment-1005923211,https://api.github.com/repos/rapidsai/cudf/issues/9430,1005923211,IC_kwDOBWUGps479SuL,2022-01-05T17:23:03Z,2022-01-05T17:23:03Z,CONTRIBUTOR,"We still are interested in this, but not really sure what the priority is.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1005923211/reactions,0,0,0,0,0,0,0,0,0,9430
897,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089555648,https://github.com/rapidsai/cudf/issues/9430#issuecomment-1089555648,https://api.github.com/repos/rapidsai/cudf/issues/9430,1089555648,IC_kwDOBWUGps5A8UzA,2022-04-06T00:09:41Z,2022-04-06T00:09:41Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089555648/reactions,0,0,0,0,0,0,0,0,0,9430
898,https://api.github.com/repos/rapidsai/cudf/issues/comments/946081736,https://github.com/rapidsai/cudf/issues/9461#issuecomment-946081736,https://api.github.com/repos/rapidsai/cudf/issues/9461,946081736,IC_kwDOBWUGps44ZA_I,2021-10-18T19:11:14Z,2021-10-18T19:11:14Z,CONTRIBUTOR,"In early prototypes of the AST implementation there was logic in the kernels to automatically swap the left and right tables so that the kernel configuration would always run over the left table. I removed this because that code path was swapping the tables without making the necessary associated modifications to the expression (e.g. `operation(GREATER, 0, 1)` needs to be converted to `operation(GREATER, 1, 0)`), leading to incorrect results. It should definitely be possible to do this in a safe way, though, so I'll look into the best way to accomplish that.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/946081736/reactions,2,0,0,0,2,0,0,0,0,9461
899,https://api.github.com/repos/rapidsai/cudf/issues/comments/946092823,https://github.com/rapidsai/cudf/issues/9461#issuecomment-946092823,https://api.github.com/repos/rapidsai/cudf/issues/9461,946092823,IC_kwDOBWUGps44ZDsX,2021-10-18T19:25:20Z,2021-10-18T19:25:20Z,CONTRIBUTOR,"@vyasr precisely, the hack we implemented builds the AST twice, so if this could be automatically done by cuDF that would be perfect",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/946092823/reactions,0,0,0,0,0,0,0,0,0,9461
900,https://api.github.com/repos/rapidsai/cudf/issues/comments/947141230,https://github.com/rapidsai/cudf/issues/9461#issuecomment-947141230,https://api.github.com/repos/rapidsai/cudf/issues/9461,947141230,IC_kwDOBWUGps44dDpu,2021-10-19T22:05:43Z,2021-10-19T22:06:36Z,CONTRIBUTOR,"@vyasr should we really be dabbling in changing the user provided expression? It seems to me like expression evaluation should be a garbage in, garbage out kind of interface. 

Can't we just change how we parallelize the operation? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/947141230/reactions,0,0,0,0,0,0,0,0,0,9461
901,https://api.github.com/repos/rapidsai/cudf/issues/comments/953913115,https://github.com/rapidsai/cudf/issues/9461#issuecomment-953913115,https://api.github.com/repos/rapidsai/cudf/issues/9461,953913115,IC_kwDOBWUGps44248b,2021-10-28T14:39:59Z,2021-10-28T14:39:59Z,CONTRIBUTOR,Confirmed that the patch by @vyasr (here https://github.com/rapidsai/cudf/pull/9523) handles the inner join case.,,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/953913115/reactions,0,0,0,0,0,0,0,0,0,9461
902,https://api.github.com/repos/rapidsai/cudf/issues/comments/980640326,https://github.com/rapidsai/cudf/issues/9461#issuecomment-980640326,https://api.github.com/repos/rapidsai/cudf/issues/9461,980640326,IC_kwDOBWUGps46c2JG,2021-11-27T15:02:55Z,2021-11-27T15:02:55Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/980640326/reactions,0,0,0,0,0,0,0,0,0,9461
903,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050932253,https://github.com/rapidsai/cudf/issues/9461#issuecomment-1050932253,https://api.github.com/repos/rapidsai/cudf/issues/9461,1050932253,IC_kwDOBWUGps4-o_Qd,2022-02-25T15:05:04Z,2022-02-25T15:05:04Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050932253/reactions,0,0,0,0,0,0,0,0,0,9461
904,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321445796,https://github.com/rapidsai/cudf/issues/9461#issuecomment-1321445796,https://api.github.com/repos/rapidsai/cudf/issues/9461,1321445796,IC_kwDOBWUGps5Ow6mk,2022-11-21T04:19:12Z,2022-11-21T04:19:12Z,CONTRIBUTOR,@vyasr should we close this?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321445796/reactions,0,0,0,0,0,0,0,0,0,9461
905,https://api.github.com/repos/rapidsai/cudf/issues/comments/1322164875,https://github.com/rapidsai/cudf/issues/9461#issuecomment-1322164875,https://api.github.com/repos/rapidsai/cudf/issues/9461,1322164875,IC_kwDOBWUGps5OzqKL,2022-11-21T14:43:27Z,2022-11-21T14:43:27Z,MEMBER,I don't think this has been solved for any case other than inner joins (which allows swapping the tables).,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1322164875/reactions,0,0,0,0,0,0,0,0,0,9461
906,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325458915,https://github.com/rapidsai/cudf/issues/9461#issuecomment-1325458915,https://api.github.com/repos/rapidsai/cudf/issues/9461,1325458915,IC_kwDOBWUGps5PAOXj,2022-11-23T17:59:27Z,2022-11-23T17:59:27Z,CONTRIBUTOR,"@jlowe is correct, this has only been solved for inner joins. Solving it for other types of joins will be substantially more complicated and will likely require an entirely new algorithm, and the new algorithm will most likely have measurably larger overhead. Perhaps there is a generic solution that does not introduce any more work, but I was not able to come up with one at the time that this issue was originally raised, even if I allowed for modification of the expression IIRC.

Most likely what we would need to do is some careful benchmarking of the current approach against a new approach for different data sizes to determine tradeoffs and perform a runtime dispatch to the appropriate code path depending on the size imbalance. That will also balloon compile time so it's something that we will have to consider very carefully.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325458915/reactions,0,0,0,0,0,0,0,0,0,9461
907,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325461270,https://github.com/rapidsai/cudf/issues/9461#issuecomment-1325461270,https://api.github.com/repos/rapidsai/cudf/issues/9461,1325461270,IC_kwDOBWUGps5PAO8W,2022-11-23T18:01:38Z,2022-11-23T18:01:38Z,CONTRIBUTOR,One possibly reasonable naive solution for might be to do a two pass approach that is an inner join followed by a left join with a suitable predicate to determine which rows had no matches in the inner join. That may still be sufficient to overcome the current performance bottlenecks in some cases without doubling the number of kernels or requiring the development of entirely new ones.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325461270/reactions,0,0,0,0,0,0,0,0,0,9461
908,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149451,https://github.com/rapidsai/cudf/issues/9469#issuecomment-978149451,https://api.github.com/repos/rapidsai/cudf/issues/9469,978149451,IC_kwDOBWUGps46TWBL,2021-11-24T19:07:24Z,2021-11-24T19:07:24Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149451/reactions,0,0,0,0,0,0,0,0,0,9469
909,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048164719,https://github.com/rapidsai/cudf/issues/9469#issuecomment-1048164719,https://api.github.com/repos/rapidsai/cudf/issues/9469,1048164719,IC_kwDOBWUGps4-eblv,2022-02-22T20:03:02Z,2022-02-22T20:03:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048164719/reactions,0,0,0,0,0,0,0,0,0,9469
910,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050184931,https://github.com/rapidsai/cudf/issues/9469#issuecomment-1050184931,https://api.github.com/repos/rapidsai/cudf/issues/9469,1050184931,IC_kwDOBWUGps4-mIzj,2022-02-24T19:22:45Z,2022-02-24T19:22:45Z,CONTRIBUTOR,"still relevant and needs to be addressed.
Added ""good first issue""",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050184931/reactions,0,0,0,0,0,0,0,0,0,9469
911,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149426,https://github.com/rapidsai/cudf/issues/9497#issuecomment-978149426,https://api.github.com/repos/rapidsai/cudf/issues/9497,978149426,IC_kwDOBWUGps46TWAy,2021-11-24T19:07:22Z,2021-11-24T19:07:22Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978149426/reactions,0,0,0,0,0,0,0,0,0,9497
912,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048164675,https://github.com/rapidsai/cudf/issues/9497#issuecomment-1048164675,https://api.github.com/repos/rapidsai/cudf/issues/9497,1048164675,IC_kwDOBWUGps4-eblD,2022-02-22T20:02:59Z,2022-02-22T20:02:59Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048164675/reactions,0,0,0,0,0,0,0,0,0,9497
913,https://api.github.com/repos/rapidsai/cudf/issues/comments/1320982005,https://github.com/rapidsai/cudf/issues/9497#issuecomment-1320982005,https://api.github.com/repos/rapidsai/cudf/issues/9497,1320982005,IC_kwDOBWUGps5OvJX1,2022-11-19T22:22:08Z,2022-11-19T22:22:08Z,CONTRIBUTOR,@ttnghia is this still needed?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1320982005/reactions,0,0,0,0,0,0,0,0,0,9497
914,https://api.github.com/repos/rapidsai/cudf/issues/comments/1320984775,https://github.com/rapidsai/cudf/issues/9497#issuecomment-1320984775,https://api.github.com/repos/rapidsai/cudf/issues/9497,1320984775,IC_kwDOBWUGps5OvKDH,2022-11-19T22:40:13Z,2022-12-27T18:22:07Z,CONTRIBUTOR,"Yes this is still needed. Not a bug but having this may improve stability/reduce hidden bugs.

Edit: I just realize that the current Java code is doing very well in handling null output from `getData`. If throwing exception on LIST/STRUCT type input, it is still not guaranteed that the output of other types will never be null. In addition, with exception being thrown, the callers also need to deal more with the complex type handling to not call `getData()` on LIST/STRUCT. Overall, this issue may not be very beneficial.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1320984775/reactions,0,0,0,0,0,0,0,0,0,9497
915,https://api.github.com/repos/rapidsai/cudf/issues/comments/1366094374,https://github.com/rapidsai/cudf/issues/9497#issuecomment-1366094374,https://api.github.com/repos/rapidsai/cudf/issues/9497,1366094374,IC_kwDOBWUGps5RbPIm,2022-12-27T18:29:21Z,2022-12-27T18:29:21Z,MEMBER,"Agree this is pretty minor.  The Javadoc clearly states that it returns null if there's no buffer.  We could change the behavior to throw on no buffer instead of returning null.  I don't know how many other places are already coded against the existing functionality, handling the null themselves, and would break with a thrown exception.  Not sure this change is worth the risk of breakage.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1366094374/reactions,0,0,0,0,0,0,0,0,0,9497
916,https://api.github.com/repos/rapidsai/cudf/issues/comments/950944977,https://github.com/rapidsai/cudf/issues/9512#issuecomment-950944977,https://api.github.com/repos/rapidsai/cudf/issues/9512,950944977,IC_kwDOBWUGps44rkTR,2021-10-25T13:45:04Z,2021-10-25T13:45:04Z,MEMBER,"We don't currently support the `on` keyword for join, as noted in the docstring. I'm going to convert this issue to a feature request to support `on`.

Are you able to instead use `merge` for your use case per your workaround?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/950944977/reactions,0,0,0,0,0,0,0,0,0,9512
917,https://api.github.com/repos/rapidsai/cudf/issues/comments/951040832,https://github.com/rapidsai/cudf/issues/9512#issuecomment-951040832,https://api.github.com/repos/rapidsai/cudf/issues/9512,951040832,IC_kwDOBWUGps44r7tA,2021-10-25T15:24:25Z,2021-10-25T15:24:25Z,NONE,"Yes, sorry, did not see that comment in the docstring",,krlng,1107509,MDQ6VXNlcjExMDc1MDk=,https://avatars.githubusercontent.com/u/1107509?v=4,,https://api.github.com/users/krlng,https://github.com/krlng,https://api.github.com/users/krlng/followers,https://api.github.com/users/krlng/following{/other_user},https://api.github.com/users/krlng/gists{/gist_id},https://api.github.com/users/krlng/starred{/owner}{/repo},https://api.github.com/users/krlng/subscriptions,https://api.github.com/users/krlng/orgs,https://api.github.com/users/krlng/repos,https://api.github.com/users/krlng/events{/privacy},https://api.github.com/users/krlng/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/951040832/reactions,0,0,0,0,0,0,0,0,0,9512
918,https://api.github.com/repos/rapidsai/cudf/issues/comments/978018197,https://github.com/rapidsai/cudf/issues/9512#issuecomment-978018197,https://api.github.com/repos/rapidsai/cudf/issues/9512,978018197,IC_kwDOBWUGps46S1-V,2021-11-24T16:07:46Z,2021-11-24T16:07:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978018197/reactions,0,0,0,0,0,0,0,0,0,9512
919,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048019473,https://github.com/rapidsai/cudf/issues/9512#issuecomment-1048019473,https://api.github.com/repos/rapidsai/cudf/issues/9512,1048019473,IC_kwDOBWUGps4-d4IR,2022-02-22T17:09:04Z,2022-02-22T17:09:04Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1048019473/reactions,0,0,0,0,0,0,0,0,0,9512
920,https://api.github.com/repos/rapidsai/cudf/issues/comments/978217138,https://github.com/rapidsai/cudf/issues/9519#issuecomment-978217138,https://api.github.com/repos/rapidsai/cudf/issues/9519,978217138,IC_kwDOBWUGps46Tmiy,2021-11-24T21:02:38Z,2021-11-24T21:02:38Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978217138/reactions,0,0,0,0,0,0,0,0,0,9519
921,https://api.github.com/repos/rapidsai/cudf/issues/comments/978294257,https://github.com/rapidsai/cudf/issues/9519#issuecomment-978294257,https://api.github.com/repos/rapidsai/cudf/issues/9519,978294257,IC_kwDOBWUGps46T5Xx,2021-11-24T21:53:35Z,2021-11-24T21:53:35Z,MEMBER,"Still desired, low priority",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/978294257/reactions,0,0,0,0,0,0,0,0,0,9519
922,https://api.github.com/repos/rapidsai/cudf/issues/comments/1000938497,https://github.com/rapidsai/cudf/issues/9519#issuecomment-1000938497,https://api.github.com/repos/rapidsai/cudf/issues/9519,1000938497,IC_kwDOBWUGps47qRwB,2021-12-24T22:03:12Z,2021-12-24T22:03:12Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1000938497/reactions,0,0,0,0,0,0,0,0,0,9519
923,https://api.github.com/repos/rapidsai/cudf/issues/comments/1004862958,https://github.com/rapidsai/cudf/issues/9519#issuecomment-1004862958,https://api.github.com/repos/rapidsai/cudf/issues/9519,1004862958,IC_kwDOBWUGps475P3u,2022-01-04T14:35:37Z,2022-01-04T14:35:37Z,MEMBER,"Still desired, low priority",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1004862958/reactions,0,0,0,0,0,0,0,0,0,9519
924,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029084941,https://github.com/rapidsai/cudf/issues/9519#issuecomment-1029084941,https://api.github.com/repos/rapidsai/cudf/issues/9519,1029084941,IC_kwDOBWUGps49VpcN,2022-02-03T15:07:40Z,2022-02-03T15:07:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029084941/reactions,0,0,0,0,0,0,0,0,0,9519
925,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117537636,https://github.com/rapidsai/cudf/issues/9519#issuecomment-1117537636,https://api.github.com/repos/rapidsai/cudf/issues/9519,1117537636,IC_kwDOBWUGps5CnEVk,2022-05-04T16:08:07Z,2022-05-04T16:08:07Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117537636/reactions,0,0,0,0,0,0,0,0,0,9519
926,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934442,https://github.com/rapidsai/cudf/issues/9532#issuecomment-991934442,https://api.github.com/repos/rapidsai/cudf/issues/9532,991934442,IC_kwDOBWUGps47H7fq,2021-12-12T17:07:11Z,2021-12-12T17:07:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934442/reactions,0,0,0,0,0,0,0,0,0,9532
927,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932119,https://github.com/rapidsai/cudf/issues/9532#issuecomment-1065932119,https://api.github.com/repos/rapidsai/cudf/issues/9532,1065932119,IC_kwDOBWUGps4_iNVX,2022-03-12T18:03:19Z,2022-03-12T18:03:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932119/reactions,0,0,0,0,0,0,0,0,0,9532
928,https://api.github.com/repos/rapidsai/cudf/issues/comments/980810004,https://github.com/rapidsai/cudf/issues/9557#issuecomment-980810004,https://api.github.com/repos/rapidsai/cudf/issues/9557,980810004,IC_kwDOBWUGps46dfkU,2021-11-28T00:07:12Z,2021-11-28T00:07:12Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/980810004/reactions,0,0,0,0,0,0,0,0,0,9557
929,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009466020,https://github.com/rapidsai/cudf/issues/9557#issuecomment-1009466020,https://api.github.com/repos/rapidsai/cudf/issues/9557,1009466020,IC_kwDOBWUGps48Kzqk,2022-01-10T23:53:49Z,2022-01-11T00:00:15Z,CONTRIBUTOR,"While tackling this, it would be nice to also address https://github.com/rapidsai/cudf/pull/9917#discussion_r779021242 and look into compile-time improvements like https://github.com/rapidsai/cudf/pull/9917#discussion_r771559204.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009466020/reactions,0,0,0,0,0,0,0,0,0,9557
930,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034387994,https://github.com/rapidsai/cudf/issues/9557#issuecomment-1034387994,https://api.github.com/repos/rapidsai/cudf/issues/9557,1034387994,IC_kwDOBWUGps49p4Ia,2022-02-10T01:25:47Z,2022-02-10T01:25:47Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034387994/reactions,0,0,0,0,0,0,0,0,0,9557
931,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934433,https://github.com/rapidsai/cudf/issues/9561#issuecomment-991934433,https://api.github.com/repos/rapidsai/cudf/issues/9561,991934433,IC_kwDOBWUGps47H7fh,2021-12-12T17:07:08Z,2021-12-12T17:07:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934433/reactions,0,0,0,0,0,0,0,0,0,9561
932,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932116,https://github.com/rapidsai/cudf/issues/9561#issuecomment-1065932116,https://api.github.com/repos/rapidsai/cudf/issues/9561,1065932116,IC_kwDOBWUGps4_iNVU,2022-03-12T18:03:18Z,2022-03-12T18:03:18Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932116/reactions,0,0,0,0,0,0,0,0,0,9561
933,https://api.github.com/repos/rapidsai/cudf/issues/comments/967232756,https://github.com/rapidsai/cudf/issues/9575#issuecomment-967232756,https://api.github.com/repos/rapidsai/cudf/issues/9575,967232756,IC_kwDOBWUGps45psz0,2021-11-12T16:09:01Z,2021-11-12T16:09:01Z,MEMBER,"This is probably due to edge cases in our NaN vs null handling.

If you call `df.nans_to_nulls().groupby(['s']).c.mean()`, this will behave as expected.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/967232756/reactions,1,1,0,0,0,0,0,0,0,9575
934,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934418,https://github.com/rapidsai/cudf/issues/9575#issuecomment-991934418,https://api.github.com/repos/rapidsai/cudf/issues/9575,991934418,IC_kwDOBWUGps47H7fS,2021-12-12T17:07:05Z,2021-12-12T17:07:05Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934418/reactions,0,0,0,0,0,0,0,0,0,9575
935,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932106,https://github.com/rapidsai/cudf/issues/9575#issuecomment-1065932106,https://api.github.com/repos/rapidsai/cudf/issues/9575,1065932106,IC_kwDOBWUGps4_iNVK,2022-03-12T18:03:15Z,2022-03-12T18:03:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932106/reactions,0,0,0,0,0,0,0,0,0,9575
936,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323953712,https://github.com/rapidsai/cudf/issues/9575#issuecomment-1323953712,https://api.github.com/repos/rapidsai/cudf/issues/9575,1323953712,IC_kwDOBWUGps5O6e4w,2022-11-22T16:37:53Z,2022-11-22T16:37:53Z,CONTRIBUTOR,"Since `Series.dropna()` drops `NaN`, I think it's fair to expect `groupby().dropna()` to follow suit. In other words, this is a bug in cuDF.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323953712/reactions,0,0,0,0,0,0,0,0,0,9575
937,https://api.github.com/repos/rapidsai/cudf/issues/comments/959736884,https://github.com/rapidsai/cudf/issues/9587#issuecomment-959736884,https://api.github.com/repos/rapidsai/cudf/issues/9587,959736884,IC_kwDOBWUGps45NGw0,2021-11-03T17:04:34Z,2021-11-03T17:04:34Z,CONTRIBUTOR,CC @leofang @jakirkham @gmarkall,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/959736884/reactions,3,3,0,0,0,0,0,0,0,9587
938,https://api.github.com/repos/rapidsai/cudf/issues/comments/959757941,https://github.com/rapidsai/cudf/issues/9587#issuecomment-959757941,https://api.github.com/repos/rapidsai/cudf/issues/9587,959757941,IC_kwDOBWUGps45NL51,2021-11-03T17:27:03Z,2021-11-03T17:27:03Z,MEMBER,cc: @kmaehashi @emcastillo @asi1024 for vis,,leofang,5534781,MDQ6VXNlcjU1MzQ3ODE=,https://avatars.githubusercontent.com/u/5534781?v=4,,https://api.github.com/users/leofang,https://github.com/leofang,https://api.github.com/users/leofang/followers,https://api.github.com/users/leofang/following{/other_user},https://api.github.com/users/leofang/gists{/gist_id},https://api.github.com/users/leofang/starred{/owner}{/repo},https://api.github.com/users/leofang/subscriptions,https://api.github.com/users/leofang/orgs,https://api.github.com/users/leofang/repos,https://api.github.com/users/leofang/events{/privacy},https://api.github.com/users/leofang/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/959757941/reactions,0,0,0,0,0,0,0,0,0,9587
939,https://api.github.com/repos/rapidsai/cudf/issues/comments/985721540,https://github.com/rapidsai/cudf/issues/9587#issuecomment-985721540,https://api.github.com/repos/rapidsai/cudf/issues/9587,985721540,IC_kwDOBWUGps46wOrE,2021-12-03T18:03:08Z,2021-12-03T18:03:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/985721540/reactions,0,0,0,0,0,0,0,0,0,9587
940,https://api.github.com/repos/rapidsai/cudf/issues/comments/1058333305,https://github.com/rapidsai/cudf/issues/9587#issuecomment-1058333305,https://api.github.com/repos/rapidsai/cudf/issues/9587,1058333305,IC_kwDOBWUGps4_FOJ5,2022-03-03T18:04:31Z,2022-03-03T18:04:31Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1058333305/reactions,0,0,0,0,0,0,0,0,0,9587
941,https://api.github.com/repos/rapidsai/cudf/issues/comments/985899253,https://github.com/rapidsai/cudf/issues/9593#issuecomment-985899253,https://api.github.com/repos/rapidsai/cudf/issues/9593,985899253,IC_kwDOBWUGps46w6D1,2021-12-03T23:03:32Z,2021-12-03T23:03:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/985899253/reactions,0,0,0,0,0,0,0,0,0,9593
942,https://api.github.com/repos/rapidsai/cudf/issues/comments/1143966577,https://github.com/rapidsai/cudf/issues/9593#issuecomment-1143966577,https://api.github.com/repos/rapidsai/cudf/issues/9593,1143966577,IC_kwDOBWUGps5EL4tx,2022-06-01T18:03:22Z,2022-06-01T18:03:22Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1143966577/reactions,0,0,0,0,0,0,0,0,0,9593
943,https://api.github.com/repos/rapidsai/cudf/issues/comments/990250278,https://github.com/rapidsai/cudf/issues/9601#issuecomment-990250278,https://api.github.com/repos/rapidsai/cudf/issues/9601,990250278,IC_kwDOBWUGps47BgUm,2021-12-09T21:02:44Z,2021-12-09T21:02:44Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/990250278/reactions,0,0,0,0,0,0,0,0,0,9601
944,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063368218,https://github.com/rapidsai/cudf/issues/9601#issuecomment-1063368218,https://api.github.com/repos/rapidsai/cudf/issues/9601,1063368218,IC_kwDOBWUGps4_YbYa,2022-03-09T21:02:53Z,2022-03-09T21:02:53Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063368218/reactions,0,0,0,0,0,0,0,0,0,9601
945,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934400,https://github.com/rapidsai/cudf/issues/9602#issuecomment-991934400,https://api.github.com/repos/rapidsai/cudf/issues/9602,991934400,IC_kwDOBWUGps47H7fA,2021-12-12T17:06:59Z,2021-12-12T17:06:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991934400/reactions,0,0,0,0,0,0,0,0,0,9602
946,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932092,https://github.com/rapidsai/cudf/issues/9602#issuecomment-1065932092,https://api.github.com/repos/rapidsai/cudf/issues/9602,1065932092,IC_kwDOBWUGps4_iNU8,2022-03-12T18:03:10Z,2022-03-12T18:03:10Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065932092/reactions,0,0,0,0,0,0,0,0,0,9602
947,https://api.github.com/repos/rapidsai/cudf/issues/comments/1892649917,https://github.com/rapidsai/cudf/issues/9602#issuecomment-1892649917,https://api.github.com/repos/rapidsai/cudf/issues/9602,1892649917,IC_kwDOBWUGps5wz4u9,2024-01-15T18:57:12Z,2024-01-15T18:57:12Z,NONE,"Hi all,
I just attempted to use idxmin with my CUDF dataframe which resulted in an AttributeError: DataFrame object has no attribute idxmin.
I was able to reproduce the error using the above Argentinian consumption DF. Any idea on work arounds?",,espackman-nv,102772839,U_kgDOBiAwZw,https://avatars.githubusercontent.com/u/102772839?v=4,,https://api.github.com/users/espackman-nv,https://github.com/espackman-nv,https://api.github.com/users/espackman-nv/followers,https://api.github.com/users/espackman-nv/following{/other_user},https://api.github.com/users/espackman-nv/gists{/gist_id},https://api.github.com/users/espackman-nv/starred{/owner}{/repo},https://api.github.com/users/espackman-nv/subscriptions,https://api.github.com/users/espackman-nv/orgs,https://api.github.com/users/espackman-nv/repos,https://api.github.com/users/espackman-nv/events{/privacy},https://api.github.com/users/espackman-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1892649917/reactions,0,0,0,0,0,0,0,0,0,9602
948,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146616527,https://github.com/rapidsai/cudf/issues/9634#issuecomment-1146616527,https://api.github.com/repos/rapidsai/cudf/issues/9634,1146616527,IC_kwDOBWUGps5EV_rP,2022-06-04T13:51:34Z,2022-06-04T13:51:34Z,NONE,"Hi, if you are implementing **between_time** for compatibility, may I also recommend and request implementing the **at_time** function as well.  In my current code the lack of these functions necessitates switching back and forth between vanilla pandas and cudf in order to use these functions, which not only slows down the code but is quite inelegant.  Thanks so much!!! ",,drsxr,8468143,MDQ6VXNlcjg0NjgxNDM=,https://avatars.githubusercontent.com/u/8468143?v=4,,https://api.github.com/users/drsxr,https://github.com/drsxr,https://api.github.com/users/drsxr/followers,https://api.github.com/users/drsxr/following{/other_user},https://api.github.com/users/drsxr/gists{/gist_id},https://api.github.com/users/drsxr/starred{/owner}{/repo},https://api.github.com/users/drsxr/subscriptions,https://api.github.com/users/drsxr/orgs,https://api.github.com/users/drsxr/repos,https://api.github.com/users/drsxr/events{/privacy},https://api.github.com/users/drsxr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146616527/reactions,0,0,0,0,0,0,0,0,0,9634
949,https://api.github.com/repos/rapidsai/cudf/issues/comments/990323986,https://github.com/rapidsai/cudf/issues/9639#issuecomment-990323986,https://api.github.com/repos/rapidsai/cudf/issues/9639,990323986,IC_kwDOBWUGps47ByUS,2021-12-09T22:02:46Z,2021-12-09T22:02:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/990323986/reactions,0,0,0,0,0,0,0,0,0,9639
950,https://api.github.com/repos/rapidsai/cudf/issues/comments/990364237,https://github.com/rapidsai/cudf/issues/9639#issuecomment-990364237,https://api.github.com/repos/rapidsai/cudf/issues/9639,990364237,IC_kwDOBWUGps47B8JN,2021-12-09T22:39:37Z,2021-12-09T22:39:37Z,CONTRIBUTOR,"I believe @brandon-b-miller is actively working on this.

Whilst I'm commenting, I'll add a note that numba/numba#7621 helps support this implementation so may be a useful reference along with numba/numba-examples#40, which requires a similar mechanism of linking CUDA C/C++ with Numba kernels.",,gmarkall,535640,MDQ6VXNlcjUzNTY0MA==,https://avatars.githubusercontent.com/u/535640?v=4,,https://api.github.com/users/gmarkall,https://github.com/gmarkall,https://api.github.com/users/gmarkall/followers,https://api.github.com/users/gmarkall/following{/other_user},https://api.github.com/users/gmarkall/gists{/gist_id},https://api.github.com/users/gmarkall/starred{/owner}{/repo},https://api.github.com/users/gmarkall/subscriptions,https://api.github.com/users/gmarkall/orgs,https://api.github.com/users/gmarkall/repos,https://api.github.com/users/gmarkall/events{/privacy},https://api.github.com/users/gmarkall/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/990364237/reactions,0,0,0,0,0,0,0,0,0,9639
951,https://api.github.com/repos/rapidsai/cudf/issues/comments/991036162,https://github.com/rapidsai/cudf/issues/9639#issuecomment-991036162,https://api.github.com/repos/rapidsai/cudf/issues/9639,991036162,IC_kwDOBWUGps47EgMC,2021-12-10T14:51:10Z,2021-12-10T14:51:10Z,CONTRIBUTOR,"This is being worked on, albeit slowly for now. We've had a lot of discussions of how we intend to proceed with this offline, but the general consensus is that some of these functions will be a lot easier to support than others, namely the ones that have predictable memory requirements. Hopefully more to come here soon. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991036162/reactions,1,1,0,0,0,0,0,0,0,9639
952,https://api.github.com/repos/rapidsai/cudf/issues/comments/1008314141,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1008314141,https://api.github.com/repos/rapidsai/cudf/issues/9639,1008314141,IC_kwDOBWUGps48Gacd,2022-01-09T15:03:00Z,2022-01-09T15:03:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1008314141/reactions,0,0,0,0,0,0,0,0,0,9639
953,https://api.github.com/repos/rapidsai/cudf/issues/comments/1094074964,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1094074964,https://api.github.com/repos/rapidsai/cudf/issues/9639,1094074964,IC_kwDOBWUGps5BNkJU,2022-04-09T16:03:01Z,2022-04-09T16:03:01Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1094074964/reactions,0,0,0,0,0,0,0,0,0,9639
954,https://api.github.com/repos/rapidsai/cudf/issues/comments/1094699365,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1094699365,https://api.github.com/repos/rapidsai/cudf/issues/9639,1094699365,IC_kwDOBWUGps5BP8ll,2022-04-11T08:24:08Z,2022-04-11T08:24:08Z,CONTRIBUTOR,This is still being worked on.,,gmarkall,535640,MDQ6VXNlcjUzNTY0MA==,https://avatars.githubusercontent.com/u/535640?v=4,,https://api.github.com/users/gmarkall,https://github.com/gmarkall,https://api.github.com/users/gmarkall/followers,https://api.github.com/users/gmarkall/following{/other_user},https://api.github.com/users/gmarkall/gists{/gist_id},https://api.github.com/users/gmarkall/starred{/owner}{/repo},https://api.github.com/users/gmarkall/subscriptions,https://api.github.com/users/gmarkall/orgs,https://api.github.com/users/gmarkall/repos,https://api.github.com/users/gmarkall/events{/privacy},https://api.github.com/users/gmarkall/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1094699365/reactions,5,4,0,0,0,0,0,0,1,9639
955,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179687670,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1179687670,https://api.github.com/repos/rapidsai/cudf/issues/9639,1179687670,IC_kwDOBWUGps5GUJr2,2022-07-10T09:03:20Z,2022-07-10T09:03:20Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179687670/reactions,0,0,0,0,0,0,0,0,0,9639
956,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186997058,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1186997058,https://api.github.com/repos/rapidsai/cudf/issues/9639,1186997058,IC_kwDOBWUGps5GwCNC,2022-07-18T09:53:27Z,2022-07-18T09:53:27Z,CONTRIBUTOR,This is still active.,,gmarkall,535640,MDQ6VXNlcjUzNTY0MA==,https://avatars.githubusercontent.com/u/535640?v=4,,https://api.github.com/users/gmarkall,https://github.com/gmarkall,https://api.github.com/users/gmarkall/followers,https://api.github.com/users/gmarkall/following{/other_user},https://api.github.com/users/gmarkall/gists{/gist_id},https://api.github.com/users/gmarkall/starred{/owner}{/repo},https://api.github.com/users/gmarkall/subscriptions,https://api.github.com/users/gmarkall/orgs,https://api.github.com/users/gmarkall/repos,https://api.github.com/users/gmarkall/events{/privacy},https://api.github.com/users/gmarkall/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186997058/reactions,0,0,0,0,0,0,0,0,0,9639
957,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186997814,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1186997814,https://api.github.com/repos/rapidsai/cudf/issues/9639,1186997814,IC_kwDOBWUGps5GwCY2,2022-07-18T09:54:21Z,2022-07-18T09:54:21Z,CONTRIBUTOR,@brandon-b-miller Should this be moved to a different project board?,,gmarkall,535640,MDQ6VXNlcjUzNTY0MA==,https://avatars.githubusercontent.com/u/535640?v=4,,https://api.github.com/users/gmarkall,https://github.com/gmarkall,https://api.github.com/users/gmarkall/followers,https://api.github.com/users/gmarkall/following{/other_user},https://api.github.com/users/gmarkall/gists{/gist_id},https://api.github.com/users/gmarkall/starred{/owner}{/repo},https://api.github.com/users/gmarkall/subscriptions,https://api.github.com/users/gmarkall/orgs,https://api.github.com/users/gmarkall/repos,https://api.github.com/users/gmarkall/events{/privacy},https://api.github.com/users/gmarkall/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186997814/reactions,0,0,0,0,0,0,0,0,0,9639
958,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286273760,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1286273760,https://api.github.com/repos/rapidsai/cudf/issues/9639,1286273760,IC_kwDOBWUGps5Mqvrg,2022-10-20T23:34:22Z,2022-10-20T23:34:22Z,CONTRIBUTOR,@brandon-b-miller do you want to keep using this issue to track the remaining work as well (the methods that output strings)?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286273760/reactions,0,0,0,0,0,0,0,0,0,9639
959,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287341586,https://github.com/rapidsai/cudf/issues/9639#issuecomment-1287341586,https://api.github.com/repos/rapidsai/cudf/issues/9639,1287341586,IC_kwDOBWUGps5Mu0YS,2022-10-21T19:10:11Z,2022-10-21T19:13:46Z,CONTRIBUTOR,"Just wanted to provide an update on this feature since we now have partial support for this and I think we have a clear picture of what's left to be done and a tentative timeline. Here is a summary.

**22.10 introduced string udfs via the `strings_udf` library**
With the merge of https://github.com/rapidsai/cudf/pull/11319 (as well as a flurry of follow up fixes), a new separately installable package `strings_udf` was rolled out to support this. When present in the users environment, users will find that they are able to pass string columns to UDFs through `DataFrame.apply` and `Series.apply` and utilize the following hopefully familiar python methods within those UDFs:

- `str.count()`
- `str.startswith()`
- `str.endswith()`
- `str.find()`
- `str.rfind()`
- `str.isalnum()`
- `str.isalpha()`
- `str.isdecimal()`
- `str.isdigit()`
- `str.islower()`
- `str.isupper()`
- `str.isnumeric()`
- `str.isspace()`
- `str.istitle()`
- Comparison operators  between strings (`==`, `!=`, `>`, `<`, `<=`, `>=`)
- Contains operation (`str in other`)
- `len(str)`

**CEC**
CUDA 11.5 is currently required for this feature. CUDA enhanced compatibility is pending with PR 
https://github.com/rapidsai/cudf/pull/11884. 

**More features (methods that produce non numeric data)**
Functions and methods that return strings are being worked on for 22.12 with the main PR implementing the bulk of the plumbing at https://github.com/rapidsai/cudf/pull/11933. After this is merged, the following features will be added in phases:

- `str.capitalize()`
- `str.upper()`
- `str.lower()`
- `str.swapcase()`
- `str.ljust`
- `str.rjust`,
- `str.strip`
- `str.lstrip`
- `str.rstrip`
- `str.removeprefix`
- `str.removesuffix`
- `str.title`
- `str.center`
- `str.expandtabs`
- `str.replace`
- `str.zfill`
- `str.index`
- `str.rindex`
- Substring indexing (`str[1:3]`)
- Concatenation (the `+` operator between strings)
- Iteration (`for char in str:`)

The above functions currently require cuda dynamic global memory allocation and can therefore have some unpredictable performance characteristics. We hope to make this problem go away in the future. 



**Wont add for now**
Some features like formatting are not yet on the roadmap, in addition to functions with structured return types such as `split` which returns a list. 


Hopefully this gives us something to work with for now and hopefully more updates to this thread in the future!


",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287341586/reactions,1,1,0,0,0,0,0,0,0,9639
960,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117647336,https://github.com/rapidsai/cudf/issues/9639#issuecomment-2117647336,https://api.github.com/repos/rapidsai/cudf/issues/9639,2117647336,IC_kwDOBWUGps5-OLvo,2024-05-17T13:46:28Z,2024-05-17T13:46:28Z,CONTRIBUTOR,@brandon-b-miller could you update this issue with the current state of UDFs? ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117647336/reactions,0,0,0,0,0,0,0,0,0,9639
961,https://api.github.com/repos/rapidsai/cudf/issues/comments/990323931,https://github.com/rapidsai/cudf/issues/9640#issuecomment-990323931,https://api.github.com/repos/rapidsai/cudf/issues/9640,990323931,IC_kwDOBWUGps47ByTb,2021-12-09T22:02:43Z,2021-12-09T22:02:43Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/990323931/reactions,0,0,0,0,0,0,0,0,0,9640
962,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063417955,https://github.com/rapidsai/cudf/issues/9640#issuecomment-1063417955,https://api.github.com/repos/rapidsai/cudf/issues/9640,1063417955,IC_kwDOBWUGps4_Ynhj,2022-03-09T22:02:55Z,2022-03-09T22:02:55Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063417955/reactions,0,0,0,0,0,0,0,0,0,9640
963,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257727,https://github.com/rapidsai/cudf/issues/9650#issuecomment-991257727,https://api.github.com/repos/rapidsai/cudf/issues/9650,991257727,IC_kwDOBWUGps47FWR_,2021-12-10T20:02:48Z,2021-12-10T20:02:48Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257727/reactions,0,0,0,0,0,0,0,0,0,9650
964,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064453938,https://github.com/rapidsai/cudf/issues/9650#issuecomment-1064453938,https://api.github.com/repos/rapidsai/cudf/issues/9650,1064453938,IC_kwDOBWUGps4_ckcy,2022-03-10T20:03:09Z,2022-03-10T20:03:09Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064453938/reactions,0,0,0,0,0,0,0,0,0,9650
965,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257712,https://github.com/rapidsai/cudf/issues/9651#issuecomment-991257712,https://api.github.com/repos/rapidsai/cudf/issues/9651,991257712,IC_kwDOBWUGps47FWRw,2021-12-10T20:02:47Z,2021-12-10T20:02:47Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/991257712/reactions,0,0,0,0,0,0,0,0,0,9651
966,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064453897,https://github.com/rapidsai/cudf/issues/9651#issuecomment-1064453897,https://api.github.com/repos/rapidsai/cudf/issues/9651,1064453897,IC_kwDOBWUGps4_ckcJ,2022-03-10T20:03:07Z,2022-03-10T20:03:07Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064453897/reactions,0,0,0,0,0,0,0,0,0,9651
967,https://api.github.com/repos/rapidsai/cudf/issues/comments/973600258,https://github.com/rapidsai/cudf/issues/9657#issuecomment-973600258,https://api.github.com/repos/rapidsai/cudf/issues/9657,973600258,IC_kwDOBWUGps46B_YC,2021-11-19T00:47:37Z,2021-11-19T00:47:37Z,MEMBER,"We will probably need a libcudf  implementation of the following function BPE function .  (See HF [reference](https://github.com/huggingface/transformers/blob/b24ead87e1be6bce17e4ec5c953b6d028e4b3af7/src/transformers/models/gpt2/tokenization_gpt2.py#L202-L242) implementation)  . 

Here given the rank of each bigram we combine the most occuring bigram based on the rank provided in merges file.  Once we have that we then convert it into  token id using the vocabulary provided. 


### Actual Algorithim: 
```python


def bpe(token, bpe_ranks):
    # if token in self.cache:
    #     return self.cache[token]
    word = tuple(token)
    pairs = get_pairs(word)

    if not pairs:
        return token

    while True:
        bigram = min(pairs, key=lambda pair: bpe_ranks.get(pair, float(""inf"")))
        #print(bigram)
        
        if bigram not in bpe_ranks:
            break
        first, second = bigram
        new_word = []
        i = 0
        while i < len(word):
            try:
                j = word.index(first, i)
            except ValueError:
                new_word.extend(word[i:])
                break
            else:
                new_word.extend(word[i:j])
                i = j

            if word[i] == first and i < len(word) - 1 and word[i + 1] == second:
                new_word.append(first + second)
                i += 2
            else:
                new_word.append(word[i])
                i += 1
        new_word = tuple(new_word)
        word = new_word
        if len(word) == 1:
            break
        else:
            pairs = get_pairs(word)
            print(pairs)
    word = "" "".join(word)
    #self.cache[token] = word
    return word

   def get_pairs(word):
    """"""
    Return set of symbol pairs in a word.

    Word is represented as tuple of symbols (symbols being variable-length strings).
    """"""
    pairs = set()
    prev_char = word[0]
    for char in word[1:]:
        pairs.add((prev_char, char))
        prev_char = char
    return pairs

```
### Example Call
```python
# wget https://huggingface.co/gpt2/raw/main/merges.txt 
# to get this file

merges_file = 'gpt_2_tokenizer/merges.txt'
with open(merges_file, encoding=""utf-8"") as merges_handle:
    bpe_merges = merges_handle.read().split(""\n"")[1:-1]
bpe_merges = [tuple(merge.split()) for merge in bpe_merges]
bpe_ranks = dict(zip(bpe_merges, range(len(bpe_merges))))

bpe(""Thisisit"", bpe_ranks)
```

```
'This is it'
```
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/973600258/reactions,0,0,0,0,0,0,0,0,0,9657
968,https://api.github.com/repos/rapidsai/cudf/issues/comments/973600625,https://github.com/rapidsai/cudf/issues/9657#issuecomment-973600625,https://api.github.com/repos/rapidsai/cudf/issues/9657,973600625,IC_kwDOBWUGps46B_dx,2021-11-19T00:47:48Z,2021-11-19T00:47:56Z,MEMBER,CC: @davidwendt  for awareness. ,,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/973600625/reactions,0,0,0,0,0,0,0,0,0,9657
969,https://api.github.com/repos/rapidsai/cudf/issues/comments/981932105,https://github.com/rapidsai/cudf/issues/9657#issuecomment-981932105,https://api.github.com/repos/rapidsai/cudf/issues/9657,981932105,IC_kwDOBWUGps46hxhJ,2021-11-29T19:10:19Z,2021-11-29T19:10:19Z,NONE,"There is a need for the aforementioned feature request as we currently only support tokenization for BERT. As especially considering newer architectures like RoBERTa, GPT, T5 are getting adopted.  ",,meghmak13,61425421,MDQ6VXNlcjYxNDI1NDIx,https://avatars.githubusercontent.com/u/61425421?v=4,,https://api.github.com/users/meghmak13,https://github.com/meghmak13,https://api.github.com/users/meghmak13/followers,https://api.github.com/users/meghmak13/following{/other_user},https://api.github.com/users/meghmak13/gists{/gist_id},https://api.github.com/users/meghmak13/starred{/owner}{/repo},https://api.github.com/users/meghmak13/subscriptions,https://api.github.com/users/meghmak13/orgs,https://api.github.com/users/meghmak13/repos,https://api.github.com/users/meghmak13/events{/privacy},https://api.github.com/users/meghmak13/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/981932105/reactions,1,1,0,0,0,0,0,0,0,9657
970,https://api.github.com/repos/rapidsai/cudf/issues/comments/984182803,https://github.com/rapidsai/cudf/issues/9657#issuecomment-984182803,https://api.github.com/repos/rapidsai/cudf/issues/9657,984182803,IC_kwDOBWUGps46qXAT,2021-12-02T00:32:33Z,2021-12-02T00:32:33Z,MEMBER,"
**Basic Algo:**
1.  Basic pre-processing like space cleanup, utf-8 decoding. 
2.  Tokenize  each sentence based on a delimiter 
3.   Call BPE on each token to further tokenize it 
4.   Find the numeric representation of each token in the provided vocabulary 
5.   Pad according to the provided padding and return the `input_ids` which are essentially the key look up from  the vocabulary table  
6.    Also return the `attention_masks` which are a binary tensor indicating the position of the padded indices so that the model does not attend to them.

** Extra Notes **
We will have to add stuff like padding and strides similar to what we have for the Subword tokenizer.  


**Python code to show this in action**
```python
from transformers import GPT2Tokenizer
import pandas as pd
import json

# !wget https://huggingface.co/gpt2/raw/main/vocab.json
# !wget https://huggingface.co/gpt2/raw/main/merges.txt
with open('vocab.json') as f:
    token_to_id = json.load(f)
    id_to_token = {v: k for k, v in token_to_id.items()}
    
text_ser = [""This is test-sentence-1"", ""This is test sentence-2"", ""This-is test sentence 3""]
tokenizer = GPT2Tokenizer(vocab_file = 'vocab.json', merges_file='merges.txt')
tokenizer.add_special_tokens({'pad_token': '[PAD]'})
encoded_batch = tokenizer.batch_encode_plus(text_ser,
                                            return_tensors='np',
                                            truncation=True, 
                                            padding='max_length',
                                            max_length=12)




print(""BPE output"", [tokenizer.bpe(token) for token in text_ser[0].split(' ')])

print(""tokenizer-output-with-not=cleaned-up-special-token "", [id_to_token.get(i, '[PAD]') for i in encoded_batch['input_ids'][0]])
print(""tokenizer-output-cleaned-up"", [tokenizer.decode(i) for i in encoded_batch['input_ids'][0]])
print(""Final Output of tokenizer: "", encoded_batch['input_ids'][0])

print(""\n""+""*""*50+""\n"")
print(""Batched Output"")
print(""Final Output of tokenizer:\n"", encoded_batch['input_ids'])
```

```python
BPE output ['This', 'is', 'test - sent ence - 1']
tokenizer-output-with-not=cleaned-up-special-token  ['This', 'Ġis', 'Ġtest', '-', 'sent', 'ence', '-', '1', '[PAD]', '[PAD]', '[PAD]', '[PAD]']
tokenizer-output-cleaned-up ['This', ' is', ' test', '-', 'sent', 'ence', '-', '1', '[PAD]', '[PAD]', '[PAD]', '[PAD]']
Final Output of tokenizer:  [ 1212   318  1332    12 34086   594    12    16 50257 50257 50257 50257]

**************************************************

Batched Output
Final Output of tokenizer:
 [[ 1212   318  1332    12 34086   594    12    16 50257 50257 50257 50257]
 [ 1212   318  1332  6827    12    17 50257 50257 50257 50257 50257 50257]
 [ 1212    12   271  1332  6827   513 50257 50257 50257 50257 50257 50257]]

```


CC: @davidwendt ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/984182803/reactions,0,0,0,0,0,0,0,0,0,9657
971,https://api.github.com/repos/rapidsai/cudf/issues/comments/1003480977,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1003480977,https://api.github.com/repos/rapidsai/cudf/issues/9657,1003480977,IC_kwDOBWUGps47z-eR,2022-01-01T01:26:57Z,2022-01-01T01:26:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1003480977/reactions,0,0,0,0,0,0,0,0,0,9657
972,https://api.github.com/repos/rapidsai/cudf/issues/comments/1017426936,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1017426936,https://api.github.com/repos/rapidsai/cudf/issues/9657,1017426936,IC_kwDOBWUGps48pLP4,2022-01-20T12:01:15Z,2022-01-20T12:01:15Z,MEMBER,Has anyone been working on this? Or has this been prioritized for anytime soon? In the past week I got/saw requests for this at a couple of places.,,teju85,532947,MDQ6VXNlcjUzMjk0Nw==,https://avatars.githubusercontent.com/u/532947?v=4,,https://api.github.com/users/teju85,https://github.com/teju85,https://api.github.com/users/teju85/followers,https://api.github.com/users/teju85/following{/other_user},https://api.github.com/users/teju85/gists{/gist_id},https://api.github.com/users/teju85/starred{/owner}{/repo},https://api.github.com/users/teju85/subscriptions,https://api.github.com/users/teju85/orgs,https://api.github.com/users/teju85/repos,https://api.github.com/users/teju85/events{/privacy},https://api.github.com/users/teju85/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1017426936/reactions,0,0,0,0,0,0,0,0,0,9657
973,https://api.github.com/repos/rapidsai/cudf/issues/comments/1017488836,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1017488836,https://api.github.com/repos/rapidsai/cudf/issues/9657,1017488836,IC_kwDOBWUGps48paXE,2022-01-20T13:08:20Z,2022-01-20T13:08:35Z,CONTRIBUTOR,"> Has anyone been working on this? Or has this been prioritized for anytime soon? In the past week I got/saw requests for this at a couple of places.

I've not worked on it yet but I hope to start on it in 22.04.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1017488836/reactions,3,0,0,0,0,0,3,0,0,9657
974,https://api.github.com/repos/rapidsai/cudf/issues/comments/1028988566,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1028988566,https://api.github.com/repos/rapidsai/cudf/issues/9657,1028988566,IC_kwDOBWUGps49VR6W,2022-02-03T13:25:18Z,2022-02-03T13:25:18Z,CONTRIBUTOR,"@VibhuJawa Some questions based on the examples given here. You want a BPE function that takes a host string (and the merge/rank table) and returns the BPE as a host string?

This shows passing in a word (substring of a string) and returning the BPE and then the Python code builds an array of BPE strings from each token.
```
text_ser = [""This is test-sentence-1"", ""This is test sentence-2"", ""This-is test sentence 3""]
...
print(""BPE output"", [tokenizer.bpe(token) for token in text_ser[0].split(' ')])
```

The [`Thisisit`](https://github.com/rapidsai/cudf/issues/9657#issuecomment-973600258) example showed the same thing -- single host string returns a single host string.

I'm trying to understand the inputs and outputs from a cudf usecase. Are you expecting give the libcudf BPE API a strings column of words and return the encoding of each as a strings column? 

Or do I have this all wrong and you are expecting a libcudf API that does everything `GPT2Tokenizer` is doing in the last example above?",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1028988566/reactions,0,0,0,0,0,0,0,0,0,9657
975,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029509296,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1029509296,https://api.github.com/repos/rapidsai/cudf/issues/9657,1029509296,IC_kwDOBWUGps49XRCw,2022-02-03T23:52:08Z,2022-02-03T23:52:08Z,CONTRIBUTOR,For reference: https://gist.github.com/VibhuJawa/8df50cd638d3d98f36109d8316dfa4ad,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029509296/reactions,0,0,0,0,0,0,0,0,0,9657
976,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029537116,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1029537116,https://api.github.com/repos/rapidsai/cudf/issues/9657,1029537116,IC_kwDOBWUGps49XX1c,2022-02-04T00:48:35Z,2022-02-04T00:48:35Z,MEMBER,"**On the vocab front**

 I tried to verify if we can indeed treat the `vocab.json` files similar to how we treat `vocab` in Subword tokenizer and  i think we can but there are three main discrepancies i found.  


**Similarity:** The vocab dict is a continuous range of ints mapping to a tokens. 

Verified that across the commonly used models the `token->id dict` can be treated as a list as there are no missing ids (Its a continuous range ) like `subword` tokenizer vocabulary. 

Below for the verification reference: 
https://gist.github.com/VibhuJawa/1670178d07d9659a084a8fbe7d160d23

**Discrepancy:** 

1.  **Special Tokens:** 
Most BPE models have these special tokens 
```
'<s>', '</s>', '<unk>', '<pad>', '<mask>'
```
but can also include something like 
```
'<extra_id_0>', '<extra_id_1>', '<extra_id_2>', '<extra_id_3>',
```

while  subword one mostly has [these](https://github.com/rapidsai/cudf/blob/85109e6f1ed3e3066d8bd765ed87786b3f460bd7/cpp/src/text/subword/wordpiece_tokenizer.cu#L151):
```
[BOS],[EOS],[UNK],[SEP],[PAD],[CLS],[MASK];
```

I think it might make sense to make this configurable from the python API that we will initialize with the right defaults. 

**2. Padding Token:**

Padding token's id is dependent on dictionary (id of `<pad>`) so its value can change. We should ensure we handle that correctly.

I think (unsure) but we just treat it as `0` currently in Subword. 

3.  Treating space characters.

BPE seems to treat space characters differently . That is ` Hello world` and `Hello world` get mapped [differently](https://github.com/huggingface/transformers/blob/c962c2adbff678ae6d2e98378bed5b8d1a9831d9/src/transformers/models/roberta/tokenization_roberta.py#L69-L73).  

When there is space before the word it gets mapped to ` ĠHello` and if no space  to `Hello` . 

```python
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained(""roberta-base"")

id_to_token = {v: k for k, v in tokenizer.vocab.items()}

no_space_hello = ""Hello world""
no_space_input_ids = tokenizer(no_space_hello ,add_special_tokens=False)['input_ids']
print(no_space_input_ids)
print([id_to_token[i] for i in no_space_input_ids])
print(""----""*10)
space_hello = "" Hello world""
space_input_ids = tokenizer(space_hello ,add_special_tokens=False)['input_ids']
print(space_input_ids)
print([id_to_token[i] for i in space_input_ids])
 
```

```
[31414, 232]
['Hello', 'Ġworld']
----------------------------------------
[20920, 232]
['ĠHello', 'Ġworld']
```

**On getting a testable example to you.** 

Sorry on  getting a meaningful end to end  python example that works across models.  It turns out to be tougher than I anticipated but will update here once i have it working. 
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1029537116/reactions,0,0,0,0,0,0,0,0,0,9657
977,https://api.github.com/repos/rapidsai/cudf/issues/comments/1059870448,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1059870448,https://api.github.com/repos/rapidsai/cudf/issues/9657,1059870448,IC_kwDOBWUGps4_LFbw,2022-03-06T01:28:46Z,2022-03-06T01:28:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1059870448/reactions,0,0,0,0,0,0,0,0,0,9657
978,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146490214,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1146490214,https://api.github.com/repos/rapidsai/cudf/issues/9657,1146490214,IC_kwDOBWUGps5EVg1m,2022-06-04T01:31:07Z,2022-06-04T01:31:07Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146490214/reactions,0,0,0,0,0,0,0,0,0,9657
979,https://api.github.com/repos/rapidsai/cudf/issues/comments/1277922174,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1277922174,https://api.github.com/repos/rapidsai/cudf/issues/9657,1277922174,IC_kwDOBWUGps5MK4t-,2022-10-13T17:05:23Z,2022-10-13T17:05:23Z,MEMBER,"We have a potential Morpheus customer who wants to use the phishing detection pipeline but in a non-English language. So we'd have to replace the BERT model with something else, and it would need a BPE tokenizer. We can do a POC using a CPU-based tokenizer, but would be good to scope this if we can for an upcoming release. @GregoryKimball for viz",,BartleyR,3215767,MDQ6VXNlcjMyMTU3Njc=,https://avatars.githubusercontent.com/u/3215767?v=4,,https://api.github.com/users/BartleyR,https://github.com/BartleyR,https://api.github.com/users/BartleyR/followers,https://api.github.com/users/BartleyR/following{/other_user},https://api.github.com/users/BartleyR/gists{/gist_id},https://api.github.com/users/BartleyR/starred{/owner}{/repo},https://api.github.com/users/BartleyR/subscriptions,https://api.github.com/users/BartleyR/orgs,https://api.github.com/users/BartleyR/repos,https://api.github.com/users/BartleyR/events{/privacy},https://api.github.com/users/BartleyR/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1277922174/reactions,1,1,0,0,0,0,0,0,0,9657
980,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577201066,https://github.com/rapidsai/cudf/issues/9657#issuecomment-1577201066,https://api.github.com/repos/rapidsai/cudf/issues/9657,1577201066,IC_kwDOBWUGps5eAi2q,2023-06-05T17:34:27Z,2023-06-05T17:34:27Z,CONTRIBUTOR,"This request is still relevant. After discussing with @VibhuJawa, the next step is benchmarking a GPT-3 style training workflow, and measuring the percentage of time spent in tokenization. If tokenization is 15-30% of the total time (as we see in `bert`), then this is worth prioritizing. Otherwise we should recommend tokenization with HuggingFace.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577201066/reactions,0,0,0,0,0,0,0,0,0,9657
981,https://api.github.com/repos/rapidsai/cudf/issues/comments/994931576,https://github.com/rapidsai/cudf/issues/9676#issuecomment-994931576,https://api.github.com/repos/rapidsai/cudf/issues/9676,994931576,IC_kwDOBWUGps47TXN4,2021-12-15T16:02:49Z,2021-12-15T16:02:49Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/994931576/reactions,0,0,0,0,0,0,0,0,0,9676
982,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068168563,https://github.com/rapidsai/cudf/issues/9676#issuecomment-1068168563,https://api.github.com/repos/rapidsai/cudf/issues/9676,1068168563,IC_kwDOBWUGps4_qvVz,2022-03-15T16:07:48Z,2022-03-15T16:07:48Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068168563/reactions,0,0,0,0,0,0,0,0,0,9676
983,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217003322,https://github.com/rapidsai/cudf/issues/9676#issuecomment-1217003322,https://api.github.com/repos/rapidsai/cudf/issues/9676,1217003322,IC_kwDOBWUGps5Iif86,2022-08-16T18:33:26Z,2022-08-16T18:33:26Z,CONTRIBUTOR,"With the recent changes to csv reader, the current behavior seems to be that we are returning an empty dataframe. To me, it seems like an _okay_ behavior?:

```python
In [4]: import pandas as pd
   ...: 
   ...: with open('test.csv', 'w') as fp:
   ...:     fp.write('')
   ...: 

In [5]: cudf.read_csv(""test.csv"")
Out[5]: 
Empty DataFrame
Columns: []
Index: []
```

@randerzander is this an agreeable behavior in this scenario? or do you think otherwise?",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217003322/reactions,0,0,0,0,0,0,0,0,0,9676
984,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108985613,https://github.com/rapidsai/cudf/issues/9676#issuecomment-2108985613,https://api.github.com/repos/rapidsai/cudf/issues/9676,2108985613,IC_kwDOBWUGps59tJEN,2024-05-13T23:23:50Z,2024-05-13T23:23:50Z,CONTRIBUTOR,"The above is still the status quo here:
```
>>> import pandas as pd
>>> import cudf
>>> with open(""test.csv"", ""w"") as fp:
...     fp.write("""")
... 
0
>>> pd.read_csv(""test.csv"")
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/coder/.conda/envs/rapids/lib/python3.10/site-packages/pandas/io/parsers/readers.py"", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
  File ""/home/coder/.conda/envs/rapids/lib/python3.10/site-packages/pandas/io/parsers/readers.py"", line 620, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File ""/home/coder/.conda/envs/rapids/lib/python3.10/site-packages/pandas/io/parsers/readers.py"", line 1620, in __init__
    self._engine = self._make_engine(f, self.engine)
  File ""/home/coder/.conda/envs/rapids/lib/python3.10/site-packages/pandas/io/parsers/readers.py"", line 1898, in _make_engine
    return mapping[engine](f, **self.options)
  File ""/home/coder/.conda/envs/rapids/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py"", line 93, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File ""parsers.pyx"", line 581, in pandas._libs.parsers.TextReader.__cinit__
pandas.errors.EmptyDataError: No columns to parse from file
>>> cudf.read_csv(""test.csv"")
Empty DataFrame
Columns: []
Index: []
```

Given the growth of cudf.pandas since this issue was first created, we probably want to aim for closer matching now.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108985613/reactions,0,0,0,0,0,0,0,0,0,9676
985,https://api.github.com/repos/rapidsai/cudf/issues/comments/968626731,https://github.com/rapidsai/cudf/issues/9683#issuecomment-968626731,https://api.github.com/repos/rapidsai/cudf/issues/9683,968626731,IC_kwDOBWUGps45vBIr,2021-11-15T08:03:17Z,2021-11-15T08:03:17Z,MEMBER,@sperlingxx for visibility.,,wjxiz1992,20476954,MDQ6VXNlcjIwNDc2OTU0,https://avatars.githubusercontent.com/u/20476954?v=4,,https://api.github.com/users/wjxiz1992,https://github.com/wjxiz1992,https://api.github.com/users/wjxiz1992/followers,https://api.github.com/users/wjxiz1992/following{/other_user},https://api.github.com/users/wjxiz1992/gists{/gist_id},https://api.github.com/users/wjxiz1992/starred{/owner}{/repo},https://api.github.com/users/wjxiz1992/subscriptions,https://api.github.com/users/wjxiz1992/orgs,https://api.github.com/users/wjxiz1992/repos,https://api.github.com/users/wjxiz1992/events{/privacy},https://api.github.com/users/wjxiz1992/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/968626731/reactions,1,0,0,0,0,0,0,0,1,9683
986,https://api.github.com/repos/rapidsai/cudf/issues/comments/994531534,https://github.com/rapidsai/cudf/issues/9683#issuecomment-994531534,https://api.github.com/repos/rapidsai/cudf/issues/9683,994531534,IC_kwDOBWUGps47R1jO,2021-12-15T09:02:51Z,2021-12-15T09:02:51Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/994531534/reactions,0,0,0,0,0,0,0,0,0,9683
987,https://api.github.com/repos/rapidsai/cudf/issues/comments/1069563113,https://github.com/rapidsai/cudf/issues/9683#issuecomment-1069563113,https://api.github.com/repos/rapidsai/cudf/issues/9683,1069563113,IC_kwDOBWUGps4_wDzp,2022-03-16T20:02:56Z,2022-03-16T20:02:56Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1069563113/reactions,0,0,0,0,0,0,0,0,0,9683
988,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165250124,https://github.com/rapidsai/cudf/issues/9683#issuecomment-1165250124,https://api.github.com/repos/rapidsai/cudf/issues/9683,1165250124,IC_kwDOBWUGps5FdE5M,2022-06-24T06:35:38Z,2022-06-24T06:36:56Z,CONTRIBUTOR,@isVoid Does #9621 address this issue? ,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165250124/reactions,0,0,0,0,0,0,0,0,0,9683
989,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185075593,https://github.com/rapidsai/cudf/issues/9683#issuecomment-1185075593,https://api.github.com/repos/rapidsai/cudf/issues/9683,1185075593,IC_kwDOBWUGps5GotGJ,2022-07-15T01:21:49Z,2022-07-15T01:21:49Z,CONTRIBUTOR,"Hi all, apologies for late responses. I think we are missing a LIST type binary op to make that work. Basically you can get per list mean segmented sum and divided by `count_element` (not needed if LIST type is fixed size). But then you would need a custom kernel to perform per list centering. That is, to solve:

```c++
{{1, 2, 3}, {3, 1, 2}} - {2, 2}
```

It would look something like:
```c++
group_idx = upper_bound(idx, offset.begin(), offset.end())-1;
centered[idx] = list[idx] - mean[group_idx];
```

Alternatively, you could hack it together by repeating the per list mean by list sizes and perform the subtraction on the values of the LIST column. I don't recommend if the use case isn't urgent though.",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185075593/reactions,0,0,0,0,0,0,0,0,0,9683
990,https://api.github.com/repos/rapidsai/cudf/issues/comments/593157718,https://github.com/rapidsai/cudf/issues/9726#issuecomment-593157718,https://api.github.com/repos/rapidsai/cudf/issues/9726,593157718,MDEyOklzc3VlQ29tbWVudDU5MzE1NzcxOA==,2020-03-01T22:55:22Z,2020-03-01T22:55:22Z,MEMBER,"As to `pack`, maybe these [CUDA Virtual Memory Management APIs]( https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html ) (pointed out by Cory in a related context) would be useful?",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/593157718/reactions,0,0,0,0,0,0,0,0,0,9726
991,https://api.github.com/repos/rapidsai/cudf/issues/comments/593403396,https://github.com/rapidsai/cudf/issues/9726#issuecomment-593403396,https://api.github.com/repos/rapidsai/cudf/issues/9726,593403396,MDEyOklzc3VlQ29tbWVudDU5MzQwMzM5Ng==,2020-03-02T13:32:30Z,2020-03-02T16:39:14Z,CONTRIBUTOR,"This functionality is kind of outside the scope of RMM. The direction we'd like to go with RMM is really to just be as simple as possible by providing a set of resources, the tools to get/set the default resource, and containers like `device_buffer/device_vector` that work with resources.

This kind of pack or concatenate functionality is really more the wheelhouse of a consumer of RMM like cuDF.

In cuDF, this is just a `concatenate`. https://github.com/rapidsai/cudf/pull/4224

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/593403396/reactions,0,0,0,0,0,0,0,0,0,9726
992,https://api.github.com/repos/rapidsai/cudf/issues/comments/593480322,https://github.com/rapidsai/cudf/issues/9726#issuecomment-593480322,https://api.github.com/repos/rapidsai/cudf/issues/9726,593480322,MDEyOklzc3VlQ29tbWVudDU5MzQ4MDMyMg==,2020-03-02T16:10:10Z,2020-03-02T16:10:10Z,COLLABORATOR,"> In cuDF, this is just a concatenate. rapidsai/cudf#4224

That imposes a lot of challenges in order to construct your data in a way to allow using concatenate and then being able to unpack it cleanly.

Maybe it's a new API that could live in cuDF, but really we're looking for some API that takes `vector<device_buffer>` and returns us a `device_buffer` along with some form of metadata to then be able to ""unpack"" it back into a `vector<device_buffer>`.

This is along similar lines as https://github.com/rapidsai/cudf/issues/3793 but is more generalized than `cudf::table_view` as this could be reused in a lot of non-cudf places.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/593480322/reactions,1,1,0,0,0,0,0,0,0,9726
993,https://api.github.com/repos/rapidsai/cudf/issues/comments/779996396,https://github.com/rapidsai/cudf/issues/9726#issuecomment-779996396,https://api.github.com/repos/rapidsai/cudf/issues/9726,779996396,MDEyOklzc3VlQ29tbWVudDc3OTk5NjM5Ng==,2021-02-16T17:29:38Z,2021-02-16T17:29:38Z,NONE,"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/779996396/reactions,0,0,0,0,0,0,0,0,0,9726
994,https://api.github.com/repos/rapidsai/cudf/issues/comments/779996692,https://github.com/rapidsai/cudf/issues/9726#issuecomment-779996692,https://api.github.com/repos/rapidsai/cudf/issues/9726,779996692,MDEyOklzc3VlQ29tbWVudDc3OTk5NjY5Mg==,2021-02-16T17:30:01Z,2021-02-16T17:30:01Z,NONE,"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/779996692/reactions,0,0,0,0,0,0,0,0,0,9726
995,https://api.github.com/repos/rapidsai/cudf/issues/comments/780189897,https://github.com/rapidsai/cudf/issues/9726#issuecomment-780189897,https://api.github.com/repos/rapidsai/cudf/issues/9726,780189897,MDEyOklzc3VlQ29tbWVudDc4MDE4OTg5Nw==,2021-02-16T23:42:33Z,2021-02-16T23:42:33Z,MEMBER,Seems like this issue should be moved to libcudf.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780189897/reactions,0,0,0,0,0,0,0,0,0,9726
996,https://api.github.com/repos/rapidsai/cudf/issues/comments/780220593,https://github.com/rapidsai/cudf/issues/9726#issuecomment-780220593,https://api.github.com/repos/rapidsai/cudf/issues/9726,780220593,MDEyOklzc3VlQ29tbWVudDc4MDIyMDU5Mw==,2021-02-17T01:03:19Z,2021-02-17T01:03:19Z,COLLABORATOR,"> Seems like this issue should be moved to libcudf.

I think we had this in RMM as opposed to libcudf because we wanted a place more general purpose than libcudf. I.E. Dask/Distributed would possibly be interested in using this for packing/unpacking buffers in communication, but cuDF is way too bulky of a dependency for them.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780220593/reactions,1,1,0,0,0,0,0,0,0,9726
997,https://api.github.com/repos/rapidsai/cudf/issues/comments/780599124,https://github.com/rapidsai/cudf/issues/9726#issuecomment-780599124,https://api.github.com/repos/rapidsai/cudf/issues/9726,780599124,MDEyOklzc3VlQ29tbWVudDc4MDU5OTEyNA==,2021-02-17T14:37:34Z,2021-02-17T14:37:34Z,CONTRIBUTOR,"> > Seems like this issue should be moved to libcudf.
> 
> I think we had this in RMM as opposed to libcudf because we wanted a place more general purpose than libcudf. I.E. Dask/Distributed would possibly be interested in using this for packing/unpacking buffers in communication, but cuDF is way too bulky of a dependency for them.

Sure, but RMM isn't a catch-all for stuff we don't want to put into libcudf. It muddies the single responsibility principle to start putting random kernels into an allocator and container library (which currently has no kernels). ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780599124/reactions,0,0,0,0,0,0,0,0,0,9726
998,https://api.github.com/repos/rapidsai/cudf/issues/comments/780644444,https://github.com/rapidsai/cudf/issues/9726#issuecomment-780644444,https://api.github.com/repos/rapidsai/cudf/issues/9726,780644444,MDEyOklzc3VlQ29tbWVudDc4MDY0NDQ0NA==,2021-02-17T15:39:46Z,2021-02-17T15:39:46Z,COLLABORATOR,"Yup agreed. This felt like it was in the gray area of somewhat related to memory management so the issue was raised here, but happy to defer it to somewhere else, but cuDF is too large of a dependency unfortunately.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780644444/reactions,0,0,0,0,0,0,0,0,0,9726
999,https://api.github.com/repos/rapidsai/cudf/issues/comments/780739412,https://github.com/rapidsai/cudf/issues/9726#issuecomment-780739412,https://api.github.com/repos/rapidsai/cudf/issues/9726,780739412,MDEyOklzc3VlQ29tbWVudDc4MDczOTQxMg==,2021-02-17T17:59:04Z,2021-02-17T17:59:04Z,MEMBER,I think `cupy.concatenate` would also work here. Not sure if that is too large of a dependency for this use case (or if we are looking for a C++ operation too),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/780739412/reactions,0,0,0,0,0,0,0,0,0,9726
1000,https://api.github.com/repos/rapidsai/cudf/issues/comments/803027335,https://github.com/rapidsai/cudf/issues/9726#issuecomment-803027335,https://api.github.com/repos/rapidsai/cudf/issues/9726,803027335,MDEyOklzc3VlQ29tbWVudDgwMzAyNzMzNQ==,2021-03-19T18:26:29Z,2021-03-19T18:26:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/803027335/reactions,0,0,0,0,0,0,0,0,0,9726
1001,https://api.github.com/repos/rapidsai/cudf/issues/comments/973121401,https://github.com/rapidsai/cudf/issues/9726#issuecomment-973121401,https://api.github.com/repos/rapidsai/cudf/issues/9726,973121401,IC_kwDOBWUGps46AKd5,2021-11-18T18:01:29Z,2021-11-18T18:01:29Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/973121401/reactions,0,0,0,0,0,0,0,0,0,9726
1002,https://api.github.com/repos/rapidsai/cudf/issues/comments/973392745,https://github.com/rapidsai/cudf/issues/9726#issuecomment-973392745,https://api.github.com/repos/rapidsai/cudf/issues/9726,973392745,IC_kwDOBWUGps46BMtp,2021-11-18T23:11:02Z,2021-11-18T23:11:02Z,CONTRIBUTOR,https://github.com/NVIDIA/cub/pull/359 would be the right way to do this now. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/973392745/reactions,0,0,0,0,0,0,0,0,0,9726
1003,https://api.github.com/repos/rapidsai/cudf/issues/comments/1381525880,https://github.com/rapidsai/cudf/issues/9726#issuecomment-1381525880,https://api.github.com/repos/rapidsai/cudf/issues/9726,1381525880,IC_kwDOBWUGps5SWGl4,2023-01-13T09:21:31Z,2023-01-13T09:21:31Z,MEMBER,FYI PR ( https://github.com/NVIDIA/cub/pull/359 ) landed. Looks like this will be part of CUB [2.1.0]( https://github.com/NVIDIA/cub/milestone/10 ),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1381525880/reactions,1,0,0,0,0,0,0,1,0,9726
1004,https://api.github.com/repos/rapidsai/cudf/issues/comments/985902278,https://github.com/rapidsai/cudf/issues/9828#issuecomment-985902278,https://api.github.com/repos/rapidsai/cudf/issues/9828,985902278,IC_kwDOBWUGps46w6zG,2021-12-03T23:10:42Z,2021-12-03T23:10:42Z,CONTRIBUTOR,"I think along with this we should think about what mask-related APIs we really should be exposing at the Python layer. For instance, should the `null_mask` or `nullable` properties even be accessible, or are they implementation details? `Series.set_mask` is already deprecated. Are there any public APIs where a bitmask is a reasonable expectation, or should all public APIs involving masks operate on boolean masks even if that is less performant (that's my opinion, IMO all bitmask operations should be exclusively internal, but perhaps there's a strong performance need to expose those).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/985902278/reactions,1,1,0,0,0,0,0,0,0,9828
1005,https://api.github.com/repos/rapidsai/cudf/issues/comments/999121929,https://github.com/rapidsai/cudf/issues/9828#issuecomment-999121929,https://api.github.com/repos/rapidsai/cudf/issues/9828,999121929,IC_kwDOBWUGps47jWQJ,2021-12-21T22:00:57Z,2022-03-18T18:48:59Z,CONTRIBUTOR,"I agree that many (all?) properties dealing with bitmasks could be considered implementation details for the Python API. The APIs I'm looking at are:
- `Series.nullmask`
- `Series.nullable`
- ~`Series.as_mask`~ (removed in #10124)
- ~`Series.set_mask`~ (removed in #10124)
- `Series.from_masked_array`.

(edit: updated status of APIs)",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/999121929/reactions,0,0,0,0,0,0,0,0,0,9828
1006,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018002775,https://github.com/rapidsai/cudf/issues/9828#issuecomment-1018002775,https://api.github.com/repos/rapidsai/cudf/issues/9828,1018002775,IC_kwDOBWUGps48rX1X,2022-01-20T23:02:58Z,2022-01-20T23:02:58Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018002775/reactions,0,0,0,0,0,0,0,0,0,9828
1007,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170380524,https://github.com/rapidsai/cudf/issues/9828#issuecomment-1170380524,https://api.github.com/repos/rapidsai/cudf/issues/9828,1170380524,IC_kwDOBWUGps5Fwpbs,2022-06-29T19:03:13Z,2022-06-29T19:03:13Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170380524/reactions,0,0,0,0,0,0,0,0,0,9828
1008,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287140304,https://github.com/rapidsai/cudf/issues/9828#issuecomment-1287140304,https://api.github.com/repos/rapidsai/cudf/issues/9828,1287140304,IC_kwDOBWUGps5MuDPQ,2022-10-21T15:43:31Z,2022-10-21T15:43:31Z,CONTRIBUTOR,@shwina are you aware of any issues with proceeding here? @bdice's [last comment](https://github.com/rapidsai/cudf/issues/9828#issuecomment-999121929) shows what APIs still need to be updated.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287140304/reactions,0,0,0,0,0,0,0,0,0,9828
1009,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109005900,https://github.com/rapidsai/cudf/issues/9828#issuecomment-2109005900,https://api.github.com/repos/rapidsai/cudf/issues/9828,2109005900,IC_kwDOBWUGps59tOBM,2024-05-13T23:42:13Z,2024-05-13T23:42:13Z,CONTRIBUTOR,The comment above is still accurate. I think we can go ahead and remove these.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109005900/reactions,0,0,0,0,0,0,0,0,0,9828
1010,https://api.github.com/repos/rapidsai/cudf/issues/comments/985583467,https://github.com/rapidsai/cudf/issues/9834#issuecomment-985583467,https://api.github.com/repos/rapidsai/cudf/issues/9834,985583467,IC_kwDOBWUGps46vs9r,2021-12-03T14:53:05Z,2021-12-03T14:53:05Z,CONTRIBUTOR,"It would be nice to see if there is some way that we could speed this up. As it is right now the performance of this version is on par with the CPU version or slightly slower.  Note that this is against 12 CPU cores, so it still is faster than a single core, but no one is running a single GPU vs a single CPU core typically.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/985583467/reactions,0,0,0,0,0,0,0,0,0,9834
1011,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006113371,https://github.com/rapidsai/cudf/issues/9834#issuecomment-1006113371,https://api.github.com/repos/rapidsai/cudf/issues/9834,1006113371,IC_kwDOBWUGps47-BJb,2022-01-05T22:02:59Z,2022-01-05T22:02:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1006113371/reactions,0,0,0,0,0,0,0,0,0,9834
1012,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089494225,https://github.com/rapidsai/cudf/issues/9834#issuecomment-1089494225,https://api.github.com/repos/rapidsai/cudf/issues/9834,1089494225,IC_kwDOBWUGps5A8FzR,2022-04-05T23:03:01Z,2022-04-05T23:03:01Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089494225/reactions,0,0,0,0,0,0,0,0,0,9834
1013,https://api.github.com/repos/rapidsai/cudf/issues/comments/1013745965,https://github.com/rapidsai/cudf/issues/9850#issuecomment-1013745965,https://api.github.com/repos/rapidsai/cudf/issues/9850,1013745965,IC_kwDOBWUGps48bIkt,2022-01-15T20:03:12Z,2022-01-15T20:03:12Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1013745965/reactions,0,0,0,0,0,0,0,0,0,9850
1014,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100353090,https://github.com/rapidsai/cudf/issues/9850#issuecomment-1100353090,https://api.github.com/repos/rapidsai/cudf/issues/9850,1100353090,IC_kwDOBWUGps5Blg5C,2022-04-15T20:03:19Z,2022-04-15T20:03:19Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100353090/reactions,0,0,0,0,0,0,0,0,0,9850
1015,https://api.github.com/repos/rapidsai/cudf/issues/comments/989173922,https://github.com/rapidsai/cudf/issues/9855#issuecomment-989173922,https://api.github.com/repos/rapidsai/cudf/issues/9855,989173922,IC_kwDOBWUGps469Zii,2021-12-08T20:33:21Z,2021-12-08T20:33:21Z,CONTRIBUTOR,"Why include groups in the pattern that will not return anything?
For example, if you have the following pattern with 3 groups:
```
""([a-z]*)-([0-9]*)-([A-Z]*)""
```
and you only care about the 2nd group just change the pattern to remove the `( )` for the groups that are not needed.
```
""[a-z]*-([0-9]*)-[A-Z]*""
```
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/989173922/reactions,0,0,0,0,0,0,0,0,0,9855
1016,https://api.github.com/repos/rapidsai/cudf/issues/comments/989274053,https://github.com/rapidsai/cudf/issues/9855#issuecomment-989274053,https://api.github.com/repos/rapidsai/cudf/issues/9855,989274053,IC_kwDOBWUGps469x_F,2021-12-08T22:20:29Z,2021-12-08T22:20:29Z,CONTRIBUTOR,"I cannot argue with the logic here, but this is just how the Spark function works and we have no control over how people invoke it. 

We could potentially rewrite the regexp pattern in the plugin to remove unreferenced groups but I would be nervous about going that far.",,andygrove,934084,MDQ6VXNlcjkzNDA4NA==,https://avatars.githubusercontent.com/u/934084?v=4,,https://api.github.com/users/andygrove,https://github.com/andygrove,https://api.github.com/users/andygrove/followers,https://api.github.com/users/andygrove/following{/other_user},https://api.github.com/users/andygrove/gists{/gist_id},https://api.github.com/users/andygrove/starred{/owner}{/repo},https://api.github.com/users/andygrove/subscriptions,https://api.github.com/users/andygrove/orgs,https://api.github.com/users/andygrove/repos,https://api.github.com/users/andygrove/events{/privacy},https://api.github.com/users/andygrove/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/989274053/reactions,0,0,0,0,0,0,0,0,0,9855
1017,https://api.github.com/repos/rapidsai/cudf/issues/comments/994896117,https://github.com/rapidsai/cudf/issues/9855#issuecomment-994896117,https://api.github.com/repos/rapidsai/cudf/issues/9855,994896117,IC_kwDOBWUGps47TOj1,2021-12-15T15:21:41Z,2021-12-15T15:21:41Z,MEMBER,"Is the goal to leverage information downstream in the DAG that indicates some of the capture groups weren't actually necessary for this execution?

Could you share a bit about the use cases where this comes up? For example, I can imagine it coming up in exploratory data analysis. Curious to understand how common/significant this is.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/994896117/reactions,0,0,0,0,0,0,0,0,0,9855
1018,https://api.github.com/repos/rapidsai/cudf/issues/comments/999317069,https://github.com/rapidsai/cudf/issues/9855#issuecomment-999317069,https://api.github.com/repos/rapidsai/cudf/issues/9855,999317069,IC_kwDOBWUGps47kF5N,2021-12-22T06:20:22Z,2021-12-22T06:20:22Z,CONTRIBUTOR,"I am also curious to understand this problem. From the original description it doesn't seem like the request is stemming from some complex workflow where some groups are ""discovered"" to be unnecessary, but rather to optimize user workflows even when users invoke the function with suboptimal regexes. Naively this seems like a use case where we should be aiming to educate users as to best practices for performance rather than optimizing additional code paths, i.e. we should be documenting that including unnecessary groups in the regex will impact performance. That would be consistent with a lot of our messaging around cuDF Python where there are often ways to do things with pandas that would translate to slow cuDF solutions, and we try to document and socialize knowledge about faster ways to do those things in cuDF without trying to optimize all the slower ways. Maybe I'm missing a key reason that this use case is different, though.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/999317069/reactions,0,0,0,0,0,0,0,0,0,9855
1019,https://api.github.com/repos/rapidsai/cudf/issues/comments/999687565,https://github.com/rapidsai/cudf/issues/9855#issuecomment-999687565,https://api.github.com/repos/rapidsai/cudf/issues/9855,999687565,IC_kwDOBWUGps47lgWN,2021-12-22T16:01:25Z,2021-12-22T16:01:25Z,CONTRIBUTOR,"To add some more context to this request. Spark provides a SQL function [regexp_extract](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.sql.functions.regexp_extract.html) with the signature `regexp_extract(str, pattern, idx)`. This function was requested in [SPARK-8255](https://issues.apache.org/jira/browse/SPARK-8255) to expose the equivalent Java regexp functionality. It doesn't look like too much thought was given to the inefficiency of this approach. The function has existed since Spark 1.5.0 so it is likely that people are using it. We do support this function in the RAPIDS Accelerator for Spark already but it would be more efficient if we could just request a single group to be extracted.

",,andygrove,934084,MDQ6VXNlcjkzNDA4NA==,https://avatars.githubusercontent.com/u/934084?v=4,,https://api.github.com/users/andygrove,https://github.com/andygrove,https://api.github.com/users/andygrove/followers,https://api.github.com/users/andygrove/following{/other_user},https://api.github.com/users/andygrove/gists{/gist_id},https://api.github.com/users/andygrove/starred{/owner}{/repo},https://api.github.com/users/andygrove/subscriptions,https://api.github.com/users/andygrove/orgs,https://api.github.com/users/andygrove/repos,https://api.github.com/users/andygrove/events{/privacy},https://api.github.com/users/andygrove/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/999687565/reactions,0,0,0,0,0,0,0,0,0,9855
1020,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018646558,https://github.com/rapidsai/cudf/issues/9855#issuecomment-1018646558,https://api.github.com/repos/rapidsai/cudf/issues/9855,1018646558,IC_kwDOBWUGps48t1Ae,2022-01-21T16:07:24Z,2022-01-21T16:07:24Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018646558/reactions,0,0,0,0,0,0,0,0,0,9855
1021,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105424034,https://github.com/rapidsai/cudf/issues/9855#issuecomment-1105424034,https://api.github.com/repos/rapidsai/cudf/issues/9855,1105424034,IC_kwDOBWUGps5B426i,2022-04-21T16:08:40Z,2022-04-21T16:08:40Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105424034/reactions,0,0,0,0,0,0,0,0,0,9855
1022,https://api.github.com/repos/rapidsai/cudf/issues/comments/1144240152,https://github.com/rapidsai/cudf/issues/9858#issuecomment-1144240152,https://api.github.com/repos/rapidsai/cudf/issues/9858,1144240152,IC_kwDOBWUGps5EM7gY,2022-06-01T23:22:28Z,2022-06-01T23:22:28Z,CONTRIBUTOR,related: https://github.com/rapidsai/cudf/issues/10941,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1144240152/reactions,0,0,0,0,0,0,0,0,0,9858
1023,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007087388,https://github.com/rapidsai/cudf/issues/9865#issuecomment-1007087388,https://api.github.com/repos/rapidsai/cudf/issues/9865,1007087388,IC_kwDOBWUGps48Bu8c,2022-01-07T02:21:15Z,2022-01-07T02:21:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007087388/reactions,0,0,0,0,0,0,0,0,0,9865
1024,https://api.github.com/repos/rapidsai/cudf/issues/comments/1091014602,https://github.com/rapidsai/cudf/issues/9865#issuecomment-1091014602,https://api.github.com/repos/rapidsai/cudf/issues/9865,1091014602,IC_kwDOBWUGps5BB4_K,2022-04-07T02:29:54Z,2022-04-07T02:29:54Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1091014602/reactions,0,0,0,0,0,0,0,0,0,9865
1025,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007738560,https://github.com/rapidsai/cudf/issues/9869#issuecomment-1007738560,https://api.github.com/repos/rapidsai/cudf/issues/9869,1007738560,IC_kwDOBWUGps48EN7A,2022-01-07T21:02:45Z,2022-01-07T21:02:45Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007738560/reactions,0,0,0,0,0,0,0,0,0,9869
1026,https://api.github.com/repos/rapidsai/cudf/issues/comments/1092197382,https://github.com/rapidsai/cudf/issues/9869#issuecomment-1092197382,https://api.github.com/repos/rapidsai/cudf/issues/9869,1092197382,IC_kwDOBWUGps5BGZwG,2022-04-07T21:02:53Z,2022-04-07T21:02:53Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1092197382/reactions,0,0,0,0,0,0,0,0,0,9869
1027,https://api.github.com/repos/rapidsai/cudf/issues/comments/1092250069,https://github.com/rapidsai/cudf/issues/9869#issuecomment-1092250069,https://api.github.com/repos/rapidsai/cudf/issues/9869,1092250069,IC_kwDOBWUGps5BGmnV,2022-04-07T21:59:59Z,2022-04-07T21:59:59Z,CONTRIBUTOR,"The code here is currently under modification, to support `STRUCT` keys. We can consider this issue afterwards.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1092250069/reactions,0,0,0,0,0,0,0,0,0,9869
1028,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176839101,https://github.com/rapidsai/cudf/issues/9869#issuecomment-1176839101,https://api.github.com/repos/rapidsai/cudf/issues/9869,1176839101,IC_kwDOBWUGps5GJSO9,2022-07-06T23:03:10Z,2022-07-06T23:03:10Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176839101/reactions,0,0,0,0,0,0,0,0,0,9869
1029,https://api.github.com/repos/rapidsai/cudf/issues/comments/1686685300,https://github.com/rapidsai/cudf/issues/9869#issuecomment-1686685300,https://api.github.com/repos/rapidsai/cudf/issues/9869,1686685300,IC_kwDOBWUGps5kiMZ0,2023-08-21T16:50:31Z,2023-08-21T16:50:31Z,CONTRIBUTOR,@divyegala Can this be closed by your recent changes in #13810?,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1686685300/reactions,0,0,0,0,0,0,0,0,0,9869
1030,https://api.github.com/repos/rapidsai/cudf/issues/comments/993854331,https://github.com/rapidsai/cudf/issues/9900#issuecomment-993854331,https://api.github.com/repos/rapidsai/cudf/issues/9900,993854331,IC_kwDOBWUGps47PQN7,2021-12-14T18:20:33Z,2021-12-14T18:20:33Z,CONTRIBUTOR,"Quoting @vyasr from https://github.com/rapidsai/cudf/pull/9867#discussion_r768192180:

> I agree that a copy to host that preserves more type information is probably preferable. I'm not aware of any API that returns a pandas DataFrame, but we do return pandas objects in some places. One example is DataFrame.columns, which returns a pandas Index, probably based on the same consideration of not wanting to put the data on device. Personally from an API design perspective I would prefer not to return pandas objects and would rather return something like a dict, but I can see that causing more friction for users switching between pandas and cudf.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/993854331/reactions,0,0,0,0,0,0,0,0,0,9900
1031,https://api.github.com/repos/rapidsai/cudf/issues/comments/1012423029,https://github.com/rapidsai/cudf/issues/9900#issuecomment-1012423029,https://api.github.com/repos/rapidsai/cudf/issues/9900,1012423029,IC_kwDOBWUGps48WFl1,2022-01-13T19:02:40Z,2022-01-13T19:02:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1012423029/reactions,0,0,0,0,0,0,0,0,0,9900
1032,https://api.github.com/repos/rapidsai/cudf/issues/comments/1098384911,https://github.com/rapidsai/cudf/issues/9900#issuecomment-1098384911,https://api.github.com/repos/rapidsai/cudf/issues/9900,1098384911,IC_kwDOBWUGps5BeAYP,2022-04-13T19:02:58Z,2022-04-13T19:02:58Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1098384911/reactions,0,0,0,0,0,0,0,0,0,9900
1033,https://api.github.com/repos/rapidsai/cudf/issues/comments/1008235782,https://github.com/rapidsai/cudf/issues/9973#issuecomment-1008235782,https://api.github.com/repos/rapidsai/cudf/issues/9973,1008235782,IC_kwDOBWUGps48GHUG,2022-01-09T05:54:42Z,2022-01-09T13:46:39Z,CONTRIBUTOR,"I am not entirely sure this is the same regression, but I am seeing one after (https://github.com/rapidsai/cudf/pull/9666) was merged. I see less invocations of this kernel, but they are ~10x slower than before the PR was merged. In one of the TPCDS @ 3TB query q87 (and possibly others) I see a loss of 4 seconds (before: 14263 ms, after: 18194 ms)

```
void thrust::cuda_cub::core::_kernel_agent<thrust::cuda_cub::__copy_if::CopyIfAgent<thrust::counting_iterator<int, thrust::use_default, thrust::use_default, thrust::use_default>, thrust::cuda_cub::__copy_if::no_stencil_tag_*, int*, cudf::detail::left_semi_anti_join(cudf::detail::join_kind, cudf::table_view const&, cudf::table_view const&, cudf::null_equality, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)::{lambda(int)#2}, int, int*>, thrust::counting_iterator<int, thrust::use_default, thrust::use_default, thrust::use_default>, thrust::cuda_cub::__copy_if::no_stencil_tag_*, int*, {lambda(int)#2}, int, int*, cub::ScanTileState<int, true>, unsigned long>(thrust::counting_iterator<int, thrust::use_default, thrust::use_default, thrust::use_default>, thrust::cuda_cub::__copy_if::no_stencil_tag_*, int*, {lambda(int)#2}, int, int*, cub::ScanTileState<int, true>, unsigned long)
```

Does this seem to be the same issue as in this ticket?

I also tried with an early version of the mixed condition PR and this kernel seems to be back to normal. That said, I don't see us invoking the mixed condition kernels. Perhaps there are general performance improvements here: https://github.com/rapidsai/cudf/pull/9917 that help. ",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1008235782/reactions,0,0,0,0,0,0,0,0,0,9973
1034,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009017437,https://github.com/rapidsai/cudf/issues/9973#issuecomment-1009017437,https://api.github.com/repos/rapidsai/cudf/issues/9973,1009017437,IC_kwDOBWUGps48JGJd,2022-01-10T15:53:38Z,2022-01-10T15:53:38Z,CONTRIBUTOR,"> I also tried with an early version of the mixed condition PR and this kernel seems to be back to normal. That said, I don't see us invoking the mixed condition kernels. Perhaps there are general performance improvements here: #9917 that help.

I realize now that this also means the change (https://github.com/rapidsai/cudf/pull/9666) wasn't merged into that branch. So I don't think the mixed join change will address. 

I would still like to confirm that the place I saw the regression is expected of this issue.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009017437/reactions,0,0,0,0,0,0,0,0,0,9973
1035,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009153248,https://github.com/rapidsai/cudf/issues/9973#issuecomment-1009153248,https://api.github.com/repos/rapidsai/cudf/issues/9973,1009153248,IC_kwDOBWUGps48JnTg,2022-01-10T17:22:58Z,2022-01-10T17:24:48Z,CONTRIBUTOR,"The slowdowns that I observed were more in the 1-3.5x range than 10x, so I'm surprised that you're seeing something so significant, but a regression is expected because of this issue. I'm especially surprised because I observed larger slowdowns for _smaller_ data sizes, whereas for larger data sizes the relative slowdown was much smaller (although in absolute terms a 4 second slowdown is of course possible). I wonder (but have no specific evidence to suggest this) whether #9912 may also have led to some slowdown in the specific algorithms used here that is exacerbating the issue.

The mixed condition PR is independent and will not change the perf here.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009153248/reactions,0,0,0,0,0,0,0,0,0,9973
1036,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009160184,https://github.com/rapidsai/cudf/issues/9973#issuecomment-1009160184,https://api.github.com/repos/rapidsai/cudf/issues/9973,1009160184,IC_kwDOBWUGps48Jo_4,2022-01-10T17:30:58Z,2022-01-10T17:30:58Z,CONTRIBUTOR,"Thanks @vyasr I don't think that PR is related as I used: https://github.com/rapidsai/cudf/commit/b1ae789e8542e39a8b6811624ee1dba4ff1b1915 as my baseline, and that was after the upgrade to thrust. I compared against: https://github.com/rapidsai/cudf/commit/33f7f0d032728494dcb9bb69eea96bfdc889084d.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009160184/reactions,0,0,0,0,0,0,0,0,0,9973
1037,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034049894,https://github.com/rapidsai/cudf/issues/9973#issuecomment-1034049894,https://api.github.com/repos/rapidsai/cudf/issues/9973,1034049894,IC_kwDOBWUGps49ollm,2022-02-09T18:07:40Z,2022-02-09T18:07:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034049894/reactions,0,0,0,0,0,0,0,0,0,9973
1038,https://api.github.com/repos/rapidsai/cudf/issues/comments/1052172420,https://github.com/rapidsai/cudf/issues/9975#issuecomment-1052172420,https://api.github.com/repos/rapidsai/cudf/issues/9975,1052172420,IC_kwDOBWUGps4-tuCE,2022-02-26T15:03:26Z,2022-02-26T15:03:26Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1052172420/reactions,0,0,0,0,0,0,0,0,0,9975
1039,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139752087,https://github.com/rapidsai/cudf/issues/9975#issuecomment-1139752087,https://api.github.com/repos/rapidsai/cudf/issues/9975,1139752087,IC_kwDOBWUGps5D7zyX,2022-05-27T16:03:15Z,2022-05-27T16:03:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139752087/reactions,0,0,0,0,0,0,0,0,0,9975
1040,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030660420,https://github.com/rapidsai/cudf/issues/9981#issuecomment-1030660420,https://api.github.com/repos/rapidsai/cudf/issues/9981,1030660420,IC_kwDOBWUGps49bqFE,2022-02-05T17:02:42Z,2022-02-05T17:02:42Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030660420/reactions,0,0,0,0,0,0,0,0,0,9981
1041,https://api.github.com/repos/rapidsai/cudf/issues/comments/1119822559,https://github.com/rapidsai/cudf/issues/9981#issuecomment-1119822559,https://api.github.com/repos/rapidsai/cudf/issues/9981,1119822559,IC_kwDOBWUGps5CvyLf,2022-05-06T17:08:08Z,2022-05-06T17:08:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1119822559/reactions,0,0,0,0,0,0,0,0,0,9981
1042,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166422755,https://github.com/rapidsai/cudf/issues/9981#issuecomment-1166422755,https://api.github.com/repos/rapidsai/cudf/issues/9981,1166422755,IC_kwDOBWUGps5FhjLj,2022-06-26T05:42:19Z,2022-06-26T05:42:19Z,CONTRIBUTOR,I prefer cuDF's behavior in not changing the type. Please let me know if you would like to re-open.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166422755/reactions,0,0,0,0,0,0,0,0,0,9981
1043,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167587512,https://github.com/rapidsai/cudf/issues/9981#issuecomment-1167587512,https://api.github.com/repos/rapidsai/cudf/issues/9981,1167587512,IC_kwDOBWUGps5Fl_i4,2022-06-27T16:39:07Z,2022-06-27T16:39:07Z,CONTRIBUTOR,@GregoryKimball did you perhaps look at the examples backwards? I think cuDF _is_ changing the dtype where pandas is not.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167587512/reactions,1,0,0,0,0,0,1,0,0,9981
1044,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109001499,https://github.com/rapidsai/cudf/issues/9981#issuecomment-2109001499,https://api.github.com/repos/rapidsai/cudf/issues/9981,2109001499,IC_kwDOBWUGps59tM8b,2024-05-13T23:37:30Z,2024-05-13T23:37:30Z,CONTRIBUTOR,I think this is also related to #14599 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109001499/reactions,0,0,0,0,0,0,0,0,0,9981
1045,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030711746,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1030711746,https://api.github.com/repos/rapidsai/cudf/issues/9987,1030711746,IC_kwDOBWUGps49b2nC,2022-02-05T23:04:23Z,2022-02-05T23:04:23Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030711746/reactions,0,0,0,0,0,0,0,0,0,9987
1046,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031607970,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1031607970,https://api.github.com/repos/rapidsai/cudf/issues/9987,1031607970,IC_kwDOBWUGps49fRai,2022-02-07T15:40:14Z,2022-02-07T15:40:14Z,CONTRIBUTOR,This would be nice from a Spark perspective too.  But it makes splits much more difficult.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031607970/reactions,0,0,0,0,0,0,0,0,0,9987
1047,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063157505,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1063157505,https://api.github.com/repos/rapidsai/cudf/issues/9987,1063157505,IC_kwDOBWUGps4_Xn8B,2022-03-09T17:09:44Z,2022-03-09T17:09:44Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063157505/reactions,0,0,0,0,0,0,0,0,0,9987
1048,https://api.github.com/repos/rapidsai/cudf/issues/comments/1149000662,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1149000662,https://api.github.com/repos/rapidsai/cudf/issues/9987,1149000662,IC_kwDOBWUGps5EfFvW,2022-06-07T18:03:14Z,2022-06-07T18:03:14Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1149000662/reactions,0,0,0,0,0,0,0,0,0,9987
1049,https://api.github.com/repos/rapidsai/cudf/issues/comments/1154797260,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1154797260,https://api.github.com/repos/rapidsai/cudf/issues/9987,1154797260,IC_kwDOBWUGps5E1M7M,2022-06-14T07:04:33Z,2022-06-14T07:04:33Z,NONE,"encounter the same problem, can this be solved?",,Franc-Z,85468633,MDQ6VXNlcjg1NDY4NjMz,https://avatars.githubusercontent.com/u/85468633?v=4,,https://api.github.com/users/Franc-Z,https://github.com/Franc-Z,https://api.github.com/users/Franc-Z/followers,https://api.github.com/users/Franc-Z/following{/other_user},https://api.github.com/users/Franc-Z/gists{/gist_id},https://api.github.com/users/Franc-Z/starred{/owner}{/repo},https://api.github.com/users/Franc-Z/subscriptions,https://api.github.com/users/Franc-Z/orgs,https://api.github.com/users/Franc-Z/repos,https://api.github.com/users/Franc-Z/events{/privacy},https://api.github.com/users/Franc-Z/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1154797260/reactions,0,0,0,0,0,0,0,0,0,9987
1050,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225152653,https://github.com/rapidsai/cudf/issues/9987#issuecomment-1225152653,https://api.github.com/repos/rapidsai/cudf/issues/9987,1225152653,IC_kwDOBWUGps5JBliN,2022-08-24T03:47:33Z,2022-10-04T19:50:34Z,CONTRIBUTOR,"~This topic recently came up again in reference to an example of `,@,`-delimited data.~

This issues refers to multi-character record delimiters rather than multi-character column delimiters.

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225152653/reactions,0,0,0,0,0,0,0,0,0,9987
1051,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007712388,https://github.com/rapidsai/cudf/issues/9999#issuecomment-1007712388,https://api.github.com/repos/rapidsai/cudf/issues/9999,1007712388,IC_kwDOBWUGps48EHiE,2022-01-07T20:20:15Z,2022-01-07T20:20:15Z,CONTRIBUTOR,"I have started looking into `xfail_strict=true` in PR #9998. That will require some significant work to analyze all the `xfail` tests that pass (1956 tests failed with `xfail_strict=true`, and most of those are xpassed strict failures). I am going to prioritize solving locally failing tests like #7314 and reduce the number of warnings in the pytest log first, before going back to #9998.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007712388/reactions,0,0,0,0,0,0,0,0,0,9999
1052,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030913655,https://github.com/rapidsai/cudf/issues/9999#issuecomment-1030913655,https://api.github.com/repos/rapidsai/cudf/issues/9999,1030913655,IC_kwDOBWUGps49cn53,2022-02-06T21:02:39Z,2022-02-06T21:02:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030913655/reactions,0,0,0,0,0,0,0,0,0,9999
1053,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007704374,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1007704374,https://api.github.com/repos/rapidsai/cudf/issues/10001,1007704374,IC_kwDOBWUGps48EFk2,2022-01-07T20:09:08Z,2022-01-07T20:09:08Z,CONTRIBUTOR,"Many tests need a large dataframe because that will exercise the various chunking types (row-groups/stripes) of the binary formats. 

One category of notoriously slow tests are parquet list reader because they generate each list manually. We should replace them with smarter generators.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007704374/reactions,0,0,0,0,0,0,0,0,0,10001
1054,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007744905,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1007744905,https://api.github.com/repos/rapidsai/cudf/issues/10001,1007744905,IC_kwDOBWUGps48EPeJ,2022-01-07T21:13:31Z,2022-01-07T21:13:31Z,CONTRIBUTOR,"Part of what we discussed is wanting to move those types of tests that are validating granular details of kernels into the C++ layer (not just for cuIO, but across all of cuDF). Of course, data generation etc becomes harder for those tests, so I don't think we need to prioritize that move if we can find other ways to speed up the tests for now, but I think we agreed that that would be a good long term goal. CC @shwina ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007744905/reactions,0,0,0,0,0,0,0,0,0,10001
1055,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007748020,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1007748020,https://api.github.com/repos/rapidsai/cudf/issues/10001,1007748020,IC_kwDOBWUGps48EQO0,2022-01-07T21:18:33Z,2022-01-07T21:18:33Z,CONTRIBUTOR,"The reason you see those tests for cuIO is because most of the time, we need to validate a new feature with pyarrow/pyorc/pandas. To test a new type added to parquet reader e.g. we'd rely on pytests because the ability to write that type is of a lower priority and will come in a later PR. Once we do add it to both the reader and the writer and are able to add gtests, it feels weird to remove them from pytests.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1007748020/reactions,0,0,0,0,0,0,0,0,0,10001
1056,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009017021,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1009017021,https://api.github.com/repos/rapidsai/cudf/issues/10001,1009017021,IC_kwDOBWUGps48JGC9,2022-01-10T15:53:13Z,2022-01-10T15:53:43Z,CONTRIBUTOR,"> Once we do add it to both the reader and the writer and are able to add gtests, it feels weird to remove them from pytests.

The pytests should ideally test the correctness of the Python bindings to functionality, and Pandas compatibility, not the correctness/functionality of the underlying libcudf API.

Since Python tests are being added here as a stop-gap, it seems appropriate to remove them later, no? Currently the long runtimes for some of these tests are a pain point for Python development.

> Once we do add it to both the reader and the writer and are able to add gtests, it feels weird to remove them from pytests.

I'm loathed to delete tests as well, and we are proposing that we only do so carefully and deliberately, when Python tests are redundant with existing C++ tests.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009017021/reactions,0,0,0,0,0,0,0,0,0,10001
1057,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009156471,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1009156471,https://api.github.com/repos/rapidsai/cudf/issues/10001,1009156471,IC_kwDOBWUGps48JoF3,2022-01-10T17:26:45Z,2022-01-10T17:26:45Z,CONTRIBUTOR,"> I'm loathed to delete tests as well, and we are proposing that we only do so carefully and deliberately, when Python tests are redundant with existing C++ tests.

I'm not against this proposal. We're saying the same thing. I'm giving historical context for why some of these exist. I'm pointing out the tests that satisfy your criteria: long runtime, duplicate functionality = list tests.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1009156471/reactions,2,1,0,0,0,0,1,0,0,10001
1058,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034049850,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1034049850,https://api.github.com/repos/rapidsai/cudf/issues/10001,1034049850,IC_kwDOBWUGps49olk6,2022-02-09T18:07:37Z,2022-02-09T18:07:37Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1034049850/reactions,0,0,0,0,0,0,0,0,0,10001
1059,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122711753,https://github.com/rapidsai/cudf/issues/10001#issuecomment-1122711753,https://api.github.com/repos/rapidsai/cudf/issues/10001,1122711753,IC_kwDOBWUGps5C6zjJ,2022-05-10T18:08:44Z,2022-05-10T18:08:44Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122711753/reactions,0,0,0,0,0,0,0,0,0,10001
1060,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030913649,https://github.com/rapidsai/cudf/issues/10002#issuecomment-1030913649,https://api.github.com/repos/rapidsai/cudf/issues/10002,1030913649,IC_kwDOBWUGps49cn5x,2022-02-06T21:02:38Z,2022-02-06T21:02:38Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1030913649/reactions,0,0,0,0,0,0,0,0,0,10002
1061,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031514024,https://github.com/rapidsai/cudf/issues/10002#issuecomment-1031514024,https://api.github.com/repos/rapidsai/cudf/issues/10002,1031514024,IC_kwDOBWUGps49e6eo,2022-02-07T14:14:56Z,2022-02-07T14:14:56Z,MEMBER,Still desired,,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031514024/reactions,0,0,0,0,0,0,0,0,0,10002
1062,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063017964,https://github.com/rapidsai/cudf/issues/10002#issuecomment-1063017964,https://api.github.com/repos/rapidsai/cudf/issues/10002,1063017964,IC_kwDOBWUGps4_XF3s,2022-03-09T15:07:57Z,2022-03-09T15:07:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063017964/reactions,0,0,0,0,0,0,0,0,0,10002
1063,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063030297,https://github.com/rapidsai/cudf/issues/10002#issuecomment-1063030297,https://api.github.com/repos/rapidsai/cudf/issues/10002,1063030297,IC_kwDOBWUGps4_XI4Z,2022-03-09T15:18:57Z,2022-03-09T15:18:57Z,MEMBER,"Still desired, low priority.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063030297/reactions,0,0,0,0,0,0,0,0,0,10002
1064,https://api.github.com/repos/rapidsai/cudf/issues/comments/1093047152,https://github.com/rapidsai/cudf/issues/10002#issuecomment-1093047152,https://api.github.com/repos/rapidsai/cudf/issues/10002,1093047152,IC_kwDOBWUGps5BJpNw,2022-04-08T16:08:15Z,2022-04-08T16:08:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1093047152/reactions,0,0,0,0,0,0,0,0,0,10002
1065,https://api.github.com/repos/rapidsai/cudf/issues/comments/1037677827,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1037677827,https://api.github.com/repos/rapidsai/cudf/issues/10039,1037677827,IC_kwDOBWUGps492bUD,2022-02-13T02:14:32Z,2022-02-13T02:14:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1037677827/reactions,0,0,0,0,0,0,0,0,0,10039
1066,https://api.github.com/repos/rapidsai/cudf/issues/comments/1126619620,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1126619620,https://api.github.com/repos/rapidsai/cudf/issues/10039,1126619620,IC_kwDOBWUGps5DJtnk,2022-05-14T02:50:28Z,2022-05-14T02:50:28Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1126619620/reactions,0,0,0,0,0,0,0,0,0,10039
1067,https://api.github.com/repos/rapidsai/cudf/issues/comments/1821412468,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1821412468,https://api.github.com/repos/rapidsai/cudf/issues/10039,1821412468,IC_kwDOBWUGps5skIx0,2023-11-21T18:07:04Z,2023-11-21T18:59:56Z,CONTRIBUTOR,"Hi, I'd like to try helping out with some of this work. I've a few questions to start off with though. For example, for the first unchecked task ""Implement OOP APIs for mixed joins"" is there an associated issue with this? A simple search through the available issues does not show anything. 

Is there something wrong with the current API that makes it hard for downstream users to use? Is there a general direction for refactoring the API? 

Also another example, I'm still new to cudf(I also admit to having never used it before either). If I am understanding correctly, if you remove the size API from the `join`s this could be a breaking change correct? 

edit: Ok, I will take another glance when I have time and report back here if i run into any problems. I think the size API one should be reasonable for me to approach. ",,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1821412468/reactions,0,0,0,0,0,0,0,0,0,10039
1068,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832817177,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1832817177,https://api.github.com/repos/rapidsai/cudf/issues/10039,1832817177,IC_kwDOBWUGps5tPpIZ,2023-11-29T22:43:26Z,2023-11-29T22:43:26Z,CONTRIBUTOR,"Hi @ZelboK sorry for the slow response, let me try and answer your questions now:

> For example, for the first unchecked task ""Implement OOP APIs for mixed joins"" is there an associated issue with this? A simple search through the available issues does not show anything.

There is not a separate issue for this, no. What this is referring to is that we have [a `hash_join` class](https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/include/cudf/join.hpp#L273) that may be used to perform multiple joins where one of the tables is always the same. By building the hash table once and then probing it repeatedly, we can amortize the cost of building the hash table. That object supports hash joins only right now, but mixed joins would also benefit from the same performance gains since they are part hash join.

> Is there something wrong with the current API that makes it hard for downstream users to use? Is there a general direction for refactoring the API?

More generally here I think we'd like to migrate towards API names that are less confusing. It's not obvious what a ""mixed"" or ""conditional"" join is. Ideally we'd have the function signature tell us everything we need about the nature of the join (equality vs arbitrary AST-based condition).

> If I am understanding correctly, if you remove the size API from the joins this could be a breaking change correct?

Yes, this would be a breaking change. In general we are OK with making breaking changes, though, so that's not a problem. We just need to communicate that effectively. In this case I don't expect the breaking change to affect many users because the current approach doesn't add any meaningful functionality.
",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832817177/reactions,0,0,0,0,0,0,0,0,0,10039
1069,https://api.github.com/repos/rapidsai/cudf/issues/comments/1843948889,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1843948889,https://api.github.com/repos/rapidsai/cudf/issues/10039,1843948889,IC_kwDOBWUGps5t6G1Z,2023-12-07T00:44:41Z,2023-12-07T00:44:41Z,CONTRIBUTOR,"All good. I haven't had time anyway. I will have some time this week though. 

With that being said, are the devs active on any specific slack channel that isn't #general? There's #oss-development but not many people are in it. I personally would like to try these tasks out independently without guidance(so I can learn more), but I occasionally have some questions. Are these issues the best way to communicate?",,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1843948889/reactions,0,0,0,0,0,0,0,0,0,10039
1070,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845529882,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1845529882,https://api.github.com/repos/rapidsai/cudf/issues/10039,1845529882,IC_kwDOBWUGps5uAI0a,2023-12-07T15:15:33Z,2023-12-07T15:15:33Z,CONTRIBUTOR,"> Are these issues the best way to communicate?

Issues (or comments on pull requests) are good for communication about specific topics in the code or coordinating work. Slack is fine for general questions.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845529882/reactions,1,1,0,0,0,0,0,0,0,10039
1071,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845555568,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1845555568,https://api.github.com/repos/rapidsai/cudf/issues/10039,1845555568,IC_kwDOBWUGps5uAPFw,2023-12-07T15:29:39Z,2023-12-07T15:56:33Z,CONTRIBUTOR,"So for the removing size APIs, are you referring to these functions?

https://docs.rapids.ai/api/libcudf/nightly/group__column__join.html#ga00b702723fd8953d5de802bc37965525
https://docs.rapids.ai/api/libcudf/nightly/group__column__join.html#gaecfa4e8182521bb5630adf1bb0b609c2

I imagine this just means to remove them completely and their uses anywhere? Or is there more to this issue that I am missing? In the original paragraph I see the emphasis on wanting to transition over to a ""single-kernel approach"". IIRC `mixed_join_semi` calls several kernels so perhaps it is desired to refactor this to reduce the overhead of the additional kernels? 
",,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845555568/reactions,0,0,0,0,0,0,0,0,0,10039
1072,https://api.github.com/repos/rapidsai/cudf/issues/comments/1849257739,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1849257739,https://api.github.com/repos/rapidsai/cudf/issues/10039,1849257739,IC_kwDOBWUGps5uOW8L,2023-12-11T03:13:22Z,2023-12-11T03:13:47Z,CONTRIBUTOR,"Hi, 

I actually have some code set up. I intend on pushing a PR up hopefully this week should I have enough time. That way I can get feedback on whether or not my design is appropriate or not too. Is it possible to assign some of these issues to myself? 

",,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1849257739/reactions,0,0,0,0,0,0,0,0,0,10039
1073,https://api.github.com/repos/rapidsai/cudf/issues/comments/1849269771,https://github.com/rapidsai/cudf/issues/10039#issuecomment-1849269771,https://api.github.com/repos/rapidsai/cudf/issues/10039,1849269771,IC_kwDOBWUGps5uOZ4L,2023-12-11T03:32:52Z,2023-12-11T03:32:52Z,CONTRIBUTOR,This is a meta-issue with several independent tasks. We can cross-link the PR in the checklist and assign the PR to you once it’s open. Thanks!,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1849269771/reactions,0,0,0,0,0,0,0,0,0,10039
1074,https://api.github.com/repos/rapidsai/cudf/issues/comments/1037677811,https://github.com/rapidsai/cudf/issues/10047#issuecomment-1037677811,https://api.github.com/repos/rapidsai/cudf/issues/10047,1037677811,IC_kwDOBWUGps492bTz,2022-02-13T02:14:31Z,2022-02-13T02:14:31Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1037677811/reactions,0,0,0,0,0,0,0,0,0,10047
1075,https://api.github.com/repos/rapidsai/cudf/issues/comments/1126619616,https://github.com/rapidsai/cudf/issues/10047#issuecomment-1126619616,https://api.github.com/repos/rapidsai/cudf/issues/10047,1126619616,IC_kwDOBWUGps5DJtng,2022-05-14T02:50:27Z,2022-05-14T02:50:27Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1126619616/reactions,0,0,0,0,0,0,0,0,0,10047
1076,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018833995,https://github.com/rapidsai/cudf/issues/10059#issuecomment-1018833995,https://api.github.com/repos/rapidsai/cudf/issues/10059,1018833995,IC_kwDOBWUGps48uixL,2022-01-21T20:25:07Z,2022-01-21T20:25:07Z,MEMBER,"This could possibly be implemented with the existing `cudf.core.reshape.unstack`, following a similar approach to `cudf.dataframe.unstack`. Would you be interested in contributing this functionality?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1018833995/reactions,0,0,0,0,0,0,0,0,0,10059
1077,https://api.github.com/repos/rapidsai/cudf/issues/comments/1409425037,https://github.com/rapidsai/cudf/issues/10059#issuecomment-1409425037,https://api.github.com/repos/rapidsai/cudf/issues/10059,1409425037,IC_kwDOBWUGps5UAh6N,2023-01-30T22:08:06Z,2023-01-30T22:08:06Z,CONTRIBUTOR,"Hi,
I'm interest working in these issues. It seem `fill_values` didn't implement yet. can i try ?",,Touutae-lab,58826535,MDQ6VXNlcjU4ODI2NTM1,https://avatars.githubusercontent.com/u/58826535?v=4,,https://api.github.com/users/Touutae-lab,https://github.com/Touutae-lab,https://api.github.com/users/Touutae-lab/followers,https://api.github.com/users/Touutae-lab/following{/other_user},https://api.github.com/users/Touutae-lab/gists{/gist_id},https://api.github.com/users/Touutae-lab/starred{/owner}{/repo},https://api.github.com/users/Touutae-lab/subscriptions,https://api.github.com/users/Touutae-lab/orgs,https://api.github.com/users/Touutae-lab/repos,https://api.github.com/users/Touutae-lab/events{/privacy},https://api.github.com/users/Touutae-lab/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1409425037/reactions,0,0,0,0,0,0,0,0,0,10059
1078,https://api.github.com/repos/rapidsai/cudf/issues/comments/1411004370,https://github.com/rapidsai/cudf/issues/10059#issuecomment-1411004370,https://api.github.com/repos/rapidsai/cudf/issues/10059,1411004370,IC_kwDOBWUGps5UGjfS,2023-01-31T20:16:19Z,2023-01-31T20:16:19Z,CONTRIBUTOR,"Sure! I would recommend separate PRs to 1) Implement `Series.unstack` and 2) add support for `fill_values`, that'll probably be easiest. Let us know if you have any questions!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1411004370/reactions,0,0,0,0,0,0,0,0,0,10059
1079,https://api.github.com/repos/rapidsai/cudf/issues/comments/1043309986,https://github.com/rapidsai/cudf/issues/10068#issuecomment-1043309986,https://api.github.com/repos/rapidsai/cudf/issues/10068,1043309986,IC_kwDOBWUGps4-L6Wi,2022-02-17T19:02:45Z,2022-02-17T19:02:45Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1043309986/reactions,0,0,0,0,0,0,0,0,0,10068
1080,https://api.github.com/repos/rapidsai/cudf/issues/comments/1130397311,https://github.com/rapidsai/cudf/issues/10068#issuecomment-1130397311,https://api.github.com/repos/rapidsai/cudf/issues/10068,1130397311,IC_kwDOBWUGps5DYH5_,2022-05-18T19:02:51Z,2022-05-18T19:02:51Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1130397311/reactions,0,0,0,0,0,0,0,0,0,10068
1081,https://api.github.com/repos/rapidsai/cudf/issues/comments/1183724035,https://github.com/rapidsai/cudf/issues/10068#issuecomment-1183724035,https://api.github.com/repos/rapidsai/cudf/issues/10068,1183724035,IC_kwDOBWUGps5GjjID,2022-07-13T22:04:04Z,2022-07-13T22:04:04Z,CONTRIBUTOR,"@charlesbluca @shwina I think this issue is basically stating what we discussed on a recent PR, the fact that we may eventually want a common parent class for `Frame` and `BaseIndex` to share the logic for various functions.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1183724035/reactions,1,1,0,0,0,0,0,0,0,10068
1082,https://api.github.com/repos/rapidsai/cudf/issues/comments/1183809043,https://github.com/rapidsai/cudf/issues/10068#issuecomment-1183809043,https://api.github.com/repos/rapidsai/cudf/issues/10068,1183809043,IC_kwDOBWUGps5Gj34T,2022-07-14T00:24:25Z,2022-07-14T00:24:25Z,CONTRIBUTOR,"One idea @vyasr and I discussed offline is for `Index` to (once again) inherit from `Frame`. This can be done by writing a new  `RangeColumn` class that inherits from `Column`. Operations on `RangeColumn` that require it to be materialized will return a `NumericalColumn[int64]`.

A `RangeIndex` would then be a `SingleColumnFrame` composed  of a `RangeColumn`,  eliminating the need for a  separate hierarchy for indexes.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1183809043/reactions,0,0,0,0,0,0,0,0,0,10068
1083,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046120332,https://github.com/rapidsai/cudf/issues/10098#issuecomment-1046120332,https://api.github.com/repos/rapidsai/cudf/issues/10098,1046120332,IC_kwDOBWUGps4-WoeM,2022-02-19T23:02:55Z,2022-02-19T23:02:55Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046120332/reactions,0,0,0,0,0,0,0,0,0,10098
1084,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046128738,https://github.com/rapidsai/cudf/issues/10100#issuecomment-1046128738,https://api.github.com/repos/rapidsai/cudf/issues/10100,1046128738,IC_kwDOBWUGps4-Wqhi,2022-02-20T00:09:23Z,2022-02-20T00:09:23Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046128738/reactions,0,0,0,0,0,0,0,0,0,10100
1085,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133476977,https://github.com/rapidsai/cudf/issues/10100#issuecomment-1133476977,https://api.github.com/repos/rapidsai/cudf/issues/10100,1133476977,IC_kwDOBWUGps5Dj3xx,2022-05-21T00:10:08Z,2022-05-21T00:10:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133476977/reactions,0,0,0,0,0,0,0,0,0,10100
1086,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203092955,https://github.com/rapidsai/cudf/issues/10100#issuecomment-1203092955,https://api.github.com/repos/rapidsai/cudf/issues/10100,1203092955,IC_kwDOBWUGps5Htb3b,2022-08-02T18:51:29Z,2022-08-02T18:51:29Z,CONTRIBUTOR,Note: any PRs that change benchmarks are encouraged/required to migrate the benchmarks to NVBench.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203092955/reactions,0,0,0,0,0,0,0,0,0,10100
1087,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622071919,https://github.com/rapidsai/cudf/issues/10100#issuecomment-1622071919,https://api.github.com/repos/rapidsai/cudf/issues/10100,1622071919,IC_kwDOBWUGps5grtpv,2023-07-05T16:09:02Z,2023-07-05T16:09:02Z,CONTRIBUTOR,"Perhaps instead of adding a new benchmark, we should just add a new nvbench axis for rowgroup/stripe size. Then we would be able to do targeted studies without increasing the benchmark complexity or runtime.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622071919/reactions,0,0,0,0,0,0,0,0,0,10100
1088,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622334422,https://github.com/rapidsai/cudf/issues/10100#issuecomment-1622334422,https://api.github.com/repos/rapidsai/cudf/issues/10100,1622334422,IC_kwDOBWUGps5gstvW,2023-07-05T19:22:01Z,2023-07-05T19:22:01Z,CONTRIBUTOR,Do you mean that we should add an axis that only has the default value?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622334422/reactions,0,0,0,0,0,0,0,0,0,10100
1089,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046340487,https://github.com/rapidsai/cudf/issues/10104#issuecomment-1046340487,https://api.github.com/repos/rapidsai/cudf/issues/10104,1046340487,IC_kwDOBWUGps4-XeOH,2022-02-20T23:03:03Z,2022-02-20T23:03:03Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1046340487/reactions,0,0,0,0,0,0,0,0,0,10104
1090,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133780564,https://github.com/rapidsai/cudf/issues/10104#issuecomment-1133780564,https://api.github.com/repos/rapidsai/cudf/issues/10104,1133780564,IC_kwDOBWUGps5DlB5U,2022-05-21T23:03:06Z,2022-05-21T23:03:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133780564/reactions,0,0,0,0,0,0,0,0,0,10104
1091,https://api.github.com/repos/rapidsai/cudf/issues/comments/1049300919,https://github.com/rapidsai/cudf/issues/10115#issuecomment-1049300919,https://api.github.com/repos/rapidsai/cudf/issues/10115,1049300919,IC_kwDOBWUGps4-iw-3,2022-02-23T23:03:29Z,2022-02-23T23:03:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1049300919/reactions,0,0,0,0,0,0,0,0,0,10115
1092,https://api.github.com/repos/rapidsai/cudf/issues/comments/1161798147,https://github.com/rapidsai/cudf/issues/10115#issuecomment-1161798147,https://api.github.com/repos/rapidsai/cudf/issues/10115,1161798147,IC_kwDOBWUGps5FP6ID,2022-06-21T14:08:32Z,2022-06-21T14:08:32Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1161798147/reactions,0,0,0,0,0,0,0,0,0,10115
1093,https://api.github.com/repos/rapidsai/cudf/issues/comments/1473232351,https://github.com/rapidsai/cudf/issues/10115#issuecomment-1473232351,https://api.github.com/repos/rapidsai/cudf/issues/10115,1473232351,IC_kwDOBWUGps5Xz73f,2023-03-17T06:28:51Z,2023-03-17T06:28:51Z,NONE,any update on this part? Is it possible to be implemented?,,Pedrexus,19956280,MDQ6VXNlcjE5OTU2Mjgw,https://avatars.githubusercontent.com/u/19956280?v=4,,https://api.github.com/users/Pedrexus,https://github.com/Pedrexus,https://api.github.com/users/Pedrexus/followers,https://api.github.com/users/Pedrexus/following{/other_user},https://api.github.com/users/Pedrexus/gists{/gist_id},https://api.github.com/users/Pedrexus/starred{/owner}{/repo},https://api.github.com/users/Pedrexus/subscriptions,https://api.github.com/users/Pedrexus/orgs,https://api.github.com/users/Pedrexus/repos,https://api.github.com/users/Pedrexus/events{/privacy},https://api.github.com/users/Pedrexus/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1473232351/reactions,0,0,0,0,0,0,0,0,0,10115
1094,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050166376,https://github.com/rapidsai/cudf/issues/10121#issuecomment-1050166376,https://api.github.com/repos/rapidsai/cudf/issues/10121,1050166376,IC_kwDOBWUGps4-mERo,2022-02-24T19:02:50Z,2022-02-24T19:02:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1050166376/reactions,0,0,0,0,0,0,0,0,0,10121
1095,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137737921,https://github.com/rapidsai/cudf/issues/10121#issuecomment-1137737921,https://api.github.com/repos/rapidsai/cudf/issues/10121,1137737921,IC_kwDOBWUGps5D0IDB,2022-05-25T19:02:55Z,2022-05-25T19:02:55Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137737921/reactions,0,0,0,0,0,0,0,0,0,10121
1096,https://api.github.com/repos/rapidsai/cudf/issues/comments/1052539446,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1052539446,https://api.github.com/repos/rapidsai/cudf/issues/10149,1052539446,IC_kwDOBWUGps4-vHo2,2022-02-26T20:02:49Z,2022-02-26T20:02:49Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1052539446/reactions,0,0,0,0,0,0,0,0,0,10149
1097,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139992383,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1139992383,https://api.github.com/repos/rapidsai/cudf/issues/10149,1139992383,IC_kwDOBWUGps5D8uc_,2022-05-27T20:02:53Z,2022-05-27T20:02:53Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139992383/reactions,0,0,0,0,0,0,0,0,0,10149
1098,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171553741,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1171553741,https://api.github.com/repos/rapidsai/cudf/issues/10149,1171553741,IC_kwDOBWUGps5F1H3N,2022-06-30T18:41:30Z,2022-06-30T18:41:30Z,CONTRIBUTOR,"From [#10102 (comment)](https://github.com/rapidsai/cudf/issues/10102#issuecomment-1023502832):

I think the machinery in question was added before unsigned support and then was just never updated. It should be updated to use uint64 for unsigned integer types: https://github.com/rapidsai/cudf/blob/1246116c05abb6635624db25351f6596aa0abf2d/cpp/include/cudf/detail/aggregation/aggregation.hpp#L1140-L1147

could be updated to:
```
// Summing/Multiplying integers of any type, always use int64_t accumulator
template <typename Source, aggregation::Kind k>
struct target_type_impl<
  Source,
  k,
  std::enable_if_t<std::is_integral<Source>::value && is_sum_product_agg(k)>> {
  using type = std::conditional_t<std::is_signed_v<Source>, int64_t, uint64_t>>;
};
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171553741/reactions,0,0,0,0,0,0,0,0,0,10149
1099,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920544077,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1920544077,https://api.github.com/repos/rapidsai/cudf/issues/10149,1920544077,IC_kwDOBWUGps5yeS1N,2024-02-01T05:29:26Z,2024-02-01T05:31:11Z,CONTRIBUTOR,"The work in #14679 to address this issue ended up needed to be reverted in #14907 due to a performance regression reported in #14886. 

In addition to adding back the changes in #14679, we also need to:
* add specializations in [device_atomics.cuh](https://github.com/rapidsai/cudf/blob/5cc021af0ef934ddf3f5f66cee2d8dd2490ba623/cpp/include/cudf/detail/utilities/device_atomics.cuh#L160-L162) for `uint32_t` and `uint64_t` as per this [comment](https://github.com/rapidsai/cudf/pull/14907#issuecomment-1915388016)
* for clarity, update namespace for `atomicAdd` in [aggregation.cuh](https://github.com/rapidsai/cudf/blob/1422a4b7f94f66275b3a641ecaf3533815111f8e/cpp/include/cudf/detail/aggregation/aggregation.cuh#L245) to specify the `cudf::detail::` namespace
* also for clarity, extend the `cudf::detail::` namespace updates to `atomicMul` `atomicMin` `atomicMax`  in  [aggregation.cuh](https://github.com/rapidsai/cudf/blob/1422a4b7f94f66275b3a641ecaf3533815111f8e/cpp/include/cudf/detail/aggregation/aggregation.cuh#L245)",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920544077/reactions,0,0,0,0,0,0,0,0,0,10149
1100,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925100746,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925100746,https://api.github.com/repos/rapidsai/cudf/issues/10149,1925100746,IC_kwDOBWUGps5yvrTK,2024-02-03T05:08:10Z,2024-02-03T05:08:10Z,CONTRIBUTOR,"I started an experiment in this direction before I re-read this issue and realized @SurajAralihalli was assigned here. With apologies to @SurajAralihalli, I think I have a good start on the atomics refactoring in https://github.com/rapidsai/cudf/pull/14962. I would like to get that PR merged first, because it should be a standalone improvement, and then we can revisit the changes that were originally reverted.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925100746/reactions,1,1,0,0,0,0,0,0,0,10149
1101,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925155744,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925155744,https://api.github.com/repos/rapidsai/cudf/issues/10149,1925155744,IC_kwDOBWUGps5yv4ug,2024-02-03T06:12:02Z,2024-02-03T06:12:02Z,CONTRIBUTOR,"The revert can be undone after merging https://github.com/rapidsai/cudf/pull/14962. I tested a similar fix while debugging this issue with @SurajAralihalli . 
Although, a thorough testing on other types in similar scenario is required to ensure other bugs are not hidden. (perhaps test chrono types, decimal types).",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925155744/reactions,1,0,0,0,0,0,1,0,0,10149
1102,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925464734,https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925464734,https://api.github.com/repos/rapidsai/cudf/issues/10149,1925464734,IC_kwDOBWUGps5yxEKe,2024-02-03T21:53:11Z,2024-02-03T21:53:11Z,CONTRIBUTOR,"> I started an experiment in this direction before I re-read this issue and realized @SurajAralihalli was assigned here. With apologies to @SurajAralihalli, I think I have a good start on the atomics refactoring in #14962. I would like to get that PR merged first, because it should be a standalone improvement, and then we can revisit the changes that were originally reverted.

Thanks @bdice for letting me know!",,SurajAralihalli,24796335,MDQ6VXNlcjI0Nzk2MzM1,https://avatars.githubusercontent.com/u/24796335?v=4,,https://api.github.com/users/SurajAralihalli,https://github.com/SurajAralihalli,https://api.github.com/users/SurajAralihalli/followers,https://api.github.com/users/SurajAralihalli/following{/other_user},https://api.github.com/users/SurajAralihalli/gists{/gist_id},https://api.github.com/users/SurajAralihalli/starred{/owner}{/repo},https://api.github.com/users/SurajAralihalli/subscriptions,https://api.github.com/users/SurajAralihalli/orgs,https://api.github.com/users/SurajAralihalli/repos,https://api.github.com/users/SurajAralihalli/events{/privacy},https://api.github.com/users/SurajAralihalli/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925464734/reactions,0,0,0,0,0,0,0,0,0,10149
1103,https://api.github.com/repos/rapidsai/cudf/issues/comments/1057328362,https://github.com/rapidsai/cudf/issues/10173#issuecomment-1057328362,https://api.github.com/repos/rapidsai/cudf/issues/10173,1057328362,IC_kwDOBWUGps4_BYzq,2022-03-02T20:02:46Z,2022-03-02T20:02:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1057328362/reactions,0,0,0,0,0,0,0,0,0,10173
1104,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142589725,https://github.com/rapidsai/cudf/issues/10173#issuecomment-1142589725,https://api.github.com/repos/rapidsai/cudf/issues/10173,1142589725,IC_kwDOBWUGps5EGokd,2022-05-31T20:03:40Z,2022-05-31T20:03:40Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142589725/reactions,0,0,0,0,0,0,0,0,0,10173
1105,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225155566,https://github.com/rapidsai/cudf/issues/10173#issuecomment-1225155566,https://api.github.com/repos/rapidsai/cudf/issues/10173,1225155566,IC_kwDOBWUGps5JBmPu,2022-08-24T03:49:38Z,2022-08-24T03:49:38Z,NONE,Lacking of this basic functionaltiy makes cudf very difficult to use.,,entelechie,3169758,MDQ6VXNlcjMxNjk3NTg=,https://avatars.githubusercontent.com/u/3169758?v=4,,https://api.github.com/users/entelechie,https://github.com/entelechie,https://api.github.com/users/entelechie/followers,https://api.github.com/users/entelechie/following{/other_user},https://api.github.com/users/entelechie/gists{/gist_id},https://api.github.com/users/entelechie/starred{/owner}{/repo},https://api.github.com/users/entelechie/subscriptions,https://api.github.com/users/entelechie/orgs,https://api.github.com/users/entelechie/repos,https://api.github.com/users/entelechie/events{/privacy},https://api.github.com/users/entelechie/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225155566/reactions,0,0,0,0,0,0,0,0,0,10173
1106,https://api.github.com/repos/rapidsai/cudf/issues/comments/1057328330,https://github.com/rapidsai/cudf/issues/10175#issuecomment-1057328330,https://api.github.com/repos/rapidsai/cudf/issues/10175,1057328330,IC_kwDOBWUGps4_BYzK,2022-03-02T20:02:44Z,2022-03-02T20:02:44Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1057328330/reactions,0,0,0,0,0,0,0,0,0,10175
1107,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142589699,https://github.com/rapidsai/cudf/issues/10175#issuecomment-1142589699,https://api.github.com/repos/rapidsai/cudf/issues/10175,1142589699,IC_kwDOBWUGps5EGokD,2022-05-31T20:03:38Z,2022-05-31T20:03:38Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142589699/reactions,0,0,0,0,0,0,0,0,0,10175
1108,https://api.github.com/repos/rapidsai/cudf/issues/comments/1036835622,https://github.com/rapidsai/cudf/issues/10177#issuecomment-1036835622,https://api.github.com/repos/rapidsai/cudf/issues/10177,1036835622,IC_kwDOBWUGps49zNsm,2022-02-12T00:23:33Z,2022-02-12T00:24:17Z,CONTRIBUTOR,"List of other operators I've found are implemented in pandas but not cudf:
- `__divmod__(self, other)` (docs on [divmod](https://docs.python.org/3/library/functions.html#divmod))
- `__rdivmod__(self, other)`
- `__round__(self, ndigits)`",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1036835622/reactions,0,0,0,0,0,0,0,0,0,10177
1109,https://api.github.com/repos/rapidsai/cudf/issues/comments/1051369835,https://github.com/rapidsai/cudf/issues/10177#issuecomment-1051369835,https://api.github.com/repos/rapidsai/cudf/issues/10177,1051369835,IC_kwDOBWUGps4-qqFr,2022-02-25T23:45:29Z,2022-02-25T23:45:29Z,CONTRIBUTOR,"#10360 handles the reverse binary operators. The three that you listed in your last comment are not yet done. divmod and rdivmod are out of scope for #10360 but are in general trivial to implement in the relevant classes once that PR is merged since they are just 
```
def __divmod__(self, other):
    return self // other, self % other
def __rdivmod__(self, other):
    return other // self, other % self
```
I think they should probably just bypass the new binop machinery, but maybe there will be a benefit to including them.

`round` is a little different from other binary operations because the second parameter is optional, i.e. `round(x)` will not pass a parameter for `ndigits` so you have to make sure to handle the `None` case. Obviously trivial to do, but a reason to perhaps not shoehorn it into the same patterns and instead implement it separately.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1051369835/reactions,1,1,0,0,0,0,0,0,0,10177
1110,https://api.github.com/repos/rapidsai/cudf/issues/comments/1053861052,https://github.com/rapidsai/cudf/issues/10177#issuecomment-1053861052,https://api.github.com/repos/rapidsai/cudf/issues/10177,1053861052,IC_kwDOBWUGps4-0KS8,2022-02-28T04:02:48Z,2022-02-28T04:02:48Z,CONTRIBUTOR,@vyasr Awesome. I subscribed to notifications on #10360 and I can take a look at the missing operators after that PR is merged. I changed the title of this issue to reflect the change in scope.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1053861052/reactions,0,0,0,0,0,0,0,0,0,10177
1111,https://api.github.com/repos/rapidsai/cudf/issues/comments/1111378035,https://github.com/rapidsai/cudf/issues/10177#issuecomment-1111378035,https://api.github.com/repos/rapidsai/cudf/issues/10177,1111378035,IC_kwDOBWUGps5CPkhz,2022-04-27T19:07:56Z,2022-04-27T19:07:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1111378035/reactions,0,0,0,0,0,0,0,0,0,10177
1112,https://api.github.com/repos/rapidsai/cudf/issues/comments/1195923811,https://github.com/rapidsai/cudf/issues/10177#issuecomment-1195923811,https://api.github.com/repos/rapidsai/cudf/issues/10177,1195923811,IC_kwDOBWUGps5HSFlj,2022-07-26T20:03:28Z,2022-07-26T20:03:28Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1195923811/reactions,0,0,0,0,0,0,0,0,0,10177
1113,https://api.github.com/repos/rapidsai/cudf/issues/comments/1058272604,https://github.com/rapidsai/cudf/issues/10183#issuecomment-1058272604,https://api.github.com/repos/rapidsai/cudf/issues/10183,1058272604,IC_kwDOBWUGps4_E_Vc,2022-03-03T17:09:32Z,2022-03-03T17:09:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1058272604/reactions,0,0,0,0,0,0,0,0,0,10183
1114,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166617230,https://github.com/rapidsai/cudf/issues/10183#issuecomment-1166617230,https://api.github.com/repos/rapidsai/cudf/issues/10183,1166617230,IC_kwDOBWUGps5FiSqO,2022-06-26T19:02:46Z,2022-06-26T19:02:46Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166617230/reactions,0,0,0,0,0,0,0,0,0,10183
1115,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370343921,https://github.com/rapidsai/cudf/issues/10183#issuecomment-1370343921,https://api.github.com/repos/rapidsai/cudf/issues/10183,1370343921,IC_kwDOBWUGps5Rrcnx,2023-01-04T00:01:56Z,2023-01-04T00:01:56Z,MEMBER,"Diving into this issue with @PointKernel led us to figure out this is more complex than it appears. In general, `distinct` and `distinct_count` should share the same configuration parameters, but as of now, they do not. The configuration parameters that appear in these APIs are:

1. `null_policy` : `{EXCLUDE, INCLUDE}`
2. `nan_policy` : `{NAN_IS_NULL, NAN_IS_VALID}`
3. `null_equality` : `{EQUAL, UNEQUAL}`
4. `nan_equality` : `{ALL_EQUAL, UNEQUAL}`

These 4 knobs all interplay with each other, and the right way to do this would be:

- Add 1 and 2 to the implementation of `distinct`, which currently exposes 3 and 4, while also using the new row comparators
- Write a common function inspired from `distinct` that builds a hash map, to be shared with `distinct_count`
- `distinct` uses the actual map and post-processes to build the result table, `distinct_count` just directly returns the size of the map
- This also helps update `distinct_count` to the new experimental comparators
- Start sharing tests/benchmarks between both these functions as they will essentially be sharing the same code path
",,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370343921/reactions,2,0,0,0,0,0,2,0,0,10183
1116,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370348159,https://github.com/rapidsai/cudf/issues/10183#issuecomment-1370348159,https://api.github.com/repos/rapidsai/cudf/issues/10183,1370348159,IC_kwDOBWUGps5Rrdp_,2023-01-04T00:08:21Z,2023-01-04T00:08:21Z,CONTRIBUTOR,"@divyegala Yes, exactly! I agree this is a good plan for implementation.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370348159/reactions,0,0,0,0,0,0,0,0,0,10183
1117,https://api.github.com/repos/rapidsai/cudf/issues/comments/1059856780,https://github.com/rapidsai/cudf/issues/10214#issuecomment-1059856780,https://api.github.com/repos/rapidsai/cudf/issues/10214,1059856780,IC_kwDOBWUGps4_LCGM,2022-03-06T00:08:54Z,2022-03-06T00:08:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1059856780/reactions,0,0,0,0,0,0,0,0,0,10214
1118,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146471310,https://github.com/rapidsai/cudf/issues/10214#issuecomment-1146471310,https://api.github.com/repos/rapidsai/cudf/issues/10214,1146471310,IC_kwDOBWUGps5EVcOO,2022-06-04T00:10:41Z,2022-06-04T00:10:41Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146471310/reactions,0,0,0,0,0,0,0,0,0,10214
1119,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117693361,https://github.com/rapidsai/cudf/issues/10214#issuecomment-2117693361,https://api.github.com/repos/rapidsai/cudf/issues/10214,2117693361,IC_kwDOBWUGps5-OW-x,2024-05-17T14:08:38Z,2024-05-17T14:08:38Z,CONTRIBUTOR,"The underlying issue here is that [`rand_dataframe` seeds itself by producing a random number](https://github.com/rapidsai/cudf/blob/branch-24.06/python/cudf/cudf/testing/dataset_generator.py#L309). That should be fixed to either require a user-provided seed, or use a sensible default like 0 to produce reproducible results.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117693361/reactions,0,0,0,0,0,0,0,0,0,10214
1120,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031932831,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1031932831,https://api.github.com/repos/rapidsai/cudf/issues/10237,1031932831,IC_kwDOBWUGps49gguf,2022-02-07T21:16:01Z,2022-02-07T21:16:01Z,CONTRIBUTOR,It definitely isn't by design. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1031932831/reactions,1,1,0,0,0,0,0,0,0,10237
1121,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063561606,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1063561606,https://api.github.com/repos/rapidsai/cudf/issues/10237,1063561606,IC_kwDOBWUGps4_ZKmG,2022-03-10T01:30:17Z,2022-03-10T01:30:17Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1063561606/reactions,0,0,0,0,0,0,0,0,0,10237
1122,https://api.github.com/repos/rapidsai/cudf/issues/comments/1149348069,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1149348069,https://api.github.com/repos/rapidsai/cudf/issues/10237,1149348069,IC_kwDOBWUGps5Egajl,2022-06-08T01:31:30Z,2022-06-08T01:31:30Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1149348069/reactions,0,0,0,0,0,0,0,0,0,10237
1123,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168197728,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1168197728,https://api.github.com/repos/rapidsai/cudf/issues/10237,1168197728,IC_kwDOBWUGps5FoUhg,2022-06-28T04:11:44Z,2022-06-28T04:11:44Z,CONTRIBUTOR,@mythrocks Would you please make a C++ repro for this bug? Or is it only happening in the JNI layer?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168197728/reactions,1,1,0,0,0,0,0,0,0,10237
1124,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501379,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1257501379,https://api.github.com/repos/rapidsai/cudf/issues/10237,1257501379,IC_kwDOBWUGps5K8_LD,2022-09-26T05:31:02Z,2022-09-26T05:31:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501379/reactions,0,0,0,0,0,0,0,0,0,10237
1125,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258173376,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1258173376,https://api.github.com/repos/rapidsai/cudf/issues/10237,1258173376,IC_kwDOBWUGps5K_jPA,2022-09-26T15:01:59Z,2022-09-26T15:01:59Z,CONTRIBUTOR,@mythrocks is this still an issue? It looks like it is waiting for you to have a non-java repro case.  Do you need someone else to help you write it?,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258173376/reactions,0,0,0,0,0,0,0,0,0,10237
1126,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258237365,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1258237365,https://api.github.com/repos/rapidsai/cudf/issues/10237,1258237365,IC_kwDOBWUGps5K_y21,2022-09-26T15:42:41Z,2022-09-26T15:42:41Z,CONTRIBUTOR,"It does indeed look intentional if I'm reading these gtests right.
https://github.com/rapidsai/cudf/blob/fb703b1a5384606e7fc13e5e931c6f57eb0bb8ff/cpp/tests/groupby/count_scan_tests.cpp#L49-L53
https://github.com/rapidsai/cudf/blob/fb703b1a5384606e7fc13e5e931c6f57eb0bb8ff/cpp/tests/groupby/count_scan_tests.cpp#L146-L151
https://github.com/rapidsai/cudf/blob/fb703b1a5384606e7fc13e5e931c6f57eb0bb8ff/cpp/tests/groupby/count_scan_tests.cpp#L177-L181",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258237365/reactions,0,0,0,0,0,0,0,0,0,10237
1127,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258409589,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1258409589,https://api.github.com/repos/rapidsai/cudf/issues/10237,1258409589,IC_kwDOBWUGps5LAc51,2022-09-26T17:58:17Z,2022-09-26T18:21:09Z,CONTRIBUTOR,">  It looks like it is waiting for you to have a non-java repro case. 

I have been otherwise occupied, so I didn't get the time to write a repro. 

> Do you need someone else to help you write it?

No, the issue really was time/focus. I'll get on writing a suitable test.

Edit: From @davidwendt's post, it does appear that this is intentional. Big yikes.

Could someone please help me understand how this is the right behaviour?
cc @karthikeyann. Perhaps I'm misreading what this function should be doing.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258409589/reactions,0,0,0,0,0,0,0,0,0,10237
1128,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258423150,https://github.com/rapidsai/cudf/issues/10237#issuecomment-1258423150,https://api.github.com/repos/rapidsai/cudf/issues/10237,1258423150,IC_kwDOBWUGps5LAgNu,2022-09-26T18:10:53Z,2022-09-26T18:10:53Z,CONTRIBUTOR,"I missed in the original issue description that this was for groupby *scan*. I had thought this was just for regular groupby `count`.

I don't know much about the groupby scan implementation, so it sounds like a bug of using exclusive scan vs inclusive scan. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258423150/reactions,1,1,0,0,0,0,0,0,0,10237
1129,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065051083,https://github.com/rapidsai/cudf/issues/10240#issuecomment-1065051083,https://api.github.com/repos/rapidsai/cudf/issues/10240,1065051083,IC_kwDOBWUGps4_e2PL,2022-03-11T12:03:23Z,2022-03-11T12:03:23Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065051083/reactions,0,0,0,0,0,0,0,0,0,10240
1130,https://api.github.com/repos/rapidsai/cudf/issues/comments/1151036251,https://github.com/rapidsai/cudf/issues/10240#issuecomment-1151036251,https://api.github.com/repos/rapidsai/cudf/issues/10240,1151036251,IC_kwDOBWUGps5Em2tb,2022-06-09T12:04:09Z,2022-06-09T12:04:09Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1151036251/reactions,0,0,0,0,0,0,0,0,0,10240
1131,https://api.github.com/repos/rapidsai/cudf/issues/comments/1032664239,https://github.com/rapidsai/cudf/issues/10242#issuecomment-1032664239,https://api.github.com/repos/rapidsai/cudf/issues/10242,1032664239,IC_kwDOBWUGps49jTSv,2022-02-08T14:23:37Z,2022-02-08T14:23:37Z,MEMBER,"`groupby.transform` [currently supports](https://docs.rapids.ai/api/cudf/nightly/api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.html?highlight=transform#cudf.core.groupby.groupby.GroupBy.transform) only the set of operation supported by the `groupby.agg` method. This means you can do things like `transform(""max"")` or `transform(""cumsum"")` but not `transform(callable_function)`.

As a note, you can currently achieve your desired result with `df.groupby([keys]).rolling(window=3)[val_col].mean().sort_index()`

",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1032664239/reactions,0,0,0,0,0,0,0,0,0,10242
1132,https://api.github.com/repos/rapidsai/cudf/issues/comments/1032668106,https://github.com/rapidsai/cudf/issues/10242#issuecomment-1032668106,https://api.github.com/repos/rapidsai/cudf/issues/10242,1032668106,IC_kwDOBWUGps49jUPK,2022-02-08T14:27:14Z,2022-02-08T14:27:14Z,MEMBER,"I'm going to convert this issue to a feature request for supporting arbitrary callable functions in groupby.transform. It's not currently clear how to support this in an efficient manner, similar to https://github.com/rapidsai/cudf/issues/2290",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1032668106/reactions,0,0,0,0,0,0,0,0,0,10242
1133,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064162461,https://github.com/rapidsai/cudf/issues/10242#issuecomment-1064162461,https://api.github.com/repos/rapidsai/cudf/issues/10242,1064162461,IC_kwDOBWUGps4_bdSd,2022-03-10T15:07:41Z,2022-03-10T15:07:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064162461/reactions,0,0,0,0,0,0,0,0,0,10242
1134,https://api.github.com/repos/rapidsai/cudf/issues/comments/1150109692,https://github.com/rapidsai/cudf/issues/10242#issuecomment-1150109692,https://api.github.com/repos/rapidsai/cudf/issues/10242,1150109692,IC_kwDOBWUGps5EjUf8,2022-06-08T16:03:23Z,2022-06-08T16:03:23Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1150109692/reactions,0,0,0,0,0,0,0,0,0,10242
1135,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064345203,https://github.com/rapidsai/cudf/issues/10249#issuecomment-1064345203,https://api.github.com/repos/rapidsai/cudf/issues/10249,1064345203,IC_kwDOBWUGps4_cJ5z,2022-03-10T18:03:32Z,2022-03-10T18:03:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1064345203/reactions,0,0,0,0,0,0,0,0,0,10249
1136,https://api.github.com/repos/rapidsai/cudf/issues/comments/1150287182,https://github.com/rapidsai/cudf/issues/10249#issuecomment-1150287182,https://api.github.com/repos/rapidsai/cudf/issues/10249,1150287182,IC_kwDOBWUGps5Ej_1O,2022-06-08T19:02:56Z,2022-06-08T19:02:56Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1150287182/reactions,0,0,0,0,0,0,0,0,0,10249
1137,https://api.github.com/repos/rapidsai/cudf/issues/comments/1634574738,https://github.com/rapidsai/cudf/issues/10249#issuecomment-1634574738,https://api.github.com/repos/rapidsai/cudf/issues/10249,1634574738,IC_kwDOBWUGps5hbaGS,2023-07-13T16:51:55Z,2023-07-13T17:04:30Z,MEMBER,"Took a quick look at this issue again. I suspect that the reason this occurs is due to the `__getitem__` call (`.x`). RollingGroupby inherits from Rolling, which has the getitem implementation.

This implementation returns a standard Rolling object:

https://github.com/rapidsai/cudf/blob/3bacb12deca71667646057d1790f0786c20c2d53/python/cudf/cudf/core/window/rolling.py#L204-L211

So the call to `mean()` goes down the standard `Rolling._apply_agg` path rather than the `RollingGroupby._apply_agg`. This path doesn't create a MultiIndex:

https://github.com/rapidsai/cudf/blob/3bacb12deca71667646057d1790f0786c20c2d53/python/cudf/cudf/core/window/rolling.py#L264-L284


Unlike the `RollingGroupby._apply_agg` path:

https://github.com/rapidsai/cudf/blob/3bacb12deca71667646057d1790f0786c20c2d53/python/cudf/cudf/core/window/rolling.py#L545-L559",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1634574738/reactions,0,0,0,0,0,0,0,0,0,10249
1138,https://api.github.com/repos/rapidsai/cudf/issues/comments/1634603980,https://github.com/rapidsai/cudf/issues/10249#issuecomment-1634603980,https://api.github.com/repos/rapidsai/cudf/issues/10249,1634603980,IC_kwDOBWUGps5hbhPM,2023-07-13T17:07:18Z,2023-07-13T17:07:18Z,MEMBER,"To make this concrete:

```python
import cudf

df = cudf.datasets.randomdata()

print(""getitem call on the RollingGroupby object"")
print(df.groupby([""id""]).rolling(window=3).x.mean().head())

print(""getitem call before the RollingGroupby is created"")
print(df.groupby([""id""]).x.rolling(window=3).mean().head())
getitem call on the RollingGroupby object
3    <NA>
8    <NA>
6    <NA>
7    <NA>
9    <NA>
Name: x, dtype: float64
getitem call before the RollingGroupby is created
id    
918  3    <NA>
963  8    <NA>
967  6    <NA>
990  7    <NA>
     9    <NA>
Name: x, dtype: float64
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1634603980/reactions,0,0,0,0,0,0,0,0,0,10249
1139,https://api.github.com/repos/rapidsai/cudf/issues/comments/2096628884,https://github.com/rapidsai/cudf/issues/10249#issuecomment-2096628884,https://api.github.com/repos/rapidsai/cudf/issues/10249,2096628884,IC_kwDOBWUGps58-ASU,2024-05-06T18:11:51Z,2024-05-06T18:11:51Z,MEMBER,"Ran into this today while using cudf.pandas.

cc @galipremsagar @vyasr , would this be a good first issue for a new contributor?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2096628884/reactions,0,0,0,0,0,0,0,0,0,10249
1140,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109012473,https://github.com/rapidsai/cudf/issues/10249#issuecomment-2109012473,https://api.github.com/repos/rapidsai/cudf/issues/10249,2109012473,IC_kwDOBWUGps59tPn5,2024-05-13T23:49:09Z,2024-05-13T23:49:09Z,CONTRIBUTOR,"Yes, I think so!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109012473/reactions,0,0,0,0,0,0,0,0,0,10249
1141,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065846041,https://github.com/rapidsai/cudf/issues/10265#issuecomment-1065846041,https://api.github.com/repos/rapidsai/cudf/issues/10265,1065846041,IC_kwDOBWUGps4_h4UZ,2022-03-12T09:03:18Z,2022-03-12T09:03:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1065846041/reactions,0,0,0,0,0,0,0,0,0,10265
1142,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128147840,https://github.com/rapidsai/cudf/issues/10265#issuecomment-1128147840,https://api.github.com/repos/rapidsai/cudf/issues/10265,1128147840,IC_kwDOBWUGps5DPiuA,2022-05-16T21:19:31Z,2022-05-16T21:19:31Z,CONTRIBUTOR,"This is off by default in Spark so it is nice to be able to support this, but it is not a blocker.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128147840/reactions,0,0,0,0,0,0,0,0,0,10265
1143,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501351,https://github.com/rapidsai/cudf/issues/10265#issuecomment-1257501351,https://api.github.com/repos/rapidsai/cudf/issues/10265,1257501351,IC_kwDOBWUGps5K8_Kn,2022-09-26T05:30:59Z,2022-09-26T05:30:59Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501351/reactions,0,0,0,0,0,0,0,0,0,10265
1144,https://api.github.com/repos/rapidsai/cudf/issues/comments/1334234475,https://github.com/rapidsai/cudf/issues/10265#issuecomment-1334234475,https://api.github.com/repos/rapidsai/cudf/issues/10265,1334234475,IC_kwDOBWUGps5Phs1r,2022-12-01T19:17:47Z,2022-12-01T19:17:47Z,CONTRIBUTOR,"Do the comments only occur in between field names, values, and symbols `: [ {`? If so then then adding a comment state might be easier. 

Does ` //` comment always end in a `\n` newline? Can be sure that any `/` occurring outside a quoted region begins a comment? Single-line comments might be possible, but it would bring some performance penalty from increasing the size of the state machine.

Does a block comment ever contain `*` characters? If so we would need to add a lookahead for block comments and this would be challenging.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1334234475/reactions,0,0,0,0,0,0,0,0,0,10265
1145,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335607363,https://github.com/rapidsai/cudf/issues/10265#issuecomment-1335607363,https://api.github.com/repos/rapidsai/cudf/issues/10265,1335607363,IC_kwDOBWUGps5Pm8BD,2022-12-02T17:56:20Z,2022-12-02T17:56:20Z,CONTRIBUTOR,"To be clear this is not a super high priority for us.  We have had no one request this yet, but it is a part of Spark. This would be a feature that we could turn on or turn off.

This corresponds to a Jackson JSON parser feature, which is the JSON parser that Spark uses and just exposes some configs for.

https://github.com/FasterXML/jackson-core/blob/0d5c70ff02681b4305f0d4932915e7f025e54e12/src/main/java/com/fasterxml/jackson/core/json/JsonReadFeature.java#L16-L28

Some of the tests for it are at

https://github.com/FasterXML/jackson-core/blob/390472bbdf4722fe058f48bb0eff5865c8d20f73/src/test/java/com/fasterxml/jackson/core/read/CommentParsingTest.java

> Do the comments only occur in between field names, values, and symbols : [ {? If so then then adding a comment state might be easier.

Yes, that appears to be correct.  
```
{ ""C"": 5/*5*/6 } 
```
results in an error.

Comment parsing within a quoted string is skipped.
```
{""B"":""2""}
{""B"":""2//test""}
{""B"":""2/*test""}
{""B"":""2/*test*/""}
```

results in

```
+---------+
|B        |
+---------+
|2        |
|2//test  |
|2/*test  |
|2/*test*/|
+---------+
```

> Does // comment always end in a \n newline? 

There are some bugs with this in Spark. For now I would say yes new line \n or the end of the buffer/file. We can standardize on that. The reality is a little more complicated, but it is for features that I don't think we would support, or need to be bug for bug compatible with Spark for.

> Can be sure that any / occurring outside a quoted region begins a comment?

From reading the Jackson parser code it appears to be doing exactly that. If it sees a '/' when it is looking to skip white space, a colon, or the end, then it goes into comment skipping mode. If it sees a / by itself that is an error or something after the / that is not another / or a * it is an error.

https://github.com/FasterXML/jackson-core/blob/390472bbdf4722fe058f48bb0eff5865c8d20f73/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java#L3265-L3282

> Single-line comments might be possible, but it would bring some performance penalty from increasing the size of the state machine.

I am not sure what you mean by single line comments?  Do you mean something like
```
{""A"": 100}
// This is a single line comment
{""B"": 200}
       /* so is this... */
```

```
+----+----+
|A   |B   |
+----+----+
|100 |null|
|null|200 |
+----+----+
```

> Does a block comment ever contain * characters? If so we would need to add a lookahead for block comments and this would be challenging.

Yes

```
{""A"": 100 /*****************************************/, ""B"": 200}
```

",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335607363/reactions,0,0,0,0,0,0,0,0,0,10265
1146,https://api.github.com/repos/rapidsai/cudf/issues/comments/1066142128,https://github.com/rapidsai/cudf/issues/10266#issuecomment-1066142128,https://api.github.com/repos/rapidsai/cudf/issues/10266,1066142128,IC_kwDOBWUGps4_jAmw,2022-03-13T17:03:56Z,2022-03-13T17:03:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1066142128/reactions,0,0,0,0,0,0,0,0,0,10266
1147,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128147447,https://github.com/rapidsai/cudf/issues/10266#issuecomment-1128147447,https://api.github.com/repos/rapidsai/cudf/issues/10266,1128147447,IC_kwDOBWUGps5DPin3,2022-05-16T21:19:02Z,2022-05-16T21:19:02Z,CONTRIBUTOR,Setting this to P1 as it is off by default in Spark,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128147447/reactions,0,0,0,0,0,0,0,0,0,10266
1148,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501326,https://github.com/rapidsai/cudf/issues/10266#issuecomment-1257501326,https://api.github.com/repos/rapidsai/cudf/issues/10266,1257501326,IC_kwDOBWUGps5K8_KO,2022-09-26T05:30:57Z,2022-09-26T05:30:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501326/reactions,0,0,0,0,0,0,0,0,0,10266
1149,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274542313,https://github.com/rapidsai/cudf/issues/10266#issuecomment-1274542313,https://api.github.com/repos/rapidsai/cudf/issues/10266,1274542313,IC_kwDOBWUGps5L9_jp,2022-10-11T11:35:10Z,2022-10-11T11:35:10Z,CONTRIBUTOR,"should we support whitespace in the unquoted field names?
What should be the behaviour if there is whitespace 1) at beginning of field name, 2) in middle of field name 3) after field name, but before `:` ?
Similarly what should be behaviour if there is newline for above 3 cases?
Should we provide escape `\` character support?",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274542313/reactions,0,0,0,0,0,0,0,0,0,10266
1150,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274826680,https://github.com/rapidsai/cudf/issues/10266#issuecomment-1274826680,https://api.github.com/repos/rapidsai/cudf/issues/10266,1274826680,IC_kwDOBWUGps5L_E-4,2022-10-11T14:51:30Z,2022-10-11T14:51:30Z,CONTRIBUTOR,"> should we support whitespace in the unquoted field names?

No. see below for details

> What should be the behaviour if there is whitespace 1) at beginning of field name, 2) in middle of field name 3) after field name, but before : ?

White space at the beginning and after the name but before the `:` should be stripped out and removed. In the middle is an error.

> Similarly what should be behaviour if there is newline for above 3 cases?

That would only show up for a non-json lines use case. In those cases newline is treated like other white space, and stripped from the beginning and end, but an error if it is in the middle.

> Should we provide escape \ character support?

Not for unquoted names.  None quoted escape characters in the names of a field are considered an error. This is true even  if escaping any character is allowed as set by a second config.

Here is the test files and code that I used.

```

$ cat test.json
{name: ""A"", value : 100}
{""name"": ""B"", ""value "": 200}
{name: ""C"", value\ : 300}
{name: ""D"",     value    : 400}
{name: ""E"", name value: 500}
{name: ""F"", name N value: 600}
{name: ""G"", name\nvalue: 700}
{name: ""H"", ""name\tvalue"": 800}
{name: ""I"", ""name\nvalue"": 900}
{name: ""J"", va\lue: 1000}
{name: ""K"", ""va\lue"": 1100}
$ cat test_2.json
{name: ""A"", value : 100,
""other "": 200, a
:
""a"",



ABC: ""ABC""}
# spark-shell
scala> spark.read.option(""allowUnquotedFieldNames"", ""true"").option(""multiLine"", ""true"").json(""./test_2.json"").show(truncate = false)
+---+---+----+------+-----+
|ABC|a  |name|other |value|
+---+---+----+------+-----+
|ABC|a  |A   |200   |100  |
+---+---+----+------+-----+

scala> spark.read.options(Map(""allowUnquotedFieldNames"" -> ""true"", ""allowBackslashEscapingAnyCharacter"" -> ""true"")).json(""./test.json"").show(truncate = false)
+------------------------------+----+-----------+-----------+-----+------+
|_corrupt_record               |name|name\tvalue|name\nvalue|value|value |
+------------------------------+----+-----------+-----------+-----+------+
|null                          |A   |null       |null       |100  |null  |
|null                          |B   |null       |null       |null |200   |
|{name: ""C"", value\ : 300}     |null|null       |null       |null |null  |
|null                          |D   |null       |null       |400  |null  |
|{name: ""E"", name value: 500}  |null|null       |null       |null |null  |
|{name: ""F"", name N value: 600}|null|null       |null       |null |null  |
|{name: ""G"", name\nvalue: 700} |null|null       |null       |null |null  |
|null                          |H   |800        |null       |null |null  |
|null                          |I   |null       |900        |null |null  |
|{name: ""J"", va\lue: 1000}     |null|null       |null       |null |null  |
|null                          |K   |null       |null       |1100 |null  |
+------------------------------+----+-----------+-----------+-----+------+


scala> spark.read.option(""allowUnquotedFieldNames"", ""true"").json(""./test.json"").show(truncate = false)
+------------------------------+----+-----------+-----------+-----+------+
|_corrupt_record               |name|name\tvalue|name\nvalue|value|value |
+------------------------------+----+-----------+-----------+-----+------+
|null                          |A   |null       |null       |100  |null  |
|null                          |B   |null       |null       |null |200   |
|{name: ""C"", value\ : 300}     |null|null       |null       |null |null  |
|null                          |D   |null       |null       |400  |null  |
|{name: ""E"", name value: 500}  |null|null       |null       |null |null  |
|{name: ""F"", name N value: 600}|null|null       |null       |null |null  |
|{name: ""G"", name\nvalue: 700} |null|null       |null       |null |null  |
|null                          |H   |800        |null       |null |null  |
|null                          |I   |null       |900        |null |null  |
|{name: ""J"", va\lue: 1000}     |null|null       |null       |null |null  |
|{name: ""K"", ""va\lue"": 1100}   |null|null       |null       |null |null  |
+------------------------------+----+-----------+-----------+-----+------+
```

Like in the other examples you can ignore the ""_corrupt_record"" field it is generally not used and we don't support it on the GPU, but it shows which lines had errors in them .
",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1274826680/reactions,0,0,0,0,0,0,0,0,0,10266
1151,https://api.github.com/repos/rapidsai/cudf/issues/comments/1035068399,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1035068399,https://api.github.com/repos/rapidsai/cudf/issues/10267,1035068399,IC_kwDOBWUGps49sePv,2022-02-10T15:39:50Z,2022-02-10T15:39:50Z,CONTRIBUTOR,"This is primarily to document what Spark supports. I don't see this being a high priority at any point int he future. This is because Spark cannot split files with this type of processing, and it would make it very difficult for us to be able to do this in an efficient way.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1035068399/reactions,0,0,0,0,0,0,0,0,0,10267
1152,https://api.github.com/repos/rapidsai/cudf/issues/comments/1040866002,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1040866002,https://api.github.com/repos/rapidsai/cudf/issues/10267,1040866002,IC_kwDOBWUGps4-ClrS,2022-02-15T22:34:34Z,2022-02-15T22:34:34Z,CONTRIBUTOR,Is this expected to work with JSON Lines format?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1040866002/reactions,0,0,0,0,0,0,0,0,0,10267
1153,https://api.github.com/repos/rapidsai/cudf/issues/comments/1041894055,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1041894055,https://api.github.com/repos/rapidsai/cudf/issues/10267,1041894055,IC_kwDOBWUGps4-Ggqn,2022-02-16T17:12:40Z,2022-02-16T17:12:40Z,CONTRIBUTOR,"By definition it is not the same. https://spark.apache.org/docs/latest/sql-data-sources-json.html explains some of this, but not very well. Even the example file that they point to is not in a multi-line format.

https://github.com/apache/spark/blob/master/python/test_support/sql/people_array.json is a better example of a multi-line format. If we do want to support this, which I have my doubts is worth out time I can get more details about this.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1041894055/reactions,0,0,0,0,0,0,0,0,0,10267
1154,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072664223,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1072664223,https://api.github.com/repos/rapidsai/cudf/issues/10267,1072664223,IC_kwDOBWUGps4_746f,2022-03-18T18:06:46Z,2022-03-18T18:06:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072664223/reactions,0,0,0,0,0,0,0,0,0,10267
1155,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128149369,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1128149369,https://api.github.com/repos/rapidsai/cudf/issues/10267,1128149369,IC_kwDOBWUGps5DPjF5,2022-05-16T21:21:25Z,2022-05-16T21:21:25Z,CONTRIBUTOR,Moved this to low priority to match what we do with CSV where this is low priority.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128149369/reactions,0,0,0,0,0,0,0,0,0,10267
1156,https://api.github.com/repos/rapidsai/cudf/issues/comments/1218128950,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1218128950,https://api.github.com/repos/rapidsai/cudf/issues/10267,1218128950,IC_kwDOBWUGps5Imyw2,2022-08-17T15:00:02Z,2022-08-17T15:00:02Z,CONTRIBUTOR,"> https://github.com/apache/spark/blob/master/python/test_support/sql/people_array.json is a better example of a multi-line format. If we do want to support this, which I have my doubts is worth out time I can get more details about this.

Thanks for elaborating, @revans2! We plan to have support for `multiline` by default in the new nested parser. 


in case of `lines=true` (parsing [ndjson](http://ndjson.org/)), we plan to support line breaks within nested structs, treating those newlines as whitespace. We will only parse newlines as _delimiters_ at the _root_ level. The following will parse to three rows of two columns
```
{""a"":""col0_row0"", ""b"":""col1_row0""}
{""a"":""col0_row1"", 
""b"":""col1_row1""}
{""a"":""col0_row2"", ""b"":""col1_row2""}
```

For `lines=false` (parsing [regular JSON](http://json.org/) that expects to have _a single_ JSON value at the root of the document): Outside of quotes, newlines are generally treated as part of whitespace and will be ignored. This gives the same data as above, but the enclosing brackets are required `[...]`

```
[
{""a"":""col0_row0"", ""b"":""col1_row0""}
{""a"":""col0_row1"", 
""b"":""col1_row1""}
{""a"":""col0_row2"", ""b"":""col1_row2""}
]
```

What is still unclear to me in case of Spark is whether `multiline` would also influence whether Spark should expect [ndjson](http://ndjson.org/) or [regular JSON](http://json.org/).

I've seen the following Spark example (but am not sure about the options that were used while parsing):
```
[{""a"": 1}, {""b"": 2}, {""c"": 3}]

+----+----+----+
|   a|   b|   c|
+----+----+----+
|   1|null|null|
|null|   2|null|
|null|null|   3|
+----+----+----+
```

This would also correspond to the new nested parser for `lines=false` (i.e., [regular JSON](http://json.org/)). 

What would Spark output for:
```
[{""a"": 1}, {""b"": 2}, {""c"": 3}]
[{""a"": 21}, {""b"": 22}, {""c"": 23}]
```
",,elstehle,3958403,MDQ6VXNlcjM5NTg0MDM=,https://avatars.githubusercontent.com/u/3958403?v=4,,https://api.github.com/users/elstehle,https://github.com/elstehle,https://api.github.com/users/elstehle/followers,https://api.github.com/users/elstehle/following{/other_user},https://api.github.com/users/elstehle/gists{/gist_id},https://api.github.com/users/elstehle/starred{/owner}{/repo},https://api.github.com/users/elstehle/subscriptions,https://api.github.com/users/elstehle/orgs,https://api.github.com/users/elstehle/repos,https://api.github.com/users/elstehle/events{/privacy},https://api.github.com/users/elstehle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1218128950/reactions,0,0,0,0,0,0,0,0,0,10267
1157,https://api.github.com/repos/rapidsai/cudf/issues/comments/1218241535,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1218241535,https://api.github.com/repos/rapidsai/cudf/issues/10267,1218241535,IC_kwDOBWUGps5InOP_,2022-08-17T16:25:34Z,2022-08-17T16:25:34Z,CONTRIBUTOR,"A lot of this depends on the schema passed into Spark. Along with the schema that spark picks if you don't provide one.

For 
```
{""a"":""col0_row0"", ""b"":""col1_row0""}
{""a"":""col0_row1"", 
""b"":""col1_row1""}
{""a"":""col0_row2"", ""b"":""col1_row2""}
```

If multi-line is not enabled any line on it's own that is not a valid JSON statement results in an error.  If Spark is asked to generate the schema it is going to use, and it sees an error like this it will insert in a new column. The name of the column is configurable, but by default it is ""_corrupt_record"" so the schema it picks here is.

```
root                                                                            
 |-- _corrupt_record: string (nullable = true)
 |-- a: string (nullable = true)
 |-- b: string (nullable = true)
```

and the data is 
```
+------------------+---------+---------+
|   _corrupt_record|        a|        b|
+------------------+---------+---------+
|              null|col0_row0|col1_row0|
|{""a"":""col0_row1"", |     null|     null|
|  ""b"":""col1_row1""}|     null|     null|
|              null|col0_row2|col1_row2|
+------------------+---------+---------+
```

If we see a schema with this _corrupt_record in it we fall back to the CPU for now.  But if someone gives us a schema like `a STRING, b STRING` we end up with the same number of rows 4.

```
+---------+---------+
|        a|        b|
+---------+---------+
|col0_row0|col1_row0|
|     null|     null|
|     null|     null|
|col0_row2|col1_row2|
+---------+---------+
```

If we enable multiline here, only the first full JSON item from the file is parsed, and it does not see any errors.

```
root
 |-- a: string (nullable = true)
 |-- b: string (nullable = true)

+---------+---------+
|        a|        b|
+---------+---------+
|col0_row0|col1_row0|
+---------+---------+
```


If we switch over to 
```
[
{""a"":""col0_row0"", ""b"":""col1_row0""},
{""a"":""col0_row1"", 
""b"":""col1_row1""},
{""a"":""col0_row2"", ""b"":""col1_row2""},
]
```
It behaves similarly, in that it sees `]` and `[` as corrupt records too.  Note that I added commas after each JSON entry or else it would not be a valid JSON file. Spark sees this and throws an exception when doing schema discovery.

```
+------------------+---------+---------+                                        
|   _corrupt_record|        a|        b|
+------------------+---------+---------+
|                 [|     null|     null|
|              null|col0_row0|col1_row0|
|{""a"":""col0_row1"", |     null|     null|
| ""b"":""col1_row1""},|     null|     null|
|              null|col0_row2|col1_row2|
|                 ]|     null|     null|
+------------------+---------+---------+
```

If we enable multi-line, then we get back what you expect.
```
+---------+---------+
|        a|        b|
+---------+---------+
|col0_row0|col1_row0|
|col0_row1|col1_row1|
|col0_row2|col1_row2|
+---------+---------+
```

For the data set
```
[{""a"": 1}, {""b"": 2}, {""c"": 3}]
[{""a"": 21}, {""b"": 22}, {""c"": 23}]
```

If multiline is disabled I get back

```
+----+----+----+
|   a|   b|   c|
+----+----+----+
|   1|null|null|
|null|   2|null|
|null|null|   3|
|  21|null|null|
|null|  22|null|
|null|null|  23|
+----+----+----+
```

But if it is enabled it will only parse the first line of data.

```
+----+----+----+
|   a|   b|   c|
+----+----+----+
|   1|null|null|
|null|   2|null|
|null|null|   3|
+----+----+----+
```

Spark is looking at the top level item for each entry. If the top level is an array, then it will treat each item in the array as a separate row.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1218241535/reactions,1,1,0,0,0,0,0,0,0,10267
1158,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219198573,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1219198573,https://api.github.com/repos/rapidsai/cudf/issues/10267,1219198573,IC_kwDOBWUGps5Iq35t,2022-08-18T08:40:04Z,2022-08-18T08:42:41Z,CONTRIBUTOR,"Thanks so much for putting together these examples, @revans2!

I'm inferring from these examples that `multiline=true` means parsing [regular JSON](http://json.org/) and `multiline=false` means parsing [ndjson](http://ndjson.org/). 

While the data parsed for `multiline=true` seems reasonable to me, I cannot really make sense of all `multiline=false` examples.

> For 
> ```
> {""a"":""col0_row0"", ""b"":""col1_row0""}
> {""a"":""col0_row1"", 
> ""b"":""col1_row1""}
> {""a"":""col0_row2"", ""b"":""col1_row2""}
> ```
> 
> If multi-line is not enabled any line on it's own that is not a valid JSON statement results in an error.
> 
> ```
> root                                                                            
>  |-- _corrupt_record: string (nullable = true)
>  |-- a: string (nullable = true)
>  |-- b: string (nullable = true)
> ```
> 
> and the data is 
> ```
> +------------------+---------+---------+
> |   _corrupt_record|        a|        b|
> +------------------+---------+---------+
> |              null|col0_row0|col1_row0|
> |{""a"":""col0_row1"", |     null|     null|
> |  ""b"":""col1_row1""}|     null|     null|
> |              null|col0_row2|col1_row2|
> +------------------+---------+---------+
> ```

So far, seems reasonable. You try to parse one value per row. If you fail you put it into the `corrupt` column.

> If we see a schema with this _corrupt_record in it we fall back to the CPU for now.  But if someone gives us a schema like `a STRING, b STRING` we end up with the same number of rows 4.
> 
> ```
> +---------+---------+
> |        a|        b|
> +---------+---------+
> |col0_row0|col1_row0|
> |     null|     null|
> |     null|     null|
> |col0_row2|col1_row2|
> +---------+---------+
> ```

Still reasonable. Would infer that, if parsing of a line runs into error at _some point_, that row will become null(?).

> If we enable multiline here, only the first full JSON item from the file is parsed, and it does not see any errors.
> 
> ```
> root
>  |-- a: string (nullable = true)
>  |-- b: string (nullable = true)
> 
> +---------+---------+
> |        a|        b|
> +---------+---------+
> |col0_row0|col1_row0|
> +---------+---------+
> ```

Data seems fine. Debatable whether you would want to emit a warning that the overall format isn't valid anymore, since you've encountered more than a single top-level item, instead of just silently ignoring all items that follow.


> If we switch over to 
> ```
> [
> {""a"":""col0_row0"", ""b"":""col1_row0""},
> {""a"":""col0_row1"", 
> ""b"":""col1_row1""},
> {""a"":""col0_row2"", ""b"":""col1_row2""},
> ]
> ```
> It behaves similarly, in that it sees `]` and `[` as corrupt records too.  Note that I added commas after each JSON entry or else it would not be a valid JSON file. Spark sees this and throws an exception when doing schema discovery.
> 
> ```
> +------------------+---------+---------+                                        
> |   _corrupt_record|        a|        b|
> +------------------+---------+---------+
> |                 [|     null|     null|
> |              null|col0_row0|col1_row0|
> |{""a"":""col0_row1"", |     null|     null|
> | ""b"":""col1_row1""},|     null|     null|
> |              null|col0_row2|col1_row2|
> |                 ]|     null|     null|
> +------------------+---------+---------+
> ```

Makes sense. We'll run into an error parsing lines `[0, 2, 3, 5]`. We put those lines as string values into the `_corrupt_record`. _But_ would the commas really be needed for `multiline=false`?

> If we enable multi-line, then we get back what you expect.
> ```
> +---------+---------+
> |        a|        b|
> +---------+---------+
> |col0_row0|col1_row0|
> |col0_row1|col1_row1|
> |col0_row2|col1_row2|
> +---------+---------+
> ```

Makes sense. Regular JSON, single top-level `LIST` item. 

> For the data set
> ```
> [{""a"": 1}, {""b"": 2}, {""c"": 3}]
> [{""a"": 21}, {""b"": 22}, {""c"": 23}]
> ```
> 
> If multiline is disabled I get back
> 
> ```
> +----+----+----+
> |   a|   b|   c|
> +----+----+----+
> |   1|null|null|
> |null|   2|null|
> |null|null|   3|
> |  21|null|null|
> |null|  22|null|
> |null|null|  23|
> +----+----+----+
> ```

This is where things get funky for me. I would expect that each JSON line becomes a row. Hence, single column where each row is a `list`. The `list` being a `list-of-{a:int,b:int,c:int}`. This may, however, also relate to the question of how Spark would distribute deeper nesting amongst columns and rows in a table. 

> But if it is enabled it will only parse the first line of data.
> 
> ```
> +----+----+----+
> |   a|   b|   c|
> +----+----+----+
> |   1|null|null|
> |null|   2|null|
> |null|null|   3|
> +----+----+----+
> ```

This makes sense. Becoming a fan of `multiline=true` 🙂. It parses a regular JSON, it only respects the very first value it finds in the JSON input which is `[{""a"": 1}, {""b"": 2}, {""c"": 3}]`. Each object becomes a row. Each field becomes a column.",,elstehle,3958403,MDQ6VXNlcjM5NTg0MDM=,https://avatars.githubusercontent.com/u/3958403?v=4,,https://api.github.com/users/elstehle,https://github.com/elstehle,https://api.github.com/users/elstehle/followers,https://api.github.com/users/elstehle/following{/other_user},https://api.github.com/users/elstehle/gists{/gist_id},https://api.github.com/users/elstehle/starred{/owner}{/repo},https://api.github.com/users/elstehle/subscriptions,https://api.github.com/users/elstehle/orgs,https://api.github.com/users/elstehle/repos,https://api.github.com/users/elstehle/events{/privacy},https://api.github.com/users/elstehle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219198573/reactions,0,0,0,0,0,0,0,0,0,10267
1159,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219575119,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1219575119,https://api.github.com/repos/rapidsai/cudf/issues/10267,1219575119,IC_kwDOBWUGps5IsT1P,2022-08-18T14:36:09Z,2022-08-18T14:39:35Z,CONTRIBUTOR,"> Data seems fine. Debatable whether you would want to emit a warning that the overall format isn't valid anymore, since you've encountered more than a single top-level item, instead of just silently ignoring all items that follow.

I agree. It would be good for spark to output a warning. I would prefer for Spark to output a warning for any garbage data it finds at the end a record after parsing valid JSON, but it does not do that.  That is why the comma at the end of the lines did not make a difference. In Spark all data after the first valid JSON item per record is ignored. Not put into corrupt anything. It is just ignored.  In multi-line the record is the entire file. In ndjson (multiline=false), then each line is a separate record.  At least that is how I think about it.

>  This is where things get funky for me. I would expect that each JSON line becomes a row. Hence, single column where each row is a list. The list being a list-of-{a:int,b:int,c:int}. This may, however, also relate to the question of how Spark would distribute deeper nesting amongst columns and rows in a table.

Spark parses the multi-line and the ndjson records almost identically. The big difference is in how the records are split up. Spark decided that a top level array means a list of records so it does that in all cases.  If I have a ndjson file like.

```
[""a"", ""b"", ""c""]
[""x"", ""y"", ""z""]
```

Spark will not be able to get any data out of it. It sees them as corrupt lines. If I give it a schema to try and force Spark to parse something out of it, it sees them as invalid.  What is more it does not seem them as separate records, which is odd to me.

```
spark.read.schema(""a Array<STRING>"").json(""./test.json"").show()
+----+
|   a|
+----+
|null|
|null|
+----+
```
",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219575119/reactions,1,1,0,0,0,0,0,0,0,10267
1160,https://api.github.com/repos/rapidsai/cudf/issues/comments/1228482283,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1228482283,https://api.github.com/repos/rapidsai/cudf/issues/10267,1228482283,IC_kwDOBWUGps5JOSbr,2022-08-26T13:22:05Z,2022-08-26T13:22:05Z,CONTRIBUTOR,"Thanks for the additional details!

My current understanding of Spark's parsing behaviour is this:

1. A JSON object (`{...}`) maps to a record. 
2. In order to parse a record, Spark parses the document until it encounters the first JSON object (`{...}`), it simply ignores other structures (i.e., enclosing lists) along the path to the first JSON object that will be mapped to the record. After that JSON object, it tries to continue parsing the next record.
3. If `multiline` is enabled, it parses just the first item in the JSON. Within that first item, it probably follows the logic from (2).

That's how I could make sense of these examples:

> ```
> [{""a"": 1}, {""b"": 2}, {""c"": 3}]
> [{""a"": 21}, {""b"": 22}, {""c"": 23}]
> ```
> ```
> multiline disabled
> +----+----+----+
> |   a|   b|   c|
> +----+----+----+
> |   1|null|null|
> |null|   2|null|
> |null|null|   3|
> |  21|null|null|
> |null|  22|null|
> |null|null|  23|
> +----+----+----+
> ```
> multiline enabled
> ```
> +----+----+----+
> |   a|   b|   c|
> +----+----+----+
> |   1|null|null|
> |null|   2|null|
> |null|null|   3|
> +----+----+----+
> ```

If that's right, then the question would be, how wild this can be. E.g.:
```
[{""a"":1.1},
[{""b"":2.2}]]
```",,elstehle,3958403,MDQ6VXNlcjM5NTg0MDM=,https://avatars.githubusercontent.com/u/3958403?v=4,,https://api.github.com/users/elstehle,https://github.com/elstehle,https://api.github.com/users/elstehle/followers,https://api.github.com/users/elstehle/following{/other_user},https://api.github.com/users/elstehle/gists{/gist_id},https://api.github.com/users/elstehle/starred{/owner}{/repo},https://api.github.com/users/elstehle/subscriptions,https://api.github.com/users/elstehle/orgs,https://api.github.com/users/elstehle/repos,https://api.github.com/users/elstehle/events{/privacy},https://api.github.com/users/elstehle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1228482283/reactions,0,0,0,0,0,0,0,0,0,10267
1161,https://api.github.com/repos/rapidsai/cudf/issues/comments/1228943458,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1228943458,https://api.github.com/repos/rapidsai/cudf/issues/10267,1228943458,IC_kwDOBWUGps5JQDBi,2022-08-26T21:01:07Z,2022-08-26T21:01:07Z,CONTRIBUTOR,"If I enable multiline, then it sees the entire thing as corrupt. I think this is because the second item in the top level list is another list, not an object. If multiline is disabled then just the first line is corrupt and the second line can be parsed.

```
+---------------+----+
|_corrupt_record|   b|
+---------------+----+
|    [{""a"":1.1},|null|
|           null| 2.2|
+---------------+----+
```

I am not sure that we have to make it match perfectly all of the time in all error cases. It really would be nice if we could do that, but I am much more concerned about making it work in the positive use cases.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1228943458/reactions,0,0,0,0,0,0,0,0,0,10267
1162,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229129190,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1229129190,https://api.github.com/repos/rapidsai/cudf/issues/10267,1229129190,IC_kwDOBWUGps5JQwXm,2022-08-27T05:44:06Z,2022-08-27T05:44:06Z,CONTRIBUTOR,"> If I enable multiline, then it sees the entire thing as corrupt. I think this is because the second item in the top level list is another list, not an object. If multiline is disabled then just the first line is corrupt and the second line can be parsed.
> 
> ```
> +---------------+----+
> |_corrupt_record|   b|
> +---------------+----+
> |    [{""a"":1.1},|null|
> |           null| 2.2|
> +---------------+----+
> ```
> 
> I am not sure that we have to make it match perfectly all of the time in all error cases. It really would be nice if we could do that, but I am much more concerned about making it work in the positive use cases.

Thanks, Bobby! Agreed. Let's focus on getting the correct cases right, for now. 

After this example, I'm giving up on trying to develop an idea about the underlying logic for not-well-formatted inputs. After all, in case of `multiline=False`, the two lines begin identical, the first row fails the second one succeeds. 🤷 ",,elstehle,3958403,MDQ6VXNlcjM5NTg0MDM=,https://avatars.githubusercontent.com/u/3958403?v=4,,https://api.github.com/users/elstehle,https://github.com/elstehle,https://api.github.com/users/elstehle/followers,https://api.github.com/users/elstehle/following{/other_user},https://api.github.com/users/elstehle/gists{/gist_id},https://api.github.com/users/elstehle/starred{/owner}{/repo},https://api.github.com/users/elstehle/subscriptions,https://api.github.com/users/elstehle/orgs,https://api.github.com/users/elstehle/repos,https://api.github.com/users/elstehle/events{/privacy},https://api.github.com/users/elstehle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229129190/reactions,0,0,0,0,0,0,0,0,0,10267
1163,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229472057,https://github.com/rapidsai/cudf/issues/10267#issuecomment-1229472057,https://api.github.com/repos/rapidsai/cudf/issues/10267,1229472057,IC_kwDOBWUGps5JSEE5,2022-08-28T14:29:04Z,2022-08-28T14:30:09Z,CONTRIBUTOR,"Btw., I suppose that https://github.com/rapidsai/cudf/pull/11574 will make big leaps towards meeting this feature request in the `experimental` parser. 

Specifically, 
- `lines=True` will correspond to `multiline=False`.
- `lines=False` will correspond to `multiline=True`.

What _may_ remain to be addressed are the corner cases raised by the fuzzy behaviour we are seeing from Spark's JSON parser. Mostly related to invalid JSON.

1. In particular for `multiline=True`, silently ignoring JSON items other than the first JSON item encountered in the input (which I'm not a fan of). Our current behaviour in the `experimental` parser is to fail after the first JSON item instead of ignoring any subsequent input:
> Spark ignores any text content after the end of the JSON record so we would need to be able to support that

2. The fuzzy logic(🤷) that will parse records when they are not at the root of the line: 
> ```
> [{""a"": 1}, {""b"": 2}, {""c"": 3}]
> [{""a"": 21}, {""b"": 22}, {""c"": 23}]
> ```
> ```
> multiline disabled
> +----+----+----+
> |   a|   b|   c|
> +----+----+----+
> |   1|null|null|
> |null|   2|null|
> |null|null|   3|
> |  21|null|null|
> |null|  22|null|
> |null|null|  23|
> +----+----+----+
> ```

Can you comment on how relevant these corner cases are for you?",,elstehle,3958403,MDQ6VXNlcjM5NTg0MDM=,https://avatars.githubusercontent.com/u/3958403?v=4,,https://api.github.com/users/elstehle,https://github.com/elstehle,https://api.github.com/users/elstehle/followers,https://api.github.com/users/elstehle/following{/other_user},https://api.github.com/users/elstehle/gists{/gist_id},https://api.github.com/users/elstehle/starred{/owner}{/repo},https://api.github.com/users/elstehle/subscriptions,https://api.github.com/users/elstehle/orgs,https://api.github.com/users/elstehle/repos,https://api.github.com/users/elstehle/events{/privacy},https://api.github.com/users/elstehle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229472057/reactions,0,0,0,0,0,0,0,0,0,10267
1164,https://api.github.com/repos/rapidsai/cudf/issues/comments/1036640728,https://github.com/rapidsai/cudf/issues/10271#issuecomment-1036640728,https://api.github.com/repos/rapidsai/cudf/issues/10271,1036640728,IC_kwDOBWUGps49yeHY,2022-02-11T21:30:09Z,2022-02-11T22:26:21Z,MEMBER,"I think this could possibly be done with the workaround you suggest and adding a bit of index ""magic"" because we know that all columns being exploded must have, for any given row, each list must have the same number of elements.

If you create a monotonically increasing id , you can merge with that key across your frames. Then, I think you can leverage the = elements per list requirement to do something like:

```python
original_df = ...
merged_result = ...

index_repeats = = original_df.repeat(original_df[col].list.len().replace(0, 1)) # dont drop ones with 0 elements, so set as 1
merged_result.set_index(cudf.RangeIndex(start=0, stop=len(original_df)).repeat(index_repeats))
```

EDIT: This logic might get messy with more than a few columns, as you'd need to keep track of which frames get which columns",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1036640728/reactions,0,0,0,0,0,0,0,0,0,10271
1165,https://api.github.com/repos/rapidsai/cudf/issues/comments/1066200850,https://github.com/rapidsai/cudf/issues/10271#issuecomment-1066200850,https://api.github.com/repos/rapidsai/cudf/issues/10271,1066200850,IC_kwDOBWUGps4_jO8S,2022-03-13T23:03:34Z,2022-03-13T23:03:34Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1066200850/reactions,0,0,0,0,0,0,0,0,0,10271
1166,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153025726,https://github.com/rapidsai/cudf/issues/10271#issuecomment-1153025726,https://api.github.com/repos/rapidsai/cudf/issues/10271,1153025726,IC_kwDOBWUGps5Euca-,2022-06-12T00:11:07Z,2022-06-12T00:11:07Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153025726/reactions,0,0,0,0,0,0,0,0,0,10271
1167,https://api.github.com/repos/rapidsai/cudf/issues/comments/1625641893,https://github.com/rapidsai/cudf/issues/10271#issuecomment-1625641893,https://api.github.com/repos/rapidsai/cudf/issues/10271,1625641893,IC_kwDOBWUGps5g5VOl,2023-07-07T16:13:14Z,2023-07-07T16:13:14Z,CONTRIBUTOR,"Just to note, I _think_ that `explode` in libcudf is order-preserving. If so, you could just do:
```python
columns = ...
current, *columns = columns
result = df.drop(set(columns) - {current}, axis=1).explode(current)
required_len = df[current].list.len()
while columns:
    current, *columns = columns
    if not (required_len == df[current].list.len()).all():
        raise ValueError(...)
    result[current] = df[current].explode()
result = result.reindex(df.keys(), axis=1)
```
",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1625641893/reactions,0,0,0,0,0,0,0,0,0,10271
1168,https://api.github.com/repos/rapidsai/cudf/issues/comments/1071024962,https://github.com/rapidsai/cudf/issues/10293#issuecomment-1071024962,https://api.github.com/repos/rapidsai/cudf/issues/10293,1071024962,IC_kwDOBWUGps4_1otC,2022-03-17T16:07:52Z,2022-03-17T16:07:52Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1071024962/reactions,0,0,0,0,0,0,0,0,0,10293
1169,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156721936,https://github.com/rapidsai/cudf/issues/10293#issuecomment-1156721936,https://api.github.com/repos/rapidsai/cudf/issues/10293,1156721936,IC_kwDOBWUGps5E8i0Q,2022-06-15T17:04:56Z,2022-06-15T17:04:56Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156721936/reactions,0,0,0,0,0,0,0,0,0,10293
1170,https://api.github.com/repos/rapidsai/cudf/issues/comments/1071024914,https://github.com/rapidsai/cudf/issues/10294#issuecomment-1071024914,https://api.github.com/repos/rapidsai/cudf/issues/10294,1071024914,IC_kwDOBWUGps4_1osS,2022-03-17T16:07:50Z,2022-03-17T16:07:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1071024914/reactions,0,0,0,0,0,0,0,0,0,10294
1171,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156721908,https://github.com/rapidsai/cudf/issues/10294#issuecomment-1156721908,https://api.github.com/repos/rapidsai/cudf/issues/10294,1156721908,IC_kwDOBWUGps5E8iz0,2022-06-15T17:04:54Z,2022-06-15T17:04:54Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156721908/reactions,0,0,0,0,0,0,0,0,0,10294
1172,https://api.github.com/repos/rapidsai/cudf/issues/comments/1042551128,https://github.com/rapidsai/cudf/issues/10303#issuecomment-1042551128,https://api.github.com/repos/rapidsai/cudf/issues/10303,1042551128,IC_kwDOBWUGps4-JBFY,2022-02-17T04:02:43Z,2022-02-17T04:02:57Z,CONTRIBUTOR,This was accidentally closed because my comment here: https://github.com/rapidsai/cudf/pull/9889#pullrequestreview-885124236,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1042551128/reactions,1,0,0,1,0,0,0,0,0,10303
1173,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072933762,https://github.com/rapidsai/cudf/issues/10303#issuecomment-1072933762,https://api.github.com/repos/rapidsai/cudf/issues/10303,1072933762,IC_kwDOBWUGps4_86uC,2022-03-19T04:03:03Z,2022-03-19T04:03:03Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072933762/reactions,0,0,0,0,0,0,0,0,0,10303
1174,https://api.github.com/repos/rapidsai/cudf/issues/comments/1158470382,https://github.com/rapidsai/cudf/issues/10303#issuecomment-1158470382,https://api.github.com/repos/rapidsai/cudf/issues/10303,1158470382,IC_kwDOBWUGps5FDNru,2022-06-17T04:10:56Z,2022-06-17T04:10:56Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1158470382/reactions,0,0,0,0,0,0,0,0,0,10303
1175,https://api.github.com/repos/rapidsai/cudf/issues/comments/1073302695,https://github.com/rapidsai/cudf/issues/10330#issuecomment-1073302695,https://api.github.com/repos/rapidsai/cudf/issues/10330,1073302695,IC_kwDOBWUGps4_-Uyn,2022-03-20T18:03:48Z,2022-03-20T18:03:48Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1073302695/reactions,0,0,0,0,0,0,0,0,0,10330
1176,https://api.github.com/repos/rapidsai/cudf/issues/comments/1159526142,https://github.com/rapidsai/cudf/issues/10330#issuecomment-1159526142,https://api.github.com/repos/rapidsai/cudf/issues/10330,1159526142,IC_kwDOBWUGps5FHPb-,2022-06-18T18:03:57Z,2022-06-18T18:03:57Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1159526142/reactions,0,0,0,0,0,0,0,0,0,10330
1177,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054286916,https://github.com/rapidsai/cudf/issues/10365#issuecomment-1054286916,https://api.github.com/repos/rapidsai/cudf/issues/10365,1054286916,IC_kwDOBWUGps4-1yRE,2022-02-28T14:02:12Z,2022-02-28T14:02:12Z,CONTRIBUTOR,"This is definitely a bug. While it can be argued that `nan` should not be treated as a ""null"" value (since we have dedicated null values), the behaviour of `.groupby.fillna(method=""ffill"")` should be consistent with `.fillna(method=""ffill"")` (which fills `nan`):

```python
In [64]: s
Out[64]:
0    0.0
1    1.0
2    2.0
3    NaN
dtype: float64

In [65]: s.fillna(method=""ffill"")
Out[65]:
0    0.0
1    1.0
2    2.0
3    2.0
dtype: float64
```

So we should either never fill nans, or always fill nans.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054286916/reactions,0,0,0,0,0,0,0,0,0,10365
1178,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054594488,https://github.com/rapidsai/cudf/issues/10365#issuecomment-1054594488,https://api.github.com/repos/rapidsai/cudf/issues/10365,1054594488,IC_kwDOBWUGps4-29W4,2022-02-28T19:35:31Z,2022-02-28T19:35:31Z,CONTRIBUTOR,"A few more data points, aside from `fillna`:
`dropna`, `isna`, `notna` all treats `nan` as missing value:

```python
In [3]: df = cudf.DataFrame({""a"": [1, float(""nan""), 2, None]}, nan_as_null=False)

In [4]: df
Out[4]: 
      a
0   1.0
1   NaN
2   2.0
3  <NA>

In [5]: df.dropna()
Out[5]: 
     a
0  1.0
2  2.0

In [6]: df.isna()
Out[6]: 
       a
0  False
1   True
2  False
3   True

In [7]: df.notna()
Out[7]: 
       a
0   True
1  False
2   True
3  False
```

I think for `groupby.fillna` to match, we should add a `nans_to_nulls` cast before passing the value column to libcudf?",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054594488/reactions,0,0,0,0,0,0,0,0,0,10365
1179,https://api.github.com/repos/rapidsai/cudf/issues/comments/1083570564,https://github.com/rapidsai/cudf/issues/10365#issuecomment-1083570564,https://api.github.com/repos/rapidsai/cudf/issues/10365,1083570564,IC_kwDOBWUGps5AlfmE,2022-03-30T20:03:00Z,2022-03-30T20:03:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1083570564/reactions,0,0,0,0,0,0,0,0,0,10365
1180,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169176322,https://github.com/rapidsai/cudf/issues/10365#issuecomment-1169176322,https://api.github.com/repos/rapidsai/cudf/issues/10365,1169176322,IC_kwDOBWUGps5FsDcC,2022-06-28T20:03:13Z,2022-06-28T20:03:13Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169176322/reactions,0,0,0,0,0,0,0,0,0,10365
1181,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054594709,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1054594709,https://api.github.com/repos/rapidsai/cudf/issues/10368,1054594709,IC_kwDOBWUGps4-29aV,2022-02-28T19:35:52Z,2022-02-28T19:35:52Z,CONTRIBUTOR,The fix in basically all of these cases is quite simple:  just make the index a `size_t`,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054594709/reactions,0,0,0,0,0,0,0,0,0,10368
1182,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054607557,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1054607557,https://api.github.com/repos/rapidsai/cudf/issues/10368,1054607557,IC_kwDOBWUGps4-3AjF,2022-02-28T19:53:46Z,2022-02-28T19:53:46Z,CONTRIBUTOR,"I'd love to just add an algorithm to do this.

https://godbolt.org/z/hK95z7zff",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1054607557/reactions,0,0,0,0,0,0,0,0,0,10368
1183,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067579904,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1067579904,https://api.github.com/repos/rapidsai/cudf/issues/10368,1067579904,IC_kwDOBWUGps4_ofoA,2022-03-15T05:29:29Z,2022-03-15T05:29:29Z,MEMBER,Or even a simple range helper for `for` loops: https://github.com/harrism/hemi#simple-grid-stride-loops,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067579904/reactions,0,0,0,0,0,0,0,0,0,10368
1184,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067581305,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1067581305,https://api.github.com/repos/rapidsai/cudf/issues/10368,1067581305,IC_kwDOBWUGps4_of95,2022-03-15T05:32:31Z,2022-03-15T05:32:31Z,MEMBER,"> The fix in basically all of these cases is quite simple: just make the index a `size_t`

I think the general approach should be:
1. Use an algorithm (thrust:: or std::) if possible before ever writing a custom kernel -- this way you write a per-element device functor instead, and indexing is handled for you.
2. If a custom kernel must be written, it should use device-side algorithms instead of raw loops.
3. If a raw grid-stride loop is required and an existing algorithm won't work, we should provide utilities to abstract the iteration and or the range and use auto for the type to avoid these mistakes.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067581305/reactions,0,0,0,0,0,0,0,0,0,10368
1185,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100500304,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1100500304,https://api.github.com/repos/rapidsai/cudf/issues/10368,1100500304,IC_kwDOBWUGps5BmE1Q,2022-04-16T01:30:43Z,2022-04-16T01:30:43Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100500304/reactions,0,0,0,0,0,0,0,0,0,10368
1186,https://api.github.com/repos/rapidsai/cudf/issues/comments/1102795707,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1102795707,https://api.github.com/repos/rapidsai/cudf/issues/10368,1102795707,IC_kwDOBWUGps5Bu1O7,2022-04-19T15:31:47Z,2022-04-19T15:31:47Z,CONTRIBUTOR,Still relevant.,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1102795707/reactions,0,0,0,0,0,0,0,0,0,10368
1187,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110344503,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1110344503,https://api.github.com/repos/rapidsai/cudf/issues/10368,1110344503,IC_kwDOBWUGps5CLoM3,2022-04-26T23:29:16Z,2022-04-26T23:29:16Z,MEMBER,Created https://github.com/harrism/ranger as a solution to this. Needs to be moved into libcudf.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110344503/reactions,0,0,0,0,0,0,0,0,0,10368
1188,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139164723,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1139164723,https://api.github.com/repos/rapidsai/cudf/issues/10368,1139164723,IC_kwDOBWUGps5D5kYz,2022-05-27T00:11:00Z,2022-05-27T00:11:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139164723/reactions,0,0,0,0,0,0,0,0,0,10368
1189,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139685886,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1139685886,https://api.github.com/repos/rapidsai/cudf/issues/10368,1139685886,IC_kwDOBWUGps5D7jn-,2022-05-27T14:43:14Z,2022-05-27T14:43:14Z,CONTRIBUTOR,Still relevant.,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139685886/reactions,0,0,0,0,0,0,0,0,0,10368
1190,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166558314,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1166558314,https://api.github.com/repos/rapidsai/cudf/issues/10368,1166558314,IC_kwDOBWUGps5FiERq,2022-06-26T15:03:10Z,2022-06-26T15:03:10Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166558314/reactions,0,0,0,0,0,0,0,0,0,10368
1191,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167495751,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1167495751,https://api.github.com/repos/rapidsai/cudf/issues/10368,1167495751,IC_kwDOBWUGps5FlpJH,2022-06-27T15:25:51Z,2022-06-27T15:25:51Z,CONTRIBUTOR,Still relevant.,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167495751/reactions,0,0,0,0,0,0,0,0,0,10368
1192,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501249,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1257501249,https://api.github.com/repos/rapidsai/cudf/issues/10368,1257501249,IC_kwDOBWUGps5K8_JB,2022-09-26T05:30:51Z,2022-09-26T05:30:51Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501249/reactions,0,0,0,0,0,0,0,0,0,10368
1193,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329948789,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1329948789,https://api.github.com/repos/rapidsai/cudf/issues/10368,1329948789,IC_kwDOBWUGps5PRWh1,2022-11-29T01:12:59Z,2022-11-29T01:12:59Z,CONTRIBUTOR,"Thanks @harrism for creating the [ranger](https://github.com/harrism/ranger) repo! Do you think we are ready to kick off an integration with libcudf, or does ranger need more development first?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329948789/reactions,0,0,0,0,0,0,0,0,0,10368
1194,https://api.github.com/repos/rapidsai/cudf/issues/comments/1578239484,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1578239484,https://api.github.com/repos/rapidsai/cudf/issues/10368,1578239484,IC_kwDOBWUGps5eEgX8,2023-06-06T08:59:43Z,2023-06-06T08:59:43Z,MEMBER,@GregoryKimball I have now created a PR to use ranger in libcuspatial. You guys could use this as an example if you want to do the same in libcudf. https://github.com/rapidsai/cuspatial/pull/1178,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1578239484/reactions,0,0,0,0,0,0,0,0,0,10368
1195,https://api.github.com/repos/rapidsai/cudf/issues/comments/1673580440,https://github.com/rapidsai/cudf/issues/10368#issuecomment-1673580440,https://api.github.com/repos/rapidsai/cudf/issues/10368,1673580440,IC_kwDOBWUGps5jwM-Y,2023-08-10T16:56:32Z,2023-08-10T16:56:32Z,CONTRIBUTOR,"wrt attempting to find locations where this might be happening. In _host_ code, clang and gcc will warn if you add `-Wsign-conversion` (not covered by `-Wall -Wextra`) [under some circumstances](https://gcc.godbolt.org/z/hEb35jTMf). Unfortunately there is no such option for nvcc.

```c++
#include <cstdint>
int what(int upper)
{
  int i = 0; // no warning if this is a std::int64_t
  unsigned int stride = 10;
  while (i < upper) {
    i = i + stride; // clang warns for this, so does gcc
  }
  i = 0;
  while (i < upper) {
    i += stride; // gcc warns for this, clang does not.
  }
  return i;
}
```

",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1673580440/reactions,1,1,0,0,0,0,0,0,0,10368
1196,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090501986,https://github.com/rapidsai/cudf/issues/10394#issuecomment-1090501986,https://api.github.com/repos/rapidsai/cudf/issues/10394,1090501986,IC_kwDOBWUGps5A_71i,2022-04-06T17:07:11Z,2022-04-06T17:07:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090501986/reactions,0,0,0,0,0,0,0,0,0,10394
1197,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186005712,https://github.com/rapidsai/cudf/issues/10394#issuecomment-1186005712,https://api.github.com/repos/rapidsai/cudf/issues/10394,1186005712,IC_kwDOBWUGps5GsQLQ,2022-07-15T22:48:58Z,2022-07-15T22:48:58Z,CONTRIBUTOR,@karthikeyann how do you anticipate resolving this? The user will still request these aggregations using names like `cumsum` and `cummax`. Did you want to remove the prefix before trying to access the attribute from the relevant aggregation class?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186005712/reactions,0,0,0,0,0,0,0,0,0,10394
1198,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072010699,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1072010699,https://api.github.com/repos/rapidsai/cudf/issues/10424,1072010699,IC_kwDOBWUGps4_5ZXL,2022-03-18T04:04:34Z,2022-03-18T04:04:34Z,CONTRIBUTOR,I am going to work on this,,dominicshanshan,30051912,MDQ6VXNlcjMwMDUxOTEy,https://avatars.githubusercontent.com/u/30051912?v=4,,https://api.github.com/users/dominicshanshan,https://github.com/dominicshanshan,https://api.github.com/users/dominicshanshan/followers,https://api.github.com/users/dominicshanshan/following{/other_user},https://api.github.com/users/dominicshanshan/gists{/gist_id},https://api.github.com/users/dominicshanshan/starred{/owner}{/repo},https://api.github.com/users/dominicshanshan/subscriptions,https://api.github.com/users/dominicshanshan/orgs,https://api.github.com/users/dominicshanshan/repos,https://api.github.com/users/dominicshanshan/events{/privacy},https://api.github.com/users/dominicshanshan/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1072010699/reactions,0,0,0,0,0,0,0,0,0,10424
1199,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100804714,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1100804714,https://api.github.com/repos/rapidsai/cudf/issues/10424,1100804714,IC_kwDOBWUGps5BnPJq,2022-04-17T05:04:01Z,2022-04-17T05:04:01Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100804714/reactions,0,0,0,0,0,0,0,0,0,10424
1200,https://api.github.com/repos/rapidsai/cudf/issues/comments/1101586519,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1101586519,https://api.github.com/repos/rapidsai/cudf/issues/10424,1101586519,IC_kwDOBWUGps5BqOBX,2022-04-18T17:25:35Z,2022-04-18T17:25:35Z,CONTRIBUTOR,This is still relevant.,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1101586519/reactions,0,0,0,0,0,0,0,0,0,10424
1201,https://api.github.com/repos/rapidsai/cudf/issues/comments/1130333768,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1130333768,https://api.github.com/repos/rapidsai/cudf/issues/10424,1130333768,IC_kwDOBWUGps5DX4ZI,2022-05-18T18:03:19Z,2022-05-18T18:03:19Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1130333768/reactions,0,0,0,0,0,0,0,0,0,10424
1202,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140294414,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1140294414,https://api.github.com/repos/rapidsai/cudf/issues/10424,1140294414,IC_kwDOBWUGps5D94MO,2022-05-28T16:39:07Z,2022-05-28T16:39:07Z,CONTRIBUTOR,still working on the code ,,dominicshanshan,30051912,MDQ6VXNlcjMwMDUxOTEy,https://avatars.githubusercontent.com/u/30051912?v=4,,https://api.github.com/users/dominicshanshan,https://github.com/dominicshanshan,https://api.github.com/users/dominicshanshan/followers,https://api.github.com/users/dominicshanshan/following{/other_user},https://api.github.com/users/dominicshanshan/gists{/gist_id},https://api.github.com/users/dominicshanshan/starred{/owner}{/repo},https://api.github.com/users/dominicshanshan/subscriptions,https://api.github.com/users/dominicshanshan/orgs,https://api.github.com/users/dominicshanshan/repos,https://api.github.com/users/dominicshanshan/events{/privacy},https://api.github.com/users/dominicshanshan/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140294414/reactions,0,0,0,0,0,0,0,0,0,10424
1203,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167624832,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1167624832,https://api.github.com/repos/rapidsai/cudf/issues/10424,1167624832,IC_kwDOBWUGps5FmIqA,2022-06-27T17:07:29Z,2022-06-27T17:07:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1167624832/reactions,0,0,0,0,0,0,0,0,0,10424
1204,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186648921,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1186648921,https://api.github.com/repos/rapidsai/cudf/issues/10424,1186648921,IC_kwDOBWUGps5GutNZ,2022-07-18T00:47:58Z,2022-07-18T00:47:58Z,CONTRIBUTOR,studying pandas code,,dominicshanshan,30051912,MDQ6VXNlcjMwMDUxOTEy,https://avatars.githubusercontent.com/u/30051912?v=4,,https://api.github.com/users/dominicshanshan,https://github.com/dominicshanshan,https://api.github.com/users/dominicshanshan/followers,https://api.github.com/users/dominicshanshan/following{/other_user},https://api.github.com/users/dominicshanshan/gists{/gist_id},https://api.github.com/users/dominicshanshan/starred{/owner}{/repo},https://api.github.com/users/dominicshanshan/subscriptions,https://api.github.com/users/dominicshanshan/orgs,https://api.github.com/users/dominicshanshan/repos,https://api.github.com/users/dominicshanshan/events{/privacy},https://api.github.com/users/dominicshanshan/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186648921/reactions,0,0,0,0,0,0,0,0,0,10424
1205,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279879046,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1279879046,https://api.github.com/repos/rapidsai/cudf/issues/10424,1279879046,IC_kwDOBWUGps5MSWeG,2022-10-16T02:59:47Z,2022-10-16T02:59:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279879046/reactions,0,0,0,0,0,0,0,0,0,10424
1206,https://api.github.com/repos/rapidsai/cudf/issues/comments/1420782531,https://github.com/rapidsai/cudf/issues/10424#issuecomment-1420782531,https://api.github.com/repos/rapidsai/cudf/issues/10424,1420782531,IC_kwDOBWUGps5Ur2vD,2023-02-07T13:32:36Z,2023-02-07T13:32:36Z,NONE,"this is still an issue in 23.02

```
>>> import cudf, pandas, numpy
>>> cudf.__version__
'23.02.00a+310.g58e0fde346'
>>> pandas.__version__
'1.5.3'
>>> df = cudf.DataFrame({'a': [1, 2, numpy.NaN, 4], 'b': [4, numpy.NaN, 2, 1]})
>>> df.corr()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/dataframe.py"", line 6506, in corr
    values = self.values
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/frame.py"", line 433, in values
    return self.to_cupy()
  File ""/opt/conda/envs/rapids/lib/python3.8/contextlib.py"", line 75, in inner
    return func(*args, **kwds)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/frame.py"", line 533, in to_cupy
    return self._to_array(
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/frame.py"", line 498, in _to_array
    matrix[:, i] = get_column_values_na(col)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/frame.py"", line 477, in get_column_values_na
    return get_column_values(col)
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/frame.py"", line 536, in <lambda>
    else (lambda col: col.values),
  File ""/opt/conda/envs/rapids/lib/python3.8/site-packages/cudf/core/column/column.py"", line 230, in values
    raise ValueError(""Column must have no nulls."")
ValueError: Column must have no nulls.
>>> df.to_pandas().corr()
     a    b
a  1.0 -1.0
b -1.0  1.0
```",,mattf,112653,MDQ6VXNlcjExMjY1Mw==,https://avatars.githubusercontent.com/u/112653?v=4,,https://api.github.com/users/mattf,https://github.com/mattf,https://api.github.com/users/mattf/followers,https://api.github.com/users/mattf/following{/other_user},https://api.github.com/users/mattf/gists{/gist_id},https://api.github.com/users/mattf/starred{/owner}{/repo},https://api.github.com/users/mattf/subscriptions,https://api.github.com/users/mattf/orgs,https://api.github.com/users/mattf/repos,https://api.github.com/users/mattf/events{/privacy},https://api.github.com/users/mattf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1420782531/reactions,0,0,0,0,0,0,0,0,0,10424
1207,https://api.github.com/repos/rapidsai/cudf/issues/comments/1075422549,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1075422549,https://api.github.com/repos/rapidsai/cudf/issues/10426,1075422549,IC_kwDOBWUGps5AGaVV,2022-03-22T17:28:41Z,2022-03-22T17:28:41Z,CONTRIBUTOR,This should've succeeded using a 32 GB device. What was the GPU memory usage just before the `to_parquet` call? There could be other items present in the device and the actual available memory could've been lower.,,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1075422549/reactions,0,0,0,0,0,0,0,0,0,10426
1208,https://api.github.com/repos/rapidsai/cudf/issues/comments/1084662265,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1084662265,https://api.github.com/repos/rapidsai/cudf/issues/10426,1084662265,IC_kwDOBWUGps5ApqH5,2022-03-31T14:27:17Z,2022-03-31T14:27:17Z,MEMBER,"I'm able to reproduce these failures on 22.06 nightlies on both V100 32GB and RTX 8000 48GB (though the latter is on WSL2 so could be related to that):

```python
import cudf
import cupy as cp

df = cudf.DataFrame(cp.random.randint(0, 1_000_000, size=(400_000_000, 2)), columns=[""src"", ""dst""], dtype=""int32"")
df.memory_usage().sum()  # 3.2 GB

df.to_csv(""test.csv"")
# MemoryError: std::bad_alloc: out_of_memory: CUDA error at: /workspace/.conda-bld/work/include/rmm/mr/device/cuda_memory_resource.hpp:70: cudaErrorMemoryAllocation out of memory

df.to_parquet(""test.parquet"")
# RuntimeError: CUDA error at: /datasets/charlesb/miniconda3/envs/cudf-test/include/rmm/cuda_stream_view.hpp:81: cudaErrorIllegalAddress an illegal memory access was encountered
```

Memory usage doesn't seem very high on the GPU when the failure occurs:

<details><summary>Click here to see environment details</summary><pre>

     ***OS Information***
     DGX_NAME=""DGX Server""
     DGX_PRETTY_NAME=""NVIDIA DGX Server""
     DGX_SWBUILD_DATE=""2020-03-04""
     DGX_SWBUILD_VERSION=""4.4.0""
     DGX_COMMIT_ID=""ee09ebc""
     DGX_PLATFORM=""DGX Server for DGX-1""
     DGX_SERIAL_NUMBER=""QTFCOU8220028""
     DISTRIB_ID=Ubuntu
     DISTRIB_RELEASE=18.04
     DISTRIB_CODENAME=bionic
     DISTRIB_DESCRIPTION=""Ubuntu 18.04.4 LTS""
     NAME=""Ubuntu""
     VERSION=""18.04.4 LTS (Bionic Beaver)""
     ID=ubuntu
     ID_LIKE=debian
     PRETTY_NAME=""Ubuntu 18.04.4 LTS""
     VERSION_ID=""18.04""
     HOME_URL=""https://www.ubuntu.com/""
     SUPPORT_URL=""https://help.ubuntu.com/""
     BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
     PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
     VERSION_CODENAME=bionic
     UBUNTU_CODENAME=bionic
     Linux dgx12 4.15.0-1083-oracle #91-Ubuntu SMP Mon Oct 25 06:45:22 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

     ***GPU Information***
     Thu Mar 31 07:25:54 2022
     +-----------------------------------------------------------------------------+
     | NVIDIA-SMI 495.44       Driver Version: 495.44       CUDA Version: 11.5     |
     |-------------------------------+----------------------+----------------------+
     | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
     | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
     |                               |                      |               MIG M. |
     |===============================+======================+======================|
     |   0  Tesla V100-SXM2...  On   | 00000000:06:00.0 Off |                    0 |
     | N/A   33C    P0    55W / 300W |    328MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   1  Tesla V100-SXM2...  On   | 00000000:07:00.0 Off |                    0 |
     | N/A   30C    P0    42W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   2  Tesla V100-SXM2...  On   | 00000000:0A:00.0 Off |                    0 |
     | N/A   28C    P0    41W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   3  Tesla V100-SXM2...  On   | 00000000:0B:00.0 Off |                    0 |
     | N/A   28C    P0    41W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   4  Tesla V100-SXM2...  On   | 00000000:85:00.0 Off |                    0 |
     | N/A   30C    P0    42W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   5  Tesla V100-SXM2...  On   | 00000000:86:00.0 Off |                    0 |
     | N/A   30C    P0    41W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   6  Tesla V100-SXM2...  On   | 00000000:89:00.0 Off |                    0 |
     | N/A   32C    P0    43W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+
     |   7  Tesla V100-SXM2...  On   | 00000000:8A:00.0 Off |                    0 |
     | N/A   28C    P0    41W / 300W |      3MiB / 32510MiB |      0%      Default |
     |                               |                      |                  N/A |
     +-------------------------------+----------------------+----------------------+

     +-----------------------------------------------------------------------------+
     | Processes:                                                                  |
     |  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
     |        ID   ID                                                   Usage      |
     |=============================================================================|
     |    0   N/A  N/A     65167      C   ....5/envs/rapids/bin/python      303MiB |
     +-----------------------------------------------------------------------------+

     ***CPU***
     Architecture:        x86_64
     CPU op-mode(s):      32-bit, 64-bit
     Byte Order:          Little Endian
     CPU(s):              80
     On-line CPU(s) list: 0-79
     Thread(s) per core:  2
     Core(s) per socket:  20
     Socket(s):           2
     NUMA node(s):        2
     Vendor ID:           GenuineIntel
     CPU family:          6
     Model:               79
     Model name:          Intel(R) Xeon(R) CPU E5-2698 v4 @ 2.20GHz
     Stepping:            1
     CPU MHz:             3337.814
     CPU max MHz:         3600.0000
     CPU min MHz:         1200.0000
     BogoMIPS:            4390.10
     Virtualization:      VT-x
     L1d cache:           32K
     L1i cache:           32K
     L2 cache:            256K
     L3 cache:            51200K
     NUMA node0 CPU(s):   0-19,40-59
     NUMA node1 CPU(s):   20-39,60-79
     Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear flush_l1d

     ***CMake***
     /usr/bin/cmake
     cmake version 3.10.2

     CMake suite maintained and supported by Kitware (kitware.com/cmake).

     ***g++***
     /usr/bin/g++
     g++ (Ubuntu 9.4.0-1ubuntu1~18.04) 9.4.0
     Copyright (C) 2019 Free Software Foundation, Inc.
     This is free software; see the source for copying conditions.  There is NO
     warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


     ***nvcc***
     /usr/local/cuda-11.5/bin/nvcc
     nvcc: NVIDIA (R) Cuda compiler driver
     Copyright (c) 2005-2021 NVIDIA Corporation
     Built on Thu_Nov_18_09:45:30_PST_2021
     Cuda compilation tools, release 11.5, V11.5.119
     Build cuda_11.5.r11.5/compiler.30672275_0

     ***Python***
     /datasets/charlesb/miniconda3/envs/cudf-test/bin/python
     Python 3.9.12

     ***Environment Variables***
     PATH                            : /datasets/charlesb/miniconda3/envs/cudf-test/bin:/datasets/charlesb/miniconda3/condabin:/home/nfs/charlesb/bin:/usr/local/cuda-11.5/bin:/usr/local/cuda/bin:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
     LD_LIBRARY_PATH                 : /usr/local/cuda-11.5/lib64
     NUMBAPRO_NVVM                   :
     NUMBAPRO_LIBDEVICE              :
     CONDA_PREFIX                    : /datasets/charlesb/miniconda3/envs/cudf-test
     PYTHON_PATH                     :

     ***conda packages***
     conda is /datasets/charlesb/miniconda3/condabin/conda
     /datasets/charlesb/miniconda3/condabin/conda
     # packages in environment at /datasets/charlesb/miniconda3/envs/cudf-test:
     #
     # Name                    Version                   Build  Channel
     _libgcc_mutex             0.1                 conda_forge    conda-forge
     _openmp_mutex             4.5                       1_gnu    conda-forge
     abseil-cpp                20211102.0           h27087fc_1    conda-forge
     arrow-cpp                 6.0.1           py39h653df1f_13_cuda    conda-forge
     arrow-cpp-proc            3.0.0                      cuda    conda-forge
     asttokens                 2.0.5              pyhd8ed1ab_0    conda-forge
     aws-c-cal                 0.5.11               h95a6274_0    conda-forge
     aws-c-common              0.6.2                h7f98852_0    conda-forge
     aws-c-event-stream        0.2.7               h3541f99_13    conda-forge
     aws-c-io                  0.10.5               hfb6a706_0    conda-forge
     aws-checksums             0.1.11               ha31a3da_7    conda-forge
     aws-sdk-cpp               1.8.186              hb4091e7_3    conda-forge
     backcall                  0.2.0              pyh9f0ad1d_0    conda-forge
     backports                 1.0                        py_2    conda-forge
     backports.functools_lru_cache 1.6.4              pyhd8ed1ab_0    conda-forge
     bzip2                     1.0.8                h7f98852_4    conda-forge
     c-ares                    1.18.1               h7f98852_0    conda-forge
     ca-certificates           2021.10.8            ha878542_0    conda-forge
     cachetools                5.0.0              pyhd8ed1ab_0    conda-forge
     cuda-python               11.6.1           py39h3fd9d12_0    nvidia
     cudatoolkit               11.5.0               h36ae40a_9    nvidia
     cudf                      22.06.00a220331 cuda_11_py39_gbc8f57843d_78    rapidsai-nightly
     cupy                      10.2.0           py39hc3c280e_0    conda-forge
     decorator                 5.1.1              pyhd8ed1ab_0    conda-forge
     dlpack                    0.5                  h9c3ff4c_0    conda-forge
     executing                 0.8.3              pyhd8ed1ab_0    conda-forge
     fastavro                  1.4.10           py39hb9d737c_0    conda-forge
     fastrlock                 0.8              py39he80948d_1    conda-forge
     fsspec                    2022.2.0           pyhd8ed1ab_0    conda-forge
     gflags                    2.2.2             he1b5a44_1004    conda-forge
     glog                      0.5.0                h48cff8f_0    conda-forge
     grpc-cpp                  1.45.0               h3d78c48_0    conda-forge
     ipython                   8.2.0            py39hf3d152e_0    conda-forge
     jedi                      0.18.1           py39hf3d152e_0    conda-forge
     keyutils                  1.6.1                h166bdaf_0    conda-forge
     krb5                      1.19.3               h3790be6_0    conda-forge
     ld_impl_linux-64          2.36.1               hea4e1c9_2    conda-forge
     libblas                   3.9.0           13_linux64_openblas    conda-forge
     libbrotlicommon           1.0.9                h7f98852_6    conda-forge
     libbrotlidec              1.0.9                h7f98852_6    conda-forge
     libbrotlienc              1.0.9                h7f98852_6    conda-forge
     libcblas                  3.9.0           13_linux64_openblas    conda-forge
     libcudf                   22.06.00a220331 cuda11_gbc8f57843d_78    rapidsai-nightly
     libcurl                   7.82.0               h7bff187_0    conda-forge
     libedit                   3.1.20191231         he28a2e2_2    conda-forge
     libev                     4.33                 h516909a_1    conda-forge
     libevent                  2.1.10               h9b69904_4    conda-forge
     libffi                    3.4.2                h7f98852_5    conda-forge
     libgcc-ng                 11.2.0              h1d223b6_14    conda-forge
     libgfortran-ng            11.2.0              h69a702a_14    conda-forge
     libgfortran5              11.2.0              h5c6108e_14    conda-forge
     libgomp                   11.2.0              h1d223b6_14    conda-forge
     liblapack                 3.9.0           13_linux64_openblas    conda-forge
     libllvm11                 11.1.0               hf817b99_3    conda-forge
     libnghttp2                1.47.0               h727a467_0    conda-forge
     libnsl                    2.0.0                h7f98852_0    conda-forge
     libopenblas               0.3.18          pthreads_h8fe5266_0    conda-forge
     libprotobuf               3.19.4               h780b84a_0    conda-forge
     librmm                    22.06.00a220331 cuda11_g41a2461_19    rapidsai-nightly
     libssh2                   1.10.0               ha56f1ee_2    conda-forge
     libstdcxx-ng              11.2.0              he4da1e4_14    conda-forge
     libthrift                 0.16.0               h519c5ea_1    conda-forge
     libutf8proc               2.7.0                h7f98852_0    conda-forge
     libuuid                   2.32.1            h7f98852_1000    conda-forge
     libzlib                   1.2.11            h166bdaf_1014    conda-forge
     llvmlite                  0.38.0           py39h1bbdace_0    conda-forge
     lz4-c                     1.9.3                h9c3ff4c_1    conda-forge
     matplotlib-inline         0.1.3              pyhd8ed1ab_0    conda-forge
     ncurses                   6.3                  h9c3ff4c_0    conda-forge
     numba                     0.55.1           py39h56b8d98_0    conda-forge
     numpy                     1.21.5           py39haac66dc_0    conda-forge
     nvtx                      0.2.3            py39h3811e60_1    conda-forge
     openssl                   1.1.1n               h166bdaf_0    conda-forge
     orc                       1.7.3                h1be678f_0    conda-forge
     packaging                 21.3               pyhd8ed1ab_0    conda-forge
     pandas                    1.3.5            py39hde0f152_0    conda-forge
     parquet-cpp               1.5.1                         2    conda-forge
     parso                     0.8.3              pyhd8ed1ab_0    conda-forge
     pexpect                   4.8.0              pyh9f0ad1d_2    conda-forge
     pickleshare               0.7.5                   py_1003    conda-forge
     pip                       22.0.4             pyhd8ed1ab_0    conda-forge
     prompt-toolkit            3.0.27             pyha770c72_0    conda-forge
     protobuf                  3.19.4           py39he80948d_0    conda-forge
     ptxcompiler               0.3.0           cuda_11_py39_geed289a_9    rapidsai-nightly
     ptyprocess                0.7.0              pyhd3deb0d_0    conda-forge
     pure_eval                 0.2.2              pyhd8ed1ab_0    conda-forge
     pyarrow                   6.0.1           py39h1ed2e5d_13_cuda    conda-forge
     pygments                  2.11.2             pyhd8ed1ab_0    conda-forge
     pyparsing                 3.0.7              pyhd8ed1ab_0    conda-forge
     python                    3.9.12          h9a8a25e_1_cpython    conda-forge
     python-dateutil           2.8.2              pyhd8ed1ab_0    conda-forge
     python_abi                3.9                      2_cp39    conda-forge
     pytz                      2022.1             pyhd8ed1ab_0    conda-forge
     re2                       2022.02.01           h9c3ff4c_0    conda-forge
     readline                  8.1                  h46c0cb4_0    conda-forge
     rmm                       22.06.00a220331 cuda11_py39_g41a2461_19    rapidsai-nightly
     s2n                       1.0.10               h9b69904_0    conda-forge
     setuptools                59.8.0           py39hf3d152e_1    conda-forge
     six                       1.16.0             pyh6c4a22f_0    conda-forge
     snappy                    1.1.8                he1b5a44_3    conda-forge
     spdlog                    1.8.5                h4bd325d_1    conda-forge
     sqlite                    3.37.1               h4ff8645_0    conda-forge
     stack_data                0.2.0              pyhd8ed1ab_0    conda-forge
     tk                        8.6.12               h27826a3_0    conda-forge
     traitlets                 5.1.1              pyhd8ed1ab_0    conda-forge
     typing_extensions         4.1.1              pyha770c72_0    conda-forge
     tzdata                    2022a                h191b570_0    conda-forge
     wcwidth                   0.2.5              pyh9f0ad1d_2    conda-forge
     wheel                     0.37.1             pyhd8ed1ab_0    conda-forge
     xz                        5.2.5                h516909a_1    conda-forge
     zlib                      1.2.11            h166bdaf_1014    conda-forge
     zstd                      1.5.2                ha95c52a_0    conda-forge

</pre></details>
",,charlesbluca,20627856,MDQ6VXNlcjIwNjI3ODU2,https://avatars.githubusercontent.com/u/20627856?v=4,,https://api.github.com/users/charlesbluca,https://github.com/charlesbluca,https://api.github.com/users/charlesbluca/followers,https://api.github.com/users/charlesbluca/following{/other_user},https://api.github.com/users/charlesbluca/gists{/gist_id},https://api.github.com/users/charlesbluca/starred{/owner}{/repo},https://api.github.com/users/charlesbluca/subscriptions,https://api.github.com/users/charlesbluca/orgs,https://api.github.com/users/charlesbluca/repos,https://api.github.com/users/charlesbluca/events{/privacy},https://api.github.com/users/charlesbluca/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1084662265/reactions,1,1,0,0,0,0,0,0,0,10426
1209,https://api.github.com/repos/rapidsai/cudf/issues/comments/1084869325,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1084869325,https://api.github.com/repos/rapidsai/cudf/issues/10426,1084869325,IC_kwDOBWUGps5AqcrN,2022-03-31T17:11:08Z,2022-03-31T17:11:08Z,NONE,"> I'm able to reproduce these failures on 22.06 nightlies on both V100 32GB and RTX 8000 48GB (though the latter is on WSL2 so could be related to that):
> 
> ```python
> import cudf
> import cupy as cp
> 
> df = cudf.DataFrame(cp.random.randint(0, 1_000_000, size=(400_000_000, 2)), columns=[""src"", ""dst""], dtype=""int32"")
> df.memory_usage().sum()  # 3.2 GB
> 
> df.to_csv(""test.csv"")
> # MemoryError: std::bad_alloc: out_of_memory: CUDA error at: /workspace/.conda-bld/work/include/rmm/mr/device/cuda_memory_resource.hpp:70: cudaErrorMemoryAllocation out of memory
> 
> df.to_parquet(""test.parquet"")
> # RuntimeError: CUDA error at: /datasets/charlesb/miniconda3/envs/cudf-test/include/rmm/cuda_stream_view.hpp:81: cudaErrorIllegalAddress an illegal memory access was encountered
> ```
> 
> Memory usage doesn't seem very high on the GPU when the failure occurs:
> 
> Click here to see environment details

Thats similar to what I observed. I have 4GB GPU memory utilization before the .to_parquet() call.",,titericz,6519754,MDQ6VXNlcjY1MTk3NTQ=,https://avatars.githubusercontent.com/u/6519754?v=4,,https://api.github.com/users/titericz,https://github.com/titericz,https://api.github.com/users/titericz/followers,https://api.github.com/users/titericz/following{/other_user},https://api.github.com/users/titericz/gists{/gist_id},https://api.github.com/users/titericz/starred{/owner}{/repo},https://api.github.com/users/titericz/subscriptions,https://api.github.com/users/titericz/orgs,https://api.github.com/users/titericz/repos,https://api.github.com/users/titericz/events{/privacy},https://api.github.com/users/titericz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1084869325/reactions,0,0,0,0,0,0,0,0,0,10426
1210,https://api.github.com/repos/rapidsai/cudf/issues/comments/1085869091,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1085869091,https://api.github.com/repos/rapidsai/cudf/issues/10426,1085869091,IC_kwDOBWUGps5AuQwj,2022-04-01T13:00:04Z,2022-04-01T13:01:18Z,CONTRIBUTOR,"I have a 12 GB titan V. Couldn't create a df of size `400_000_000, 2` so I tested with `260_000_000, 2` which was the max size that worked. Interestingly, the peak memory consumption during dataframe creation (9.69 GB) was more than the peak during parquet writing (5.82 GB)

Does csv writing always precede the parquet writing. Because that seemed to consume more temp memory and once we have a memory error, it'll stick during subsequent calls.",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1085869091/reactions,0,0,0,0,0,0,0,0,0,10426
1211,https://api.github.com/repos/rapidsai/cudf/issues/comments/1085874573,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1085874573,https://api.github.com/repos/rapidsai/cudf/issues/10426,1085874573,IC_kwDOBWUGps5AuSGN,2022-04-01T13:04:10Z,2022-04-01T13:04:10Z,MEMBER,"> Does csv writing always precede the parquet writing

Sorry if I wrote the reproducer out in a confusing way - I typically ran either one of these `to_*` commands alone when I encountered the failures, just consolidated them in one code block to cut down on duplication.

Though I did note that the `to_csv` call had a smaller limit before running into OOM issues (in comparison to `to_parquet`):

```python
import cudf
import cupy as cp

df = cudf.DataFrame(cp.random.randint(0, 1_000_000, size=(200_000_000, 2)), columns=[""src"", ""dst""], dtype=""int32"")
df.memory_usage().sum()  # 1.6 GB

df.to_csv(""test.csv"")  # also fails
```",,charlesbluca,20627856,MDQ6VXNlcjIwNjI3ODU2,https://avatars.githubusercontent.com/u/20627856?v=4,,https://api.github.com/users/charlesbluca,https://github.com/charlesbluca,https://api.github.com/users/charlesbluca/followers,https://api.github.com/users/charlesbluca/following{/other_user},https://api.github.com/users/charlesbluca/gists{/gist_id},https://api.github.com/users/charlesbluca/starred{/owner}{/repo},https://api.github.com/users/charlesbluca/subscriptions,https://api.github.com/users/charlesbluca/orgs,https://api.github.com/users/charlesbluca/repos,https://api.github.com/users/charlesbluca/events{/privacy},https://api.github.com/users/charlesbluca/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1085874573/reactions,0,0,0,0,0,0,0,0,0,10426
1212,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114232366,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1114232366,https://api.github.com/repos/rapidsai/cudf/issues/10426,1114232366,IC_kwDOBWUGps5CadYu,2022-05-01T13:08:39Z,2022-05-01T13:08:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114232366/reactions,0,0,0,0,0,0,0,0,0,10426
1213,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501220,https://github.com/rapidsai/cudf/issues/10426#issuecomment-1257501220,https://api.github.com/repos/rapidsai/cudf/issues/10426,1257501220,IC_kwDOBWUGps5K8_Ik,2022-09-26T05:30:49Z,2022-09-26T05:30:49Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501220/reactions,0,0,0,0,0,0,0,0,0,10426
1214,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068020889,https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068020889,https://api.github.com/repos/rapidsai/cudf/issues/10430,1068020889,IC_kwDOBWUGps4_qLSZ,2022-03-15T13:59:12Z,2022-03-15T13:59:12Z,CONTRIBUTOR,"> However, cuDF Python should be converting the output to match the pandas convention, though.

Really? We want to needlessly double the memory footprint and triple the high water mark? ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068020889/reactions,0,0,0,0,0,0,0,0,0,10430
1215,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068165994,https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068165994,https://api.github.com/repos/rapidsai/cudf/issues/10430,1068165994,IC_kwDOBWUGps4_qutq,2022-03-15T16:05:33Z,2022-03-15T16:05:33Z,CONTRIBUTOR,"_Should_ is stronger than I really intended. I wanted to open this issue to document an inconsistency that I noticed and was previously unaware of, and because we've been moving towards much stricter pandas compatibility of late. For example, we are definitely moving away from reference semantics in cuDF Python in places where pandas returns copies because downside of surprising users is not worth the smaller memory footprint. In this case, though, I think the downside of the current behavior is pretty negligible and would be fine with not changing it. I just want there to be a record of the decision if that's what we choose.

CC @shwina @galipremsagar who have been involved with related decisions recently.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068165994/reactions,0,0,0,0,0,0,0,0,0,10430
1216,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068207628,https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068207628,https://api.github.com/repos/rapidsai/cudf/issues/10430,1068207628,IC_kwDOBWUGps4_q44M,2022-03-15T16:42:13Z,2022-03-15T16:42:42Z,CONTRIBUTOR,"Agree, we want to align with Pandas wherever a copy rather than a view is returned, but the memory footprint can be very significant. That's why we also want copy-on-write. This is also the direction Pandas is headed (making all APIs return copies rather than views, but also implementing copy-on-write semantics).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1068207628/reactions,0,0,0,0,0,0,0,0,0,10430
1217,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104115985,https://github.com/rapidsai/cudf/issues/10430#issuecomment-1104115985,https://api.github.com/repos/rapidsai/cudf/issues/10430,1104115985,IC_kwDOBWUGps5Bz3kR,2022-04-20T16:08:34Z,2022-04-20T16:08:34Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104115985/reactions,0,0,0,0,0,0,0,0,0,10430
1218,https://api.github.com/repos/rapidsai/cudf/issues/comments/1189345693,https://github.com/rapidsai/cudf/issues/10430#issuecomment-1189345693,https://api.github.com/repos/rapidsai/cudf/issues/10430,1189345693,IC_kwDOBWUGps5G4_md,2022-07-19T17:10:08Z,2022-07-19T17:10:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1189345693/reactions,0,0,0,0,0,0,0,0,0,10430
1219,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067560695,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1067560695,https://api.github.com/repos/rapidsai/cudf/issues/10432,1067560695,IC_kwDOBWUGps4_oa73,2022-03-15T04:48:17Z,2022-03-15T04:48:17Z,CONTRIBUTOR,"> Support for ""compound"" reductions is needed.

I'd suggest moving segmented (and regular) reductions to use a scheme like in groupby/rolling where every aggregation has a preprocessing/finalization steps: https://github.com/rapidsai/cudf/blob/b1ea304ec7d421c871061fdfab7f2e097fbd4a0f/cpp/include/cudf/detail/aggregation/aggregation.hpp#L161-L166",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1067560695/reactions,2,2,0,0,0,0,0,0,0,10432
1220,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104453496,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1104453496,https://api.github.com/repos/rapidsai/cudf/issues/10432,1104453496,IC_kwDOBWUGps5B1J94,2022-04-20T21:03:06Z,2022-04-20T21:03:06Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104453496/reactions,0,0,0,0,0,0,0,0,0,10432
1221,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104513755,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1104513755,https://api.github.com/repos/rapidsai/cudf/issues/10432,1104513755,IC_kwDOBWUGps5B1Yrb,2022-04-20T22:18:29Z,2022-04-20T22:18:29Z,CONTRIBUTOR,Still in development.,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1104513755/reactions,0,0,0,0,0,0,0,0,0,10432
1222,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133477011,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1133477011,https://api.github.com/repos/rapidsai/cudf/issues/10432,1133477011,IC_kwDOBWUGps5Dj3yT,2022-05-21T00:10:15Z,2022-05-21T00:10:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1133477011/reactions,0,0,0,0,0,0,0,0,0,10432
1223,https://api.github.com/repos/rapidsai/cudf/issues/comments/1220098971,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1220098971,https://api.github.com/repos/rapidsai/cudf/issues/10432,1220098971,IC_kwDOBWUGps5IuTub,2022-08-19T00:13:24Z,2022-08-19T00:13:24Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1220098971/reactions,0,0,0,0,0,0,0,0,0,10432
1224,https://api.github.com/repos/rapidsai/cudf/issues/comments/1414028543,https://github.com/rapidsai/cudf/issues/10432#issuecomment-1414028543,https://api.github.com/repos/rapidsai/cudf/issues/10432,1414028543,IC_kwDOBWUGps5USFz_,2023-02-02T16:33:32Z,2023-02-02T16:33:32Z,CONTRIBUTOR,"After merging #12573, we can update this to use segmented reductions detail APIs like `cudf::reduction::detail::segmented_reduce`: https://github.com/rapidsai/cudf/blob/3fa081a08cb3e90d0478d0b9b22ea741539c89f4/cpp/include/cudf/detail/null_mask.cuh#L299",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1414028543/reactions,0,0,0,0,0,0,0,0,0,10432
1225,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100906821,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1100906821,https://api.github.com/repos/rapidsai/cudf/issues/10453,1100906821,IC_kwDOBWUGps5BnoFF,2022-04-17T16:02:57Z,2022-04-17T16:02:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100906821/reactions,0,0,0,0,0,0,0,0,0,10453
1226,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168217297,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1168217297,https://api.github.com/repos/rapidsai/cudf/issues/10453,1168217297,IC_kwDOBWUGps5FoZTR,2022-06-28T04:48:28Z,2022-06-28T04:48:28Z,CONTRIBUTOR,This reminds me of the [string column factory discussion](https://github.com/rapidsai/cudf/issues/5150#issuecomment-626671698) in #5150. @nvdbaranec would you please post a snippet showing what you have in mind?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168217297/reactions,0,0,0,0,0,0,0,0,0,10453
1227,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199199306,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199199306,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199199306,IC_kwDOBWUGps5HelRK,2022-07-29T12:05:09Z,2022-07-29T12:05:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199199306/reactions,0,0,0,0,0,0,0,0,0,10453
1228,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199471234,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199471234,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199471234,IC_kwDOBWUGps5HfnqC,2022-07-29T15:00:29Z,2022-07-29T15:00:29Z,CONTRIBUTOR,"> This reminds me of the [string column factory discussion](https://github.com/rapidsai/cudf/issues/5150#issuecomment-626671698) in #5150. @nvdbaranec would you please post a snippet showing what you have in mind?

Late reply.   Snippet would pretty much be exactly like David's example in your link, 

```
template <typename Iterator>
rmm::device_uvector<T> make_device_uvector_async(
  Iterator values_begin, Iterator values_end,
  rmm::cuda_stream_view stream        = cudf::default_stream_value,
  rmm::mr::device_memory_resource* mr = rmm::mr::get_current_device_resource())
```",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199471234/reactions,0,0,0,0,0,0,0,0,0,10453
1229,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199640768,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199640768,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199640768,IC_kwDOBWUGps5HgRDA,2022-07-29T16:11:33Z,2022-07-29T16:11:33Z,CONTRIBUTOR,"Would you be able to find any examples you mention in the description?
Are you saying device data is being copied into a `std::vector` to build a `device_uvector`?",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199640768/reactions,0,0,0,0,0,0,0,0,0,10453
1230,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199694184,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199694184,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199694184,IC_kwDOBWUGps5HgeFo,2022-07-29T16:34:03Z,2022-07-29T16:34:20Z,CONTRIBUTOR,"No, just that we have a lot of cases where the input is expressed as an iterator that the user has to manually put in a `std::vector` before calling the `host_span` overload.  If you could just pass the iterators and let the function do the staging it would cut down on some clutter.

I believe the specific example was this, but it's pretty common in the code.

https://github.com/rapidsai/cudf/blob/03f1c1c5c5fcf90bd594aabd41b6e15f54690777/java/src/main/native/src/row_conversion.cu#L1842",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199694184/reactions,0,0,0,0,0,0,0,0,0,10453
1231,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199696454,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199696454,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199696454,IC_kwDOBWUGps5HgepG,2022-07-29T16:34:59Z,2022-07-29T16:36:07Z,CONTRIBUTOR,"Although I guess I did specify (device) in the description.  Those would be useful as well, though maybe only applicable in limited circumstances.",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199696454/reactions,0,0,0,0,0,0,0,0,0,10453
1232,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199709072,https://github.com/rapidsai/cudf/issues/10453#issuecomment-1199709072,https://api.github.com/repos/rapidsai/cudf/issues/10453,1199709072,IC_kwDOBWUGps5HghuQ,2022-07-29T16:40:24Z,2022-07-29T16:40:24Z,CONTRIBUTOR,"Sorry, this does not make sense to me. The iterator is for host data then?
There is no shortcut here. 
The data would need to be copied to a host vector (i.e. `std::vector`) before creating a `device_uvector`.
The iterator version does not help solve this fact.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1199709072/reactions,0,0,0,0,0,0,0,0,0,10453
1233,https://api.github.com/repos/rapidsai/cudf/issues/comments/1076736508,https://github.com/rapidsai/cudf/issues/10500#issuecomment-1076736508,https://api.github.com/repos/rapidsai/cudf/issues/10500,1076736508,IC_kwDOBWUGps5ALbH8,2022-03-23T19:26:23Z,2022-03-23T19:26:23Z,CONTRIBUTOR,CC @shwina @galipremsagar ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1076736508/reactions,0,0,0,0,0,0,0,0,0,10500
1234,https://api.github.com/repos/rapidsai/cudf/issues/comments/1106819203,https://github.com/rapidsai/cudf/issues/10500#issuecomment-1106819203,https://api.github.com/repos/rapidsai/cudf/issues/10500,1106819203,IC_kwDOBWUGps5B-LiD,2022-04-22T20:03:02Z,2022-04-22T20:03:02Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1106819203/reactions,0,0,0,0,0,0,0,0,0,10500
1235,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108658198,https://github.com/rapidsai/cudf/issues/10500#issuecomment-1108658198,https://api.github.com/repos/rapidsai/cudf/issues/10500,1108658198,IC_kwDOBWUGps5CFMgW,2022-04-25T14:34:09Z,2022-04-25T14:34:09Z,CONTRIBUTOR,"The alternative resolution to this issue would be if we changed the ColumnAccessor to use a list of columns and a list of names instead of maintaining a dictionary of name:column mappings. If we made that change, then both DataFrame and MultiIndex could support duplicate names with only a little bit of additional logic to ensure that accessor methods behave in the expected way when duplicate names exist. However, any such changes to the ColumnAccessor will be motivated by more pressing concerns than supporting duplicate names (overall package performance, stability, and robustness), so we shouldn't rush to any solutions just to solve the duplicate names problem.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108658198/reactions,0,0,0,0,0,0,0,0,0,10500
1236,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137418787,https://github.com/rapidsai/cudf/issues/10500#issuecomment-1137418787,https://api.github.com/repos/rapidsai/cudf/issues/10500,1137418787,IC_kwDOBWUGps5Dy6Ij,2022-05-25T15:12:43Z,2022-05-25T15:12:43Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137418787/reactions,0,0,0,0,0,0,0,0,0,10500
1237,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224279918,https://github.com/rapidsai/cudf/issues/10500#issuecomment-1224279918,https://api.github.com/repos/rapidsai/cudf/issues/10500,1224279918,IC_kwDOBWUGps5I-Qdu,2022-08-23T16:03:18Z,2022-08-23T16:03:18Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224279918/reactions,0,0,0,0,0,0,0,0,0,10500
1238,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117681452,https://github.com/rapidsai/cudf/issues/10500#issuecomment-2117681452,https://api.github.com/repos/rapidsai/cudf/issues/10500,2117681452,IC_kwDOBWUGps5-OUEs,2024-05-17T14:02:52Z,2024-05-17T14:02:52Z,CONTRIBUTOR,"@mroeschke do you know if there are any plans to change the duplicate names support in pandas? There are a lot of ways in which it's kind of broken to allow this since basic operations stop working if there are duplicate names, so this seems like an API improvement that we could suggest in pandas itself (excepting the MultiIndex all None case; we may still need to support that since a MultiIndex without names is probably the most common case).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117681452/reactions,0,0,0,0,0,0,0,0,0,10500
1239,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117945218,https://github.com/rapidsai/cudf/issues/10500#issuecomment-2117945218,https://api.github.com/repos/rapidsai/cudf/issues/10500,2117945218,IC_kwDOBWUGps5-PUeC,2024-05-17T16:19:58Z,2024-05-17T16:19:58Z,CONTRIBUTOR,"We could propose disallowing duplicate names, but I doubt there would be much appetite to disallow them. 

I don't recall seeing many bug reports over the years because a MultiIndex had duplicate names as the names are essentially metadata (carried around as a immutable `list`) and not used in any meaningful way in MultiIndex operations.",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117945218/reactions,0,0,0,0,0,0,0,0,0,10500
1240,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121359590,https://github.com/rapidsai/cudf/issues/10500#issuecomment-2121359590,https://api.github.com/repos/rapidsai/cudf/issues/10500,2121359590,IC_kwDOBWUGps5-cWDm,2024-05-20T23:03:17Z,2024-05-20T23:03:17Z,CONTRIBUTOR,"Sorry, I should clarify. I wasn't only thinking about MultiIndex objects, but also DataFrame objects. For example, pandas lets you do this:
```
In [1]: import pandas as pd       
                                                   
In [2]: df = pd.DataFrame({""a"": [1, 2, 3], ""b"": [4, 5, 6], ""c"": [7, 8, 9]})
                                                   
In [3]: df.columns = [""a"", ""a"", ""b""]
                                                                                                                                                                                                            In [4]: df     
Out[4]:                     
   a  a  b                 
0  1  4  7                                         
1  2  5  8          
2  3  6  9   
```

That certainly has impacts on various downstream operations and leads to odd-looking failures, e.g.
```
In [5]: df.groupby(""a"").sum()
...
ValueError: Grouper for 'a' not 1-dimensional
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121359590/reactions,0,0,0,0,0,0,0,0,0,10500
1241,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121458078,https://github.com/rapidsai/cudf/issues/10500#issuecomment-2121458078,https://api.github.com/repos/rapidsai/cudf/issues/10500,2121458078,IC_kwDOBWUGps5-cuGe,2024-05-21T00:01:40Z,2024-05-21T00:01:40Z,CONTRIBUTOR,"Ah I see. I think this would be tough sell too since a lot of APIs were developed overtime to handle duplicate columns (I suspect the main motivation was to ""gracefully"" support IO usecases (CSVs) with duplicate headers).

There has been an ask to make column labels unique by default https://github.com/pandas-dev/pandas/issues/53217, but also a larger discussion at one point to make handling duplicate columns consistent https://github.com/pandas-dev/pandas/issues/47718 so I think there's greater appetite at the behavior consistency of duplicate labels rather than disallowing them",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121458078/reactions,0,0,0,0,0,0,0,0,0,10500
1242,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121469636,https://github.com/rapidsai/cudf/issues/10500#issuecomment-2121469636,https://api.github.com/repos/rapidsai/cudf/issues/10500,2121469636,IC_kwDOBWUGps5-cw7E,2024-05-21T00:15:11Z,2024-05-21T00:15:11Z,CONTRIBUTOR,"OK got it. That is very helpful context, thanks! If that is the case and there is real interest in this in pandas, then we may have to rethink cudf's plans around duplicate names and issues like #13273 ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121469636/reactions,0,0,0,0,0,0,0,0,0,10500
1243,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081258467,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081258467,https://api.github.com/repos/rapidsai/cudf/issues/10528,1081258467,IC_kwDOBWUGps5AcrHj,2022-03-28T23:46:31Z,2022-03-28T23:46:31Z,CONTRIBUTOR,"CC @galipremsagar who was interested in this data.

@devavret it looks like you made this very easy with the `memory_stats_logger`? @harrism would you still be in favor of this?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081258467/reactions,0,0,0,0,0,0,0,0,0,10528
1244,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081319658,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081319658,https://api.github.com/repos/rapidsai/cudf/issues/10528,1081319658,IC_kwDOBWUGps5Ac6Dq,2022-03-29T01:58:00Z,2022-03-29T01:58:00Z,MEMBER,"> @harrism would you still be in favor of this?

I don't have a reason not to support this. However it may not benefit the utility of all benchmarks. Does it impact CI benchmark throughput?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081319658/reactions,0,0,0,0,0,0,0,0,0,10528
1245,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081353264,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081353264,https://api.github.com/repos/rapidsai/cudf/issues/10528,1081353264,IC_kwDOBWUGps5AdCQw,2022-03-29T03:08:36Z,2022-03-29T03:08:36Z,CONTRIBUTOR,"I am reluctant to add this new functionality based on Google Benchmark when we are trying to phase that out. 

I would support adding this as a feature to benchmarks ported to NVBench. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1081353264/reactions,0,0,0,0,0,0,0,0,0,10528
1246,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082114140,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082114140,https://api.github.com/repos/rapidsai/cudf/issues/10528,1082114140,IC_kwDOBWUGps5Af8Bc,2022-03-29T16:44:21Z,2022-03-29T16:44:21Z,CONTRIBUTOR,@PointKernel I notice that you're already doing this in #10248 with NVBench benchmarks. It looks like it's no more complex than incorporating the resource adapter into GBench benchmarks?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082114140/reactions,0,0,0,0,0,0,0,0,0,10528
1247,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082194204,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082194204,https://api.github.com/repos/rapidsai/cudf/issues/10528,1082194204,IC_kwDOBWUGps5AgPkc,2022-03-29T17:48:51Z,2022-03-29T17:48:51Z,MEMBER,"> It looks like it's no more complex than incorporating the resource adapter into GBench benchmarks?

Right. It's effortless with the help of [memory_stats_logger](https://github.com/rapidsai/cudf/blob/branch-22.06/cpp/benchmarks/fixture/benchmark_fixture.hpp#L103-L122). Only two lines to be added:
```cpp
auto mem_stats_logger = cudf::memory_stats_logger(); // init stats logger
state.exec([&](nvbench::launch& launch) {
  target_kernel();
});
state.add_element_count(mem_stats_logger.peak_memory_usage(), ""Peak Memory""); // report peak memory usage to nvbench

```
",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082194204/reactions,0,0,0,0,0,0,0,0,0,10528
1248,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082198213,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082198213,https://api.github.com/repos/rapidsai/cudf/issues/10528,1082198213,IC_kwDOBWUGps5AgQjF,2022-03-29T17:53:08Z,2022-03-29T17:53:08Z,CONTRIBUTOR,"So then maybe making this change is independent of whether a benchmark has been switch from GBench to NVBench? It seems like we could add this now, then when a project switches from GBench to NVBench the only required change are to switch `stat.add_element_count(` for `state.counters[""peak_memory_usage""]`. ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082198213/reactions,2,2,0,0,0,0,0,0,0,10528
1249,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082228307,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082228307,https://api.github.com/repos/rapidsai/cudf/issues/10528,1082228307,IC_kwDOBWUGps5AgX5T,2022-03-29T18:23:17Z,2022-03-29T18:23:17Z,CONTRIBUTOR,"> So then maybe making this change is independent of whether a benchmark has been switch from GBench to NVBench?

There's also the parsing and reporting side that will be different.

I don't want to keep building things on top of GBench when I'm actively trying to get people to switch to NVbench. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1082228307/reactions,0,0,0,0,0,0,0,0,0,10528
1250,https://api.github.com/repos/rapidsai/cudf/issues/comments/1112557907,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1112557907,https://api.github.com/repos/rapidsai/cudf/issues/10528,1112557907,IC_kwDOBWUGps5CUElT,2022-04-28T19:03:31Z,2022-04-28T19:03:31Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1112557907/reactions,0,0,0,0,0,0,0,0,0,10528
1251,https://api.github.com/repos/rapidsai/cudf/issues/comments/1197307602,https://github.com/rapidsai/cudf/issues/10528#issuecomment-1197307602,https://api.github.com/repos/rapidsai/cudf/issues/10528,1197307602,IC_kwDOBWUGps5HXXbS,2022-07-27T20:03:11Z,2022-07-27T20:03:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1197307602/reactions,0,0,0,0,0,0,0,0,0,10528
1252,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117734673,https://github.com/rapidsai/cudf/issues/10528#issuecomment-2117734673,https://api.github.com/repos/rapidsai/cudf/issues/10528,2117734673,IC_kwDOBWUGps5-OhER,2024-05-17T14:27:46Z,2024-05-17T14:27:46Z,CONTRIBUTOR,"@GregoryKimball do you think this is worth doing systematically for all benchmarks, or something we can add on a case by case basis as the need arises? If the latter, I would vote that we close this issue and just add this when we are benchmarking specific functionality.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117734673/reactions,0,0,0,0,0,0,0,0,0,10528
1253,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114002963,https://github.com/rapidsai/cudf/issues/10554#issuecomment-1114002963,https://api.github.com/repos/rapidsai/cudf/issues/10554,1114002963,IC_kwDOBWUGps5CZlYT,2022-04-30T15:03:01Z,2022-04-30T15:03:01Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114002963/reactions,0,0,0,0,0,0,0,0,0,10554
1254,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501178,https://github.com/rapidsai/cudf/issues/10554#issuecomment-1257501178,https://api.github.com/repos/rapidsai/cudf/issues/10554,1257501178,IC_kwDOBWUGps5K8_H6,2022-09-26T05:30:45Z,2022-09-26T05:30:45Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501178/reactions,0,0,0,0,0,0,0,0,0,10554
1255,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665956421,https://github.com/rapidsai/cudf/issues/10554#issuecomment-1665956421,https://api.github.com/repos/rapidsai/cudf/issues/10554,1665956421,IC_kwDOBWUGps5jTHpF,2023-08-04T17:30:12Z,2023-08-04T17:30:12Z,CONTRIBUTOR,"I landed back on this issue while looking for UVM discussions in cuDF. How could we get an OOM error if UVM (Unified Virtual Memory) is enabled and working properly? 

I've never seen an OOM with UVM, just full system hangs when host memory is exhausted.

Perhaps the original issue came out of UVM not working properly rather than a cuDF issues. @charlesbluca would you please share any updates since your original filing?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665956421/reactions,1,0,0,0,0,0,0,0,1,10554
1256,https://api.github.com/repos/rapidsai/cudf/issues/comments/1668478981,https://github.com/rapidsai/cudf/issues/10554#issuecomment-1668478981,https://api.github.com/repos/rapidsai/cudf/issues/10554,1668478981,IC_kwDOBWUGps5jcvgF,2023-08-07T19:46:29Z,2023-08-07T19:46:41Z,MEMBER,"Sorry for the delay, went ahead and retried the script with updated nightlies and this still seems to be an issue:

<details><summary>Conda environment:</summary><pre>

```
○ → conda list
List of packages in environment: ""/home/charlesb/micromamba/envs/cudf-23.10""

  Name                           Version       Build                               Channel         
─────────────────────────────────────────────────────────────────────────────────────────────────────
  _libgcc_mutex                  0.1           conda_forge                         conda-forge     
  _openmp_mutex                  4.5           2_gnu                               conda-forge     
  asttokens                      2.2.1         pyhd8ed1ab_0                        conda-forge     
  aws-c-auth                     0.7.0         hf8751d9_2                          conda-forge     
  aws-c-cal                      0.6.0         h93469e0_0                          conda-forge     
  aws-c-common                   0.8.23        hd590300_0                          conda-forge     
  aws-c-compression              0.2.17        h862ab75_1                          conda-forge     
  aws-c-event-stream             0.3.1         h9599702_1                          conda-forge     
  aws-c-http                     0.7.11        hbe98c3e_0                          conda-forge     
  aws-c-io                       0.13.28       h3870b5a_0                          conda-forge     
  aws-c-mqtt                     0.8.14        h2e270ba_2                          conda-forge     
  aws-c-s3                       0.3.13        heb0bb06_2                          conda-forge     
  aws-c-sdkutils                 0.1.11        h862ab75_1                          conda-forge     
  aws-checksums                  0.1.16        h862ab75_1                          conda-forge     
  aws-crt-cpp                    0.20.3        he9c0e7f_4                          conda-forge     
  aws-sdk-cpp                    1.10.57       hbc2ea52_17                         conda-forge     
  backcall                       0.2.0         pyh9f0ad1d_0                        conda-forge     
  backports                      1.0           pyhd8ed1ab_3                        conda-forge     
  backports.functools_lru_cache  1.6.5         pyhd8ed1ab_0                        conda-forge     
  bzip2                          1.0.8         h7f98852_4                          conda-forge     
  c-ares                         1.19.1        hd590300_0                          conda-forge     
  ca-certificates                2023.7.22     hbcca054_0                          conda-forge     
  cachetools                     5.3.1         pyhd8ed1ab_0                        conda-forge     
  cubinlinker                    0.3.0         py310hfdf336d_0                     rapidsai-nightly
  cuda-python                    11.8.2        py310h01a121a_0                     conda-forge     
  cuda-version                   11.8          h70ddcb2_2                          conda-forge     
  cudatoolkit                    11.8.0        h4ba93d1_12                         conda-forge     
  cudf                           23.10.00a     cuda11_py310_230807_ge92de8113d_60  rapidsai-nightly
  cupy                           12.1.0        py310h53f8385_1                     conda-forge     
  decorator                      5.1.1         pyhd8ed1ab_0                        conda-forge     
  dlpack                         0.5           h9c3ff4c_0                          conda-forge     
  executing                      1.2.0         pyhd8ed1ab_0                        conda-forge     
  fastrlock                      0.8           py310hd8f1fbe_3                     conda-forge     
  fmt                            9.1.0         h924138e_0                          conda-forge     
  fsspec                         2023.6.0      pyh1a96a4e_0                        conda-forge     
  gflags                         2.2.2         he1b5a44_1004                       conda-forge     
  glog                           0.6.0         h6f12383_0                          conda-forge     
  gmock                          1.14.0        ha770c72_0                          conda-forge     
  gtest                          1.14.0        h00ab1b0_0                          conda-forge     
  ipython                        8.14.0        pyh41d4057_0                        conda-forge     
  jedi                           0.19.0        pyhd8ed1ab_0                        conda-forge     
  keyutils                       1.6.1         h166bdaf_0                          conda-forge     
  krb5                           1.21.1        h659d440_0                          conda-forge     
  ld_impl_linux-64               2.40          h41732ed_0                          conda-forge     
  libabseil                      20230125.3    cxx17_h59595ed_0                    conda-forge     
  libarrow                       12.0.1        h657c46f_7_cpu                      conda-forge     
  libblas                        3.9.0         17_linux64_openblas                 conda-forge     
  libbrotlicommon                1.0.9         h166bdaf_9                          conda-forge     
  libbrotlidec                   1.0.9         h166bdaf_9                          conda-forge     
  libbrotlienc                   1.0.9         h166bdaf_9                          conda-forge     
  libcblas                       3.9.0         17_linux64_openblas                 conda-forge     
  libcrc32c                      1.1.2         h9c3ff4c_0                          conda-forge     
  libcudf                        23.10.00a     cuda11_230807_ge92de8113d_60        rapidsai-nightly
  libcufile                      1.4.0.31      0                                   nvidia          
  libcufile-dev                  1.4.0.31      0                                   nvidia          
  libcurl                        8.2.1         hca28451_0                          conda-forge     
  libedit                        3.1.20191231  he28a2e2_2                          conda-forge     
  libev                          4.33          h516909a_1                          conda-forge     
  libevent                       2.1.12        hf998b51_1                          conda-forge     
  libffi                         3.4.2         h7f98852_5                          conda-forge     
  libgcc-ng                      13.1.0        he5830b7_0                          conda-forge     
  libgfortran-ng                 13.1.0        h69a702a_0                          conda-forge     
  libgfortran5                   13.1.0        h15d22d2_0                          conda-forge     
  libgomp                        13.1.0        he5830b7_0                          conda-forge     
  libgoogle-cloud                2.12.0        h840a212_1                          conda-forge     
  libgrpc                        1.56.2        h3905398_0                          conda-forge     
  libkvikio                      23.10.00a     cuda11_230807_g0247ca6_6            rapidsai-nightly
  liblapack                      3.9.0         17_linux64_openblas                 conda-forge     
  libllvm14                      14.0.6        hcd5def8_4                          conda-forge     
  libnghttp2                     1.52.0        h61bc06f_0                          conda-forge     
  libnsl                         2.0.0         h7f98852_0                          conda-forge     
  libnuma                        2.0.16        h0b41bf4_1                          conda-forge     
  libopenblas                    0.3.23        pthreads_h80387f5_0                 conda-forge     
  libprotobuf                    4.23.3        hd1fb520_0                          conda-forge     
  librmm                         23.10.00a     cuda11_230807_gcd37245e_9           rapidsai-nightly
  libsqlite                      3.42.0        h2797004_0                          conda-forge     
  libssh2                        1.11.0        h0841786_0                          conda-forge     
  libstdcxx-ng                   13.1.0        hfd8a6a1_0                          conda-forge     
  libthrift                      0.18.1        h8fd135c_2                          conda-forge     
  libutf8proc                    2.8.0         h166bdaf_0                          conda-forge     
  libuuid                        2.38.1        h0b41bf4_0                          conda-forge     
  libzlib                        1.2.13        hd590300_5                          conda-forge     
  llvmlite                       0.40.1        py310h1b8f574_0                     conda-forge     
  lz4-c                          1.9.4         hcb278e6_0                          conda-forge     
  matplotlib-inline              0.1.6         pyhd8ed1ab_0                        conda-forge     
  ncurses                        6.4           hcb278e6_0                          conda-forge     
  numba                          0.57.1        py310h0f6aa51_0                     conda-forge     
  numpy                          1.24.4        py310ha4c1d20_0                     conda-forge     
  nvcomp                         2.6.1         h0800d71_2                          conda-forge     
  nvtx                           0.2.5         py310h1fa729e_0                     conda-forge     
  openssl                        3.1.2         hd590300_0                          conda-forge     
  orc                            1.9.0         h385abfd_1                          conda-forge     
  packaging                      23.1          pyhd8ed1ab_0                        conda-forge     
  pandas                         1.5.3         py310h9b08913_1                     conda-forge     
  parso                          0.8.3         pyhd8ed1ab_0                        conda-forge     
  pexpect                        4.8.0         pyh1a96a4e_2                        conda-forge     
  pickleshare                    0.7.5         py_1003                             conda-forge     
  pip                            23.2.1        pyhd8ed1ab_0                        conda-forge     
  prompt-toolkit                 3.0.39        pyha770c72_0                        conda-forge     
  prompt_toolkit                 3.0.39        hd8ed1ab_0                          conda-forge     
  protobuf                       4.23.3        py310hb875b13_0                     conda-forge     
  ptxcompiler                    0.8.1         py310h01a121a_0                     conda-forge     
  ptyprocess                     0.7.0         pyhd3deb0d_0                        conda-forge     
  pure_eval                      0.2.2         pyhd8ed1ab_0                        conda-forge     
  pyarrow                        12.0.1        py310h0576679_7_cpu                 conda-forge     
  pygments                       2.16.1        pyhd8ed1ab_0                        conda-forge     
  python                         3.10.12       hd12c33a_0_cpython                  conda-forge     
  python-dateutil                2.8.2         pyhd8ed1ab_0                        conda-forge     
  python_abi                     3.10          3_cp310                             conda-forge     
  pytz                           2023.3        pyhd8ed1ab_0                        conda-forge     
  rdma-core                      28.9          h59595ed_1                          conda-forge     
  re2                            2023.03.02    h8c504da_0                          conda-forge     
  readline                       8.2           h8228510_1                          conda-forge     
  rmm                            23.10.00a     cuda11_py310_230807_gcd37245e_9     rapidsai-nightly
  s2n                            1.3.46        h06160fa_0                          conda-forge     
  setuptools                     68.0.0        pyhd8ed1ab_0                        conda-forge     
  six                            1.16.0        pyh6c4a22f_0                        conda-forge     
  snappy                         1.1.10        h9fff704_0                          conda-forge     
  spdlog                         1.11.0        h9b3ece8_1                          conda-forge     
  stack_data                     0.6.2         pyhd8ed1ab_0                        conda-forge     
  tk                             8.6.12        h27826a3_0                          conda-forge     
  traitlets                      5.9.0         pyhd8ed1ab_0                        conda-forge     
  typing_extensions              4.7.1         pyha770c72_0                        conda-forge     
  tzdata                         2023c         h71feb2d_0                          conda-forge     
  ucx                            1.14.1        h4a2ce2d_2                          conda-forge     
  wcwidth                        0.2.6         pyhd8ed1ab_0                        conda-forge     
  wheel                          0.41.1        pyhd8ed1ab_0                        conda-forge     
  xz                             5.2.6         h166bdaf_0                          conda-forge     
  zstd                           1.5.2         hfc55251_7                          conda-forge  
```

</details>

> Perhaps the original issue came out of UVM not working properly rather than a cuDF issues

Any additional information I could provide here to help narrow down the cause? 🙂 ",,charlesbluca,20627856,MDQ6VXNlcjIwNjI3ODU2,https://avatars.githubusercontent.com/u/20627856?v=4,,https://api.github.com/users/charlesbluca,https://github.com/charlesbluca,https://api.github.com/users/charlesbluca/followers,https://api.github.com/users/charlesbluca/following{/other_user},https://api.github.com/users/charlesbluca/gists{/gist_id},https://api.github.com/users/charlesbluca/starred{/owner}{/repo},https://api.github.com/users/charlesbluca/subscriptions,https://api.github.com/users/charlesbluca/orgs,https://api.github.com/users/charlesbluca/repos,https://api.github.com/users/charlesbluca/events{/privacy},https://api.github.com/users/charlesbluca/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1668478981/reactions,0,0,0,0,0,0,0,0,0,10554
1257,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117730326,https://github.com/rapidsai/cudf/issues/10554#issuecomment-2117730326,https://api.github.com/repos/rapidsai/cudf/issues/10554,2117730326,IC_kwDOBWUGps5-OgAW,2024-05-17T14:25:34Z,2024-05-17T14:25:34Z,CONTRIBUTOR,Could this be some WSL + UVM bug? CC @harrism ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117730326/reactions,0,0,0,0,0,0,0,0,0,10554
1258,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123565361,https://github.com/rapidsai/cudf/issues/10554#issuecomment-2123565361,https://api.github.com/repos/rapidsai/cudf/issues/10554,2123565361,IC_kwDOBWUGps5-kwkx,2024-05-21T22:59:35Z,2024-05-21T22:59:35Z,MEMBER,"@charlesbluca I asked and it turns out that this is expected on WSL. The UVM support on windows display driver model (WDDM) is a limited form of UVM that doesn't support oversubscription (or simultaneous CPU / GPU access). Pages are not migrated on WDDM. 

That said, there is a limited form of oversubscription that is supported for regular cudaMalloc calls. Could you do me a favor and try your script with this line commented out so that it uses the default memory resource? 

```
rmm.mr.set_current_device_resource(rmm.mr.ManagedMemoryResource())
```

I kind of expect this to change or move the failure, rather than solve it, but it will be interesting to see.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123565361/reactions,0,0,0,0,0,0,0,0,0,10554
1259,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114037805,https://github.com/rapidsai/cudf/issues/10558#issuecomment-1114037805,https://api.github.com/repos/rapidsai/cudf/issues/10558,1114037805,IC_kwDOBWUGps5CZt4t,2022-04-30T19:02:56Z,2022-04-30T19:02:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1114037805/reactions,0,0,0,0,0,0,0,0,0,10558
1260,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257319573,https://github.com/rapidsai/cudf/issues/10558#issuecomment-1257319573,https://api.github.com/repos/rapidsai/cudf/issues/10558,1257319573,IC_kwDOBWUGps5K8SyV,2022-09-26T00:16:02Z,2022-09-26T00:16:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257319573/reactions,0,0,0,0,0,0,0,0,0,10558
1261,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089521646,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1089521646,https://api.github.com/repos/rapidsai/cudf/issues/10599,1089521646,IC_kwDOBWUGps5A8Mfu,2022-04-05T23:32:02Z,2022-04-05T23:32:02Z,CONTRIBUTOR,"@davidwendt @ttnghia Do you think there is a bug in [our device `stod` function](https://github.com/rapidsai/cudf/blob/5f4f232e325343c2e4e7f0c79cd034f091b9817f/cpp/src/strings/convert/convert_floats.cu#L56) in `convert_floats.cu`? I also noticed the bugfix in this function from PR #7410.

@vuule @nvdbaranec I suppose there also could be a bug in [our `parse_numeric` function](https://github.com/rapidsai/cudf/blob/5f4f232e325343c2e4e7f0c79cd034f091b9817f/cpp/src/io/utilities/parsing_utils.cuh#L171) in `parsing_utils.cuh`. 

My thinking is that we should use the device `stod` function from `cpp/src/strings` in cuIO, and also make sure the device `stod` is solid. What do you guys think?


",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089521646/reactions,0,0,0,0,0,0,0,0,0,10599
1262,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089531083,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1089531083,https://api.github.com/repos/rapidsai/cudf/issues/10599,1089531083,IC_kwDOBWUGps5A8OzL,2022-04-05T23:42:23Z,2022-04-05T23:44:56Z,CONTRIBUTOR,"That's because we have different string-to-float parsers: One is from `convert_floats.cu` and one from `parsing_utils.cuh`. Maybe they are both correct, but they work differently and produce different results. ""different"" here is just due to floating-point round-off.

Making both of them producing exactly the same result would be difficult, because they are just different. Unless we can refactor them, extracting a shared function that both of them will just call for parsing string-to-float.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089531083/reactions,0,0,0,0,0,0,0,0,0,10599
1263,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089535433,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1089535433,https://api.github.com/repos/rapidsai/cudf/issues/10599,1089535433,IC_kwDOBWUGps5A8P3J,2022-04-05T23:47:27Z,2022-04-05T23:47:27Z,CONTRIBUTOR,"Even if we hack/fix one of them to produce the same result this time, it is not guaranteed to not produce different results the next time. The only way to completely solve such inconsistency is to use one utility function called from both places.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089535433/reactions,0,0,0,0,0,0,0,0,0,10599
1264,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089549021,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1089549021,https://api.github.com/repos/rapidsai/cudf/issues/10599,1089549021,IC_kwDOBWUGps5A8TLd,2022-04-06T00:02:38Z,2022-04-06T00:02:38Z,CONTRIBUTOR,"> Even if we hack/fix one of them to produce the same result this time, it is not guaranteed to not produce different results the next time. The only way to completely solve such inconsistency is to use one utility function called from both places.

Yes, ideally we would have a single implementation. But, if we aligned them and added unit tests, would that not be sufficient to keep the consistency over time? ",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1089549021/reactions,0,0,0,0,0,0,0,0,0,10599
1265,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090307831,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1090307831,https://api.github.com/repos/rapidsai/cudf/issues/10599,1090307831,IC_kwDOBWUGps5A_Mb3,2022-04-06T14:00:08Z,2022-04-06T14:00:08Z,CONTRIBUTOR,I would prefer to have a matching device version of `std::stod` and use that everywhere. Does NVIDIA already have another implementation of this parser somewhere?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090307831/reactions,0,0,0,0,0,0,0,0,0,10599
1266,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090578653,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1090578653,https://api.github.com/repos/rapidsai/cudf/issues/10599,1090578653,IC_kwDOBWUGps5BAOjd,2022-04-06T18:10:54Z,2022-04-06T18:10:54Z,CONTRIBUTOR,"> I would prefer to have a matching device version of `std::stod` and use that everywhere. 

Agreed, though I'm not sure if a standard implementation of `std::stod` would work because it doesn't understand unicode characters. @davidwendt I assume this would be a problem? Or do these functions assume to be working on ASCI characters?

> Does NVIDIA already have another implementation of this parser somewhere?

Nope. Doing this right would mean porting the `<string>` header in libcu++, which would likely be a huge lift, but extremely worthwhile. 

",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090578653/reactions,0,0,0,0,0,0,0,0,0,10599
1267,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090870615,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1090870615,https://api.github.com/repos/rapidsai/cudf/issues/10599,1090870615,IC_kwDOBWUGps5BBV1X,2022-04-06T22:21:36Z,2022-04-06T22:21:36Z,CONTRIBUTOR,"The `std::stod` depends mostly on ASCII for the digits and scientific notation, etc. Unfortunately, the standard implementation of `std::stod` is technically locale dependent.  This is one of the many problems with porting the `<string>` device functions -- the locale classes and data have to be ported as well.

One thing to be aware of is that printing a floating point number involves converting it back to a string in base10 which is also inaccurate. So what is printed does not necessarily reflect how the bits are set in the actual float or double. That said, I will try to investigate why the bits appear to be different in the two implementations.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090870615/reactions,0,0,0,0,0,0,0,0,0,10599
1268,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090874182,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1090874182,https://api.github.com/repos/rapidsai/cudf/issues/10599,1090874182,IC_kwDOBWUGps5BBWtG,2022-04-06T22:27:46Z,2022-04-06T22:27:46Z,CONTRIBUTOR,"I think the only difference in capability is that the cuIO version supports hexadecimal values. Good news is that the number base is a template parameter, so `stod` and `parse_numeric` are equivalent in some instantiations.

FWIW, we can reorganize how the calling cuIO code is SFINAEd and use `stod` when parsing decimal floating point values.
That gives us the desired alignment, unless parsing hexfloats (it's a thing).",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090874182/reactions,0,0,0,0,0,0,0,0,0,10599
1269,https://api.github.com/repos/rapidsai/cudf/issues/comments/1095583639,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1095583639,https://api.github.com/repos/rapidsai/cudf/issues/10599,1095583639,IC_kwDOBWUGps5BTUeX,2022-04-11T21:27:41Z,2022-04-11T21:27:41Z,CONTRIBUTOR,Just realized that the cuIO version also allows for different decimal point characters and thousand separators :( We can't meaningfully switch to `stod` without changing it.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1095583639/reactions,0,0,0,0,0,0,0,0,0,10599
1270,https://api.github.com/repos/rapidsai/cudf/issues/comments/1124336334,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1124336334,https://api.github.com/repos/rapidsai/cudf/issues/10599,1124336334,IC_kwDOBWUGps5DBALO,2022-05-11T22:03:02Z,2022-05-11T22:03:02Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1124336334/reactions,0,0,0,0,0,0,0,0,0,10599
1271,https://api.github.com/repos/rapidsai/cudf/issues/comments/1160095888,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1160095888,https://api.github.com/repos/rapidsai/cudf/issues/10599,1160095888,IC_kwDOBWUGps5FJaiQ,2022-06-20T07:49:38Z,2022-06-20T07:50:22Z,CONTRIBUTOR,"Invalid floating  pointer number has different behavior in `stod` and `parse_numeric<float>`.
in `stod`, an invalid floating  pointer number, returns a valid number until it becomes invalid.  (use in string column convert to floats)
in  `parse_numeric<float>`, it returns NAN `error_result = std::numeric_limits<T>::quiet_NaN()` (used in cuio)
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1160095888/reactions,0,0,0,0,0,0,0,0,0,10599
1272,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168695000,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1168695000,https://api.github.com/repos/rapidsai/cudf/issues/10599,1168695000,IC_kwDOBWUGps5FqN7Y,2022-06-28T13:03:26Z,2022-06-28T13:03:26Z,CONTRIBUTOR,"Initially I modified `stod` to take care of invalid characters similar to `parse_numeric`. All tests passed. But io parsing is 20% slower, convert_floats is 6-10% slower
After @davidwendt suggestion, I updated `parse_numeric` as `is_float + stod` to just take care of extra decimal and thousands characters, similarly is_float(). All tests passed. But io 30% slower, convert_floats no slowdown",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168695000/reactions,0,0,0,0,0,0,0,0,0,10599
1273,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168887690,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1168887690,https://api.github.com/repos/rapidsai/cudf/issues/10599,1168887690,IC_kwDOBWUGps5Fq8-K,2022-06-28T15:41:31Z,2022-06-28T15:41:31Z,CONTRIBUTOR,"Computed difference for few testcases among
pandas.read_csv, io (parse_numeric/cudf.read_csv),  cudf_stod (cudf.to_numeric), and Cython std::stod.
```
[ i]                   pdf-stl_stod                    io-stl_stod             cudf_stod-stl_stod       string
[ 0]                            0.0                            0.0                            0.0       0.1
[ 1]                            0.0                            0.0                            0.0       0.2
[ 2]                            0.0          5.551115123125783e-17                            0.0       0.3
[ 3]         -8.326672684688674e-17                            0.0                            0.0       0.123456789012345678901234567890123456780123456780
[ 4]                         -1e-21           1.88079096131566e-37                            0.0       0.000000000000000000001
[ 5]                            0.0          2.220446049250313e-16                            0.0       1.4503599627370496999
[ 6]                            0.0                         -512.0                            0.0       4503599627370496999
```",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168887690/reactions,0,0,0,0,0,0,0,0,0,10599
1274,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169498222,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1169498222,https://api.github.com/repos/rapidsai/cudf/issues/10599,1169498222,IC_kwDOBWUGps5FtSBu,2022-06-29T03:35:41Z,2022-06-29T03:35:41Z,CONTRIBUTOR,"Thank you @karthikeyann for running these test cases. I think the floating point errors you showed above are within the expected range. 20% slower parsing for floats is a concern but not a deal-breaker. Is there no impact to parsing for non-float types? Would you please share the microbenchmark results?

Have you considered @vuule's comments [above](https://github.com/rapidsai/cudf/issues/10599#issuecomment-1095583639) about decimal and thousands separators? ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169498222/reactions,0,0,0,0,0,0,0,0,0,10599
1275,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169832162,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1169832162,https://api.github.com/repos/rapidsai/cudf/issues/10599,1169832162,IC_kwDOBWUGps5Fujji,2022-06-29T10:51:02Z,2022-06-29T10:54:53Z,CONTRIBUTOR,"> Is there no impact to parsing for non-float types? Would you please share the microbenchmark results?

Integral types are affected. The most impact is in float types.
```
./_deps/benchmark-src/tools/compare.py benchmarks OLD/CSV_READER_BENCH.json NEW/CSV_READER_BENCH.json 
Comparing OLD/CSV_READER_BENCH.json to NEW/CSV_READER_BENCH.json
Benchmark                                                          Time             CPU      Time Old      Time New       CPU Old       CPU New
-----------------------------------------------------------------------------------------------------------------------------------------------
CsvRead/integral_file_input/29/0/manual_time                    +0.1396         +0.1361           227           258           227           258
CsvRead/integral_buffer_input/29/1/manual_time                  +0.1888         +0.1862           196           233           195           232
CsvRead/floats_file_input/31/0/manual_time                      +0.2058         +0.2091           261           315           260           315
CsvRead/floats_buffer_input/31/1/manual_time                    +0.2132         +0.2089           229           277           229           277
CsvRead/decimal_file_input/35/0/manual_time                     +0.0259         +0.0245           149           153           149           153
CsvRead/decimal_buffer_input/35/1/manual_time                   +0.0347         +0.0347           118           123           118           122
CsvRead/timestamps_file_input/33/0/manual_time                  +0.1058         +0.1030           501           554           500           551
CsvRead/timestamps_buffer_input/33/1/manual_time                +0.0875         +0.0853           441           479           441           478
CsvRead/durations_file_input/34/0/manual_time                   +0.0823         +0.0777           635           687           635           684
CsvRead/durations_buffer_input/34/1/manual_time                 +0.0890         +0.0890           559           609           559           609
CsvRead/string_file_input/23/0/manual_time                      +0.0006         +0.0083           149           149           148           149
CsvRead/string_buffer_input/23/1/manual_time                    +0.0110         +0.0147           125           126           124           126
CsvRead/column_selection/0/0/1/manual_time                      +0.0872         +0.0872           288           313           288           313
CsvRead/column_selection/1/0/1/manual_time                      +0.1099         +0.1114           207           230           206           229
CsvRead/column_selection/2/0/1/manual_time                      +0.1147         +0.1146           209           233           209           233
CsvRead/column_selection/3/0/1/manual_time                      +0.1056         +0.1083           211           234           211           234
CsvRead/row_selection/0/1/1/manual_time                         +0.0894         +0.0894           287           312           287           312
CsvRead/row_selection/0/2/1/manual_time                         +0.0862         +0.0932           289           314           287           314
CsvRead/row_selection/0/3/1/manual_time                         +0.0914         +0.0868           287           313           287           312
CsvRead/row_selection/0/1/8/manual_time                         +0.1829         +0.1284           268           317           266           300
CsvRead/row_selection/0/2/8/manual_time                         +0.0735         +0.0691           621           666           620           663
CsvRead/row_selection/0/3/8/manual_time                         +0.0475         +0.0535           960          1006           952          1002
```

```
./_deps/benchmark-src/tools/compare.py benchmarks OLD/STRINGS_BENCH.json NEW/STRINGS_BENCH.json
StringsToNumeric/strings_to_float32/1024/manual_time                             +0.0613         +0.0381            26            27            45            46
StringsToNumeric/strings_to_float32/4096/manual_time                             +0.0576         +0.0370            26            27            45            46
StringsToNumeric/strings_to_float32/16384/manual_time                            +0.0464         +0.0283            28            29            46            48
StringsToNumeric/strings_to_float32/65536/manual_time                            +0.0634         +0.0442            30            32            48            51
StringsToNumeric/strings_to_float32/131072/manual_time                           +0.1007         +0.0672            34            38            53            56
StringsToNumeric/strings_to_float64/1024/manual_time                             +0.0561         +0.0326            26            27            45            46
StringsToNumeric/strings_to_float64/4096/manual_time                             +0.0464         +0.0278            27            28            46            47
StringsToNumeric/strings_to_float64/16384/manual_time                            +0.0543         +0.0335            28            29            46            48
StringsToNumeric/strings_to_float64/65536/manual_time                            +0.0564         +0.0353            30            32            49            51
StringsToNumeric/strings_to_float64/131072/manual_time                           +0.0957         +0.0610            35            38            54            57
```

> Have you considered @vuule's comments [above](https://github.com/rapidsai/cudf/issues/10599#issuecomment-1095583639) about decimal and thousands separators?

Yes. I updated `stod` to take care of user given decimal and thousands separators. All the unit tests passed before running benchmarks.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1169832162/reactions,0,0,0,0,0,0,0,0,0,10599
1276,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170234471,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1170234471,https://api.github.com/repos/rapidsai/cudf/issues/10599,1170234471,IC_kwDOBWUGps5FwFxn,2022-06-29T16:52:09Z,2022-06-29T16:52:09Z,CONTRIBUTOR,"Thanks @karthikeyann for sharing this benchmark update. Looking into the integral and timestamp columns, are you using `is_float + stod`, and do you think the `is_integer + string_to_integer_fn` in [convert_integers.cu](https://github.com/rapidsai/cudf/blob/branch-22.08/cpp/src/strings/convert/convert_integers.cu) could be better?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170234471/reactions,0,0,0,0,0,0,0,0,0,10599
1277,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170243442,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1170243442,https://api.github.com/repos/rapidsai/cudf/issues/10599,1170243442,IC_kwDOBWUGps5FwH9y,2022-06-29T17:01:23Z,2022-06-29T17:01:23Z,CONTRIBUTOR,"It seems weird that we would get a 30 ms slowdown in `CsvRead` when we are converting from `StringsToNumeric` in < 50 us per 100K elements.
![image](https://user-images.githubusercontent.com/12725111/176494134-06e7d6ff-4d72-455b-8070-a88121978944.png)
",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170243442/reactions,0,0,0,0,0,0,0,0,0,10599
1278,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170345277,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1170345277,https://api.github.com/repos/rapidsai/cudf/issues/10599,1170345277,IC_kwDOBWUGps5Fwg09,2022-06-29T18:27:18Z,2022-06-29T18:27:18Z,CONTRIBUTOR,"Semi-tangential, but the casting work I'm doing right now involves a stod() function that is much more parallel.  Instead of one-thread-per-string, it's one-warp-per-string.",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1170345277/reactions,0,0,0,0,0,0,0,0,0,10599
1279,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171951546,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1171951546,https://api.github.com/repos/rapidsai/cudf/issues/10599,1171951546,IC_kwDOBWUGps5F2o-6,2022-07-01T05:29:27Z,2022-07-01T05:29:27Z,CONTRIBUTOR,"@GregoryKimball integers are not affected by accuracy concerns. So, it does not need any change.
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171951546/reactions,0,0,0,0,0,0,0,0,0,10599
1280,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171951655,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1171951655,https://api.github.com/repos/rapidsai/cudf/issues/10599,1171951655,IC_kwDOBWUGps5F2pAn,2022-07-01T05:29:42Z,2022-07-01T05:29:42Z,CONTRIBUTOR,"> Semi-tangential, but the casting work I'm doing right now involves a stod() function that is much more parallel. Instead of one-thread-per-string, it's one-warp-per-string.

Great idea. memory coalescing on string will impact speedup.
This could be useful for convert_float (cudf.to_numeric), but not for cuio code (Could be possible with shared memory).",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171951655/reactions,0,0,0,0,0,0,0,0,0,10599
1281,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200356172,https://github.com/rapidsai/cudf/issues/10599#issuecomment-1200356172,https://api.github.com/repos/rapidsai/cudf/issues/10599,1200356172,IC_kwDOBWUGps5Hi_tM,2022-07-31T06:03:58Z,2022-07-31T06:03:58Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200356172/reactions,0,0,0,0,0,0,0,0,0,10599
1282,https://api.github.com/repos/rapidsai/cudf/issues/comments/1119154321,https://github.com/rapidsai/cudf/issues/10601#issuecomment-1119154321,https://api.github.com/repos/rapidsai/cudf/issues/10601,1119154321,IC_kwDOBWUGps5CtPCR,2022-05-06T00:10:47Z,2022-05-06T00:10:47Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1119154321/reactions,0,0,0,0,0,0,0,0,0,10601
1283,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501141,https://github.com/rapidsai/cudf/issues/10601#issuecomment-1257501141,https://api.github.com/repos/rapidsai/cudf/issues/10601,1257501141,IC_kwDOBWUGps5K8_HV,2022-09-26T05:30:42Z,2022-09-26T05:30:42Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501141/reactions,0,0,0,0,0,0,0,0,0,10601
1284,https://api.github.com/repos/rapidsai/cudf/issues/comments/1113676004,https://github.com/rapidsai/cudf/issues/10608#issuecomment-1113676004,https://api.github.com/repos/rapidsai/cudf/issues/10608,1113676004,IC_kwDOBWUGps5CYVjk,2022-04-29T20:03:21Z,2022-04-29T20:03:21Z,CONTRIBUTOR,"Do we know what workflow will it disable once we raise the error for mixed dtypes? If we don't know, can we implement this in two steps: first PR raises the error and wait for user feedbacks for a better API design?",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1113676004/reactions,0,0,0,0,0,0,0,0,0,10608
1285,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140516058,https://github.com/rapidsai/cudf/issues/10608#issuecomment-1140516058,https://api.github.com/repos/rapidsai/cudf/issues/10608,1140516058,IC_kwDOBWUGps5D-uTa,2022-05-29T20:03:26Z,2022-05-29T20:03:26Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140516058/reactions,0,0,0,0,0,0,0,0,0,10608
1286,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229266622,https://github.com/rapidsai/cudf/issues/10608#issuecomment-1229266622,https://api.github.com/repos/rapidsai/cudf/issues/10608,1229266622,IC_kwDOBWUGps5JRR6-,2022-08-27T21:02:52Z,2022-08-27T21:02:52Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229266622/reactions,0,0,0,0,0,0,0,0,0,10608
1287,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090778032,https://github.com/rapidsai/cudf/issues/10611#issuecomment-1090778032,https://api.github.com/repos/rapidsai/cudf/issues/10611,1090778032,IC_kwDOBWUGps5BA_Ow,2022-04-06T20:47:35Z,2022-04-06T20:47:35Z,CONTRIBUTOR,"Similar to how I've defined a mixin for binary operations, I plan to do the same for unary operations. At that point I also plan to apply that to columns so that we can define suitable operators there.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1090778032/reactions,2,2,0,0,0,0,0,0,0,10611
1288,https://api.github.com/repos/rapidsai/cudf/issues/comments/1120005775,https://github.com/rapidsai/cudf/issues/10611#issuecomment-1120005775,https://api.github.com/repos/rapidsai/cudf/issues/10611,1120005775,IC_kwDOBWUGps5Cwe6P,2022-05-06T21:02:58Z,2022-05-06T21:02:58Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1120005775/reactions,0,0,0,0,0,0,0,0,0,10611
1289,https://api.github.com/repos/rapidsai/cudf/issues/comments/1205815723,https://github.com/rapidsai/cudf/issues/10611#issuecomment-1205815723,https://api.github.com/repos/rapidsai/cudf/issues/10611,1205815723,IC_kwDOBWUGps5H30mr,2022-08-04T22:06:06Z,2022-08-04T22:06:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1205815723/reactions,0,0,0,0,0,0,0,0,0,10611
1290,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117728037,https://github.com/rapidsai/cudf/issues/10611#issuecomment-2117728037,https://api.github.com/repos/rapidsai/cudf/issues/10611,2117728037,IC_kwDOBWUGps5-Ofcl,2024-05-17T14:24:18Z,2024-05-17T14:24:18Z,CONTRIBUTOR,cf. #10177 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117728037/reactions,0,0,0,0,0,0,0,0,0,10611
1291,https://api.github.com/repos/rapidsai/cudf/issues/comments/1098397789,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1098397789,https://api.github.com/repos/rapidsai/cudf/issues/10652,1098397789,IC_kwDOBWUGps5BeDhd,2022-04-13T19:18:56Z,2022-04-14T14:17:37Z,CONTRIBUTOR,"I found this article to be an excellent description of the algorithm: https://towardsdatascience.com/hyperloglog-a-simple-but-powerful-algorithm-for-data-scientists-aed50fe47869

Seems fairly straightforward to implement in parallel too. Compute the hash value for each row, then compute a histogram using the upper `p` bits for `m` buckets (`m == 2^p`) and using [`__clzll`](https://docs.nvidia.com/cuda/cuda-math-api/group__CUDA__MATH__INTRINSIC__INT.html#group__CUDA__MATH__INTRINSIC__INT_1g88ff76484edc65cafbef80e71a1daa53) to get the count of consecutive 0s. 

Then a merge step to compute the average of the values in the histogram taking into account discarding outliers. ~The histogram is small enough it probably makes sense to just copy it to the CPU and do this step serially.~ I changed my mind, I think it probably makes more sense to just do the merging on a single block.",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1098397789/reactions,0,0,0,0,0,0,0,0,0,10652
1292,https://api.github.com/repos/rapidsai/cudf/issues/comments/1099259840,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1099259840,https://api.github.com/repos/rapidsai/cudf/issues/10652,1099259840,IC_kwDOBWUGps5BhV_A,2022-04-14T14:43:12Z,2022-04-14T14:43:12Z,CONTRIBUTOR,"> The histogram is small enough it probably makes sense to just copy it to the CPU and do this step serially.

That is true if we are doing a reduction. Spark supports this for groupby aggregations and technically for window operations too, but I don't think we need it there just yet. Although Spark does not support distict window functions so it might be used just because it is the only option. For a groupby we could be doing a lot of smaller distinct counts so having the ability to do that on the GPU would be good.

@andygrove could you please feel in more details of what we are going to need here?

Is this just for a reduction or is it for a group by aggregation? Do we need to include windowing support? Because we do distributed group by and reductions, with two phases to build the aggregation, what operations/aggregations do we need? What are the inputs and the outputs to each aggregation/operation? It looks like Spark supports setting a scalar `relative standard deviation` parameter that directly impacts `p`. It also looks like Spark expects to shuffle the intermediate results (a histogram) as a struct of longs, and the number of entries in that struct is `p^2/6` or something odd like that.

We need a lot more details so we can work with CUDF to hammer out exactly what this is going to look like.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1099259840/reactions,0,0,0,0,0,0,0,0,0,10652
1293,https://api.github.com/repos/rapidsai/cudf/issues/comments/1099286483,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1099286483,https://api.github.com/repos/rapidsai/cudf/issues/10652,1099286483,IC_kwDOBWUGps5BhcfT,2022-04-14T15:11:06Z,2022-04-14T15:14:39Z,CONTRIBUTOR,"One note about the implementation. From what I've read, most implementations use some small set of bits per histogram bucket (like 5 bits to store the per-bucket count). The only way I'd be comfortable with returning something like that to a user is in an opaque type. Otherwise it should just be a standard integer type per bucket (I'm guessing using a 4B int per bucket will be better for performance since this is going to require atomics to merge histograms).

> Because we do distributed group by and reductions, with two phases to build the aggregation, what operations/aggregations do we need?

I spent a little time thinking about this, but indeed we'd need more concrete requirements to say definitively what it should look like.

For the ""reduction""/column level API I envision a two phase API where the first returns an opaque-ish object holding the histogram and the second takes `n` histograms and merges them to return the approximate cardinality. Spitballing...

```
namespace cudf::hll { // namespace for hyperloglog functionality? 

// Does this need to work on tables? or just columns?
// This could return an opaque `hyperloglog_histogram` object, or it could just return a regular `column`?
compute_histogram(table_view or column_view?, size_type num_buckets, cudf::hash_function hash)

// Depending on what `compute_histogram` returns influences what the input to this function would be, but essentially is just
// a list of histograms of the same size. Should probably be some strongly typed thing that enforces requirements
size_t approx_distinct_count( table_view histograms, float outlier_threshold = 0.7, float bias_correction =  0.77351)

```

For the groupby case we can do something like with tdigest where there's a `hll_histogram` aggregation and `merge_hll_histogram` aggregation. 

> Spark expects to shuffle the intermediate results (a histogram) as a struct of longs

I definitely don't think we should do it this way. Storing the histogram in a literal `struct<int, int, int, ...., int>` column would be a bad idea to have 1 child per element in the histogram. For the single column case I imagine the histogram could just be a regular `int32` column. For the groupby case, I'd think a `LIST<int32>` column would make the most sense. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1099286483/reactions,0,0,0,0,0,0,0,0,0,10652
1294,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100122060,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1100122060,https://api.github.com/repos/rapidsai/cudf/issues/10652,1100122060,IC_kwDOBWUGps5BkofM,2022-04-15T13:50:55Z,2022-04-15T13:50:55Z,CONTRIBUTOR,"From what I saw in the code Spark is using a long as the word size, but appears to have 6 bits per histogram bucket.

https://github.com/apache/spark/blob/4835946de2ef71b176da5106e9b6c2706e182722/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/util/HyperLogLogPlusPlusHelper.scala#L271

https://github.com/apache/spark/blob/4835946de2ef71b176da5106e9b6c2706e182722/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/util/HyperLogLogPlusPlusHelper.scala#L78-L85

I think what we want is a `compute_hyperloglogplusplus_histogram` aggregation and a `merge_hyperloglogplusplus_histogram` aggregation.  I am not tied to the names and if merging histograms is generic enough we can drop the hyperloglog... part. We would want this because it would tie into all of the existing code that we already have for doing these aggregations. If it is different then we will have to create an entirely new special cased code path. For reductions this is not a big deal, but for group by aggregations it would mean we would have to do a join afterwards to line up the different groups with each other again, and I really don't want to do that. 

So that means the histogram would be computed on a single input column because that is how reductions and group by aggregations tend to work. The output would need to be a cudf::column for a group by or a cudf::scalar for a reduction just like the existing APIs. I would want the type returned to be the same for both the reduction and the group_by because it makes life simpler to have common code to handle moving it around/etc. a LIST<INT32> would be fine. I would also be fine with a LIST<INT8> because Spark uses an int6? I think? for the bucket.

But I am no expert on this. Ideally we would like to be able to match the format that Spark is using as the result between the `compute_histogram` aggregate and the `merge_histogram` aggregate because it lets us not worry about making sure that the first aggregation and the merge aggregation are both of the GPU. But looking at how complex this is I have my doubts we should even try to do that. And we have code to try to make sure that they both are on the GPU or none of them are, but it is a bit brittle.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100122060/reactions,0,0,0,0,0,0,0,0,0,10652
1295,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100176919,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1100176919,https://api.github.com/repos/rapidsai/cudf/issues/10652,1100176919,IC_kwDOBWUGps5Bk14X,2022-04-15T15:28:45Z,2022-04-15T15:28:45Z,CONTRIBUTOR,"@revans2 I don't think anything you said is controversial or incompatible with what I was thinking. The only piece I don't like is about returning the histogram in an `int64` where it's really 6 bits per histogram bucket. That would mean the result isn't _actually_ a `INT64` column, but some special column with special meaning that isn't reflected anywhere in it's type or metadata. If it's going to be a non-opaque object, it has to at least be an `INT8` per bucket. 

To summarize:
- New aggregations
   - `hll::compute_histogram`
      - `cudf::reduce`
         - Input: `column_view` of any(?) type
         - Output: `cudf::scalar` with `LIST<int8>` (i.e., a single list of 8 bit integers that is the histogram)
      - `cudf::groupby` 
         - Input: `column_view` of any(?) type 
         - Output: `column` with `LIST<int8>`, histogram/list per group
   - `hll::merge_histogram`
      - `cudf::reduce`
         - Input: `column` with `LIST<INT8>`, i.e., all the histograms to merge
            -  Each histogram must be the same size
         - Output: `scalar` with `LIST<INT8>`
       - `cudf::groupby`
          - Input: `column` with `LIST<INT8>`
             -  Each histogram must be the same size
          - Output: `coumn` with `LIST<INT8>`
- New `hll::histogram_column_view`
   - Similar to `tdigest_column_view` provides facade over `LIST<INT8>` column
   - Each histogram must be the same size
   - This should really be a fixed-size list column, but we don't have that
   - Open question if this ctor should enforce each list being the same size (requires a kernel)
- New function 
   - `hll::approx_distinct_count`
      - Input: `hll::histogram_column_view`
      - Output: `column` with `INT64` of the approximate cardinality per histogram in the input column
",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100176919/reactions,0,0,0,0,0,0,0,0,0,10652
1296,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100234233,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1100234233,https://api.github.com/repos/rapidsai/cudf/issues/10652,1100234233,IC_kwDOBWUGps5BlD35,2022-04-15T17:06:50Z,2022-04-15T17:06:50Z,CONTRIBUTOR,"That sounds great.

> Open question if this ctor should enforce each list being the same size (requires a kernel)

I thought in general if it made the code slower you wouldn't do the check. That it would be a separate method to do the check. I am fine with the separate method, but honestly it is not hard to do that check with existing code.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1100234233/reactions,1,1,0,0,0,0,0,0,0,10652
1297,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117567534,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1117567534,https://api.github.com/repos/rapidsai/cudf/issues/10652,1117567534,IC_kwDOBWUGps5CnLou,2022-05-04T16:37:28Z,2022-05-04T16:37:28Z,MEMBER,"Also tagging @vinaydes, since we too have been looking into using hll for implementing a fast FP-growth like algo for rule mining.",,teju85,532947,MDQ6VXNlcjUzMjk0Nw==,https://avatars.githubusercontent.com/u/532947?v=4,,https://api.github.com/users/teju85,https://github.com/teju85,https://api.github.com/users/teju85/followers,https://api.github.com/users/teju85/following{/other_user},https://api.github.com/users/teju85/gists{/gist_id},https://api.github.com/users/teju85/starred{/owner}{/repo},https://api.github.com/users/teju85/subscriptions,https://api.github.com/users/teju85/orgs,https://api.github.com/users/teju85/repos,https://api.github.com/users/teju85/events{/privacy},https://api.github.com/users/teju85/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117567534/reactions,0,0,0,0,0,0,0,0,0,10652
1298,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171673728,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1171673728,https://api.github.com/repos/rapidsai/cudf/issues/10652,1171673728,IC_kwDOBWUGps5F1lKA,2022-06-30T21:03:19Z,2022-06-30T21:03:19Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1171673728/reactions,0,0,0,0,0,0,0,0,0,10652
1299,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172706388,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1172706388,https://api.github.com/repos/rapidsai/cudf/issues/10652,1172706388,IC_kwDOBWUGps5F5hRU,2022-07-01T20:55:37Z,2022-07-01T20:55:37Z,CONTRIBUTOR,This is still relevant ,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172706388/reactions,1,1,0,0,0,0,0,0,0,10652
1300,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172707678,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1172707678,https://api.github.com/repos/rapidsai/cudf/issues/10652,1172707678,IC_kwDOBWUGps5F5hle,2022-07-01T20:58:29Z,2022-07-01T20:58:29Z,CONTRIBUTOR,"I'm going to start working on it from next week, targeting for 22.10 release.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172707678/reactions,0,0,0,0,0,0,0,0,0,10652
1301,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200509060,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1200509060,https://api.github.com/repos/rapidsai/cudf/issues/10652,1200509060,IC_kwDOBWUGps5HjlCE,2022-07-31T22:03:24Z,2022-07-31T22:03:24Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200509060/reactions,0,0,0,0,0,0,0,0,0,10652
1302,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204061400,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1204061400,https://api.github.com/repos/rapidsai/cudf/issues/10652,1204061400,IC_kwDOBWUGps5HxITY,2022-08-03T14:57:13Z,2022-08-03T14:57:13Z,CONTRIBUTOR,This is still relevant,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204061400/reactions,0,0,0,0,0,0,0,0,0,10652
1303,https://api.github.com/repos/rapidsai/cudf/issues/comments/1627575487,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1627575487,https://api.github.com/repos/rapidsai/cudf/issues/10652,1627575487,IC_kwDOBWUGps5hAtS_,2023-07-09T02:16:15Z,2023-07-09T02:16:15Z,NONE,"Has there been any progress on this issue? I am planning to implement an HLL-backed version of `cuco::util::approx_distinct_count`, which can potentially be used in cudf.",,sleeepyjack,2955913,MDQ6VXNlcjI5NTU5MTM=,https://avatars.githubusercontent.com/u/2955913?v=4,,https://api.github.com/users/sleeepyjack,https://github.com/sleeepyjack,https://api.github.com/users/sleeepyjack/followers,https://api.github.com/users/sleeepyjack/following{/other_user},https://api.github.com/users/sleeepyjack/gists{/gist_id},https://api.github.com/users/sleeepyjack/starred{/owner}{/repo},https://api.github.com/users/sleeepyjack/subscriptions,https://api.github.com/users/sleeepyjack/orgs,https://api.github.com/users/sleeepyjack/repos,https://api.github.com/users/sleeepyjack/events{/privacy},https://api.github.com/users/sleeepyjack/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1627575487/reactions,0,0,0,0,0,0,0,0,0,10652
1304,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628099449,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1628099449,https://api.github.com/repos/rapidsai/cudf/issues/10652,1628099449,IC_kwDOBWUGps5hCtN5,2023-07-10T04:05:30Z,2023-07-10T04:05:30Z,CONTRIBUTOR,Hi! We deprioritized this for something else thus it was paused for a while. Having `cuco::util::approx_distinct_count` would be a big foundation for it. Thanks in advance!,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628099449/reactions,0,0,0,0,0,0,0,0,0,10652
1305,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628861374,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1628861374,https://api.github.com/repos/rapidsai/cudf/issues/10652,1628861374,IC_kwDOBWUGps5hFnO-,2023-07-10T12:29:08Z,2023-07-10T12:29:08Z,CONTRIBUTOR,"Yes, having an implementation in cuco would be fantastic. @sleeepyjack if you want to discuss design / implementation, I would be more than happy to offer input from our past conversations about this topic and/or PR review.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1628861374/reactions,0,0,0,0,0,0,0,0,0,10652
1306,https://api.github.com/repos/rapidsai/cudf/issues/comments/1631721010,https://github.com/rapidsai/cudf/issues/10652#issuecomment-1631721010,https://api.github.com/repos/rapidsai/cudf/issues/10652,1631721010,IC_kwDOBWUGps5hQhYy,2023-07-12T01:35:17Z,2023-07-12T01:35:17Z,NONE,@bdice Good idea. Let me read through the relevant papers first. I guess the crucial part I have to wrap my head around is how to represent the counters and merge them in parallel. I'll ping you on Slack once I'm prepared so we can schedule a 1:1.,,sleeepyjack,2955913,MDQ6VXNlcjI5NTU5MTM=,https://avatars.githubusercontent.com/u/2955913?v=4,,https://api.github.com/users/sleeepyjack,https://github.com/sleeepyjack,https://api.github.com/users/sleeepyjack/followers,https://api.github.com/users/sleeepyjack/following{/other_user},https://api.github.com/users/sleeepyjack/gists{/gist_id},https://api.github.com/users/sleeepyjack/starred{/owner}{/repo},https://api.github.com/users/sleeepyjack/subscriptions,https://api.github.com/users/sleeepyjack/orgs,https://api.github.com/users/sleeepyjack/repos,https://api.github.com/users/sleeepyjack/events{/privacy},https://api.github.com/users/sleeepyjack/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1631721010/reactions,0,0,0,0,0,0,0,0,0,10652
1307,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035908876,https://github.com/rapidsai/cudf/issues/10652#issuecomment-2035908876,https://api.github.com/repos/rapidsai/cudf/issues/10652,2035908876,IC_kwDOBWUGps55WYEM,2024-04-04T01:16:19Z,2024-04-04T01:16:19Z,NONE,FYI `cuco::distinct_count_estimator` (NVIDIA/cuCollections#429) has been merged so we can start implementing and exposing this feature in cudf.,,sleeepyjack,2955913,MDQ6VXNlcjI5NTU5MTM=,https://avatars.githubusercontent.com/u/2955913?v=4,,https://api.github.com/users/sleeepyjack,https://github.com/sleeepyjack,https://api.github.com/users/sleeepyjack/followers,https://api.github.com/users/sleeepyjack/following{/other_user},https://api.github.com/users/sleeepyjack/gists{/gist_id},https://api.github.com/users/sleeepyjack/starred{/owner}{/repo},https://api.github.com/users/sleeepyjack/subscriptions,https://api.github.com/users/sleeepyjack/orgs,https://api.github.com/users/sleeepyjack/repos,https://api.github.com/users/sleeepyjack/events{/privacy},https://api.github.com/users/sleeepyjack/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035908876/reactions,1,1,0,0,0,0,0,0,0,10652
1308,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105492085,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1105492085,https://api.github.com/repos/rapidsai/cudf/issues/10706,1105492085,IC_kwDOBWUGps5B5Hh1,2022-04-21T17:22:26Z,2022-04-21T17:22:26Z,CONTRIBUTOR,"@bdice I think you did some recent investigations here, please add any color that I'm missing.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105492085/reactions,0,0,0,0,0,0,0,0,0,10706
1309,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105504694,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1105504694,https://api.github.com/repos/rapidsai/cudf/issues/10706,1105504694,IC_kwDOBWUGps5B5Km2,2022-04-21T17:37:30Z,2022-04-21T17:37:30Z,CONTRIBUTOR,I agree with the proposal above. There may be a catch with circular imports for group 3 / UDF helpers.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105504694/reactions,0,0,0,0,0,0,0,0,0,10706
1310,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105720996,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1105720996,https://api.github.com/repos/rapidsai/cudf/issues/10706,1105720996,IC_kwDOBWUGps5B5_ak,2022-04-21T20:22:22Z,2022-04-21T20:22:22Z,CONTRIBUTOR,"I think `find_first` is used in the `iloc` codepath. That part of the code needs to be reworked anyways since it's not producing the right result in some cases.

Let me know if I may be of assistance untangling anything in the UDF area @bdice ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1105720996/reactions,0,0,0,0,0,0,0,0,0,10706
1311,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108648615,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1108648615,https://api.github.com/repos/rapidsai/cudf/issues/10706,1108648615,IC_kwDOBWUGps5CFKKn,2022-04-25T14:26:32Z,2022-04-25T14:26:32Z,CONTRIBUTOR,"> I think `find_first` is used in the `iloc` codepath. That part of the code needs to be reworked anyways since it's not producing the right result in some cases.

Yup, I think that `Column.find_first_value` gets invoked by the `loc_to_iloc` translation. There's also #10657 about trying to unify DataFrame and Series loc/iloc further, so maybe all of the relevant issues could be resolved in one fell swoop.
",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108648615/reactions,0,0,0,0,0,0,0,0,0,10706
1312,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137418357,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1137418357,https://api.github.com/repos/rapidsai/cudf/issues/10706,1137418357,IC_kwDOBWUGps5Dy6B1,2022-05-25T15:12:29Z,2022-05-25T15:12:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1137418357/reactions,0,0,0,0,0,0,0,0,0,10706
1313,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224279740,https://github.com/rapidsai/cudf/issues/10706#issuecomment-1224279740,https://api.github.com/repos/rapidsai/cudf/issues/10706,1224279740,IC_kwDOBWUGps5I-Qa8,2022-08-23T16:03:10Z,2022-08-23T16:03:10Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224279740/reactions,0,0,0,0,0,0,0,0,0,10706
1314,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108756627,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108756627,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108756627,IC_kwDOBWUGps5CFkiT,2022-04-25T15:58:50Z,2022-04-25T15:58:50Z,CONTRIBUTOR,"Looking at the changes in #10712, I'm not convinced that many of them are improvements. Can we take a step back and evaluate how exactly `pydocstyle` is going to help us concretely?

> it also reduces the effectiveness of tools like Sphinx or numpydoc that rely on specific formatting in order to parse docstrings.

Do we have examples where this doesn't work well today?

Can we configure pydocstyle to catch a more narrow class of errors for us and ignore others?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108756627/reactions,0,0,0,0,0,0,0,0,0,10711
1315,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108784858,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108784858,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108784858,IC_kwDOBWUGps5CFrba,2022-04-25T16:24:38Z,2022-04-25T16:24:38Z,CONTRIBUTOR,"I agree with you. I have generally been a fan of docstring linting with pydocstyle in the past, but this PR definitely made me question its usability for cudf a little bit as well. Fundamentally I think that we have one major difference in this project relative to other projects that makes some of these changes feel less useful: we want to match pandas documentation as much as possible. As a result a lot of these changes may end up working contrary to our goals. We may end up getting better mileage by writing a custom tool that performs an element-wise comparison of docstrings of all public APIs against their pandas equivalents and highlights differences.

> Looking at the changes in #10712, I'm not convinced that many of them are improvements. Can we take a step back and evaluate how exactly `pydocstyle` is going to help us concretely?
> 
> > it also reduces the effectiveness of tools like Sphinx or numpydoc that rely on specific formatting in order to parse docstrings.
> 
> Do we have examples where this doesn't work well today?

I think the main things that pydocstyle catches that help us are errors that lead to improper Sphinx HTML generation. For instance, in this PR I fixed places where there are newlines in places where they should not be present in between section headers like ""Parameters"" and their underlines. There were also a few places where the summary line was not separated from subsequent lines. That can also lead to improper Sphinx. 

More generally, pydocstyle can be helpful to catch missing docstrings, missing parameters, missing types, etc, but in general I think we've done OK with those because we copy so many of our docs from pandas. We're benefiting less from the tool because we're not writing docstrings from scratch.

> Can we configure pydocstyle to catch a more narrow class of errors for us and ignore others?

We can choose to only lint a specific set of [pydocstyle's supported error codes](http://www.pydocstyle.org/en/stable/error_codes.html). However, I question how useful it will end up being since pandas probably has minor violations of pydocstyle style all over the place. If we block too many of the rules, the tool's value will decrease substantially.


CC @bdice, who I'm sure will have more opinions here 😄 ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108784858/reactions,0,0,0,0,0,0,0,0,0,10711
1316,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108833799,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108833799,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108833799,IC_kwDOBWUGps5CF3YH,2022-04-25T17:16:17Z,2022-04-25T17:16:17Z,CONTRIBUTOR,"To clarify my comment from above and reiterate some of my offline comments to @shwina:

I am personally in favor of using opinionated linters like pydocstyle. Even in cases where they disagree with my personal preferences, I prefer using them because they reduce the number of discussions that need to be had over what are usually very minor, very subjective issues. I think there is a path for us to get the best of both worlds here where we use pydocstyle but specify a limited set of error codes to check, then add an additional tool to do the pandas comparison at a later point. Disabling more of pydocstyle's checks in favor of pandas docstring choices may be our best options, as long as we can do so consistently.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108833799/reactions,1,1,0,0,0,0,0,0,0,10711
1317,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108886629,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108886629,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108886629,IC_kwDOBWUGps5CGERl,2022-04-25T18:13:30Z,2022-04-25T18:14:59Z,CONTRIBUTOR,"> I think the main things that pydocstyle catches that help us are errors that lead to improper Sphinx HTML generation. For instance, in this PR I fixed places where there are newlines in places where they should not be present in between section headers like ""Parameters"" and their underlines. There were also a few places where the summary line was not separated from subsequent lines. That can also lead to improper Sphinx.

> We can choose to only lint a specific set of [pydocstyle's supported error codes](http://www.pydocstyle.org/en/stable/error_codes.html).

This is the direction I would like to see us go. Rather than enforce all of pydocstyle's rules on specific files, we should use it very broadly to fix a select set of minor issues that result in invalid Sphinx. Otherwise we should align 100% with pandas' wording wherever we can, instead of adhere to pydocstyle's grammatical preferences.

Here's an overview of my thoughts on the error codes to enable. Any rule that causes significant friction should be scrutinized more carefully.

- Missing Docstrings `D100-D107`. ❌ Skip all of these because they can't recognize inheritance or non-static docstrings injected at runtime. Missing docstrings are sometimes better than poorly formatted / badly rendering docstrings.
- Whitespace Issues `D200-D215`. ✔️ This category is useful. I would enable whatever subset of these is most consistent with our intended NumPy-style docstrings. NumPy does not enable D203, D212, D213. Perhaps other exceptions are needed as well, I'm not sure.
- Quotes Issues `D300-D302`. ✔️ I would enable all of these.
- Docstring Content Issues `D400-D418`. Enable only a select few. Perhaps the following:

| Enable? | Code | Description | Notes |
|--|--|--|--|
| ✔️  | D400 | First line should end with a period |
| ❌  | D401 | First line should be in imperative mood |
| ❌ | D401 | First line should be in imperative mood; try rephrasing |
| ❌ | D402 | First line should not be the function’s “signature” | Appears to conflict with using parentheses, e.g. mode(s), and disabled by default for numpy conventions |
| ✔️ | D403 | First word of the first line should be properly capitalized |
| ❌ | D404 | First word of the docstring should not be This | Seems arbitrary -- might conflict with pandas
| ✔️ | D405 | Section name should be properly capitalized |
| ✔️ | D406 | Section name should end with a newline |
| ✔️ | D407 | Missing dashed underline after section |
| ✔️ | D408 | Section underline should be in the line following the section’s name |
| ✔️ | D409 | Section underline should match the length of its name |
| ✔️ | D410 | Missing blank line after section | Not sure if we need both this and D411?
| ✔️ | D411 | Missing blank line before section | Not sure if we need both this and D410?
| ✔️ | D412 | No blank lines allowed between a section header and its content |
| ❌ | D413 | Missing blank line after last section | Disabled by default for numpy conventions |
| ✔️ | D414 | Section has no content |
| ❌ | D415 | First line should end with a period, question mark, or exclamation point | Disabled by default for numpy conventions |
| ❌ | D416 | Section name should end with a colon | Disabled by default for numpy conventions |
| ❌ | D417 | Missing argument descriptions in the docstring | Disabled by default for numpy conventions |
| ✔️ | D418 | Function/ Method decorated with @overload shouldn’t contain a docstring |
",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108886629/reactions,2,0,0,0,0,0,2,0,0,10711
1318,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108897305,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108897305,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108897305,IC_kwDOBWUGps5CGG4Z,2022-04-25T18:23:58Z,2022-04-25T18:24:34Z,CONTRIBUTOR,"Regarding missing docstrings, I agree in part. I have two main modifications to Bradley's comments above:
- I think D102 is the only one that we'll actually need to disable because a) only methods are affected by inheritance, and b) methods are by far the most common use case for runtime injected docstrings. There may be a few violations of D103, especially in cuIO, but overall I think free functions will typically have docstrings written and I would rather manually noqa the few cases where we do need to skip D103. (We should of course disable D107 since we document that in the class docstring rather than the method)
- When we initially apply D102 to a file (when it is added to the `match` in `python/.flake8`) D102 _should_ be enabled. The reason is that there are public-facing methods that are actually missing documentation and are not inheriting docstrings (not many, but they do exist). Maybe we just need to document that in this issue so that developers are aware that they need to check this.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108897305/reactions,2,2,0,0,0,0,0,0,0,10711
1319,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108930163,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108930163,https://api.github.com/repos/rapidsai/cudf/issues/10711,1108930163,IC_kwDOBWUGps5CGO5z,2022-04-25T19:02:15Z,2022-04-25T19:02:15Z,CONTRIBUTOR,Agree with the excellent analysis from you both! ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1108930163/reactions,0,0,0,0,0,0,0,0,0,10711
1320,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185756270,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1185756270,https://api.github.com/repos/rapidsai/cudf/issues/10711,1185756270,IC_kwDOBWUGps5GrTRu,2022-07-15T17:33:05Z,2022-07-15T17:33:05Z,CONTRIBUTOR,We now lint everything with pydocstyle. The outstanding tasks here are to go through and enable a larger set of checks and systematically fix the issues.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185756270/reactions,0,0,0,0,0,0,0,0,0,10711
1321,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224440397,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1224440397,https://api.github.com/repos/rapidsai/cudf/issues/10711,1224440397,IC_kwDOBWUGps5I-3pN,2022-08-23T17:42:09Z,2022-08-23T17:42:09Z,CONTRIBUTOR,"I merged #11582 which added most of the rules I discussed above in the `D2xx-D4xx` sections. I skipped `D100-D107` for now, and also skipped `D200, D202, D205, D400` because they would require a lot more work. Having just a few rules in place is good enough for the moment. I'd vote to leave this issue open until we add the rest of those (or decide against doing the work).",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224440397/reactions,1,1,0,0,0,0,0,0,0,10711
1322,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224551168,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1224551168,https://api.github.com/repos/rapidsai/cudf/issues/10711,1224551168,IC_kwDOBWUGps5I_SsA,2022-08-23T18:25:27Z,2022-08-23T18:25:27Z,CONTRIBUTOR,Agree - let's leave it open.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224551168/reactions,0,0,0,0,0,0,0,0,0,10711
1323,https://api.github.com/repos/rapidsai/cudf/issues/comments/1421254643,https://github.com/rapidsai/cudf/issues/10711#issuecomment-1421254643,https://api.github.com/repos/rapidsai/cudf/issues/10711,1421254643,IC_kwDOBWUGps5Utp_z,2023-02-07T18:25:28Z,2023-02-07T18:25:28Z,CONTRIBUTOR,"Late-breaking, I hate D405 (title case): we're writing English, not German.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1421254643/reactions,0,0,0,0,0,0,0,0,0,10711
1324,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109036440,https://github.com/rapidsai/cudf/issues/10711#issuecomment-2109036440,https://api.github.com/repos/rapidsai/cudf/issues/10711,2109036440,IC_kwDOBWUGps59tVeY,2024-05-14T00:12:39Z,2024-05-14T00:12:39Z,CONTRIBUTOR,"Note that going forward we will instead be enabling rules for ruff, not pydocstyle.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109036440/reactions,0,0,0,0,0,0,0,0,0,10711
1325,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110200681,https://github.com/rapidsai/cudf/issues/10742#issuecomment-1110200681,https://api.github.com/repos/rapidsai/cudf/issues/10742,1110200681,IC_kwDOBWUGps5CLFFp,2022-04-26T20:07:08Z,2022-04-26T20:07:08Z,CONTRIBUTOR,"@ttnghia I've assigned you since you made this request, but feel free to change that if necessary.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110200681/reactions,1,1,0,0,0,0,0,0,0,10742
1326,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110210414,https://github.com/rapidsai/cudf/issues/10742#issuecomment-1110210414,https://api.github.com/repos/rapidsai/cudf/issues/10742,1110210414,IC_kwDOBWUGps5CLHdu,2022-04-26T20:18:26Z,2022-04-26T20:18:26Z,CONTRIBUTOR,@bdice I've updated the issue to include some of your testing requests and assigned you as well.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110210414/reactions,0,0,0,0,0,0,0,0,0,10742
1327,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110243044,https://github.com/rapidsai/cudf/issues/10744#issuecomment-1110243044,https://api.github.com/repos/rapidsai/cudf/issues/10744,1110243044,IC_kwDOBWUGps5CLPbk,2022-04-26T20:59:40Z,2022-04-26T20:59:40Z,CONTRIBUTOR,"@jlowe I believe that you were interested in something like this at one point as well. We had higher priorities and didn't consider addressing it at the time, but I think this would help simplify some of the JNI wrappers right?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110243044/reactions,0,0,0,0,0,0,0,0,0,10744
1328,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110299694,https://github.com/rapidsai/cudf/issues/10744#issuecomment-1110299694,https://api.github.com/repos/rapidsai/cudf/issues/10744,1110299694,IC_kwDOBWUGps5CLdQu,2022-04-26T22:10:24Z,2022-04-26T22:10:51Z,MEMBER,"> I believe that you were interested in something like this at one point as well.

Yes, it would simplify things a bit since the JNI code explicitly tracks all the subexpressions and deletes them when the parent expression is finally deleted.  The Java code does a full translation from a Java tree to a native tree in an explicit `compile()` step, so nothing in the Java layer should need to change.  It should only be a change in the JNI native code layer that explicitly tracks the AST sub-expressions.  Now that it's coded and working, not a high priority from my perspective. 😄 ",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1110299694/reactions,0,0,0,0,0,0,0,0,0,10744
1329,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139129451,https://github.com/rapidsai/cudf/issues/10744#issuecomment-1139129451,https://api.github.com/repos/rapidsai/cudf/issues/10744,1139129451,IC_kwDOBWUGps5D5bxr,2022-05-26T23:03:08Z,2022-05-26T23:03:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1139129451/reactions,0,0,0,0,0,0,0,0,0,10744
1330,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812878,https://github.com/rapidsai/cudf/issues/10744#issuecomment-1258812878,https://api.github.com/repos/rapidsai/cudf/issues/10744,1258812878,IC_kwDOBWUGps5LB_XO,2022-09-27T00:19:20Z,2022-09-27T00:19:20Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812878/reactions,0,0,0,0,0,0,0,0,0,10744
1331,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140271197,https://github.com/rapidsai/cudf/issues/10752#issuecomment-1140271197,https://api.github.com/repos/rapidsai/cudf/issues/10752,1140271197,IC_kwDOBWUGps5D9yhd,2022-05-28T14:03:02Z,2022-05-28T14:03:02Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140271197/reactions,0,0,0,0,0,0,0,0,0,10752
1332,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140294541,https://github.com/rapidsai/cudf/issues/10752#issuecomment-1140294541,https://api.github.com/repos/rapidsai/cudf/issues/10752,1140294541,IC_kwDOBWUGps5D94ON,2022-05-28T16:39:53Z,2022-05-28T16:39:53Z,CONTRIBUTOR,working on the code,,dominicshanshan,30051912,MDQ6VXNlcjMwMDUxOTEy,https://avatars.githubusercontent.com/u/30051912?v=4,,https://api.github.com/users/dominicshanshan,https://github.com/dominicshanshan,https://api.github.com/users/dominicshanshan/followers,https://api.github.com/users/dominicshanshan/following{/other_user},https://api.github.com/users/dominicshanshan/gists{/gist_id},https://api.github.com/users/dominicshanshan/starred{/owner}{/repo},https://api.github.com/users/dominicshanshan/subscriptions,https://api.github.com/users/dominicshanshan/orgs,https://api.github.com/users/dominicshanshan/repos,https://api.github.com/users/dominicshanshan/events{/privacy},https://api.github.com/users/dominicshanshan/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1140294541/reactions,0,0,0,0,0,0,0,0,0,10752
1333,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186649125,https://github.com/rapidsai/cudf/issues/10752#issuecomment-1186649125,https://api.github.com/repos/rapidsai/cudf/issues/10752,1186649125,IC_kwDOBWUGps5GutQl,2022-07-18T00:48:30Z,2022-07-18T00:48:30Z,CONTRIBUTOR,study pandas realization,,dominicshanshan,30051912,MDQ6VXNlcjMwMDUxOTEy,https://avatars.githubusercontent.com/u/30051912?v=4,,https://api.github.com/users/dominicshanshan,https://github.com/dominicshanshan,https://api.github.com/users/dominicshanshan/followers,https://api.github.com/users/dominicshanshan/following{/other_user},https://api.github.com/users/dominicshanshan/gists{/gist_id},https://api.github.com/users/dominicshanshan/starred{/owner}{/repo},https://api.github.com/users/dominicshanshan/subscriptions,https://api.github.com/users/dominicshanshan/orgs,https://api.github.com/users/dominicshanshan/repos,https://api.github.com/users/dominicshanshan/events{/privacy},https://api.github.com/users/dominicshanshan/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186649125/reactions,0,0,0,0,0,0,0,0,0,10752
1334,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217358781,https://github.com/rapidsai/cudf/issues/10752#issuecomment-1217358781,https://api.github.com/repos/rapidsai/cudf/issues/10752,1217358781,IC_kwDOBWUGps5Ij2u9,2022-08-17T01:34:13Z,2022-08-17T01:34:13Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217358781/reactions,0,0,0,0,0,0,0,0,0,10752
1335,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146109139,https://github.com/rapidsai/cudf/issues/10787#issuecomment-1146109139,https://api.github.com/repos/rapidsai/cudf/issues/10787,1146109139,IC_kwDOBWUGps5EUDzT,2022-06-03T16:02:56Z,2022-06-03T16:02:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146109139/reactions,0,0,0,0,0,0,0,0,0,10787
1336,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501091,https://github.com/rapidsai/cudf/issues/10787#issuecomment-1257501091,https://api.github.com/repos/rapidsai/cudf/issues/10787,1257501091,IC_kwDOBWUGps5K8_Gj,2022-09-26T05:30:37Z,2022-09-26T05:30:37Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257501091/reactions,0,0,0,0,0,0,0,0,0,10787
1337,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117913003,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1117913003,https://api.github.com/repos/rapidsai/cudf/issues/10792,1117913003,IC_kwDOBWUGps5Cof-r,2022-05-04T20:45:59Z,2022-05-04T20:45:59Z,CONTRIBUTOR,"Given there was already sizable discussion in https://github.com/rapidsai/cudf/issues/10652, can we just use that issue? Or is there a different intent with this one?",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117913003/reactions,0,0,0,0,0,0,0,0,0,10792
1338,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117920482,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1117920482,https://api.github.com/repos/rapidsai/cudf/issues/10792,1117920482,IC_kwDOBWUGps5Cohzi,2022-05-04T20:48:24Z,2022-05-04T20:48:24Z,CONTRIBUTOR,"That issue has been diluted.
Here I'm going to add checked list item for the necessary PRs/features we are going to add so people can keep track, like this: https://github.com/rapidsai/cudf/issues/10186.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1117920482/reactions,0,0,0,0,0,0,0,0,0,10792
1339,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155315846,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1155315846,https://api.github.com/repos/rapidsai/cudf/issues/10792,1155315846,IC_kwDOBWUGps5E3LiG,2022-06-14T15:03:09Z,2022-06-14T15:03:09Z,CONTRIBUTOR,This is still wanted,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155315846/reactions,1,1,0,0,0,0,0,0,0,10792
1340,https://api.github.com/repos/rapidsai/cudf/issues/comments/1184588448,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1184588448,https://api.github.com/repos/rapidsai/cudf/issues/10792,1184588448,IC_kwDOBWUGps5Gm2Kg,2022-07-14T15:31:59Z,2022-07-14T15:31:59Z,CONTRIBUTOR,This is still wanted,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1184588448/reactions,1,1,0,0,0,0,0,0,0,10792
1341,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221407992,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1221407992,https://api.github.com/repos/rapidsai/cudf/issues/10792,1221407992,IC_kwDOBWUGps5IzTT4,2022-08-20T21:03:49Z,2022-08-20T21:03:49Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221407992/reactions,0,0,0,0,0,0,0,0,0,10792
1342,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302600768,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1302600768,https://api.github.com/repos/rapidsai/cudf/issues/10792,1302600768,IC_kwDOBWUGps5NpBxA,2022-11-03T19:59:15Z,2022-11-03T19:59:15Z,CONTRIBUTOR,"@etseidl FYI, our friends in Spark-RAPIDS are also interested in the HyperLogLog algorithm. 😄 ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302600768/reactions,1,1,0,0,0,0,0,0,0,10792
1343,https://api.github.com/repos/rapidsai/cudf/issues/comments/1908915242,https://github.com/rapidsai/cudf/issues/10792#issuecomment-1908915242,https://api.github.com/repos/rapidsai/cudf/issues/10792,1908915242,IC_kwDOBWUGps5xx7wq,2024-01-24T21:06:36Z,2024-01-24T21:06:36Z,CONTRIBUTOR,Also see https://github.com/NVIDIA/cuCollections/pull/429,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1908915242/reactions,0,0,0,0,0,0,0,0,0,10792
1344,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117720006,https://github.com/rapidsai/cudf/issues/10792#issuecomment-2117720006,https://api.github.com/repos/rapidsai/cudf/issues/10792,2117720006,IC_kwDOBWUGps5-OdfG,2024-05-17T14:20:33Z,2024-05-17T14:20:33Z,CONTRIBUTOR,Echoing Jake's question from two years ago: do we need this issue? Can we consolidate discussion in #10652? At this point it seems like we're just forced to post updates in two places. @ttnghia WDYT?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117720006/reactions,0,0,0,0,0,0,0,0,0,10792
1345,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121336510,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121336510,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121336510,IC_kwDOBWUGps5C1jy-,2022-05-09T16:46:18Z,2022-05-09T16:46:18Z,CONTRIBUTOR,"Going through and doing the minimum thing to add `frame_count` slots to all serializable objects, a further thought occurred which is that as well as lack of consistency in key names, there's also a lack of consistency in the metadata schema.

Some of the metadata slots (in particular `type-serialized`) are picked to align with what dask names things; as far as I can tell this is not the case for others, and doesn't really need to be, but cc @jakirkham whom `git-annotate` suggests might know.

Sometimes, properties of nested objects are copied in to the parent header, and sometimes not, I think it makes sense to clean up and have a model of:
```
{""type-serialized"": my-type,
  ""properties"": {attribute: value, nested_object: nested_stuff},
  ""frame-count"": number_of_frames_consumed_in_deserialization}
```

Perhaps something like this was considered and rejected?

A much larger change would be to set up all of the serializable objects as `dataclass`-like things with constructors that just set attributes, then the schema for serialization is completely clear and lots of this code can be removed. A downside here is that serialization is not as extensible in an ad-hoc manner, and I am not sure that all cudf classes can get away with default simple constructors.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121336510/reactions,0,0,0,0,0,0,0,0,0,10799
1346,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121346127,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121346127,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121346127,IC_kwDOBWUGps5C1mJP,2022-05-09T16:57:10Z,2022-05-09T16:57:10Z,CONTRIBUTOR,"A small consideration that might tip the balance: using underscores makes it map more directly to valid Python identifiers, e.g.
```python
# Using underscores in the keys:
frame_count = metadata[""frame_count""]
type_serialized = metadata[""type_serialized""]
# vs. mapping dashes to underscores:
frame_count = metadata[""frame-count""]
type_serialized = metadata[""type-serialized""]
```",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121346127/reactions,0,0,0,0,0,0,0,0,0,10799
1347,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121379971,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121379971,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121379971,IC_kwDOBWUGps5C1uaD,2022-05-09T17:30:30Z,2022-05-09T17:30:30Z,CONTRIBUTOR,"I would definitely welcome more insight from a Dask expert. Some thoughts and questions:
- Are you proposing that nested headers are always copied into their parents? Does that mean that we always duplicate data?
- How would nesting work when nested objects that aren't buffers actually return frames? In particular, our `CategoricalDtype` serializes into both header information and a frame consisting of the categories (just curious if you've considered how this impacts your proposal, because I haven't).
- You're right that simple `dataclass` constructors won't work for most of our classes like `DataFrame` or `Series`. Those must be constructible from a wide range of objects to match what pandas supports.

It might help to consider whether we could change our classes so that only `Frame` and `BaseIndex` are `Serializable`. `ColumnBase` would still need its current implementation, but we could simplify dtype and `Buffer` logic. We shouldn't need non-API classes to conform to the `dask.distributed` API, and it leads to some incongruities:
- dtypes include ""frames"" when serializing even though they don't actually have frames of data. The exception is categoricals, which are tricky because they are the only dtype that stores data on device (the categories). We would probably need a special case to support those.
- Buffers ultimately just insert ""self"" into the frames, so every Column could really just insert its underlying buffer into the frames list and call that good. `Buffer` is an implementation detail of cudf and shouldn't need to conform to the dask API. We really just use the CAI protocol to save and load them anyway. That would remove one additional `serialize` implementation.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121379971/reactions,0,0,0,0,0,0,0,0,0,10799
1348,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121441341,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121441341,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121441341,IC_kwDOBWUGps5C19Y9,2022-05-09T18:34:27Z,2022-05-09T18:34:27Z,MEMBER,"Dask uses `-`s

Not sure I follow what else is being proposed here",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121441341/reactions,0,0,0,0,0,0,0,0,0,10799
1349,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121578961,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121578961,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121578961,IC_kwDOBWUGps5C2e_R,2022-05-09T21:04:08Z,2022-05-09T21:04:08Z,CONTRIBUTOR,"@jakirkham I think the two main questions for you are:
- Does it matters at all for cudf to use the same field names as dask (such as type-serialized)? We think not, but would like confirmation.
- What objects actually need to support the serialization protocols? Is it just DataFrame,Series, and all the types of Indexes? i.e. Is there any need for `cudf.Buffer` or each dtype to support the protocols? Of course, we need a way to serialize that information, i.e. we need to know whether a Series contains strings or ints, but here we're just talking about necessary APIs for each type of object. ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121578961/reactions,0,0,0,0,0,0,0,0,0,10799
1350,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121692664,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1121692664,https://api.github.com/repos/rapidsai/cudf/issues/10799,1121692664,IC_kwDOBWUGps5C26v4,2022-05-09T23:48:58Z,2022-05-09T23:48:58Z,MEMBER,"Yes `""type-serialized""` matters. It is a special field in Dask

When adding support for cuDF serialization, we found all sorts of objects went over the wire. Any we missed supporting surfaced as errors in benchmarks. So we added them all

I think what I'm missing is what we are trying to fix here",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1121692664/reactions,0,0,0,0,0,0,0,0,0,10799
1351,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122105186,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1122105186,https://api.github.com/repos/rapidsai/cudf/issues/10799,1122105186,IC_kwDOBWUGps5C4fdi,2022-05-10T08:43:11Z,2022-05-11T14:54:46Z,CONTRIBUTOR,"> I would definitely welcome more insight from a Dask expert. Some thoughts and questions:
> 
> * Are you proposing that nested headers are always copied into their parents? Does that mean that we always duplicate data?

On the contrary. I'm proposing:
```python
header = {""properties"": {}}
frames = []
sub_obj = self.child # object we're serializing has a child to be serialized
sub_header, sub_frames = sub_obj.serialize()
header[""properties""][""child""] = sub_header
frames.extend(sub_frames)
```

At the moment, depending on the particular object, in serialization, sometimes this is done, sometimes some information is carried redundantly in the `header` itself. Moreover, if adding a new slot to the ""top-level"" header key space, one has to read (or know) non-local code to know whether there are any reserved keys. For example `Serializable.device_serialize` (which calls the class-implemented `serialize`) overwrites `""type-serialized""`, `""is-cuda""`, and `""lengths""`, `Serializable.host_serialize` (called via pickle) additionally overwrites `""writeable""`.

> * How would nesting work when nested objects that aren't buffers actually return frames? In particular, our `CategoricalDtype` serializes into both header information and a frame consisting of the categories (just curious if you've considered how this impacts your proposal, because I haven't).

This is not problematic. Deserialization takes a (nested) metadata descriptor and a list of frames and returns a deserialized object and a (partially) consumed list of frames. So a helper function:

```python
def unpack(header, frames):
    typ = pickle.loads(header[""type-serialized""])
    count = header[""frame_count""]
    obj = typ.deserialize(header, frames[:count])
    return obj, frames[count:]
```

works to unfold the part of a nested definition. So suppose we were deserializing a column with a categorical dtype:
```python
dtype_header = header[""properties""][""dtype""]
dtype, frames = unpack(dtype_header, frames)
# continue with deserialization of other properties
```

> * You're right that simple `dataclass` constructors won't work for most of our classes like `DataFrame` or `Series`. Those must be constructible from a wide range of objects to match what pandas supports.

One way to square that circle (though it is a big API-breaking change) is to split the munging of data for `__init__` into a free function. That is the API offers:
```
def DataFrame(args):
    # munge args
    processed_args = ...(args)
    return impl.DataFrame(processed_args)
```

~It may well not be worth it, however.~

EDIT: that's not possible due to API constraints (as pointed out below by @shwina).

> It might help to consider whether we could change our classes so that only `Frame` and `BaseIndex` are `Serializable`. `ColumnBase` would still need its current implementation, but we could simplify dtype and `Buffer` logic. We shouldn't need non-API classes to conform to the `dask.distributed` API, and it leads to some incongruities:
> 
> * dtypes include ""frames"" when serializing even though they don't actually have frames of data. The exception is categoricals, which are tricky because they are the only dtype that stores data on device (the categories). We would probably need a special case to support those.

The advantage of everything supporting the same interface is you don't need to do any special-casing. You just recurse calling serialize until the base case is hit. If you don't have this then any dtype-carrying object that needs to be serialized has to `if isinstance(dtype, CategoricalDtype)` I think.

> * Buffers ultimately just insert ""self"" into the frames, so every Column could really just insert its underlying buffer into the frames list and call that good. `Buffer` is an implementation detail of cudf and shouldn't need to conform to the dask API. We really just use the CAI protocol to save and load them anyway. That would remove one additional `serialize` implementation.

I think this would work, since the wire format is to effectively send all the frames out of band and the reconstruct on the other end. The column metadata can include enough information to rebuild/validate the buffer.



",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122105186/reactions,0,0,0,0,0,0,0,0,0,10799
1352,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122153224,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1122153224,https://api.github.com/repos/rapidsai/cudf/issues/10799,1122153224,IC_kwDOBWUGps5C4rMI,2022-05-10T09:30:12Z,2022-05-10T09:30:12Z,CONTRIBUTOR,"> I think what I'm missing is what we are trying to fix here

Initially, I was adding support for serialization that was missing on struct columns (that was #10784). As part of that, the schema for the metadata headers seemed a bit inconsistent. So I am looking at if it is worth investing effort in cleaning that up a bit.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1122153224/reactions,0,0,0,0,0,0,0,0,0,10799
1353,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123552471,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1123552471,https://api.github.com/repos/rapidsai/cudf/issues/10799,1123552471,IC_kwDOBWUGps5C-AzX,2022-05-11T10:34:50Z,2022-05-11T10:34:50Z,CONTRIBUTOR,"Just a drive-by comment here: `DataFrame` needs to be a type (as does `Index`). Unfortunately, we cannot make those into factory free-functions.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123552471/reactions,0,0,0,0,0,0,0,0,0,10799
1354,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123694647,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1123694647,https://api.github.com/repos/rapidsai/cudf/issues/10799,1123694647,IC_kwDOBWUGps5C-jg3,2022-05-11T12:28:44Z,2022-05-11T12:28:44Z,CONTRIBUTOR,"> Just a drive-by comment here: `DataFrame` needs to be a type (as does `Index`). Unfortunately, we cannot make those into factory free-functions.

I'm guessing because code basically relies on `isinstance(foo, cudf.DataFrame)` and the like?",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123694647/reactions,0,0,0,0,0,0,0,0,0,10799
1355,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123849685,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1123849685,https://api.github.com/repos/rapidsai/cudf/issues/10799,1123849685,IC_kwDOBWUGps5C_JXV,2022-05-11T14:30:30Z,2022-05-11T14:30:30Z,CONTRIBUTOR,"Yes -- and also there are classmethods defined on `cudf.DataFrame` that are in the public API; e.g., `cudf.DataFrame.from_pandas()`.

",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123849685/reactions,0,0,0,0,0,0,0,0,0,10799
1356,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152458085,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1152458085,https://api.github.com/repos/rapidsai/cudf/issues/10799,1152458085,IC_kwDOBWUGps5EsR1l,2022-06-10T15:03:39Z,2022-06-10T15:03:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152458085/reactions,0,0,0,0,0,0,0,0,0,10799
1357,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240918696,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1240918696,https://api.github.com/repos/rapidsai/cudf/issues/10799,1240918696,IC_kwDOBWUGps5J9uqo,2022-09-08T16:03:12Z,2022-09-08T16:03:12Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240918696/reactions,0,0,0,0,0,0,0,0,0,10799
1358,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329611937,https://github.com/rapidsai/cudf/issues/10799#issuecomment-1329611937,https://api.github.com/repos/rapidsai/cudf/issues/10799,1329611937,IC_kwDOBWUGps5PQESh,2022-11-28T19:10:06Z,2022-11-28T19:10:06Z,CONTRIBUTOR,I think anything we do here will need to be in tandem with proposed serialisation changes in dask/distributed that are being contemplated. So I'll revisit this then.,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329611937/reactions,0,0,0,0,0,0,0,0,0,10799
1359,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117721937,https://github.com/rapidsai/cudf/issues/10799#issuecomment-2117721937,https://api.github.com/repos/rapidsai/cudf/issues/10799,2117721937,IC_kwDOBWUGps5-Od9R,2024-05-17T14:21:33Z,2024-05-17T14:21:33Z,CONTRIBUTOR,@wence- has anything changed in dask since the last comment to move the needle here?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117721937/reactions,0,0,0,0,0,0,0,0,0,10799
1360,https://api.github.com/repos/rapidsai/cudf/issues/comments/1151238414,https://github.com/rapidsai/cudf/issues/10820#issuecomment-1151238414,https://api.github.com/repos/rapidsai/cudf/issues/10820,1151238414,IC_kwDOBWUGps5EnoEO,2022-06-09T15:03:08Z,2022-06-09T15:03:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1151238414/reactions,0,0,0,0,0,0,0,0,0,10820
1361,https://api.github.com/repos/rapidsai/cudf/issues/comments/1239590335,https://github.com/rapidsai/cudf/issues/10820#issuecomment-1239590335,https://api.github.com/repos/rapidsai/cudf/issues/10820,1239590335,IC_kwDOBWUGps5J4qW_,2022-09-07T16:02:58Z,2022-09-07T16:02:58Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1239590335/reactions,0,0,0,0,0,0,0,0,0,10820
1362,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123543222,https://github.com/rapidsai/cudf/issues/10826#issuecomment-1123543222,https://api.github.com/repos/rapidsai/cudf/issues/10826,1123543222,IC_kwDOBWUGps5C9-i2,2022-05-11T10:29:27Z,2022-05-11T10:29:27Z,CONTRIBUTOR,This looks like an issue that's potentially data dependant. Do you perhaps have a minimal reproducer of the problem?,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1123543222/reactions,0,0,0,0,0,0,0,0,0,10826
1363,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152457952,https://github.com/rapidsai/cudf/issues/10826#issuecomment-1152457952,https://api.github.com/repos/rapidsai/cudf/issues/10826,1152457952,IC_kwDOBWUGps5EsRzg,2022-06-10T15:03:35Z,2022-06-10T15:03:35Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152457952/reactions,0,0,0,0,0,0,0,0,0,10826
1364,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240918637,https://github.com/rapidsai/cudf/issues/10826#issuecomment-1240918637,https://api.github.com/repos/rapidsai/cudf/issues/10826,1240918637,IC_kwDOBWUGps5J9upt,2022-09-08T16:03:08Z,2022-09-08T16:03:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240918637/reactions,0,0,0,0,0,0,0,0,0,10826
1365,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153004838,https://github.com/rapidsai/cudf/issues/10844#issuecomment-1153004838,https://api.github.com/repos/rapidsai/cudf/issues/10844,1153004838,IC_kwDOBWUGps5EuXUm,2022-06-11T22:02:59Z,2022-06-11T22:02:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153004838/reactions,0,0,0,0,0,0,0,0,0,10844
1366,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812846,https://github.com/rapidsai/cudf/issues/10844#issuecomment-1258812846,https://api.github.com/repos/rapidsai/cudf/issues/10844,1258812846,IC_kwDOBWUGps5LB_Wu,2022-09-27T00:19:16Z,2022-09-27T00:19:16Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812846/reactions,0,0,0,0,0,0,0,0,0,10844
1367,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153004828,https://github.com/rapidsai/cudf/issues/10845#issuecomment-1153004828,https://api.github.com/repos/rapidsai/cudf/issues/10845,1153004828,IC_kwDOBWUGps5EuXUc,2022-06-11T22:02:57Z,2022-06-11T22:02:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153004828/reactions,0,0,0,0,0,0,0,0,0,10845
1368,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812825,https://github.com/rapidsai/cudf/issues/10845#issuecomment-1258812825,https://api.github.com/repos/rapidsai/cudf/issues/10845,1258812825,IC_kwDOBWUGps5LB_WZ,2022-09-27T00:19:15Z,2022-09-27T00:19:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812825/reactions,0,0,0,0,0,0,0,0,0,10845
1369,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128835517,https://github.com/rapidsai/cudf/issues/10849#issuecomment-1128835517,https://api.github.com/repos/rapidsai/cudf/issues/10849,1128835517,IC_kwDOBWUGps5DSKm9,2022-05-17T12:56:52Z,2022-05-17T12:56:52Z,CONTRIBUTOR,"The silently bad behaviour was turned into actual `logic_error`s in #10850, it would still be possible to support more fortran-order or broadcasted inputs if desired.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128835517/reactions,0,0,0,0,0,0,0,0,0,10849
1370,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157648189,https://github.com/rapidsai/cudf/issues/10849#issuecomment-1157648189,https://api.github.com/repos/rapidsai/cudf/issues/10849,1157648189,IC_kwDOBWUGps5FAE89,2022-06-16T13:14:26Z,2022-06-16T13:14:26Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157648189/reactions,0,0,0,0,0,0,0,0,0,10849
1371,https://api.github.com/repos/rapidsai/cudf/issues/comments/1269819762,https://github.com/rapidsai/cudf/issues/10849#issuecomment-1269819762,https://api.github.com/repos/rapidsai/cudf/issues/10849,1269819762,IC_kwDOBWUGps5Lr-ly,2022-10-06T11:04:15Z,2022-10-06T11:04:15Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1269819762/reactions,0,0,0,0,0,0,0,0,0,10849
1372,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153279201,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1153279201,https://api.github.com/repos/rapidsai/cudf/issues/10852,1153279201,IC_kwDOBWUGps5EvaTh,2022-06-12T20:03:41Z,2022-06-12T20:03:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1153279201/reactions,0,0,0,0,0,0,0,0,0,10852
1373,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155275760,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1155275760,https://api.github.com/repos/rapidsai/cudf/issues/10852,1155275760,IC_kwDOBWUGps5E3Bvw,2022-06-14T14:32:21Z,2022-06-14T14:32:21Z,CONTRIBUTOR,This is still wanted,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155275760/reactions,0,0,0,0,0,0,0,0,0,10852
1374,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155293281,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1155293281,https://api.github.com/repos/rapidsai/cudf/issues/10852,1155293281,IC_kwDOBWUGps5E3GBh,2022-06-14T14:45:05Z,2022-06-14T14:45:05Z,CONTRIBUTOR,@revans2 And what about this one? https://github.com/rapidsai/cudf/pull/10808#discussion_r876183672,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1155293281/reactions,0,0,0,0,0,0,0,0,0,10852
1375,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168244253,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1168244253,https://api.github.com/repos/rapidsai/cudf/issues/10852,1168244253,IC_kwDOBWUGps5Fof4d,2022-06-28T05:32:12Z,2022-06-28T05:32:12Z,CONTRIBUTOR,Closing after [discussion](https://github.com/rapidsai/cudf/pull/10808#discussion_r906356500) in #10808,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168244253/reactions,0,0,0,0,0,0,0,0,0,10852
1376,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168649767,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1168649767,https://api.github.com/repos/rapidsai/cudf/issues/10852,1168649767,IC_kwDOBWUGps5FqC4n,2022-06-28T12:20:16Z,2022-06-28T12:20:16Z,CONTRIBUTOR,The #10808 was the API that I built that was not useful. This feature describes the actual desired API from Spark.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1168649767/reactions,1,1,0,0,0,0,0,0,0,10852
1377,https://api.github.com/repos/rapidsai/cudf/issues/comments/1214448285,https://github.com/rapidsai/cudf/issues/10852#issuecomment-1214448285,https://api.github.com/repos/rapidsai/cudf/issues/10852,1214448285,IC_kwDOBWUGps5IYwKd,2022-08-14T21:03:14Z,2022-08-14T21:03:14Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1214448285/reactions,0,0,0,0,0,0,0,0,0,10852
1378,https://api.github.com/repos/rapidsai/cudf/issues/comments/1127662771,https://github.com/rapidsai/cudf/issues/10858#issuecomment-1127662771,https://api.github.com/repos/rapidsai/cudf/issues/10858,1127662771,IC_kwDOBWUGps5DNsSz,2022-05-16T13:17:56Z,2022-05-16T13:17:56Z,CONTRIBUTOR,cc: @davidwendt is this currently expected memory overhead?,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1127662771/reactions,0,0,0,0,0,0,0,0,0,10858
1379,https://api.github.com/repos/rapidsai/cudf/issues/comments/1127781043,https://github.com/rapidsai/cudf/issues/10858#issuecomment-1127781043,https://api.github.com/repos/rapidsai/cudf/issues/10858,1127781043,IC_kwDOBWUGps5DOJKz,2022-05-16T14:57:25Z,2022-05-16T17:16:03Z,CONTRIBUTOR,"Yes, this is the expected memory overhead. From what I can tell, the working memory size math looks like the following:
```
(bytes  * 3 * sizeof(uint32)) +  (bytes * sizeof(uint32)) = (bytes * 12) + (bytes * 4) = bytes * 16
where bytes = number of bytes in the chars child column
```
So the working memory required is ~16x the number of bytes in the strings column.
This does not include any working memory required by various thrust calls or the size of the output column.
My recommendation would be to slice the column and then call normalize on the slices. 
Use the 16x math to help determine the slices.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1127781043/reactions,0,0,0,0,0,0,0,0,0,10858
1380,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156774073,https://github.com/rapidsai/cudf/issues/10858#issuecomment-1156774073,https://api.github.com/repos/rapidsai/cudf/issues/10858,1156774073,IC_kwDOBWUGps5E8vi5,2022-06-15T18:03:11Z,2022-06-15T18:03:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1156774073/reactions,0,0,0,0,0,0,0,0,0,10858
1381,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166218159,https://github.com/rapidsai/cudf/issues/10858#issuecomment-1166218159,https://api.github.com/repos/rapidsai/cudf/issues/10858,1166218159,IC_kwDOBWUGps5FgxOv,2022-06-25T07:46:23Z,2022-06-25T07:46:23Z,MEMBER,"Hi! 

I think this issue is still relevant. IMHO, a 16x memory requirement for a normalize characters operation is a bit high.

Could anyone please consider an alternative implementation? Thanks!",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166218159/reactions,0,0,0,0,0,0,0,0,0,10858
1382,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193719330,https://github.com/rapidsai/cudf/issues/10858#issuecomment-1193719330,https://api.github.com/repos/rapidsai/cudf/issues/10858,1193719330,IC_kwDOBWUGps5HJrYi,2022-07-25T08:03:53Z,2022-07-25T08:03:53Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193719330/reactions,0,0,0,0,0,0,0,0,0,10858
1383,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117698454,https://github.com/rapidsai/cudf/issues/10858#issuecomment-2117698454,https://api.github.com/repos/rapidsai/cudf/issues/10858,2117698454,IC_kwDOBWUGps5-OYOW,2024-05-17T14:10:53Z,2024-05-17T14:10:53Z,CONTRIBUTOR,"@davidwendt I see that you've assigned yourself, did you spend any time considering alternative implementations here? Is this an issue for which you think we could use memory more sparingly with a suitable alternative implementation, or is there some fundamental blocker that would make this unfixable?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117698454/reactions,0,0,0,0,0,0,0,0,0,10858
1384,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118581771,https://github.com/rapidsai/cudf/issues/10858#issuecomment-2118581771,https://api.github.com/repos/rapidsai/cudf/issues/10858,2118581771,IC_kwDOBWUGps5-Rv4L,2024-05-18T01:59:03Z,2024-05-18T01:59:03Z,CONTRIBUTOR,"Yes, I believe there are alternative implementations that could reduce memory usage.
There is no fundamental blocker -- just priority and time. ",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118581771/reactions,0,0,0,0,0,0,0,0,0,10858
1385,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121335893,https://github.com/rapidsai/cudf/issues/10858#issuecomment-2121335893,https://api.github.com/repos/rapidsai/cudf/issues/10858,2121335893,IC_kwDOBWUGps5-cQRV,2024-05-20T22:41:54Z,2024-05-20T22:41:54Z,CONTRIBUTOR,Cool. Marking as backlogged.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121335893/reactions,0,0,0,0,0,0,0,0,0,10858
1386,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157648092,https://github.com/rapidsai/cudf/issues/10867#issuecomment-1157648092,https://api.github.com/repos/rapidsai/cudf/issues/10867,1157648092,IC_kwDOBWUGps5FAE7c,2022-06-16T13:14:21Z,2022-06-16T13:14:21Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157648092/reactions,0,0,0,0,0,0,0,0,0,10867
1387,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246752507,https://github.com/rapidsai/cudf/issues/10867#issuecomment-1246752507,https://api.github.com/repos/rapidsai/cudf/issues/10867,1246752507,IC_kwDOBWUGps5KT-77,2022-09-14T13:17:37Z,2022-09-14T13:17:37Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246752507/reactions,0,0,0,0,0,0,0,0,0,10867
1388,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291072346,https://github.com/rapidsai/cudf/issues/10867#issuecomment-1291072346,https://api.github.com/repos/rapidsai/cudf/issues/10867,1291072346,IC_kwDOBWUGps5M9DNa,2022-10-25T20:03:04Z,2022-10-25T20:03:04Z,MEMBER,If this is still and issue can you @miguelusque post and example file here ?,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291072346/reactions,0,0,0,0,0,0,0,0,0,10867
1389,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128909161,https://github.com/rapidsai/cudf/issues/10874#issuecomment-1128909161,https://api.github.com/repos/rapidsai/cudf/issues/10874,1128909161,IC_kwDOBWUGps5DSclp,2022-05-17T14:00:35Z,2022-05-17T15:13:44Z,CONTRIBUTOR,"This wouldn't be possible with the existing [`from_dlpack`](https://github.com/rapidsai/cudf/blob/6352b4efa3169bcf9174d5073b8879841a7ad6ff/cpp/include/cudf/interop.hpp#L52-L54) function in libcudf as it always returns a `unique_ptr<column>` that expects to own the data.

That said, we could add a `view_dlpack` function that returns a `column_view/table_view`.

I think a non-copying `to_dlpack` could also be possible by adding an overload of `to_dlpack` that takes a `column&&` or `table&&` and therefore takes ownership of those objects and gives it to the returned `DLManagedTensor` object. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1128909161/reactions,1,0,0,0,0,0,0,0,1,10874
1390,https://api.github.com/repos/rapidsai/cudf/issues/comments/1129027912,https://github.com/rapidsai/cudf/issues/10874#issuecomment-1129027912,https://api.github.com/repos/rapidsai/cudf/issues/10874,1129027912,IC_kwDOBWUGps5DS5lI,2022-05-17T15:42:27Z,2022-05-17T15:42:27Z,CONTRIBUTOR,"> I think a non-copying to_dlpack could also be possible by adding an overload of to_dlpack that takes a column&& or table&& and therefore takes ownership of those objects and gives it to the returned DLManagedTensor object.

I don't think this would work for Python since we never own any column objects ourselves.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1129027912/reactions,0,0,0,0,0,0,0,0,0,10874
1391,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157846848,https://github.com/rapidsai/cudf/issues/10874#issuecomment-1157846848,https://api.github.com/repos/rapidsai/cudf/issues/10874,1157846848,IC_kwDOBWUGps5FA1dA,2022-06-16T16:03:23Z,2022-06-16T16:03:23Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157846848/reactions,0,0,0,0,0,0,0,0,0,10874
1392,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812797,https://github.com/rapidsai/cudf/issues/10874#issuecomment-1258812797,https://api.github.com/repos/rapidsai/cudf/issues/10874,1258812797,IC_kwDOBWUGps5LB_V9,2022-09-27T00:19:12Z,2022-09-27T00:19:12Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258812797/reactions,0,0,0,0,0,0,0,0,0,10874
1393,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109042752,https://github.com/rapidsai/cudf/issues/10874#issuecomment-2109042752,https://api.github.com/repos/rapidsai/cudf/issues/10874,2109042752,IC_kwDOBWUGps59tXBA,2024-05-14T00:19:18Z,2024-05-17T14:57:29Z,CONTRIBUTOR,This work is adjacent to #10849,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109042752/reactions,0,0,0,0,0,0,0,0,0,10874
1394,https://api.github.com/repos/rapidsai/cudf/issues/comments/1131175960,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1131175960,https://api.github.com/repos/rapidsai/cudf/issues/10892,1131175960,IC_kwDOBWUGps5DbGAY,2022-05-19T04:00:48Z,2022-05-19T04:00:48Z,CONTRIBUTOR,Reference: https://github.com/rapidsai/cudf/pull/10883#discussion_r876570411,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1131175960/reactions,0,0,0,0,0,0,0,0,0,10892
1395,https://api.github.com/repos/rapidsai/cudf/issues/comments/1131192623,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1131192623,https://api.github.com/repos/rapidsai/cudf/issues/10892,1131192623,IC_kwDOBWUGps5DbKEv,2022-05-19T04:35:56Z,2022-05-19T04:35:56Z,CONTRIBUTOR,This issue depends on https://github.com/rapidsai/cudf/issues/10893,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1131192623/reactions,0,0,0,0,0,0,0,0,0,10892
1396,https://api.github.com/repos/rapidsai/cudf/issues/comments/1159363351,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1159363351,https://api.github.com/repos/rapidsai/cudf/issues/10892,1159363351,IC_kwDOBWUGps5FGnsX,2022-06-18T05:02:42Z,2022-06-18T05:02:42Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1159363351/reactions,0,0,0,0,0,0,0,0,0,10892
1397,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217233559,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1217233559,https://api.github.com/repos/rapidsai/cudf/issues/10892,1217233559,IC_kwDOBWUGps5IjYKX,2022-08-16T22:27:36Z,2022-08-16T22:27:45Z,CONTRIBUTOR,"This should be worked on. Without a comparator for tables/columns and scalars, lifetime management of a column derived from the scalar gets very awkward. https://github.com/rapidsai/cudf/blob/ee15d1c10b51169abe26b1fa052ae568296696d5/cpp/src/lists/contains.cu#L251-L268

I commented here:
https://github.com/rapidsai/cudf/pull/10548/files#r946174668

> Upon further investigation: the current state is quite yucky, with lifetime management for one code path but not the other. We should be able to handle this a different way, by making a comparator that accepts a scalar, owns the temporary column, and accepts one index (for the column/table input). Centralizing lifetime management in the comparator has been part of our existing designs, so that's probably good to continue.
> There aren't a lot of alternatives I can see without improving this at the comparator level, but it's pretty gross in the current state.
",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217233559/reactions,0,0,0,0,0,0,0,0,0,10892
1398,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217273963,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1217273963,https://api.github.com/repos/rapidsai/cudf/issues/10892,1217273963,IC_kwDOBWUGps5IjiBr,2022-08-16T23:33:29Z,2022-08-16T23:33:29Z,CONTRIBUTOR,Note that this issue is relevant not just for equality comparison but for lexicographic comparison. Usage of that case can be binary searching or many other comparison cases involving scalar.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217273963/reactions,0,0,0,0,0,0,0,0,0,10892
1399,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248776374,https://github.com/rapidsai/cudf/issues/10892#issuecomment-1248776374,https://api.github.com/repos/rapidsai/cudf/issues/10892,1248776374,IC_kwDOBWUGps5KbtC2,2022-09-16T00:16:10Z,2022-09-16T00:16:10Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248776374/reactions,0,0,0,0,0,0,0,0,0,10892
1400,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146248457,https://github.com/rapidsai/cudf/issues/10908#issuecomment-1146248457,https://api.github.com/repos/rapidsai/cudf/issues/10908,1146248457,IC_kwDOBWUGps5EUl0J,2022-06-03T18:29:54Z,2022-06-03T18:29:54Z,MEMBER,I suspect this is a good first issue,,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146248457/reactions,0,0,0,0,0,0,0,0,0,10908
1401,https://api.github.com/repos/rapidsai/cudf/issues/comments/1134867434,https://github.com/rapidsai/cudf/issues/10920#issuecomment-1134867434,https://api.github.com/repos/rapidsai/cudf/issues/10920,1134867434,IC_kwDOBWUGps5DpLPq,2022-05-23T16:08:31Z,2022-05-23T16:08:31Z,CONTRIBUTOR,"Note that this discussion isn't unique to distributed computing. It applies to any form of ""partitioned"" input, e.g., even if you're doing ""out of core"" computing on a single GPU. 

I've also disliked the need for the separate `MERGE_*` aggregations. While I'm not convinced on the proposed spelling, I do think that something like parameterizing the aggregation is a good direction to explore. 

The other thing I'd note is that our primary consumers of aggregation APIs do their own logic for implementing partitioned aggregations. 

If we tried to hide too much of the details of the partitioned aggregation internals from them, it would become unusable. For instance, neither Dask nor Spark call libcudf's `mean_aggregation`. They compute the `sum/count` themselves and do the elementwise division. Obviously we would never eliminate `sum/count` as independent aggregations, but it does illustrate that a consumer of libcudf may have a preferred way of deriving their final result that would differ from the proposal here. 

I'll have to think on this some more and come back with a more complete response. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1134867434/reactions,0,0,0,0,0,0,0,0,0,10920
1402,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163393366,https://github.com/rapidsai/cudf/issues/10920#issuecomment-1163393366,https://api.github.com/repos/rapidsai/cudf/issues/10920,1163393366,IC_kwDOBWUGps5FV_lW,2022-06-22T17:07:45Z,2022-06-22T17:07:45Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163393366/reactions,0,0,0,0,0,0,0,0,0,10920
1403,https://api.github.com/repos/rapidsai/cudf/issues/comments/1252652077,https://github.com/rapidsai/cudf/issues/10920#issuecomment-1252652077,https://api.github.com/repos/rapidsai/cudf/issues/10920,1252652077,IC_kwDOBWUGps5KqfQt,2022-09-20T17:08:47Z,2022-09-20T17:08:47Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1252652077/reactions,0,0,0,0,0,0,0,0,0,10920
1404,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166326147,https://github.com/rapidsai/cudf/issues/10977#issuecomment-1166326147,https://api.github.com/repos/rapidsai/cudf/issues/10977,1166326147,IC_kwDOBWUGps5FhLmD,2022-06-25T17:03:37Z,2022-06-25T17:03:37Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1166326147/reactions,0,0,0,0,0,0,0,0,0,10977
1405,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258956153,https://github.com/rapidsai/cudf/issues/10977#issuecomment-1258956153,https://api.github.com/repos/rapidsai/cudf/issues/10977,1258956153,IC_kwDOBWUGps5LCiV5,2022-09-27T04:31:58Z,2022-09-27T04:31:58Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258956153/reactions,0,0,0,0,0,0,0,0,0,10977
1406,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142321398,https://github.com/rapidsai/cudf/issues/11008#issuecomment-1142321398,https://api.github.com/repos/rapidsai/cudf/issues/11008,1142321398,IC_kwDOBWUGps5EFnD2,2022-05-31T15:59:53Z,2022-05-31T16:02:26Z,CONTRIBUTOR,">  The functions are not simple function with one arguement but more complex operation.

What kinds of operations do you have in mind?

Generic UDFs on lists are nearly impossible to parallelize as the user-defined function is effectively a black-box that would need to be executed serially across each list. Therefore, the amount of parallelism would be limited to just the number of lists and performance would be very poor on the GPU (it could easily be slower than the CPU).

It is a similar situation with strings, which is why we have numerous [built-in, optimized string functions](https://docs.rapids.ai/api/cudf/nightly/api_docs/string_handling.html). 

We have some [built-in list functions](https://docs.rapids.ai/api/cudf/nightly/api_docs/series.html#list-handling) that are much better performing. You will have much better luck if you can find a way to express your problem in terms of these operations. There are many such operations implemented in the C++ layer that are not yet exposed to Python yet. So if there is functionality missing in these bulk functions, don't hesitate to ask as we may already have it and would just need to expose it to Python. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142321398/reactions,0,0,0,0,0,0,0,0,0,11008
1407,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198792792,https://github.com/rapidsai/cudf/issues/11008#issuecomment-1198792792,https://api.github.com/repos/rapidsai/cudf/issues/11008,1198792792,IC_kwDOBWUGps5HdCBY,2022-07-29T01:32:46Z,2022-07-29T01:32:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198792792/reactions,0,0,0,0,0,0,0,0,0,11008
1408,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142462535,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142462535,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142462535,IC_kwDOBWUGps5EGJhH,2022-05-31T18:13:35Z,2022-05-31T18:13:44Z,CONTRIBUTOR,Tag directly related devs: @devavret @jrhemstad @bdice.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142462535/reactions,0,0,0,0,0,0,0,0,0,11012
1409,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142475548,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142475548,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142475548,IC_kwDOBWUGps5EGMsc,2022-05-31T18:17:57Z,2022-05-31T18:17:57Z,CONTRIBUTOR,The only reason it was one monolithic header is because it was a replacement of the single `row_operators.cuh` header. Splitting it is fine. We might need to keep equality and hashing in the same header because they use each other's pre-processed table ,,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142475548/reactions,0,0,0,0,0,0,0,0,0,11012
1410,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142491240,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142491240,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142491240,IC_kwDOBWUGps5EGQho,2022-05-31T18:21:19Z,2022-05-31T18:23:33Z,CONTRIBUTOR,"Then the hashing header can just include the equality header. Some source files just need equality comparison.

Wait: Using each other table? Then I'm not sure...",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142491240/reactions,1,1,0,0,0,0,0,0,0,11012
1411,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142535841,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142535841,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142535841,IC_kwDOBWUGps5EGbah,2022-05-31T19:00:56Z,2022-05-31T19:00:56Z,CONTRIBUTOR,This idea seems fine to me. We'll want to make sure that the designs stay parallel (wherever possible) despite being in separate files.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142535841/reactions,0,0,0,0,0,0,0,0,0,11012
1412,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142542648,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142542648,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142542648,IC_kwDOBWUGps5EGdE4,2022-05-31T19:08:44Z,2022-05-31T19:08:44Z,CONTRIBUTOR,Thanks all. Then I'll go ahead and do this split. Will have a PR up shortly.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142542648/reactions,0,0,0,0,0,0,0,0,0,11012
1413,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142582484,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1142582484,https://api.github.com/repos/rapidsai/cudf/issues/11012,1142582484,IC_kwDOBWUGps5EGmzU,2022-05-31T19:54:11Z,2022-05-31T19:54:11Z,CONTRIBUTOR,"I'm fine with this, but let's wait on splitting them up until we are ready to move them out of ""experimental"". Then we can split them as we move their namespaces. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1142582484/reactions,1,1,0,0,0,0,0,0,0,11012
1414,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198864976,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1198864976,https://api.github.com/repos/rapidsai/cudf/issues/11012,1198864976,IC_kwDOBWUGps5HdTpQ,2022-07-29T04:21:32Z,2022-07-29T04:21:32Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198864976/reactions,0,0,0,0,0,0,0,0,0,11012
1415,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287328592,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1287328592,https://api.github.com/repos/rapidsai/cudf/issues/11012,1287328592,IC_kwDOBWUGps5MuxNQ,2022-10-21T18:54:38Z,2022-10-21T18:54:38Z,CONTRIBUTOR,"I believe that addressing this is blocked on #11844, or at least should be conditioned on addressing that issue. Once the newer comparators are used everywhere, we can remove the old comparators and move the new ones into the places that we want them.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287328592/reactions,1,1,0,0,0,0,0,0,0,11012
1416,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423429058,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1423429058,https://api.github.com/repos/rapidsai/cudf/issues/11012,1423429058,IC_kwDOBWUGps5U183C,2023-02-09T00:33:29Z,2023-02-09T00:33:29Z,MEMBER,"@vyasr @bdice @ttnghia @GregoryKimball 

I am about to go ahead and start on this issue, please let me know your thoughts. I prefer breaking these up as:

- `lexicographical/row_operators.cuh`
- `equality/row_operators.cuh`
- `hash/row_operators.cuh`

The reason I prefer to split them up this way is that we will be mirroring the sub-directory structure with the namespaces.

Any common code can be present in `row_operators_common.cuh/hpp`.

Furthermore, in my PR I will add some redundancy if any code in `experimental` relies on the current version of `row_operators.cuh` by copying over those sections. By doing this, when we are ready to drop `experimental`, we just delete the old `row_operators.cuh`, move up contents of `experimental` to the parent directory, and perform simple find-and-replace to remove `experimental::` from the call sites.",,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423429058/reactions,0,0,0,0,0,0,0,0,0,11012
1417,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426290414,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426290414,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426290414,IC_kwDOBWUGps5VA3bu,2023-02-10T20:15:25Z,2023-02-10T20:15:25Z,CONTRIBUTOR,"I have a slight preference for subdirectories over underscores as well, and I am fine with the temporary duplication.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426290414/reactions,0,0,0,0,0,0,0,0,0,11012
1418,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426298001,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426298001,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426298001,IC_kwDOBWUGps5VA5SR,2023-02-10T20:23:17Z,2023-02-10T20:23:17Z,CONTRIBUTOR,"This proposal sounds fine to me. Roughly how far are we from migrating entirely to ""experimental"" comparators? Are there any hard cases left, or are all the remaining instances relatively straightforward?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426298001/reactions,0,0,0,0,0,0,0,0,0,11012
1419,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426301134,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426301134,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426301134,IC_kwDOBWUGps5VA6DO,2023-02-10T20:26:00Z,2023-02-10T20:26:00Z,MEMBER,"@bdice there are a couple of hard cases left. The most notorious one being joins. The actual update is easy, of course, but it's going to be difficult testing each and every single join for nested types in terms of it being a mechanical, time consuming process.

That being said, I'm hoping we can drop experimental by the very end of 23.04 release, or very start of 23.06 release.",,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426301134/reactions,0,0,0,0,0,0,0,0,0,11012
1420,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426357722,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426357722,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426357722,IC_kwDOBWUGps5VBH3a,2023-02-10T21:17:22Z,2023-02-10T21:17:22Z,CONTRIBUTOR,"So you're proposing:
```
lexicographic/row_operators.cuh
equality/row_operators.cuh
...
```
instead of
```
row_operators/common.cuh
row_operators/lexicographic.cuh
...
```

Then what other files will be in these directories (`lexicographic/`, `equality/`,  etc)? And where the `row_operators_common.cuh/hpp` files will be placed?",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426357722/reactions,0,0,0,0,0,0,0,0,0,11012
1421,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426359900,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426359900,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426359900,IC_kwDOBWUGps5VBIZc,2023-02-10T21:19:59Z,2023-02-10T21:21:03Z,MEMBER,"@ttnghia no other files for now, but giving us the option to have comparator-specific files to put in these sub-directories in the future.

`row_operators_common.cuh/hpp` file will be in the parent directory, which in this case is: `cudf/include/table/`

I suggest this because the namespacing is super confusing right now. `row::lexicographic::...` but we have no directories called `row` or `lexicographic`",,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426359900/reactions,0,0,0,0,0,0,0,0,0,11012
1422,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426376649,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426376649,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426376649,IC_kwDOBWUGps5VBMfJ,2023-02-10T21:39:43Z,2023-02-10T21:40:05Z,CONTRIBUTOR,The namespace does not always align with directories. You can see many files like `cudf/detail/something.hpp` vs `cudf/something/detail/something_detail.hpp` which all have the same namespace hierarchy.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426376649/reactions,0,0,0,0,0,0,0,0,0,11012
1423,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426524040,https://github.com/rapidsai/cudf/issues/11012#issuecomment-1426524040,https://api.github.com/repos/rapidsai/cudf/issues/11012,1426524040,IC_kwDOBWUGps5VBweI,2023-02-11T00:20:15Z,2023-02-11T00:20:15Z,MEMBER,"That is a specific structure of the `detail` API that libcudf follows - I don't see where else cudf doesn't follow namespace <-> directory.

Alternatively, I would also be okay with `row/lexicographic.cuh` to follow the namespace `row::lexicographic`.

While I have been doing these updates to the experimental API, I *always* forget what the actual namespace of the comparators are because they don't make any sense when it comes to the directory/file naming.",,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426524040/reactions,0,0,0,0,0,0,0,0,0,11012
1424,https://api.github.com/repos/rapidsai/cudf/issues/comments/1143052343,https://github.com/rapidsai/cudf/issues/11016#issuecomment-1143052343,https://api.github.com/repos/rapidsai/cudf/issues/11016,1143052343,IC_kwDOBWUGps5EIZg3,2022-06-01T02:30:15Z,2022-06-01T02:30:15Z,CONTRIBUTOR,"There was mentioned that the current cudf's customized data structure `unordered_multiset` is still much faster than `cuco::static_map`. Since the code path for handling nested types relies on `cuco::static_map`, we can only address this issue once we can safely switch to using `cuco::static_map` without much performance regression.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1143052343/reactions,0,0,0,0,0,0,0,0,0,11016
1425,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198864957,https://github.com/rapidsai/cudf/issues/11016#issuecomment-1198864957,https://api.github.com/repos/rapidsai/cudf/issues/11016,1198864957,IC_kwDOBWUGps5HdTo9,2022-07-29T04:21:31Z,2022-07-29T04:21:31Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198864957/reactions,0,0,0,0,0,0,0,0,0,11016
1426,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287156568,https://github.com/rapidsai/cudf/issues/11016#issuecomment-1287156568,https://api.github.com/repos/rapidsai/cudf/issues/11016,1287156568,IC_kwDOBWUGps5MuHNY,2022-10-21T15:59:14Z,2022-10-21T15:59:14Z,CONTRIBUTOR,"The other part of what needs to happen here (in addition to resolving performance regressions caused by differences between `cuco::static_map` and `concurrent_unordered_map`) is to introduce the same sort of `has_nested` templating to the equality comparators as I did for the lexicographic comparator. Then, rather than maintaining a completely separate code path in contains where one uses the old comparator and one uses the new one, we could use the same comparator in both cases.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287156568/reactions,0,0,0,0,0,0,0,0,0,11016
1427,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146080066,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146080066,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146080066,IC_kwDOBWUGps5ET8tC,2022-06-03T15:31:05Z,2022-06-03T15:31:05Z,CONTRIBUTOR,@bdice @rwlee @devavret ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146080066/reactions,0,0,0,0,0,0,0,0,0,11040
1428,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146141063,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146141063,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146141063,IC_kwDOBWUGps5EULmH,2022-06-03T16:11:20Z,2022-06-03T16:11:20Z,CONTRIBUTOR,"Staring at this some more and thinking about names for the ""owning"" comparators I realized that there is effectively no reason for them to exist. 

Once you make the callables freestanding types, the only purpose of the owning comparators is to add the minor convenience of not needing to construct the preprocessed tables yourself. Otherwise we can eliminate them entirely. 

```
// self
table_view input_table{...};
preprocessed_table processed_input{input_table}; // ""Expensive"" construction that does necessary pre-processing and allocations
auto callable = cudf::row::self::less{p}; // ""Cheap"" construction that _views_ the internals of the preprocessed table
thrust::sort(..., callable);
...
// two table
table_view lhs{...};
table_view rhs{...};
auto lhs_processed = preprocessed_table{lhs};
auto rhs_processed = preprocessed_table{rhs};
auto callable = cudf::row::two::less{lhs_processed, rhs_processed};
thrust::merge(..., callable);
```

I have an idea of how we can get rid of needing to be explicit about `self` vs `two_table` as well that I need to explore some more. 
",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146141063/reactions,0,0,0,0,0,0,0,0,0,11040
1429,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146150794,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146150794,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146150794,IC_kwDOBWUGps5EUN-K,2022-06-03T16:23:34Z,2022-06-03T16:23:34Z,CONTRIBUTOR,"> Staring at this some more and thinking about names for the ""owning"" comparators I realized that there is effectively no reason for them to exist.

This is how I was thinking of designing this originally. ",,devavret,3027195,MDQ6VXNlcjMwMjcxOTU=,https://avatars.githubusercontent.com/u/3027195?v=4,,https://api.github.com/users/devavret,https://github.com/devavret,https://api.github.com/users/devavret/followers,https://api.github.com/users/devavret/following{/other_user},https://api.github.com/users/devavret/gists{/gist_id},https://api.github.com/users/devavret/starred{/owner}{/repo},https://api.github.com/users/devavret/subscriptions,https://api.github.com/users/devavret/orgs,https://api.github.com/users/devavret/repos,https://api.github.com/users/devavret/events{/privacy},https://api.github.com/users/devavret/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146150794/reactions,0,0,0,0,0,0,0,0,0,11040
1430,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146153725,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146153725,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146153725,IC_kwDOBWUGps5EUOr9,2022-06-03T16:27:15Z,2022-06-03T16:27:15Z,CONTRIBUTOR,"I would prefer some other term like `comparator_builder` for the owning ones. So you create just one builder that provides any type of comparator that you need later on, or even to share its preprocessed data.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146153725/reactions,0,0,0,0,0,0,0,0,0,11040
1431,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146157072,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146157072,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146157072,IC_kwDOBWUGps5EUPgQ,2022-06-03T16:31:23Z,2022-06-03T16:31:23Z,CONTRIBUTOR,"Alright, here's how we can get rid of the owning comparator types all together (obviously keeping the `preprocessed_table` owning type) _and_ get rid of the user-facing ""two-table"" vs ""self"" comparators.

https://godbolt.org/z/fz1veocdc

The main idea is to just infer ""self"" vs ""two-table"" based on how many tables are passed to the `less` constructor. Using deduction guides we can steer these two situations to two different partial specializations of the `less` template. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146157072/reactions,0,0,0,0,0,0,0,0,0,11040
1432,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146180007,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146180007,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146180007,IC_kwDOBWUGps5EUVGn,2022-06-03T16:59:33Z,2022-06-03T17:00:20Z,CONTRIBUTOR,"IMO, it looks more _natural_ to do it this way:
```
auto builder = ...;
auto comp = builder.less(); // builder.equal();
```
than doing this way:
```
auto  lhs = preprocessed_data{...}; // <= what data? why preprocessed?
auto  rhs = preprocessed_data{...};
auto comp = less{lhs, rhs};
```

Maybe I missed some key insight here?",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146180007/reactions,0,0,0,0,0,0,0,0,0,11040
1433,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146201723,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1146201723,https://api.github.com/repos/rapidsai/cudf/issues/11040,1146201723,IC_kwDOBWUGps5EUaZ7,2022-06-03T17:28:02Z,2022-06-03T17:33:26Z,CONTRIBUTOR,"Cuts both ways :) 
```
auto builder = ...; //  what builder? Why build? 
auto comp = builder.less(); // less? Is this a predicate? builder is less than what? 
```

Furthermore, the `preprocessed_data` was just a shorthand for the proof of concept. The real code would still keep the `preprocessed_table` nomenclature. 
```
table_view lhs, rhs;
auto lhs_processed = preprocessed_table{lhs};
auto rhs_processed = preprocessed_table{rhs};
auto callable = less{lhs_processed, rhs_processed};
```

Also, if you want to reuse the same preprocessed tables with a builder it becomes even more code:
```
table_view lhs, rhs;
auto lhs_processed = preprocessed_table{lhs};
auto rhs_processed = preprocessed_table{rhs};
auto builder = build{lhs_processed, rhs_processed};
auto comp = builder.less();
```

All the ""builder"" does is hide the construction of the `preprocessed_table` in some situations. That does provide some minor convenience, but imo not enough to make it worth all the extra code and complexity of providing the builder.

Also, with a ""builder"" it's not clear what it's lifetime requirements are. Is it owning? How long do I need to keep it alive?

Constructing the `preprocessed_table` makes it explicit to the caller that this is an object that needs to be kept alive.",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1146201723/reactions,0,0,0,0,0,0,0,0,0,11040
1434,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173145508,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1173145508,https://api.github.com/repos/rapidsai/cudf/issues/11040,1173145508,IC_kwDOBWUGps5F7Mek,2022-07-03T18:03:17Z,2022-07-03T18:03:17Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173145508/reactions,0,0,0,0,0,0,0,0,0,11040
1435,https://api.github.com/repos/rapidsai/cudf/issues/comments/1264454516,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1264454516,https://api.github.com/repos/rapidsai/cudf/issues/11040,1264454516,IC_kwDOBWUGps5LXgt0,2022-10-01T19:04:27Z,2022-10-01T19:04:27Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1264454516/reactions,0,0,0,0,0,0,0,0,0,11040
1436,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287150055,https://github.com/rapidsai/cudf/issues/11040#issuecomment-1287150055,https://api.github.com/repos/rapidsai/cudf/issues/11040,1287150055,IC_kwDOBWUGps5MuFnn,2022-10-21T15:52:40Z,2022-10-21T15:52:40Z,CONTRIBUTOR,One additional consideration that came up here during the implementation of the list lexicographic comparator is the need for separate code paths for when the compared tables contain nested data to avoid slowdowns of the non-nested data case due to the compiler's inability to sufficiently inline and optimize the complex code paths involving nested types. Whatever approach we take here will need to account for that as well.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287150055/reactions,0,0,0,0,0,0,0,0,0,11040
1437,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179392874,https://github.com/rapidsai/cudf/issues/11061#issuecomment-1179392874,https://api.github.com/repos/rapidsai/cudf/issues/11061,1179392874,IC_kwDOBWUGps5GTBtq,2022-07-08T22:02:57Z,2022-07-08T22:02:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179392874/reactions,0,0,0,0,0,0,0,0,0,11061
1438,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270744446,https://github.com/rapidsai/cudf/issues/11061#issuecomment-1270744446,https://api.github.com/repos/rapidsai/cudf/issues/11061,1270744446,IC_kwDOBWUGps5LvgV-,2022-10-06T22:03:12Z,2022-10-06T22:03:12Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270744446/reactions,0,0,0,0,0,0,0,0,0,11061
1439,https://api.github.com/repos/rapidsai/cudf/issues/comments/1178161302,https://github.com/rapidsai/cudf/issues/11071#issuecomment-1178161302,https://api.github.com/repos/rapidsai/cudf/issues/11071,1178161302,IC_kwDOBWUGps5GOVCW,2022-07-07T20:03:04Z,2022-07-07T20:03:04Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1178161302/reactions,0,0,0,0,0,0,0,0,0,11071
1440,https://api.github.com/repos/rapidsai/cudf/issues/comments/1268909315,https://github.com/rapidsai/cudf/issues/11071#issuecomment-1268909315,https://api.github.com/repos/rapidsai/cudf/issues/11071,1268909315,IC_kwDOBWUGps5LogUD,2022-10-05T20:03:11Z,2022-10-05T20:03:11Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1268909315/reactions,0,0,0,0,0,0,0,0,0,11071
1441,https://api.github.com/repos/rapidsai/cudf/issues/comments/1178272054,https://github.com/rapidsai/cudf/issues/11072#issuecomment-1178272054,https://api.github.com/repos/rapidsai/cudf/issues/11072,1178272054,IC_kwDOBWUGps5GOwE2,2022-07-07T22:03:12Z,2022-07-07T22:03:12Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1178272054/reactions,0,0,0,0,0,0,0,0,0,11072
1442,https://api.github.com/repos/rapidsai/cudf/issues/comments/1269083857,https://github.com/rapidsai/cudf/issues/11072#issuecomment-1269083857,https://api.github.com/repos/rapidsai/cudf/issues/11072,1269083857,IC_kwDOBWUGps5LpK7R,2022-10-05T23:03:34Z,2022-10-05T23:03:34Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1269083857/reactions,0,0,0,0,0,0,0,0,0,11072
1443,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179358138,https://github.com/rapidsai/cudf/issues/11085#issuecomment-1179358138,https://api.github.com/repos/rapidsai/cudf/issues/11085,1179358138,IC_kwDOBWUGps5GS5O6,2022-07-08T21:03:01Z,2022-07-08T21:03:01Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179358138/reactions,0,0,0,0,0,0,0,0,0,11085
1444,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270744363,https://github.com/rapidsai/cudf/issues/11085#issuecomment-1270744363,https://api.github.com/repos/rapidsai/cudf/issues/11085,1270744363,IC_kwDOBWUGps5LvgUr,2022-10-06T22:03:06Z,2022-10-06T22:03:06Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270744363/reactions,0,0,0,0,0,0,0,0,0,11085
1445,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287239258,https://github.com/rapidsai/cudf/issues/11085#issuecomment-1287239258,https://api.github.com/repos/rapidsai/cudf/issues/11085,1287239258,IC_kwDOBWUGps5MubZa,2022-10-21T17:20:30Z,2022-10-21T17:20:30Z,CONTRIBUTOR,@shwina @wence- this seems tangentially related to the `__setitem__` issues that @wence- is currently investigating. Is fixing this within the scope of the current work?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287239258/reactions,0,0,0,0,0,0,0,0,0,11085
1446,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289172507,https://github.com/rapidsai/cudf/issues/11085#issuecomment-1289172507,https://api.github.com/repos/rapidsai/cudf/issues/11085,1289172507,IC_kwDOBWUGps5M1zYb,2022-10-24T15:01:00Z,2022-10-24T15:16:04Z,CONTRIBUTOR,"> @shwina @wence- this seems tangentially related to the `__setitem__` issues that @wence- is currently investigating. Is fixing this within the scope of the current work?

No, this needs deep-seated changes in the way `iloc` indexing and `__setitem__` work. Basically this is all unsafe because there's a significant portion of the code that assumes that, given a `Column`, there is only ever one higher-level holder of the `Column`, and hence that replacing the column associated with a `Series` object with a copy is safe.

This is, unfortunately, demonstrably not true (@shwina's example is one, here are a few more):

```python
import cudf
import rmm
s = cudf.Series([1,2,3,4])
sview = s.iloc[:]

def owner(buf):
    while not isinstance(buf, rmm.DeviceBuffer):
         buf = buf.owner
    return buf.ptr


assert owner(s._column.data) == owner(sview._column.data) # True

s.iloc[0:2] = [4,5]

assert owner(s._column.data) == owner(sview._column.data) # False

sview = s.iloc[:]

assert owner(s._column.data) == owner(sview._column.data) # True

s.iloc[[1,3]] = [7, 8]

assert owner(s._column.data) == owner(sview._column.data) # False

sview = s.iloc[:]

assert owner(s._column.data) == owner(sview._column.data) # True

s.iloc[[False, True, True, False]] = [7, 8]

assert owner(s._column.data) == owner(sview._column.data) # False

# This one works

sview = s.iloc[:]

assert owner(s._column.data) == owner(sview._column.data) # True

s.iloc[1::1] = 2

assert owner(s._column.data) == owner(sview._column.data) # True

# But this doesn't

sview = s.iloc[:]

assert owner(s._column.data) == owner(sview._column.data) # True

s.iloc[1::1] = [1,2,3]

assert owner(s._column.data) == owner(sview._column.data) # False
```

(I have not checked the dataframe-equivalent ones)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289172507/reactions,0,0,0,0,0,0,0,0,0,11085
1447,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152496096,https://github.com/rapidsai/cudf/issues/11091#issuecomment-1152496096,https://api.github.com/repos/rapidsai/cudf/issues/11091,1152496096,IC_kwDOBWUGps5EsbHg,2022-06-10T15:42:52Z,2022-06-10T15:42:52Z,CONTRIBUTOR,CC @bdice for awareness.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1152496096/reactions,0,0,0,0,0,0,0,0,0,11091
1448,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179754757,https://github.com/rapidsai/cudf/issues/11091#issuecomment-1179754757,https://api.github.com/repos/rapidsai/cudf/issues/11091,1179754757,IC_kwDOBWUGps5GUaEF,2022-07-10T16:03:07Z,2022-07-10T16:03:07Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1179754757/reactions,0,0,0,0,0,0,0,0,0,11091
1449,https://api.github.com/repos/rapidsai/cudf/issues/comments/1272360199,https://github.com/rapidsai/cudf/issues/11091#issuecomment-1272360199,https://api.github.com/repos/rapidsai/cudf/issues/11091,1272360199,IC_kwDOBWUGps5L1q0H,2022-10-08T17:08:28Z,2022-10-08T17:08:28Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1272360199/reactions,0,0,0,0,0,0,0,0,0,11091
1450,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286479930,https://github.com/rapidsai/cudf/issues/11091#issuecomment-1286479930,https://api.github.com/repos/rapidsai/cudf/issues/11091,1286479930,IC_kwDOBWUGps5MriA6,2022-10-21T05:29:50Z,2022-10-21T05:34:53Z,CONTRIBUTOR,"> sometimes we actually need to support strong types in these self- operations

@ttnghia would you please elaborate on this use case? What code changes would you propose?

This issue references competed work in #10730",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286479930/reactions,0,0,0,0,0,0,0,0,0,11091
1451,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291525949,https://github.com/rapidsai/cudf/issues/11091#issuecomment-1291525949,https://api.github.com/repos/rapidsai/cudf/issues/11091,1291525949,IC_kwDOBWUGps5M-x89,2022-10-26T05:30:53Z,2022-10-26T05:30:53Z,CONTRIBUTOR,"The use cases already existed, and implementation of this FEA was added here:
 * https://github.com/rapidsai/cudf/blob/7d173c9d144a64c5e1a0467d2a5eb4181854f25e/cpp/src/search/contains_table.cu#L65
 * https://github.com/rapidsai/cudf/blob/7d173c9d144a64c5e1a0467d2a5eb4181854f25e/cpp/src/search/contains_table.cu#L83

I proposed this issue and already made a draft PR but that was not approved so I had to implement it locally only in that file.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291525949/reactions,0,0,0,0,0,0,0,0,0,11091
1452,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157624117,https://github.com/rapidsai/cudf/issues/11116#issuecomment-1157624117,https://api.github.com/repos/rapidsai/cudf/issues/11116,1157624117,IC_kwDOBWUGps5E__E1,2022-06-16T12:50:53Z,2022-06-16T12:50:53Z,CONTRIBUTOR,Relevant docs in the developer guide: https://github.com/rapidsai/cudf/blob/branch-22.08/cpp/docs/DEVELOPER_GUIDE.md#spans= ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1157624117/reactions,0,0,0,0,0,0,0,0,0,11116
1453,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186180629,https://github.com/rapidsai/cudf/issues/11116#issuecomment-1186180629,https://api.github.com/repos/rapidsai/cudf/issues/11116,1186180629,IC_kwDOBWUGps5Gs64V,2022-07-16T13:07:48Z,2022-07-16T13:07:48Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186180629/reactions,0,0,0,0,0,0,0,0,0,11116
1454,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279001900,https://github.com/rapidsai/cudf/issues/11116#issuecomment-1279001900,https://api.github.com/repos/rapidsai/cudf/issues/11116,1279001900,IC_kwDOBWUGps5MPAUs,2022-10-14T13:21:02Z,2022-10-14T13:21:02Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279001900/reactions,0,0,0,0,0,0,0,0,0,11116
1455,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186598305,https://github.com/rapidsai/cudf/issues/11120#issuecomment-1186598305,https://api.github.com/repos/rapidsai/cudf/issues/11120,1186598305,IC_kwDOBWUGps5Gug2h,2022-07-17T20:03:04Z,2022-07-17T20:03:04Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186598305/reactions,0,0,0,0,0,0,0,0,0,11120
1456,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279823470,https://github.com/rapidsai/cudf/issues/11120#issuecomment-1279823470,https://api.github.com/repos/rapidsai/cudf/issues/11120,1279823470,IC_kwDOBWUGps5MSI5u,2022-10-15T20:03:05Z,2022-10-15T20:03:05Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279823470/reactions,0,0,0,0,0,0,0,0,0,11120
1457,https://api.github.com/repos/rapidsai/cudf/issues/comments/1162531798,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1162531798,https://api.github.com/repos/rapidsai/cudf/issues/11130,1162531798,IC_kwDOBWUGps5FStPW,2022-06-22T01:48:47Z,2022-06-22T01:48:47Z,CONTRIBUTOR,"FWIW, there is a ""Pandas compatible"" way to do this today: https://github.com/rapidsai/cudf/issues/10967#issuecomment-1138590222. But I'd agree that a more explicit API would be desirable.

I wouldn't have any objections to adding an `.offsets` accessor, other than I suppose it leaks some implementation detail (insofar as cuDF following the Arrow format is an ""implementation detail"").

My 2c here is that the ideal way to do this would be to zero copy to something like a GPU accelerated Awkward Array and back. ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1162531798/reactions,0,0,0,0,0,0,0,0,0,11130
1458,https://api.github.com/repos/rapidsai/cudf/issues/comments/1162538893,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1162538893,https://api.github.com/repos/rapidsai/cudf/issues/11130,1162538893,IC_kwDOBWUGps5FSu-N,2022-06-22T02:03:32Z,2022-06-22T02:03:32Z,CONTRIBUTOR,"@shwina That's very helpful, I did not consider `explode()`/`agg(list)`. To simplify and match this example:
```python
def list_add(s1, s2):
    return (s1.explode() - s2.explode()).groupby(level=0).agg(list)
```
I'm guessing that `explode()` returns a copy, unlike `Series.list.leaves`, and that `groupby(level=0).agg(list)` is nontrivial to compute compared to a constructor from offsets and values. Perhaps there would be good reasons for performance and flexibility to expose the offset accessor / list constructor primitives.

As to whether offsets are an implementation detail -- I considered this as well. My view is that offsets are helpful to expose and doing so does not make stronger promises about our data model than what we already make in other ways ([offsets are already exposed in the libcudf API](https://docs.rapids.ai/api/libcudf/nightly/classcudf_1_1lists__column__view.html#a3d738360310aad73666f1e3de3b7e50e), and cuDF has a stated aim to be Arrow-conformant to a large extent).

I definitely agree that the ability to do this computation in a zero-copy way and compatibility with GPU Awkward Arrays would be desirable. Exposing the raw offsets and a way to rebuild a list from them seems like a good step in both of those directions.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1162538893/reactions,0,0,0,0,0,0,0,0,0,11130
1459,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163180300,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163180300,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163180300,IC_kwDOBWUGps5FVLkM,2022-06-22T14:32:11Z,2022-06-22T14:32:11Z,CONTRIBUTOR,"> It's not clear to me where the name ""leaves"" came from. To align with PyArrow, we would rename ""leaves"" to Series.list.values.

Note  that  `values` are distinct from `leaves`:

The `values` of a list array is what you get by removing ""one level of nesting"" from the array:

```python
>>> pa.array([[[[1, 2]]]]).values
<pyarrow.lib.ListArray object at 0x7fe4de05df40>
[
  [
    [
      1,
      2
    ]
  ]
]
```

Whereas what we call `leaves` is what you get from removing _all_ levels of nesting:

```python
In [7]: cudf.Series([[[[1, 2]]]]).list.leaves
Out[7]:
0    1
1    2
dtype: int64
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163180300/reactions,1,1,0,0,0,0,0,0,0,11130
1460,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163240656,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163240656,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163240656,IC_kwDOBWUGps5FVaTQ,2022-06-22T15:14:20Z,2022-06-22T15:14:20Z,CONTRIBUTOR,@shwina Interesting. Would you consider exposing both `list.values` and `list.leaves`? It seems important to have a way to un-nest one level at a time (like with `list.offsets`).,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163240656/reactions,0,0,0,0,0,0,0,0,0,11130
1461,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163269315,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163269315,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163269315,IC_kwDOBWUGps5FVhTD,2022-06-22T15:33:48Z,2022-06-22T15:34:07Z,CONTRIBUTOR,">  Would you consider exposing both list.values and list.leaves? It seems important to have a way to un-nest one level at a time (like with list.offsets).

Again, while I'm not _opposed_ to exposing these, I'm much more in favor of higher-level APIs that allow the user not to worry about how lists are actually implemented. For example, if we want to enable binary/unary ops involving list columns, perhaps a better API is something like `eval`?

```python
df.list.eval(""a + b * sin(c)""`
```

",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163269315/reactions,0,0,0,0,0,0,0,0,0,11130
1462,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163292017,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163292017,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163292017,IC_kwDOBWUGps5FVm1x,2022-06-22T15:51:30Z,2022-06-22T15:55:19Z,CONTRIBUTOR,"I would expect eval’s behavior with + to match the + operator’s behavior, but we stated in a previous conversation (last week’s standup, I think?) that we explicitly do not want to overload operators where array-like operator semantics could conflict with Python list operator semantics (concatenation vs. elementwise addition). I am opposed to making eval act elementwise on lists — I expect an error there. An explicit function like `array_add` makes it more clear how the lists are being interpreted.

In any case, I think the right move is to add offsets/values accessors for alignment with libcudf and PyArrow, and debate/implement the action of array-like operators separately.

I think it is important to be able to construct lists from GPU resident arrays, but that may not be possible without relying on the implementation of offsets/values.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163292017/reactions,0,0,0,0,0,0,0,0,0,11130
1463,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163295984,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163295984,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163295984,IC_kwDOBWUGps5FVnzw,2022-06-22T15:54:48Z,2022-06-22T15:54:48Z,CONTRIBUTOR,"Right, which is why I'm suggesting a distinct `DataFrame.list.eval` API (note the namespace).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163295984/reactions,1,1,0,0,0,0,0,0,0,11130
1464,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163306549,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163306549,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163306549,IC_kwDOBWUGps5FVqY1,2022-06-22T16:03:05Z,2022-06-22T16:06:02Z,CONTRIBUTOR,"> Right, which is why I'm suggesting a distinct `DataFrame.list.eval` API (note the namespace).

I missed that namespace, thanks for the pointer. I have a lot of questions about how this would act and I don’t think the answers are obvious. AST limitations could be harshly constraining here and no broadcasting would be possible. It also introduces an undesirable asymmetry between operators and eval, and is beyond the API scope of both Pandas and Arrow… but so is `array_add`. Let’s table this for a separate discussion. @GregoryKimball might have insight on use cases that would motivate this but I don’t think we have an urgent need for new APIs if we implement the accessors / constructor.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163306549/reactions,0,0,0,0,0,0,0,0,0,11130
1465,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163371849,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1163371849,https://api.github.com/repos/rapidsai/cudf/issues/11130,1163371849,IC_kwDOBWUGps5FV6VJ,2022-06-22T16:47:40Z,2022-06-22T16:47:40Z,CONTRIBUTOR,"I agree - let's move the discussion relating to `eval` elsewhere.

My broader point though is that we shouldn't require the user to know or care about  `.values` and `.offsets` in order to do interesting things with lists in cuDF.

Indeed, we could expose `values` and `offsets` and, with some effort, much of the existing list functionality could be implemented by the user knowing those.

Two questions I would ask are:

1. What functionality do we want to ultimately unlock for users by exposing the `.offsets` and `.values` of an existing list column? Can/should we implement that functionality ourselves?

3. Who/what is producing GPU-resident `offsets` and `values` arrays that requires a `from_arrays()` constructor? Can we have it return a list column instead?

We have been successful so far in totally hiding how strings, for instance, are implemented in cuDF. It'd be nice to do the same for lists.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1163371849/reactions,0,0,0,0,0,0,0,0,0,11130
1466,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173256997,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173256997,https://api.github.com/repos/rapidsai/cudf/issues/11130,1173256997,IC_kwDOBWUGps5F7nsl,2022-07-04T02:02:21Z,2022-07-04T02:02:21Z,CONTRIBUTOR,"Hello @shwina and @bdice, [bucketize](https://github.com/pytorch/torcharrow/blob/main/csrc/velox/functions/rec/bucketize.h) is a feature that we might unlock if we could construct a list column from offsets and values. 
Bucketize is performed on leaves and uses the same offsets of the input columns.

```
def bucketize(series, buckets):    
    ans = cudf.Series([0] * len(series.list.leaves)) 
    for b in buckets:
        ans += series.list.leaves > b
    return cudf.Series.list.from_arrays(series.list.offsets, ans.list.leaves)
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173256997/reactions,0,0,0,0,0,0,0,0,0,11130
1467,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173327156,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173327156,https://api.github.com/repos/rapidsai/cudf/issues/11130,1173327156,IC_kwDOBWUGps5F7400,2022-07-04T04:24:15Z,2022-07-04T04:46:58Z,CONTRIBUTOR,"To my surprise the `explode` trick from #10967 works here as well:
```
def bucketize(a, buckets):
    a_x = a.explode()
    b = a_x * 0
    for k in buckets:
        b += a_x > k
    return b.groupby(level=0).agg(list)
```
```
import cudf
df = cudf.DataFrame({'a':[[1, 2, 3, 3],[1, 2, 1, 0, 1]]})
df['b'] = bucketize(df['a'], [1, 2])
```
```
                 a                b
0     [1, 2, 3, 3]     [0, 1, 2, 2]
1  [1, 2, 1, 0, 1]  [0, 1, 0, 0, 0]
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173327156/reactions,0,0,0,0,0,0,0,0,0,11130
1468,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173838213,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1173838213,https://api.github.com/repos/rapidsai/cudf/issues/11130,1173838213,IC_kwDOBWUGps5F91mF,2022-07-04T13:42:31Z,2022-07-04T13:42:31Z,CONTRIBUTOR,"Then `list.bucketize()` is an API we may want to consider adding, rather than having each user write their own version of it. ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1173838213/reactions,0,0,0,0,0,0,0,0,0,11130
1469,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203994450,https://github.com/rapidsai/cudf/issues/11130#issuecomment-1203994450,https://api.github.com/repos/rapidsai/cudf/issues/11130,1203994450,IC_kwDOBWUGps5Hw39S,2022-08-03T14:03:11Z,2022-08-03T14:03:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203994450/reactions,0,0,0,0,0,0,0,0,0,11130
1470,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192963355,https://github.com/rapidsai/cudf/issues/11135#issuecomment-1192963355,https://api.github.com/repos/rapidsai/cudf/issues/11135,1192963355,IC_kwDOBWUGps5HGy0b,2022-07-22T22:02:54Z,2022-07-22T22:02:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1192963355/reactions,0,0,0,0,0,0,0,0,0,11135
1471,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286207203,https://github.com/rapidsai/cudf/issues/11135#issuecomment-1286207203,https://api.github.com/repos/rapidsai/cudf/issues/11135,1286207203,IC_kwDOBWUGps5Mqfbj,2022-10-20T22:03:09Z,2022-10-20T22:03:09Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286207203/reactions,0,0,0,0,0,0,0,0,0,11135
1472,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193147631,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1193147631,https://api.github.com/repos/rapidsai/cudf/issues/11141,1193147631,IC_kwDOBWUGps5HHfzv,2022-07-23T16:03:00Z,2022-07-23T16:03:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1193147631/reactions,0,0,0,0,0,0,0,0,0,11141
1473,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204191296,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1204191296,https://api.github.com/repos/rapidsai/cudf/issues/11141,1204191296,IC_kwDOBWUGps5HxoBA,2022-08-03T16:25:44Z,2022-08-03T16:25:44Z,CONTRIBUTOR,I still want this it would be a good performance boost for anyone in SQL doing a first or a last like operation.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204191296/reactions,0,0,0,0,0,0,0,0,0,11141
1474,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235729651,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1235729651,https://api.github.com/repos/rapidsai/cudf/issues/11141,1235729651,IC_kwDOBWUGps5Jp7zz,2022-09-02T17:07:21Z,2022-09-02T17:07:21Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235729651/reactions,0,0,0,0,0,0,0,0,0,11141
1475,https://api.github.com/repos/rapidsai/cudf/issues/comments/1243881748,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1243881748,https://api.github.com/repos/rapidsai/cudf/issues/11141,1243881748,IC_kwDOBWUGps5KJCEU,2022-09-12T15:07:14Z,2022-09-12T15:07:14Z,CONTRIBUTOR,Still wanted.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1243881748/reactions,0,0,0,0,0,0,0,0,0,11141
1476,https://api.github.com/repos/rapidsai/cudf/issues/comments/1276418924,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1276418924,https://api.github.com/repos/rapidsai/cudf/issues/11141,1276418924,IC_kwDOBWUGps5MFJts,2022-10-12T16:08:07Z,2022-10-12T16:08:07Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1276418924/reactions,0,0,0,0,0,0,0,0,0,11141
1477,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286484348,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1286484348,https://api.github.com/repos/rapidsai/cudf/issues/11141,1286484348,IC_kwDOBWUGps5MrjF8,2022-10-21T05:38:00Z,2023-02-13T18:50:01Z,CONTRIBUTOR,"#11603 was an attempt to address this issue, but we ran into design challenges. Please refer to the discussion in [this comment](https://github.com/rapidsai/cudf/pull/11603#discussion_r956541461) ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286484348/reactions,0,0,0,0,0,0,0,0,0,11141
1478,https://api.github.com/repos/rapidsai/cudf/issues/comments/1499413320,https://github.com/rapidsai/cudf/issues/11141#issuecomment-1499413320,https://api.github.com/repos/rapidsai/cudf/issues/11141,1499413320,IC_kwDOBWUGps5ZXztI,2023-04-06T17:44:48Z,2023-04-06T17:44:48Z,CONTRIBUTOR,"Maybe `static_reduction_map` can help this: https://github.com/NVIDIA/cuCollections/pull/98.

Note that similar mechanism has already been implemented in cudf (https://github.com/rapidsai/cudf/pull/11052). We can adopt the same approach if need this with higher priority.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1499413320/reactions,0,0,0,0,0,0,0,0,0,11141
1479,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165983038,https://github.com/rapidsai/cudf/issues/11148#issuecomment-1165983038,https://api.github.com/repos/rapidsai/cudf/issues/11148,1165983038,IC_kwDOBWUGps5Ff30-,2022-06-24T22:11:31Z,2022-06-24T22:13:48Z,CONTRIBUTOR,"Thanks for the issue report @alextxu! I'm going to document what I've investigated thus far. I think there are two or three separate subproblems for us to investigate.

Pandas gives:
```python
>>> pivot_table.index
Int64Index([1, 4], dtype='int64', name=0)
>>> pivot_table.columns
MultiIndex([(2, 2)],
           names=[None, 1])
>>> (df2 == pivot_table).all()
   1
2  2    True
dtype: bool
>>> (df2 == pivot_table).all().index
MultiIndex([(2, 2)],
           names=[None, 1])
```

I filed a PR https://github.com/rapidsai/cudf/pull/11150 that fixed the `UnboundLocalError` but there are some discrepancies with Pandas in the index/columns of `pivot_table` and the index of the final result. From cuDF e16ab0174b22cf08ee919155dfba184f1f7bbff7:
```python
>>> pivot_table.index
MultiIndex([(1,),
            (4,)],
           names=[0])
>>> pivot_table.columns
MultiIndex([(2, 2)],
           names=[nan, 1.0])
>>> (df2 == pivot_table).all()
[2, 2]    True
dtype: bool
>>> (df2 == pivot_table).all().index
GenericIndex([[2, 2]], dtype='list')
```",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1165983038/reactions,0,0,0,0,0,0,0,0,0,11148
1480,https://api.github.com/repos/rapidsai/cudf/issues/comments/1196639875,https://github.com/rapidsai/cudf/issues/11148#issuecomment-1196639875,https://api.github.com/repos/rapidsai/cudf/issues/11148,1196639875,IC_kwDOBWUGps5HU0aD,2022-07-27T12:03:54Z,2022-07-27T12:03:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1196639875/reactions,0,0,0,0,0,0,0,0,0,11148
1481,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290438917,https://github.com/rapidsai/cudf/issues/11148#issuecomment-1290438917,https://api.github.com/repos/rapidsai/cudf/issues/11148,1290438917,IC_kwDOBWUGps5M6okF,2022-10-25T12:05:08Z,2022-10-25T12:05:08Z,NONE,"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290438917/reactions,0,0,0,0,0,0,0,0,0,11148
1482,https://api.github.com/repos/rapidsai/cudf/issues/comments/1297387261,https://github.com/rapidsai/cudf/issues/11148#issuecomment-1297387261,https://api.github.com/repos/rapidsai/cudf/issues/11148,1297387261,IC_kwDOBWUGps5NVI79,2022-10-31T16:56:30Z,2022-10-31T16:56:30Z,CONTRIBUTOR,I'm going to leave this issue open to track the bugs that @bdice identified while fixing the proximate cause of the observed bug.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1297387261/reactions,0,0,0,0,0,0,0,0,0,11148
1483,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117772510,https://github.com/rapidsai/cudf/issues/11148#issuecomment-2117772510,https://api.github.com/repos/rapidsai/cudf/issues/11148,2117772510,IC_kwDOBWUGps5-OqTe,2024-05-17T14:47:54Z,2024-05-17T14:47:54Z,CONTRIBUTOR,"There are a couple of outstanding issues here. The first is that our pivot API does not properly handle when the index or columns arguments are lists instead of single values. IOW, this works
```
pivot_table = df.pivot(index=0, columns=1, values=[2])
```
but making either the index or columns arguments above into a list results in 
```
ValueError: Index data must be 1-dimensional and list-like
```
For `index` the failure is [here](https://github.com/rapidsai/cudf/blob/fcbc1bc8a5d81797c4974ff7559eac44f3854697/python/cudf/cudf/core/reshape.py#L1053), whereas for `columns` the failure is [on the subsequent line](https://github.com/rapidsai/cudf/blob/fcbc1bc8a5d81797c4974ff7559eac44f3854697/python/cudf/cudf/core/reshape.py#L1054). 

The second issue is that we do not have a way to handle list dtype columns when we attempt to make an index out of them, so if we bypass the above issue by passing index and columns as scalars, we end up failing on the final line with 
```
NotImplementedError: Unsupported column type passed to create an Index: <class 'cudf.core.column.lists.ListColumn'>
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117772510/reactions,0,0,0,0,0,0,0,0,0,11148
1484,https://api.github.com/repos/rapidsai/cudf/issues/comments/1197307559,https://github.com/rapidsai/cudf/issues/11155#issuecomment-1197307559,https://api.github.com/repos/rapidsai/cudf/issues/11155,1197307559,IC_kwDOBWUGps5HXXan,2022-07-27T20:03:09Z,2022-07-27T20:03:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1197307559/reactions,0,0,0,0,0,0,0,0,0,11155
1485,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279408937,https://github.com/rapidsai/cudf/issues/11155#issuecomment-1279408937,https://api.github.com/repos/rapidsai/cudf/issues/11155,1279408937,IC_kwDOBWUGps5MQjsp,2022-10-14T20:04:38Z,2022-10-14T20:04:38Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279408937/reactions,0,0,0,0,0,0,0,0,0,11155
1486,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198189071,https://github.com/rapidsai/cudf/issues/11162#issuecomment-1198189071,https://api.github.com/repos/rapidsai/cudf/issues/11162,1198189071,IC_kwDOBWUGps5HauoP,2022-07-28T14:04:54Z,2022-07-28T14:04:54Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198189071/reactions,0,0,0,0,0,0,0,0,0,11162
1487,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286508404,https://github.com/rapidsai/cudf/issues/11162#issuecomment-1286508404,https://api.github.com/repos/rapidsai/cudf/issues/11162,1286508404,IC_kwDOBWUGps5Mro90,2022-10-21T06:16:38Z,2022-10-21T06:16:38Z,CONTRIBUTOR,"Thank you @revans2 for starting this discussion of Spark's `array_sort` API and it's `func` argument. The documentation you shared includes two examples. Are these typical of the user-provided `func` arguments - are there other patterns you could share?

`case when left < right then -1 when left > right then 1 else 0 end`: is this just a verbose write-out of the default behavior?
`case when left is null and right is null then 0 when left is null then -1 when right is null then 1 when left < right then 1 when left > right then -1 else 0 end`: is this kind of elaborate null handling typical of how the `func` argument is used?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286508404/reactions,0,0,0,0,0,0,0,0,0,11162
1488,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287138081,https://github.com/rapidsai/cudf/issues/11162#issuecomment-1287138081,https://api.github.com/repos/rapidsai/cudf/issues/11162,1287138081,IC_kwDOBWUGps5MuCsh,2022-10-21T15:41:24Z,2022-10-21T15:41:24Z,CONTRIBUTOR,Yes this is very typical of what a user would provide.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287138081/reactions,0,0,0,0,0,0,0,0,0,11162
1489,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198274155,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1198274155,https://api.github.com/repos/rapidsai/cudf/issues/11163,1198274155,IC_kwDOBWUGps5HbDZr,2022-07-28T15:03:08Z,2022-07-28T15:03:08Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198274155/reactions,0,0,0,0,0,0,0,0,0,11163
1490,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286509362,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1286509362,https://api.github.com/repos/rapidsai/cudf/issues/11163,1286509362,IC_kwDOBWUGps5MrpMy,2022-10-21T06:17:56Z,2022-10-21T06:17:56Z,CONTRIBUTOR,Thanks @revans2 for sharing this issue. Do you think there is enough value in expanding our AST implementation to warrant a repo milestone?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286509362/reactions,0,0,0,0,0,0,0,0,0,11163
1491,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287136593,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1287136593,https://api.github.com/repos/rapidsai/cudf/issues/11163,1287136593,IC_kwDOBWUGps5MuCVR,2022-10-21T15:40:01Z,2022-10-21T15:40:01Z,CONTRIBUTOR,I don't know what you mean by a repo milestone? Is this just for tracking purposes?  If so @sameerz what is the high priority on this? ,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287136593/reactions,0,0,0,0,0,0,0,0,0,11163
1492,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287159052,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1287159052,https://api.github.com/repos/rapidsai/cudf/issues/11163,1287159052,IC_kwDOBWUGps5MuH0M,2022-10-21T16:01:39Z,2022-10-21T16:01:39Z,CONTRIBUTOR,"I think what @GregoryKimball is referring to as a milestone is effectively an epic of work for AST.  

In terms of priority, AST helps the the RAPIDS Spark plugin and is necessary for some queries.  It is worth tracking as a milestone.  ",,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287159052/reactions,0,0,0,0,0,0,0,0,0,11163
1493,https://api.github.com/repos/rapidsai/cudf/issues/comments/1716976824,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1716976824,https://api.github.com/repos/rapidsai/cudf/issues/11163,1716976824,IC_kwDOBWUGps5mVvy4,2023-09-13T05:35:29Z,2023-09-13T05:35:29Z,CONTRIBUTOR,Hello @jlowe yesterday you mentioned a few uses that the Spark-RAPIDS plugin would have for the ternary operator in libcudf ASTs. Would you please list some of those uses and link to open Spark-RAPIDS issues on this topic? (FYI @karthikeyann),,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1716976824/reactions,0,0,0,0,0,0,0,0,0,11163
1494,https://api.github.com/repos/rapidsai/cudf/issues/comments/1717727075,https://github.com/rapidsai/cudf/issues/11163#issuecomment-1717727075,https://api.github.com/repos/rapidsai/cudf/issues/11163,1717727075,IC_kwDOBWUGps5mYm9j,2023-09-13T14:18:30Z,2023-09-13T14:18:30Z,MEMBER,"One key use case is described in #11162 where there's a higher order function used to perform the operation and we need the ability to translate that.  AST isn't the only way to solve that particular issue, but it's a more general solution.  See NVIDIA/spark-rapids#5227 for more context.

Another case would be optimizing complex projections.  Take one-hot encodings, for example, where currently queries are doing a potentially large series of comparisons in a CASE WHEN that today turns into a long chain of copy_if_else operations.  Using a chain of IF/ELSE in AST instead would avoid the manifestation of intermediates.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1717727075/reactions,1,1,0,0,0,0,0,0,0,11163
1495,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200257230,https://github.com/rapidsai/cudf/issues/11176#issuecomment-1200257230,https://api.github.com/repos/rapidsai/cudf/issues/11176,1200257230,IC_kwDOBWUGps5HinjO,2022-07-30T17:03:53Z,2022-07-30T17:03:53Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200257230/reactions,0,0,0,0,0,0,0,0,0,11176
1496,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291255720,https://github.com/rapidsai/cudf/issues/11176#issuecomment-1291255720,https://api.github.com/repos/rapidsai/cudf/issues/11176,1291255720,IC_kwDOBWUGps5M9v-o,2022-10-25T23:44:49Z,2022-10-25T23:44:49Z,CONTRIBUTOR,"Another piece of code that belongs here is the [`default_allocator`](https://github.com/rapidsai/cudf/blob/branch-22.12/cpp/src/hash/hash_allocator.cuh#L66). The allocator can also be (and is) used with the `concurrent_unordered_map`, but when the latter is removed the only usage of the allocator will be for the cuco hash maps.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291255720/reactions,0,0,0,0,0,0,0,0,0,11176
1497,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118184358,https://github.com/rapidsai/cudf/issues/11176#issuecomment-2118184358,https://api.github.com/repos/rapidsai/cudf/issues/11176,2118184358,IC_kwDOBWUGps5-QO2m,2024-05-17T18:39:44Z,2024-05-17T18:39:44Z,CONTRIBUTOR,"@PointKernel in light of the ongoing discussions we're having about other improvements to cuco, are there any helpers in cudf that we might want to move to cuco itself so that others could use them too?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118184358/reactions,0,0,0,0,0,0,0,0,0,11176
1498,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118213752,https://github.com/rapidsai/cudf/issues/11176#issuecomment-2118213752,https://api.github.com/repos/rapidsai/cudf/issues/11176,2118213752,IC_kwDOBWUGps5-QWB4,2024-05-17T19:00:43Z,2024-05-17T19:00:43Z,MEMBER,"There should be.

I've linked this issue to the hash table refactoring story so we can keep this in mind along with the process.",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118213752/reactions,1,1,0,0,0,0,0,0,0,11176
1499,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172582444,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1172582444,https://api.github.com/repos/rapidsai/cudf/issues/11189,1172582444,IC_kwDOBWUGps5F5DAs,2022-07-01T17:53:16Z,2022-07-01T18:00:25Z,MEMBER,"Thanks for triaging and raising this @ChrisJar .  I can confirm that i can reproduce this on my end too. 

Smaller minimal example for anyone interested. 

```python
import numpy as np
import cudf
import dask_cudf

df_a = cudf.DataFrame({'a':[1, 2, 3, 4, 5], 'b':[0]*5})
df_a['a']=df_a['a'].astype(np.int32)

df_b = cudf.DataFrame({'a':[5, 4, 3, 2, 1], 'c':[1]*5})
df_b['a']=df_b['a'].astype(np.int64)
print(""cudf\n"",df_a.merge(df_b))
print(""--""*10)
ddf_a = dask_cudf.from_cudf(df_a, npartitions=4)
ddf_b = dask_cudf.from_cudf(df_b, npartitions=4)
print(""dask_cudf\n"",ddf_a.merge(ddf_b).compute())
```

```
cudf
    a  b  c
0  1  0  1
1  2  0  1
2  3  0  1
3  4  0  1
4  5  0  1
--------------------
dask_cudf
    a  b  c
0  3  0  1
0  1  0  1
```


Also note that this work with `dask_pandas` .
```python

import numpy as np
import pandas as pd
import dask.dataframe

df_a = pd.DataFrame({'a':[1, 2, 3, 4, 5], 'b':[0]*5})
df_a['a']=df_a['a'].astype(np.int32)

df_b = pd.DataFrame({'a':[5, 4, 3, 2, 1], 'c':[1]*5})
df_b['a']=df_b['a'].astype(np.int64)
print(""cudf\n"",df_a.merge(df_b))
print(""--""*10)
ddf_a = dask.dataframe.from_pandas(df_a, npartitions=4)
ddf_b = dask.dataframe.from_pandas(df_b, npartitions=4)
print(""dask_cudf\n"",ddf_a.merge(ddf_b).compute())
``` 

```
cudf
    a  b  c
0  1  0  1
1  2  0  1
2  3  0  1
3  4  0  1
4  5  0  1
--------------------
dask_cudf
    a  b  c
0  1  0  1
0  3  0  1
1  4  0  1
2  5  0  1
3  2  0  1
```
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172582444/reactions,0,0,0,0,0,0,0,0,0,11189
1500,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172593338,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1172593338,https://api.github.com/repos/rapidsai/cudf/issues/11189,1172593338,IC_kwDOBWUGps5F5Fq6,2022-07-01T18:06:26Z,2022-07-01T18:06:26Z,MEMBER,"CC: @rjzamora , @galipremsagar ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172593338/reactions,0,0,0,0,0,0,0,0,0,11189
1501,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172628669,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1172628669,https://api.github.com/repos/rapidsai/cudf/issues/11189,1172628669,IC_kwDOBWUGps5F5OS9,2022-07-01T18:55:11Z,2022-07-01T19:23:50Z,MEMBER,"My immediate assumption is that ""int32"" and ""int64"" columns are hashing to different partitions, but I'll need to investigate a bit to say for sure.

**EDIT**: I can confirm that `pd.util.hash_pandas_object` produces the same hash for ""int32"" and ""int64"" values, while `cudf.DataFrame.hash_values()` does not:

```python
cudf_a = cudf.DataFrame({""a"": np.arange(10, dtype=""int32"")}).hash_values()
cudf_b = cudf.DataFrame({""a"": np.arange(10, dtype=""int64"")}).hash_values()
assert all(cudf_a.values == cudf_b.values)  # FAILS

pd_a = pd.util.hash_pandas_object(pd.DataFrame({""a"": np.arange(10, dtype=""int32"")}))
pd_b = pd.util.hash_pandas_object(pd.DataFrame({""a"": np.arange(10, dtype=""int64"")}))
assert all(pd_a.values == pd_b.values) # PASSES
```",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1172628669/reactions,0,0,0,0,0,0,0,0,0,11189
1502,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175201725,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1175201725,https://api.github.com/repos/rapidsai/cudf/issues/11189,1175201725,IC_kwDOBWUGps5GDCe9,2022-07-05T15:35:49Z,2022-07-05T15:43:28Z,MEMBER,"@ChrisJar @VibhuJawa - I just noticed that neither of you have mentioned the `UserWarning` you should get for the reproducers shared above. For example, I get the following message locally:

```
.../site-packages/dask/dataframe/multi.py:475: UserWarning: Merging dataframes with merge column data type mismatches: 
+---------------+------------+-------------+
| Merge columns | left dtype | right dtype |
+---------------+------------+-------------+
| ('a', 'a')    | int32      | int64       |
+---------------+------------+-------------+
Cast dtypes explicitly to avoid unexpected results.
```

I do think it makes sense to cast the columns automatically (when possible), but I just wanted to confirm that you are gettting this warning as well?",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175201725/reactions,0,0,0,0,0,0,0,0,0,11189
1503,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175203271,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1175203271,https://api.github.com/repos/rapidsai/cudf/issues/11189,1175203271,IC_kwDOBWUGps5GDC3H,2022-07-05T15:37:20Z,2022-07-05T15:37:59Z,CONTRIBUTOR,"Yup, I did get that warning @rjzamora. ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175203271/reactions,1,1,0,0,0,0,0,0,0,11189
1504,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175209713,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1175209713,https://api.github.com/repos/rapidsai/cudf/issues/11189,1175209713,IC_kwDOBWUGps5GDEbx,2022-07-05T15:43:36Z,2022-07-05T15:43:36Z,CONTRIBUTOR,"Yup, so did I @rjzamora ",,ChrisJar,13131098,MDQ6VXNlcjEzMTMxMDk4,https://avatars.githubusercontent.com/u/13131098?v=4,,https://api.github.com/users/ChrisJar,https://github.com/ChrisJar,https://api.github.com/users/ChrisJar/followers,https://api.github.com/users/ChrisJar/following{/other_user},https://api.github.com/users/ChrisJar/gists{/gist_id},https://api.github.com/users/ChrisJar/starred{/owner}{/repo},https://api.github.com/users/ChrisJar/subscriptions,https://api.github.com/users/ChrisJar/orgs,https://api.github.com/users/ChrisJar/repos,https://api.github.com/users/ChrisJar/events{/privacy},https://api.github.com/users/ChrisJar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1175209713/reactions,1,1,0,0,0,0,0,0,0,11189
1505,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176389470,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176389470,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176389470,IC_kwDOBWUGps5GHkde,2022-07-06T15:51:09Z,2022-07-06T15:51:09Z,MEMBER,"@ChrisJar , Can you raise an issue on `dask-sql`  too just as it will be hard for users to work-around from that world as there the merge can be present deep inside a messy query.  ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176389470/reactions,1,1,0,0,0,0,0,0,0,11189
1506,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176440489,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176440489,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176440489,IC_kwDOBWUGps5GHw6p,2022-07-06T16:39:10Z,2022-07-06T16:39:10Z,MEMBER,"@VibhuJawa - Do you have a sense for what kinds of dtype mismatch we should worry about from dask-sql.  It seems like we should be able to handle mismatched integer dtypes in Dask, but I wasn't planning on addressing anything else since the user should be getting a warning that their doing something dangerous/wrong (and ""general"" type-casting rules are pretty vague). However, you make a good point that the user may not have much control if they are working with the dask-sql API.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176440489/reactions,0,0,0,0,0,0,0,0,0,11189
1507,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176458904,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176458904,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176458904,IC_kwDOBWUGps5GH1aY,2022-07-06T16:59:00Z,2022-07-06T17:04:25Z,MEMBER,"@rjzamora ,   I agree that  ""general"" type-casting rules are pretty vague so having a general agree-able behavior will be impossible. 

> What type of  dtype mismatch we should worry about from dask-sql.

In my opinion  we should handle merges b/w columns of similar dtype , say like `int32/int64` and `float32/float64` etc and FAIL loudly in other cases (like `int32`/`float32`,  `int32/uint32`  )  for `dask-sql`  .  

I would love for @ayushdg  to weigh in on this as he is deep in the weeds for handling merging on the `dask-sql` side these days. 

Just for additional context, this issue was actually found when we were triaging incorrect results in a GPU-BDB dask-sql query   (See [issue](https://github.com/rapidsai/gpu-bdb/issues/262))
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176458904/reactions,0,0,0,0,0,0,0,0,0,11189
1508,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176467159,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176467159,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176467159,IC_kwDOBWUGps5GH3bX,2022-07-06T17:04:31Z,2022-07-06T17:04:31Z,MEMBER,">say like int32/int64 and float32/float64 etc

Is it common to merge on floating-point columns? That sounds inherently dangerous to me, but I suppose it could be on an integer column that was accidentally or necessarily up-casted.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176467159/reactions,0,0,0,0,0,0,0,0,0,11189
1509,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176477778,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176477778,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176477778,IC_kwDOBWUGps5GH6BS,2022-07-06T17:12:31Z,2022-07-06T17:17:41Z,MEMBER,"> Is it common to merge on floating-point columns? 

I dont this its common but as you say users can do that accidentally in workflows . A common example i have seen is when people read csvs  and it gets interpreted as different dtypes based on how the data is partitioned.   

That said we should have guard rails around it by failing specially in the dask-sql land  (will leave the dask-cudf  behavior to your judgment ) following spark behavior, Like In spark land this would raise something like below: 

```python
 Failed to merge incompatible data types IntegerType and DoubleType
 ```",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176477778/reactions,0,0,0,0,0,0,0,0,0,11189
1510,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176485909,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1176485909,https://api.github.com/repos/rapidsai/cudf/issues/11189,1176485909,IC_kwDOBWUGps5GH8AV,2022-07-06T17:21:50Z,2022-07-06T17:23:19Z,MEMBER,"> In my opinion we should handle merges b/w columns of similar dtype , say like int32/int64 and float32/float64 etc and FAIL loudly in other cases (like int32/float32, int32/uint32 ) for dask-sql .

Agreed, upcasting integer columns while joining on integer types should be handled by dask-cudf since it's something that works in cudf/pandas and in sql land integer based joins are common and the dtypes may vary. 

Dask-sql will also show the same: `UserWarning` for dtypes but if it's a large query, it can be hard to diagnose which part of the query the warning is coming from. 

> Is it common to merge on floating-point columns? That sounds inherently dangerous to me, but I suppose it could be on an integer column that was accidentally or necessarily up-casted.

Equality joins on float columns are very uncommon and most often happen accidentally. Happy to move that part of the discussion over to dask-sql to improve dtype checking during joins and raising more warnings. This issue can primarily focus on handling integer dtypes. ",,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1176485909/reactions,0,0,0,0,0,0,0,0,0,11189
1511,https://api.github.com/repos/rapidsai/cudf/issues/comments/1206711843,https://github.com/rapidsai/cudf/issues/11189#issuecomment-1206711843,https://api.github.com/repos/rapidsai/cudf/issues/11189,1206711843,IC_kwDOBWUGps5H7PYj,2022-08-05T18:03:05Z,2022-08-05T18:03:05Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1206711843/reactions,0,0,0,0,0,0,0,0,0,11189
1512,https://api.github.com/repos/rapidsai/cudf/issues/comments/1206494817,https://github.com/rapidsai/cudf/issues/11204#issuecomment-1206494817,https://api.github.com/repos/rapidsai/cudf/issues/11204,1206494817,IC_kwDOBWUGps5H6aZh,2022-08-05T14:04:15Z,2022-08-05T14:04:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1206494817/reactions,0,0,0,0,0,0,0,0,0,11204
1513,https://api.github.com/repos/rapidsai/cudf/issues/comments/1207302143,https://github.com/rapidsai/cudf/issues/11223#issuecomment-1207302143,https://api.github.com/repos/rapidsai/cudf/issues/11223,1207302143,IC_kwDOBWUGps5H9ff_,2022-08-07T00:13:11Z,2022-08-07T00:13:11Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1207302143/reactions,0,0,0,0,0,0,0,0,0,11223
1514,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286523037,https://github.com/rapidsai/cudf/issues/11223#issuecomment-1286523037,https://api.github.com/repos/rapidsai/cudf/issues/11223,1286523037,IC_kwDOBWUGps5Mrsid,2022-10-21T06:37:19Z,2022-10-21T06:37:19Z,CONTRIBUTOR,"Would it be correct to say that you would like `cudf::slice` to accept a vector of (start, end) tuples?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286523037/reactions,0,0,0,0,0,0,0,0,0,11223
1515,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287115406,https://github.com/rapidsai/cudf/issues/11223#issuecomment-1287115406,https://api.github.com/repos/rapidsai/cudf/issues/11223,1287115406,IC_kwDOBWUGps5Mt9KO,2022-10-21T15:21:51Z,2022-10-21T15:21:51Z,CONTRIBUTOR,Yes a vector of either tuples or pairs,,dagardner-nv,96306125,U_kgDOBb2DzQ,https://avatars.githubusercontent.com/u/96306125?v=4,,https://api.github.com/users/dagardner-nv,https://github.com/dagardner-nv,https://api.github.com/users/dagardner-nv/followers,https://api.github.com/users/dagardner-nv/following{/other_user},https://api.github.com/users/dagardner-nv/gists{/gist_id},https://api.github.com/users/dagardner-nv/starred{/owner}{/repo},https://api.github.com/users/dagardner-nv/subscriptions,https://api.github.com/users/dagardner-nv/orgs,https://api.github.com/users/dagardner-nv/repos,https://api.github.com/users/dagardner-nv/events{/privacy},https://api.github.com/users/dagardner-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287115406/reactions,0,0,0,0,0,0,0,0,0,11223
1516,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182574208,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1182574208,https://api.github.com/repos/rapidsai/cudf/issues/11253,1182574208,IC_kwDOBWUGps5GfKaA,2022-07-12T22:48:13Z,2022-07-12T22:48:13Z,NONE,"Hi, I'd like to help out on this. When you say enabling docstring validation, is this the same thing as running it?",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182574208/reactions,0,0,0,0,0,0,0,0,0,11253
1517,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182590381,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1182590381,https://api.github.com/repos/rapidsai/cudf/issues/11253,1182590381,IC_kwDOBWUGps5GfOWt,2022-07-12T23:19:34Z,2022-07-12T23:19:34Z,CONTRIBUTOR,"Hi @ShahRishi, we'd love your help! It's not quite that simple, although it's close. You'll need to build the documentation with the checks turned on (that's how you run it), but then you will also need to fix any issues that it finds. [Here are the instructions on building the docs](https://github.com/rapidsai/cudf/tree/branch-22.08/docs/cudf). My recommendation would probably be to clone the repository and install the conda environment as it recommends, but instead of building cudf from source just try to install cudf from the `rapidsai-nightly` conda channel so that you get the most up-to-date version of the package without having to build it yourself. Then you should be able to start from step 2 on that page and build the documentation as described. Does that make sense? Let me know if you have any further questions!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1182590381/reactions,0,0,0,0,0,0,0,0,0,11253
1518,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185740248,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1185740248,https://api.github.com/repos/rapidsai/cudf/issues/11253,1185740248,IC_kwDOBWUGps5GrPXY,2022-07-15T17:11:52Z,2022-07-15T17:11:52Z,NONE,"Hi, just wanted to let you know that I'm still working on this. Sorry for taking so long, this is new for me!",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1185740248/reactions,0,0,0,0,0,0,0,0,0,11253
1519,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186596919,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1186596919,https://api.github.com/repos/rapidsai/cudf/issues/11253,1186596919,IC_kwDOBWUGps5Gugg3,2022-07-17T19:51:59Z,2022-07-17T19:51:59Z,NONE,"Hi, I think I realize the problem that I'm having. I am working on a 3060ti GPU, which is not listed as a RAPIDS compatible GPU. Am I able to build the documentation with this GPU?",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1186596919/reactions,0,0,0,0,0,0,0,0,0,11253
1520,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188270720,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1188270720,https://api.github.com/repos/rapidsai/cudf/issues/11253,1188270720,IC_kwDOBWUGps5G05KA,2022-07-18T20:26:04Z,2022-07-18T20:26:04Z,CONTRIBUTOR,"Hmm I don't think that should be a problem. We only require a Pascal architecture, and the 3060ti is Ampere. What errors are you running into? Did you actually build cudf before building the documentation? cudf must be installed before building the docs.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188270720/reactions,0,0,0,0,0,0,0,0,0,11253
1521,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188275003,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1188275003,https://api.github.com/repos/rapidsai/cudf/issues/11253,1188275003,IC_kwDOBWUGps5G06M7,2022-07-18T20:30:40Z,2022-07-18T20:30:40Z,CONTRIBUTOR,"> Hi, just wanted to let you know that I'm still working on this. Sorry for taking so long, this is new for me!

No worries! Please feel free to keep asking questions.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1188275003/reactions,0,0,0,0,0,0,0,0,0,11253
1522,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200775419,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1200775419,https://api.github.com/repos/rapidsai/cudf/issues/11253,1200775419,IC_kwDOBWUGps5HkmD7,2022-08-01T06:37:31Z,2022-08-01T06:37:31Z,NONE,Just wanted to let you know I haven't abandoned this and am still working!,,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200775419/reactions,0,0,0,0,0,0,0,0,0,11253
1523,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200944582,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1200944582,https://api.github.com/repos/rapidsai/cudf/issues/11253,1200944582,IC_kwDOBWUGps5HlPXG,2022-08-01T09:21:50Z,2022-08-01T09:21:50Z,CONTRIBUTOR,No problem! Please let us know if you need help with anything. You can also find us on [Slack](https://join.slack.com/t/rapids-goai/shared_invite/zt-trnsul8g-Sblci8dk6dIoEeGpoFcFOQ).,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200944582/reactions,0,0,0,0,0,0,0,0,0,11253
1524,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201592564,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1201592564,https://api.github.com/repos/rapidsai/cudf/issues/11253,1201592564,IC_kwDOBWUGps5Hntj0,2022-08-01T19:02:14Z,2022-08-01T19:02:14Z,CONTRIBUTOR,@ShahRishi were you able to resolve the build issues? Hope that isn't still holding you up.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201592564/reactions,0,0,0,0,0,0,0,0,0,11253
1525,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240127373,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1240127373,https://api.github.com/repos/rapidsai/cudf/issues/11253,1240127373,IC_kwDOBWUGps5J6teN,2022-09-08T01:58:42Z,2022-09-08T01:58:42Z,NONE,"Hi, I apologize for the delay. I've had to put this on hold as I've been studying for the MCAT exam through August. I am still working and am learning a lot. I know this is taking me far longer than it should, but I am determined to figure this out. Thank you so much for your patience. ",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240127373/reactions,0,0,0,0,0,0,0,0,0,11253
1526,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240166228,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1240166228,https://api.github.com/repos/rapidsai/cudf/issues/11253,1240166228,IC_kwDOBWUGps5J629U,2022-09-08T03:15:25Z,2022-09-08T03:16:07Z,CONTRIBUTOR,Hi @ShahRishi - it's no problem! We'll keep this open and assigned to you. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240166228/reactions,0,0,0,0,0,0,0,0,0,11253
1527,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246172420,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1246172420,https://api.github.com/repos/rapidsai/cudf/issues/11253,1246172420,IC_kwDOBWUGps5KRxUE,2022-09-14T03:04:23Z,2022-09-14T03:04:23Z,NONE,"Hello, thank you again for your patience. I have successfully added the validation checks and rebuilt the docs. I realized that the problem I was having was that I had an outdated version of cmake. After running the validation checks, several thousands of warnings appeared. Should I fix all of these warnings? If not, among the full mapping of validation checks are there only certain ones I should address? Thank you!
",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246172420/reactions,0,0,0,0,0,0,0,0,0,11253
1528,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251524935,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1251524935,https://api.github.com/repos/rapidsai/cudf/issues/11253,1251524935,IC_kwDOBWUGps5KmMFH,2022-09-19T20:39:43Z,2022-09-19T20:39:43Z,CONTRIBUTOR,"Hi @ShahRishi, I'm glad that you were able to get this working! Could you post a sample of some of the warnings that you are seeing? Since this is the first time that we're enabling this, I think what we will want to do is make a sequence of PRs where each one just fixes all instances of one or two errors. That will let us figure out which warnings are worth fixing and which ones (if any) we want to ignore. If you can post some examples on this issue, we can evaluate those warnings a few at a time.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251524935/reactions,0,0,0,0,0,0,0,0,0,11253
1529,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251526455,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1251526455,https://api.github.com/repos/rapidsai/cudf/issues/11253,1251526455,IC_kwDOBWUGps5KmMc3,2022-09-19T20:41:34Z,2022-09-19T20:41:34Z,NONE,"Hi @vyasr! Thank you for the feedback. I am unfortunately unable to access my computer right now, but I will paste all of the warnings delivered and post them after 9pm PST tonight! Thank you again!",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251526455/reactions,1,0,0,0,0,0,1,0,0,11253
1530,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251552328,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1251552328,https://api.github.com/repos/rapidsai/cudf/issues/11253,1251552328,IC_kwDOBWUGps5KmSxI,2022-09-19T21:11:08Z,2022-09-19T21:11:08Z,CONTRIBUTOR,"Great, thank you! If you want to paste _all_ of the warnings, please paste them into a text file and attach it here rather than copying directly, otherwise it will be very difficult to parse through them on the Github UI.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251552328/reactions,0,0,0,0,0,0,0,0,0,11253
1531,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251766235,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1251766235,https://api.github.com/repos/rapidsai/cudf/issues/11253,1251766235,IC_kwDOBWUGps5KnG_b,2022-09-20T02:38:56Z,2022-09-20T02:39:48Z,NONE,"Hi! I have uploaded the warnings and added a file below. I thought it might  be better to see the general scope of the warnings since I was afraid that I would not include some important warnings. 

[warnings_cudf_numpydoc.txt](https://github.com/rapidsai/cudf/files/9603552/warnings_cudf_numpydoc.txt)",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1251766235/reactions,0,0,0,0,0,0,0,0,0,11253
1532,https://api.github.com/repos/rapidsai/cudf/issues/comments/1253008473,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1253008473,https://api.github.com/repos/rapidsai/cudf/issues/11253,1253008473,IC_kwDOBWUGps5Kr2RZ,2022-09-20T23:15:28Z,2022-09-20T23:15:28Z,CONTRIBUTOR,"Awesome! Here's a command that gives a quick idea of what warnings are showing up:
```
grep -v WARNING warnings_cudf_numpydoc.txt | sort | uniq
```

To get just a list of error codes you can also do
```
grep -v WARNING warnings_cudf_numpydoc.txt | sort | uniq | awk '{printf $1""\n""}' | uniq
```

From that, I see:
```
ES01:
EX01:
GL01:
GL02:
GL03:
GL06:
GL07:
GL08:
PR01:
PR02:
PR03:
PR04:
PR05:
PR06:
PR07:
PR08:
PR09:
PR10:
RT01:
RT02:
RT03:
RT04:
RT05:
SA01:
SA02:
SA04:
SS03:
SS05:
SS06:
*
/home/rishis/anaconda3/envs/cudf_dev/lib/python3.9/site-packages/cudf/core/series.py:docstring
```

From looking through that output, these all look like real errors that we should fix (although a couple of them are very pedantic like ending every line with a period). We can save the last few of lines until the end since those represent issues beyond just the docs (mostly `AttributeError` from something failing to import). The `numpydoc` website has [a full list of error codes](https://numpydoc.readthedocs.io/en/latest/validation.html#built-in-validation-checks) to explain what each of these are. Since these all do look like real errors, my recommendation would be to pick one or two of the above error codes at a time, find all of the issues, and make a PR fixing just that issue. That should make it fairly easy to get your PRs reviewed quickly. Does that make sense?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1253008473/reactions,0,0,0,0,0,0,0,0,0,11253
1533,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254241310,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1254241310,https://api.github.com/repos/rapidsai/cudf/issues/11253,1254241310,IC_kwDOBWUGps5KwjQe,2022-09-21T21:21:54Z,2022-09-21T21:21:54Z,NONE,This makes perfect sense. I will work on an error and create a pull request once I am ready. Thank you!,,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254241310/reactions,1,1,0,0,0,0,0,0,0,11253
1534,https://api.github.com/repos/rapidsai/cudf/issues/comments/1683003266,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1683003266,https://api.github.com/repos/rapidsai/cudf/issues/11253,1683003266,IC_kwDOBWUGps5kUJeC,2023-08-17T21:27:08Z,2023-08-17T21:27:08Z,CONTRIBUTOR,@ShahRishi did you ever have any luck with this?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1683003266/reactions,0,0,0,0,0,0,0,0,0,11253
1535,https://api.github.com/repos/rapidsai/cudf/issues/comments/1793502413,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1793502413,https://api.github.com/repos/rapidsai/cudf/issues/11253,1793502413,IC_kwDOBWUGps5q5qzN,2023-11-04T17:29:22Z,2023-11-04T17:29:22Z,NONE,"Hi @vyasr. Thank you for reaching out, I unfortunately have had issues with this, so I slowed down. Is this something that is still an open issue?",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1793502413/reactions,0,0,0,0,0,0,0,0,0,11253
1536,https://api.github.com/repos/rapidsai/cudf/issues/comments/1797038746,https://github.com/rapidsai/cudf/issues/11253#issuecomment-1797038746,https://api.github.com/repos/rapidsai/cudf/issues/11253,1797038746,IC_kwDOBWUGps5rHKKa,2023-11-06T23:41:21Z,2023-11-06T23:41:21Z,CONTRIBUTOR,"Hi @ShahRishi, yes it is and we would still welcome your contributions here. If there's something we can do to help unblock you, please let us know!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1797038746/reactions,0,0,0,0,0,0,0,0,0,11253
1537,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109045168,https://github.com/rapidsai/cudf/issues/11253#issuecomment-2109045168,https://api.github.com/repos/rapidsai/cudf/issues/11253,2109045168,IC_kwDOBWUGps59tXmw,2024-05-14T00:21:47Z,2024-05-14T00:21:47Z,CONTRIBUTOR,"@ShahRishi just circling back here. If you'd like, and if you have your code in some shareable state, feel free to merge the latest cudf and push out a draft PR! We can always get someone to help you out with finishing things up.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109045168/reactions,0,0,0,0,0,0,0,0,0,11253
1538,https://api.github.com/repos/rapidsai/cudf/issues/comments/2110571890,https://github.com/rapidsai/cudf/issues/11253#issuecomment-2110571890,https://api.github.com/repos/rapidsai/cudf/issues/11253,2110571890,IC_kwDOBWUGps59zMVy,2024-05-14T15:46:17Z,2024-05-14T15:46:17Z,NONE,"Yes, I appreciate you checking in. I will consolidate my progress and push a draft by 5/17/24! Thank you @vyasr!",,ShahRishi,9394733,MDQ6VXNlcjkzOTQ3MzM=,https://avatars.githubusercontent.com/u/9394733?v=4,,https://api.github.com/users/ShahRishi,https://github.com/ShahRishi,https://api.github.com/users/ShahRishi/followers,https://api.github.com/users/ShahRishi/following{/other_user},https://api.github.com/users/ShahRishi/gists{/gist_id},https://api.github.com/users/ShahRishi/starred{/owner}{/repo},https://api.github.com/users/ShahRishi/subscriptions,https://api.github.com/users/ShahRishi/orgs,https://api.github.com/users/ShahRishi/repos,https://api.github.com/users/ShahRishi/events{/privacy},https://api.github.com/users/ShahRishi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2110571890/reactions,0,0,0,0,0,0,0,0,0,11253
1539,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113618738,https://github.com/rapidsai/cudf/issues/11253#issuecomment-2113618738,https://api.github.com/repos/rapidsai/cudf/issues/11253,2113618738,IC_kwDOBWUGps59-0My,2024-05-15T23:00:35Z,2024-05-15T23:00:35Z,CONTRIBUTOR,Thank you @ShahRishi!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113618738/reactions,0,0,0,0,0,0,0,0,0,11253
1540,https://api.github.com/repos/rapidsai/cudf/issues/comments/1214440064,https://github.com/rapidsai/cudf/issues/11278#issuecomment-1214440064,https://api.github.com/repos/rapidsai/cudf/issues/11278,1214440064,IC_kwDOBWUGps5IYuKA,2022-08-14T20:02:55Z,2022-08-14T20:02:55Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1214440064/reactions,0,0,0,0,0,0,0,0,0,11278
1541,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949432631,https://github.com/rapidsai/cudf/issues/11278#issuecomment-1949432631,https://api.github.com/repos/rapidsai/cudf/issues/11278,1949432631,IC_kwDOBWUGps50Mfs3,2024-02-16T22:36:13Z,2024-02-16T22:36:13Z,CONTRIBUTOR,This issue does not appear to impact cuDF-python and may only impact the Java bindings.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949432631/reactions,0,0,0,0,0,0,0,0,0,11278
1542,https://api.github.com/repos/rapidsai/cudf/issues/comments/1187287532,https://github.com/rapidsai/cudf/issues/11285#issuecomment-1187287532,https://api.github.com/repos/rapidsai/cudf/issues/11285,1187287532,IC_kwDOBWUGps5GxJHs,2022-07-18T12:30:05Z,2022-07-18T12:30:05Z,CONTRIBUTOR,"Assigning myself for now - I have some ideas I'd like to explore for improvement. If someone else is interested in this before I get a chance to work on it, please reach out and I can share my thoughts!",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1187287532/reactions,0,0,0,0,0,0,0,0,0,11285
1543,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217998403,https://github.com/rapidsai/cudf/issues/11285#issuecomment-1217998403,https://api.github.com/repos/rapidsai/cudf/issues/11285,1217998403,IC_kwDOBWUGps5ImS5D,2022-08-17T13:17:18Z,2022-08-17T13:17:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217998403/reactions,0,0,0,0,0,0,0,0,0,11285
1544,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221552428,https://github.com/rapidsai/cudf/issues/11298#issuecomment-1221552428,https://api.github.com/repos/rapidsai/cudf/issues/11298,1221552428,IC_kwDOBWUGps5Iz2ks,2022-08-21T14:03:00Z,2022-08-21T14:03:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221552428/reactions,0,0,0,0,0,0,0,0,0,11298
1545,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226215511,https://github.com/rapidsai/cudf/issues/11308#issuecomment-1226215511,https://api.github.com/repos/rapidsai/cudf/issues/11308,1226215511,IC_kwDOBWUGps5JFpBX,2022-08-24T20:02:55Z,2022-08-24T20:02:55Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226215511/reactions,0,0,0,0,0,0,0,0,0,11308
1546,https://api.github.com/repos/rapidsai/cudf/issues/comments/1227597155,https://github.com/rapidsai/cudf/issues/11332#issuecomment-1227597155,https://api.github.com/repos/rapidsai/cudf/issues/11332,1227597155,IC_kwDOBWUGps5JK6Vj,2022-08-25T18:03:10Z,2022-08-25T18:03:10Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1227597155/reactions,0,0,0,0,0,0,0,0,0,11332
1547,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194427369,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1194427369,https://api.github.com/repos/rapidsai/cudf/issues/11341,1194427369,IC_kwDOBWUGps5HMYPp,2022-07-25T18:06:03Z,2022-07-25T18:06:03Z,CONTRIBUTOR,"@MikeChenfu Not sure by what you mean by **renaming**. But, is your question that `to_csv` writes files in sequential order of `name-1.csv`, `name-2.csv`... when `name-*.csv` is provided. And your requirement is that you want to do a similar thing in `to_orc` too? 

```python
In [1]: import cudf

In [2]: import dask_cudf

In [3]: df = cudf.DataFrame({""x"": range(10)})

In [4]: df
Out[4]: 
   x
0  0
1  1
2  2
3  3
4  4
5  5
6  6
7  7
8  8
9  9

In [5]: ddf = dask_cudf.from_cudf(df, 2)

In [6]: ddf.to_orc('name-*.orc')
Out[6]: 
('/nvme/0/pgali/cudf/name-*.orc/part.0.orc',
 '/nvme/0/pgali/cudf/name-*.orc/part.1.orc')

In [7]: ddf.to_orc('name.orc')
Out[7]: 
('/nvme/0/pgali/cudf/name.orc/part.0.orc',
 '/nvme/0/pgali/cudf/name.orc/part.1.orc')

In [8]: ddf.to_csv('name-*.csv')
Out[8]: ['/nvme/0/pgali/cudf/name-0.csv', '/nvme/0/pgali/cudf/name-1.csv']
```",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194427369/reactions,0,0,0,0,0,0,0,0,0,11341
1548,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194431752,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1194431752,https://api.github.com/repos/rapidsai/cudf/issues/11341,1194431752,IC_kwDOBWUGps5HMZUI,2022-07-25T18:09:59Z,2022-07-25T18:09:59Z,NONE,"Hello @galipremsagar, you are right. Is it possible do the similar thing in `to_orc`?
Expected behavior
```python
In [6]: ddf.to_orc('name-*.orc')
Out[6]: 
('/nvme/0/pgali/cudf/name-0.orc/',
 '/nvme/0/pgali/cudf/name-1.orc/')

```",,MikeChenfu,17817768,MDQ6VXNlcjE3ODE3NzY4,https://avatars.githubusercontent.com/u/17817768?v=4,,https://api.github.com/users/MikeChenfu,https://github.com/MikeChenfu,https://api.github.com/users/MikeChenfu/followers,https://api.github.com/users/MikeChenfu/following{/other_user},https://api.github.com/users/MikeChenfu/gists{/gist_id},https://api.github.com/users/MikeChenfu/starred{/owner}{/repo},https://api.github.com/users/MikeChenfu/subscriptions,https://api.github.com/users/MikeChenfu/orgs,https://api.github.com/users/MikeChenfu/repos,https://api.github.com/users/MikeChenfu/events{/privacy},https://api.github.com/users/MikeChenfu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194431752/reactions,0,0,0,0,0,0,0,0,0,11341
1549,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194436514,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1194436514,https://api.github.com/repos/rapidsai/cudf/issues/11341,1194436514,IC_kwDOBWUGps5HMaei,2022-07-25T18:14:20Z,2022-07-25T18:14:20Z,CONTRIBUTOR,"That is not something possible currently, we can add that support similarly in `to_orc` to make it uniform across writers. Converting this into a feature request.",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194436514/reactions,0,0,0,0,0,0,0,0,0,11341
1550,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194437693,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1194437693,https://api.github.com/repos/rapidsai/cudf/issues/11341,1194437693,IC_kwDOBWUGps5HMaw9,2022-07-25T18:15:16Z,2022-07-25T18:15:16Z,NONE,Thanks for reply. Appreciate it!,,MikeChenfu,17817768,MDQ6VXNlcjE3ODE3NzY4,https://avatars.githubusercontent.com/u/17817768?v=4,,https://api.github.com/users/MikeChenfu,https://github.com/MikeChenfu,https://api.github.com/users/MikeChenfu/followers,https://api.github.com/users/MikeChenfu/following{/other_user},https://api.github.com/users/MikeChenfu/gists{/gist_id},https://api.github.com/users/MikeChenfu/starred{/owner}{/repo},https://api.github.com/users/MikeChenfu/subscriptions,https://api.github.com/users/MikeChenfu/orgs,https://api.github.com/users/MikeChenfu/repos,https://api.github.com/users/MikeChenfu/events{/privacy},https://api.github.com/users/MikeChenfu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1194437693/reactions,0,0,0,0,0,0,0,0,0,11341
1551,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226124626,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1226124626,https://api.github.com/repos/rapidsai/cudf/issues/11341,1226124626,IC_kwDOBWUGps5JFS1S,2022-08-24T19:03:56Z,2022-08-24T19:03:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226124626/reactions,0,0,0,0,0,0,0,0,0,11341
1552,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375168238,https://github.com/rapidsai/cudf/issues/11341#issuecomment-1375168238,https://api.github.com/repos/rapidsai/cudf/issues/11341,1375168238,IC_kwDOBWUGps5R92bu,2023-01-09T06:37:45Z,2023-01-09T06:37:45Z,CONTRIBUTOR,@galipremsagar are there any libcudf changes required for this feature?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375168238/reactions,0,0,0,0,0,0,0,0,0,11341
1553,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229154940,https://github.com/rapidsai/cudf/issues/11384#issuecomment-1229154940,https://api.github.com/repos/rapidsai/cudf/issues/11384,1229154940,IC_kwDOBWUGps5JQ2p8,2022-08-27T09:02:51Z,2022-08-27T09:02:51Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229154940/reactions,0,0,0,0,0,0,0,0,0,11384
1554,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229193606,https://github.com/rapidsai/cudf/issues/11384#issuecomment-1229193606,https://api.github.com/repos/rapidsai/cudf/issues/11384,1229193606,IC_kwDOBWUGps5JRAGG,2022-08-27T13:33:21Z,2022-08-27T13:34:02Z,CONTRIBUTOR,~Fixed in referenced PR~,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229193606/reactions,0,0,0,0,0,0,0,0,0,11384
1555,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229193806,https://github.com/rapidsai/cudf/issues/11384#issuecomment-1229193806,https://api.github.com/repos/rapidsai/cudf/issues/11384,1229193806,IC_kwDOBWUGps5JRAJO,2022-08-27T13:34:50Z,2022-08-27T13:34:50Z,CONTRIBUTOR,A fix for this is still needed.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229193806/reactions,0,0,0,0,0,0,0,0,0,11384
1556,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258106257,https://github.com/rapidsai/cudf/issues/11384#issuecomment-1258106257,https://api.github.com/repos/rapidsai/cudf/issues/11384,1258106257,IC_kwDOBWUGps5K_S2R,2022-09-26T14:14:18Z,2022-09-26T14:14:18Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1258106257/reactions,0,0,0,0,0,0,0,0,0,11384
1557,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109064437,https://github.com/rapidsai/cudf/issues/11384#issuecomment-2109064437,https://api.github.com/repos/rapidsai/cudf/issues/11384,2109064437,IC_kwDOBWUGps59tcT1,2024-05-14T00:44:50Z,2024-05-14T00:44:50Z,CONTRIBUTOR,We'll need to see if the same issue made it into `pylibcudf.Column.from_libcudf`. I would assume that it has simply moved there.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109064437/reactions,0,0,0,0,0,0,0,0,0,11384
1558,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109789823,https://github.com/rapidsai/cudf/issues/11384#issuecomment-2109789823,https://api.github.com/repos/rapidsai/cudf/issues/11384,2109789823,IC_kwDOBWUGps59wNZ_,2024-05-14T10:01:19Z,2024-05-14T10:01:19Z,CONTRIBUTOR,"Maybe, although pylibcudf's `from_column_view` never looks at the mask of the `column_view` and always just takes it from the `owner` Column.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109789823/reactions,0,0,0,0,0,0,0,0,0,11384
1559,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113620522,https://github.com/rapidsai/cudf/issues/11384#issuecomment-2113620522,https://api.github.com/repos/rapidsai/cudf/issues/11384,2113620522,IC_kwDOBWUGps59-0oq,2024-05-15T23:01:53Z,2024-05-15T23:01:53Z,CONTRIBUTOR,"Oh right, this is for views so not `from_libcudf` but `from_column_view`. I definitely recall making the API more restrictive than the original cudf version to avoid this type of ambiguity, so maybe I avoided the problem.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113620522/reactions,0,0,0,0,0,0,0,0,0,11384
1560,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229198124,https://github.com/rapidsai/cudf/issues/11389#issuecomment-1229198124,https://api.github.com/repos/rapidsai/cudf/issues/11389,1229198124,IC_kwDOBWUGps5JRBMs,2022-08-27T14:02:48Z,2022-08-27T14:02:48Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229198124/reactions,0,0,0,0,0,0,0,0,0,11389
1561,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229228352,https://github.com/rapidsai/cudf/issues/11391#issuecomment-1229228352,https://api.github.com/repos/rapidsai/cudf/issues/11391,1229228352,IC_kwDOBWUGps5JRIlA,2022-08-27T17:04:45Z,2022-08-27T17:04:45Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229228352/reactions,0,0,0,0,0,0,0,0,0,11391
1562,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229276107,https://github.com/rapidsai/cudf/issues/11394#issuecomment-1229276107,https://api.github.com/repos/rapidsai/cudf/issues/11394,1229276107,IC_kwDOBWUGps5JRUPL,2022-08-27T22:02:45Z,2022-08-27T22:02:45Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229276107/reactions,0,0,0,0,0,0,0,0,0,11394
1563,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229557550,https://github.com/rapidsai/cudf/issues/11394#issuecomment-1229557550,https://api.github.com/repos/rapidsai/cudf/issues/11394,1229557550,IC_kwDOBWUGps5JSY8u,2022-08-28T21:27:11Z,2022-08-28T21:27:11Z,CONTRIBUTOR,Still needed ,,hyperbolic2346,3506308,MDQ6VXNlcjM1MDYzMDg=,https://avatars.githubusercontent.com/u/3506308?v=4,,https://api.github.com/users/hyperbolic2346,https://github.com/hyperbolic2346,https://api.github.com/users/hyperbolic2346/followers,https://api.github.com/users/hyperbolic2346/following{/other_user},https://api.github.com/users/hyperbolic2346/gists{/gist_id},https://api.github.com/users/hyperbolic2346/starred{/owner}{/repo},https://api.github.com/users/hyperbolic2346/subscriptions,https://api.github.com/users/hyperbolic2346/orgs,https://api.github.com/users/hyperbolic2346/repos,https://api.github.com/users/hyperbolic2346/events{/privacy},https://api.github.com/users/hyperbolic2346/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229557550/reactions,0,0,0,0,0,0,0,0,0,11394
1564,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260100390,https://github.com/rapidsai/cudf/issues/11394#issuecomment-1260100390,https://api.github.com/repos/rapidsai/cudf/issues/11394,1260100390,IC_kwDOBWUGps5LG5sm,2022-09-27T22:03:25Z,2022-09-27T22:03:25Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260100390/reactions,0,0,0,0,0,0,0,0,0,11394
1565,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260278826,https://github.com/rapidsai/cudf/issues/11394#issuecomment-1260278826,https://api.github.com/repos/rapidsai/cudf/issues/11394,1260278826,IC_kwDOBWUGps5LHlQq,2022-09-28T01:34:52Z,2022-09-28T01:34:52Z,CONTRIBUTOR,still needed,,hyperbolic2346,3506308,MDQ6VXNlcjM1MDYzMDg=,https://avatars.githubusercontent.com/u/3506308?v=4,,https://api.github.com/users/hyperbolic2346,https://github.com/hyperbolic2346,https://api.github.com/users/hyperbolic2346/followers,https://api.github.com/users/hyperbolic2346/following{/other_user},https://api.github.com/users/hyperbolic2346/gists{/gist_id},https://api.github.com/users/hyperbolic2346/starred{/owner}{/repo},https://api.github.com/users/hyperbolic2346/subscriptions,https://api.github.com/users/hyperbolic2346/orgs,https://api.github.com/users/hyperbolic2346/repos,https://api.github.com/users/hyperbolic2346/events{/privacy},https://api.github.com/users/hyperbolic2346/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260278826/reactions,0,0,0,0,0,0,0,0,0,11394
1566,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229344035,https://github.com/rapidsai/cudf/issues/11395#issuecomment-1229344035,https://api.github.com/repos/rapidsai/cudf/issues/11395,1229344035,IC_kwDOBWUGps5JRk0j,2022-08-28T00:14:59Z,2022-08-28T00:14:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229344035/reactions,0,0,0,0,0,0,0,0,0,11395
1567,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287265837,https://github.com/rapidsai/cudf/issues/11395#issuecomment-1287265837,https://api.github.com/repos/rapidsai/cudf/issues/11395,1287265837,IC_kwDOBWUGps5Muh4t,2022-10-21T17:48:11Z,2022-10-21T17:48:11Z,CONTRIBUTOR,"@mythrocks @hyperbolic2346 I looked through the code in `writer_impl.cu` and I'm not sure what the best approach is here. Aggregate initialization is totally fine with (public) parent classes and members, but the issue with either aggregate initialization or the use of a constructor is that I see at least three variants of these objects in terms of what members are set. It's not clear to me if those are the only options, or if there might even be further combinations of attributes set in future iterations, each of which would necessitate a different constructor signature. With [C++20 designated initializers](https://en.cppreference.com/w/cpp/language/aggregate_initialization#Designated_initializers) we could do this very neatly, but I don't see a clean solution right now. Am I understanding correctly how the object could be used, or do you think there is a simpler constructor we could define to improve the code in its current state?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287265837/reactions,0,0,0,0,0,0,0,0,0,11395
1568,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198776996,https://github.com/rapidsai/cudf/issues/11396#issuecomment-1198776996,https://api.github.com/repos/rapidsai/cudf/issues/11396,1198776996,IC_kwDOBWUGps5Hc-Kk,2022-07-29T00:57:48Z,2022-07-29T00:57:48Z,CONTRIBUTOR,"@bdice noticed the same issues while reviewing #11129, which moves these dremel files around but also doesn't modify them. We'll want to do a thorough pass through both the docstring of `get_dremel_data` and the actual function implementation once both #11129 and of @hyperbolic2346's Parquet-related PRs are merged where we just focus on cleaning up that functionality and documentation.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1198776996/reactions,0,0,0,0,0,0,0,0,0,11396
1569,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229354380,https://github.com/rapidsai/cudf/issues/11396#issuecomment-1229354380,https://api.github.com/repos/rapidsai/cudf/issues/11396,1229354380,IC_kwDOBWUGps5JRnWM,2022-08-28T01:37:15Z,2022-08-28T01:37:15Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1229354380/reactions,0,0,0,0,0,0,0,0,0,11396
1570,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109062172,https://github.com/rapidsai/cudf/issues/11396#issuecomment-2109062172,https://api.github.com/repos/rapidsai/cudf/issues/11396,2109062172,IC_kwDOBWUGps59tbwc,2024-05-14T00:42:07Z,2024-05-14T00:42:07Z,CONTRIBUTOR,@bdice @hyperbolic2346 is this something you two want to take another look at? I think it got lost in the shuffle of the other PRs.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109062172/reactions,0,0,0,0,0,0,0,0,0,11396
1571,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200587991,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1200587991,https://api.github.com/repos/rapidsai/cudf/issues/11407,1200587991,IC_kwDOBWUGps5Hj4TX,2022-08-01T01:46:31Z,2022-08-01T01:46:31Z,COLLABORATOR,"FYI -- https://issues.apache.org/jira/browse/ARROW-17092

I believe the link above is for Feather V1 and the IPC File Format is Feather V2.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200587991/reactions,0,0,0,0,0,0,0,0,0,11407
1572,https://api.github.com/repos/rapidsai/cudf/issues/comments/1232397220,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1232397220,https://api.github.com/repos/rapidsai/cudf/issues/11407,1232397220,IC_kwDOBWUGps5JdOOk,2022-08-31T02:59:44Z,2022-08-31T02:59:44Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1232397220/reactions,0,0,0,0,0,0,0,0,0,11407
1573,https://api.github.com/repos/rapidsai/cudf/issues/comments/1367782975,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1367782975,https://api.github.com/repos/rapidsai/cudf/issues/11407,1367782975,IC_kwDOBWUGps5RhrY_,2022-12-30T08:07:33Z,2022-12-30T08:07:33Z,NONE,It's a valuable need. Don't the community have a plan?,,mjshare,60972404,MDQ6VXNlcjYwOTcyNDA0,https://avatars.githubusercontent.com/u/60972404?v=4,,https://api.github.com/users/mjshare,https://github.com/mjshare,https://api.github.com/users/mjshare/followers,https://api.github.com/users/mjshare/following{/other_user},https://api.github.com/users/mjshare/gists{/gist_id},https://api.github.com/users/mjshare/starred{/owner}{/repo},https://api.github.com/users/mjshare/subscriptions,https://api.github.com/users/mjshare/orgs,https://api.github.com/users/mjshare/repos,https://api.github.com/users/mjshare/events{/privacy},https://api.github.com/users/mjshare/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1367782975/reactions,0,0,0,0,0,0,0,0,0,11407
1574,https://api.github.com/repos/rapidsai/cudf/issues/comments/1369915983,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1369915983,https://api.github.com/repos/rapidsai/cudf/issues/11407,1369915983,IC_kwDOBWUGps5Rp0JP,2023-01-03T15:40:44Z,2023-01-03T15:41:35Z,MEMBER,"> Problem description:
When there are a large number of string columns, data in feather format is much smaller than that in arrow format. When data is transmitted to the GPU in feather format for decompression, the PICE bandwidth pressure is much lower. This requirement is valuable. Can the GPU support the feather format for decompression in GPU like parquet?

_Originally posted by @mjshare in https://github.com/rapidsai/cudf/issues/12453#issue-1514306164_

> Similar requirements, Does the community have a solution plan? This reduces the bandwidth consumption of the GPU.
@davidwendt

_Originally posted by @mjshare in https://github.com/rapidsai/cudf/issues/12453#issuecomment-1369787656_

@mjshare , would you be able to provide an example in which Feather vs Arrow makes a significant difference in a workload? Are you working in C++ or Python?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1369915983/reactions,0,0,0,0,0,0,0,0,0,11407
1575,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370410575,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1370410575,https://api.github.com/repos/rapidsai/cudf/issues/11407,1370410575,IC_kwDOBWUGps5Rrs5P,2023-01-04T02:09:47Z,2023-01-04T02:18:39Z,NONE,"> > Problem description:
> > When there are a large number of string columns, data in feather format is much smaller than that in arrow format. When data is transmitted to the GPU in feather format for decompression, the PICE bandwidth pressure is much lower. This requirement is valuable. Can the GPU support the feather format for decompression in GPU like parquet?
> 
> _Originally posted by @mjshare in [#12453 (comment)](https://github.com/rapidsai/cudf/issues/12453#issue-1514306164)_
> 
> > Similar requirements, Does the community have a solution plan? This reduces the bandwidth consumption of the GPU.
> > @davidwendt
> 
> _Originally posted by @mjshare in [#12453 (comment)](https://github.com/rapidsai/cudf/issues/12453#issuecomment-1369787656)_
> 
> @mjshare , would you be able to provide an example in which Feather vs Arrow makes a significant difference in a workload? Are you working in C++ or Python?

```
>>> import pyarrow
>>> import numpy as np
>>>
>>> def create_table(n_rows, n_cols):
...     table = pyarrow.Table.from_pydict({f'col_{c}': np.random.randint(0, 10000, size=[n_rows]) for c in range(n_cols)})
...     return table
...
>>>
>>> tbl = create_table(8000 * 10000, 6)
>>> print(f'arrow table size {tbl.nbytes // 1024 // 1024} MB')
arrow table size 3662 MB
>>>
>>> import pyarrow.feather as feather
>>> feather.write_feather(tbl, '/tmp/data.feather')
>>>
>>> import os
>>> feather_size = os.path.getsize('/tmp/data.feather')
>>> print(f'feather file size {feather_size // 1024 // 1024} MB')
feather file size 1755 MB
```

```
>>> import pyarrow
>>> import numpy as np
>>>
>>> def create_table(n_rows, n_cols):
...     table = pyarrow.Table.from_pydict({f'col_{c}': np.random.randint(0, 10000, size=[n_rows]) for c in range(n_cols)})
...     return table
...
>>>
>>> def create_table_with_str(n_rows, n_cols, n_strs, n_strs_cols):
...     start = time.time()
...     prefix = 'xxxx_' * ((n_strs - 10) // 5)
...     cdf = create_table(n_rows, n_cols).to_pandas()
...     for i in range(n_strs_cols):
...         cdf[f'col_{i}'] = cdf[f'col_{i}'].apply(lambda x: f'{prefix}{x:010}')
...     return pyarrow.Table.from_pandas(cdf)
...
>>>
>>> tbl = create_table_with_str(2000 * 10000, 2, 40, 2)
>>> print(tbl.to_pandas())
                                             col_0                                     col_1
0         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008295  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000007592
1         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004599  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002469
2         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004553  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008704
3         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004059  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000003143
4         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000006622  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000000062
...                                            ...                                       ...
19999995  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000009539  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002897
19999996  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000000073  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000009834
19999997  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002616  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008283
19999998  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000001085  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000005927
19999999  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008378  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002684

[20000000 rows x 2 columns]
>>>
>>> print(f'arrow table size {tbl.nbytes // 1024 // 1024} MB')
arrow table size 1678 MB
>>>
>>> import pyarrow.feather as feather
>>> feather.write_feather(tbl, '/tmp/data.feather')
>>>
>>> import os
>>> feather_size = os.path.getsize('/tmp/data.feather')
>>> print(f'feather file size {feather_size // 1024 // 1024} MB')
feather file size 352 MB
>>>

```",,infzo,43532055,MDQ6VXNlcjQzNTMyMDU1,https://avatars.githubusercontent.com/u/43532055?v=4,,https://api.github.com/users/infzo,https://github.com/infzo,https://api.github.com/users/infzo/followers,https://api.github.com/users/infzo/following{/other_user},https://api.github.com/users/infzo/gists{/gist_id},https://api.github.com/users/infzo/starred{/owner}{/repo},https://api.github.com/users/infzo/subscriptions,https://api.github.com/users/infzo/orgs,https://api.github.com/users/infzo/repos,https://api.github.com/users/infzo/events{/privacy},https://api.github.com/users/infzo/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370410575/reactions,0,0,0,0,0,0,0,0,0,11407
1576,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370418779,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1370418779,https://api.github.com/repos/rapidsai/cudf/issues/11407,1370418779,IC_kwDOBWUGps5Rru5b,2023-01-04T02:28:00Z,2023-01-04T02:28:00Z,NONE,"> > > Problem description:
> > > When there are a large number of string columns, data in feather format is much smaller than that in arrow format. When data is transmitted to the GPU in feather format for decompression, the PICE bandwidth pressure is much lower. This requirement is valuable. Can the GPU support the feather format for decompression in GPU like parquet?
> > 
> > 
> > _Originally posted by @mjshare in [#12453 (comment)](https://github.com/rapidsai/cudf/issues/12453#issue-1514306164)_
> > > Similar requirements, Does the community have a solution plan? This reduces the bandwidth consumption of the GPU.
> > > @davidwendt
> > 
> > 
> > _Originally posted by @mjshare in [#12453 (comment)](https://github.com/rapidsai/cudf/issues/12453#issuecomment-1369787656)_
> > @mjshare , would you be able to provide an example in which Feather vs Arrow makes a significant difference in a workload? Are you working in C++ or Python?
> 
> ```
> >>> import pyarrow
> >>> import numpy as np
> >>>
> >>> def create_table(n_rows, n_cols):
> ...     table = pyarrow.Table.from_pydict({f'col_{c}': np.random.randint(0, 10000, size=[n_rows]) for c in range(n_cols)})
> ...     return table
> ...
> >>>
> >>> tbl = create_table(8000 * 10000, 6)
> >>> print(f'arrow table size {tbl.nbytes // 1024 // 1024} MB')
> arrow table size 3662 MB
> >>>
> >>> import pyarrow.feather as feather
> >>> feather.write_feather(tbl, '/tmp/data.feather')
> >>>
> >>> import os
> >>> feather_size = os.path.getsize('/tmp/data.feather')
> >>> print(f'feather file size {feather_size // 1024 // 1024} MB')
> feather file size 1755 MB
> ```
> 
> ```
> >>> import pyarrow
> >>> import numpy as np
> >>>
> >>> def create_table(n_rows, n_cols):
> ...     table = pyarrow.Table.from_pydict({f'col_{c}': np.random.randint(0, 10000, size=[n_rows]) for c in range(n_cols)})
> ...     return table
> ...
> >>>
> >>> def create_table_with_str(n_rows, n_cols, n_strs, n_strs_cols):
> ...     start = time.time()
> ...     prefix = 'xxxx_' * ((n_strs - 10) // 5)
> ...     cdf = create_table(n_rows, n_cols).to_pandas()
> ...     for i in range(n_strs_cols):
> ...         cdf[f'col_{i}'] = cdf[f'col_{i}'].apply(lambda x: f'{prefix}{x:010}')
> ...     return pyarrow.Table.from_pandas(cdf)
> ...
> >>>
> >>> tbl = create_table_with_str(2000 * 10000, 2, 40, 2)
> >>> print(tbl.to_pandas())
>                                              col_0                                     col_1
> 0         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008295  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000007592
> 1         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004599  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002469
> 2         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004553  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008704
> 3         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000004059  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000003143
> 4         xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000006622  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000000062
> ...                                            ...                                       ...
> 19999995  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000009539  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002897
> 19999996  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000000073  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000009834
> 19999997  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002616  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008283
> 19999998  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000001085  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000005927
> 19999999  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000008378  xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_0000002684
> 
> [20000000 rows x 2 columns]
> >>>
> >>> print(f'arrow table size {tbl.nbytes // 1024 // 1024} MB')
> arrow table size 1678 MB
> >>>
> >>> import pyarrow.feather as feather
> >>> feather.write_feather(tbl, '/tmp/data.feather')
> >>>
> >>> import os
> >>> feather_size = os.path.getsize('/tmp/data.feather')
> >>> print(f'feather file size {feather_size // 1024 // 1024} MB')
> feather file size 352 MB
> >>>
> ```

In typical scenarios, an integer can be compressed to 1/2, and a character string can be compressed to 1/4.",,mjshare,60972404,MDQ6VXNlcjYwOTcyNDA0,https://avatars.githubusercontent.com/u/60972404?v=4,,https://api.github.com/users/mjshare,https://github.com/mjshare,https://api.github.com/users/mjshare/followers,https://api.github.com/users/mjshare/following{/other_user},https://api.github.com/users/mjshare/gists{/gist_id},https://api.github.com/users/mjshare/starred{/owner}{/repo},https://api.github.com/users/mjshare/subscriptions,https://api.github.com/users/mjshare/orgs,https://api.github.com/users/mjshare/repos,https://api.github.com/users/mjshare/events{/privacy},https://api.github.com/users/mjshare/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370418779/reactions,0,0,0,0,0,0,0,0,0,11407
1577,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370478924,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1370478924,https://api.github.com/repos/rapidsai/cudf/issues/11407,1370478924,IC_kwDOBWUGps5Rr9lM,2023-01-04T04:35:16Z,2023-01-04T04:35:16Z,MEMBER,"Writing the file out to Feather will compress the data using LZ4 by default. Writing out to Parquet will compress the data using snappy by default, but you can select LZ4 if it matters for your dataset / use case.

cuDF providers accelerated readers for Parquet. Could you use that for your use case?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370478924/reactions,0,0,0,0,0,0,0,0,0,11407
1578,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370608131,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1370608131,https://api.github.com/repos/rapidsai/cudf/issues/11407,1370608131,IC_kwDOBWUGps5RsdID,2023-01-04T08:21:19Z,2023-01-04T08:23:18Z,NONE,"> Writing the file out to Feather will compress the data using LZ4 by default. Writing out to Parquet will compress the data using snappy by default, but you can select LZ4 if it matters for your dataset / use case.
> 
> cuDF providers accelerated readers for Parquet. Could you use that for your use case?

```
>>> def create_table(n_rows, n_cols):
...     table = pyarrow.Table.from_pydict({f'col_{c}': np.random.randint(0, 10000, size=[n_rows]) for c in range(n_cols)})
...     return table
...
>>> def create_table_with_str(n_rows, n_cols, n_strs, n_strs_cols):
...     prefix = 'xxxx_' * ((n_strs - 10) // 5)
...     cdf = create_table(n_rows, n_cols).to_pandas()
...     for i in range(n_strs_cols):
...         cdf[f'col_{i}'] = cdf[f'col_{i}'].apply(lambda x: f'{prefix}{x:010}')
...     return pyarrow.Table.from_pandas(cdf)
...
>>> tbl = create_table_with_str(2000 * 10000, 2, 40, 2)
>>> print(f'arrow table size {tbl.nbytes // 1024 // 1024} MB')
arrow table size 1678 MB
>>>
>>> def arrow_cudf():
...     start = time.time()
...     df = cudf.DataFrame.from_arrow(tbl)
...     print(f'arrow_cudf cost {time.time() - start} s')
...
>>> arrow_cudf()
arrow_cudf cost 0.3969125747680664 s
>>>
>>> arrow_cudf()
arrow_cudf cost 0.39836621284484863 s
>>>
>>> def feather():
...     import pyarrow.feather as feather
...     start = time.time()
...     feather.write_feather(tbl, '/tmp/data.feather')
...     print(f'write_feather cost {time.time() - start} s')
...     feather_size = os.path.getsize('/tmp/data.feather')
...     print(f'feather file size {feather_size // 1024 // 1024} MB')
...     start = time.time()
...     df = cudf.read_feather('/tmp/data.feather')
...     print(f'read_feather cost {time.time() - start} s')
...
>>> feather()
write_feather cost 0.8628420829772949 s
feather file size 352 MB
read_feather cost 1.010714054107666 s
>>>
>>> feather()
write_feather cost 0.8496232032775879 s
feather file size 352 MB
read_feather cost 1.0259618759155273 s
>>>
>>> def parquet():
...     start = time.time()
...     parquet.write_table(tbl, '/tmp/data.parquet', compression='LZ4')
...     print(f'write_parquet cost {time.time() - start} s')
...     parquet_size = os.path.getsize('/tmp/data.parquet')
...     print(f'parquet file size {parquet_size // 1024 // 1024} MB')
...     start = time.time()
...     df = cudf.read_parquet('/tmp/data.parquet')
...     print(f'read_parquet cost {time.time() - start} s')
...     start = time.time()
...     df.to_parquet('/tmp/data_second.parquet')
...     print(f'to_parquet cost {time.time() - start} s')
...
>>> parquet()
write_parquet cost 2.4992175102233887 s
parquet file size 67 MB
read_parquet cost 0.03415870666503906 s
to_parquet cost 0.05026721954345703 s
>>>
>>> parquet()
write_parquet cost 2.4414985179901123 s
parquet file size 67 MB
read_parquet cost 0.034529924392700195 s
to_parquet cost 0.05629706382751465 s
>>>

#################################
arrow table size 1678 MB

arrow   -> cudf         0.39    s

arrow   -> feather      0.84    s
feather -> cudf         1.02    s

arrow   -> parquet      2.4     s
parquet -> cudf         0.034   s  
cudf    -> parquet      0.05    s
```

1. It takes too long to output the arrow as parquet. If feather supports gpu read, can we combine the read and write advantages to achieve better conversion performance?
2. Can the arrow-to-cudf conversion be pre-compressed and then transmitted to the GPU to reduce bandwidth pressure and improve transmission efficiency?

",,infzo,43532055,MDQ6VXNlcjQzNTMyMDU1,https://avatars.githubusercontent.com/u/43532055?v=4,,https://api.github.com/users/infzo,https://github.com/infzo,https://api.github.com/users/infzo/followers,https://api.github.com/users/infzo/following{/other_user},https://api.github.com/users/infzo/gists{/gist_id},https://api.github.com/users/infzo/starred{/owner}{/repo},https://api.github.com/users/infzo/subscriptions,https://api.github.com/users/infzo/orgs,https://api.github.com/users/infzo/repos,https://api.github.com/users/infzo/events{/privacy},https://api.github.com/users/infzo/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370608131/reactions,0,0,0,0,0,0,0,0,0,11407
1579,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371331469,https://github.com/rapidsai/cudf/issues/11407#issuecomment-1371331469,https://api.github.com/repos/rapidsai/cudf/issues/11407,1371331469,IC_kwDOBWUGps5RvNuN,2023-01-04T19:28:14Z,2023-01-04T19:28:14Z,CONTRIBUTOR,What about doing arrow->cudf->parquet? Based on your timings that looks to be nearly optimal in terms of both timing and compression.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371331469/reactions,0,0,0,0,0,0,0,0,0,11407
1580,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200014132,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1200014132,https://api.github.com/repos/rapidsai/cudf/issues/11408,1200014132,IC_kwDOBWUGps5HhsM0,2022-07-29T23:02:45Z,2022-07-29T23:03:29Z,CONTRIBUTOR,"I got some ideas, but they depend on a few points I'm not sure about yet:

1. Are comparison semantics of `byte_array_view` similar/equivalent to `string_view`?
2. Is `byte_array_view` a `device_span`? I.e. would deriving from `device_span` follow [Liskov Substitution Principle](https://blog.knoldus.com/what-is-liskov-substitution-principle-lsp-with-real-world-examples/#:~:text=Simply%20put%2C%20the%20Liskov%20Substitution,the%20objects%20of%20our%20superclass.)?",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1200014132/reactions,0,0,0,0,0,0,0,0,0,11408
1581,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201557204,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1201557204,https://api.github.com/repos/rapidsai/cudf/issues/11408,1201557204,IC_kwDOBWUGps5Hnk7U,2022-08-01T18:27:00Z,2022-08-01T18:27:00Z,CONTRIBUTOR,"1. Identical outside of max value. `string_view` has a nice and clean static for max value and the byte array has to indicate it with magic values.
2. It can certainly be viewed as such. It is a `device_span` with helper comparison functions inside. It is a list of bytes, which is exactly a `device_span`.",,hyperbolic2346,3506308,MDQ6VXNlcjM1MDYzMDg=,https://avatars.githubusercontent.com/u/3506308?v=4,,https://api.github.com/users/hyperbolic2346,https://github.com/hyperbolic2346,https://api.github.com/users/hyperbolic2346/followers,https://api.github.com/users/hyperbolic2346/following{/other_user},https://api.github.com/users/hyperbolic2346/gists{/gist_id},https://api.github.com/users/hyperbolic2346/starred{/owner}{/repo},https://api.github.com/users/hyperbolic2346/subscriptions,https://api.github.com/users/hyperbolic2346/orgs,https://api.github.com/users/hyperbolic2346/repos,https://api.github.com/users/hyperbolic2346/events{/privacy},https://api.github.com/users/hyperbolic2346/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201557204/reactions,0,0,0,0,0,0,0,0,0,11408
1582,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201708156,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1201708156,https://api.github.com/repos/rapidsai/cudf/issues/11408,1201708156,IC_kwDOBWUGps5HoJx8,2022-08-01T20:52:13Z,2022-08-01T21:09:10Z,CONTRIBUTOR,"Aiming to avoid code duplication:
`ordered_device_span`: public device_span` + comparison impl

`string_view` : derived from `ordered_device_span<char>` + min/max impl

`byte_array_view` : derived from  `ordered_device_span<uint8_t>` + min/max impl

~Probably requires CRTP for min/max without virtual functions.~ not required at all, never mind :)",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201708156/reactions,0,0,0,0,0,0,0,0,0,11408
1583,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201725304,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1201725304,https://api.github.com/repos/rapidsai/cudf/issues/11408,1201725304,IC_kwDOBWUGps5HoN94,2022-08-01T21:11:06Z,2022-08-01T21:11:21Z,CONTRIBUTOR,"I'd rather keep `cudf::string_view` out of this discussion. It is intended to match up somewhat to `std::string_view` https://en.cppreference.com/w/cpp/string/basic_string_view
And some version of it may migrate to libcu++ at some point. At the very least, the `cudf::string_view` in the future may _contain_ a `cuda::std::string_view` member.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201725304/reactions,2,2,0,0,0,0,0,0,0,11408
1584,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201850815,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1201850815,https://api.github.com/repos/rapidsai/cudf/issues/11408,1201850815,IC_kwDOBWUGps5Hosm_,2022-08-01T23:52:07Z,2022-08-01T23:52:07Z,CONTRIBUTOR,"Didn't know about libcu++ potential involvement.
In that case, my vote is to publicly derive from `device_span` to remove duplicated data access members (FWIW). Much less exciting solution :D",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201850815/reactions,0,0,0,0,0,0,0,0,0,11408
1585,https://api.github.com/repos/rapidsai/cudf/issues/comments/1233577997,https://github.com/rapidsai/cudf/issues/11408#issuecomment-1233577997,https://api.github.com/repos/rapidsai/cudf/issues/11408,1233577997,IC_kwDOBWUGps5JhugN,2022-09-01T00:13:05Z,2022-09-01T00:13:05Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1233577997/reactions,0,0,0,0,0,0,0,0,0,11408
1586,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201371905,https://github.com/rapidsai/cudf/issues/11413#issuecomment-1201371905,https://api.github.com/repos/rapidsai/cudf/issues/11413,1201371905,IC_kwDOBWUGps5Hm3sB,2022-08-01T15:42:55Z,2022-08-01T15:42:55Z,CONTRIBUTOR,"Hi @AdamKorcz - thanks for reaching out! We're definitely interested in improvements around our fuzzing infrastructure and appreciate any help!

We're currently in the process of migrating our CI to use GitHub Actions and we expect that to be complete in the coming weeks. I imagine that will make it easier to integrate a tool like ClusterfuzzLite. Perhaps we can touch base again once that migration is complete?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1201371905/reactions,0,0,0,0,0,0,0,0,0,11413
1587,https://api.github.com/repos/rapidsai/cudf/issues/comments/1233132444,https://github.com/rapidsai/cudf/issues/11413#issuecomment-1233132444,https://api.github.com/repos/rapidsai/cudf/issues/11413,1233132444,IC_kwDOBWUGps5JgBuc,2022-08-31T16:03:29Z,2022-08-31T16:03:29Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1233132444/reactions,0,0,0,0,0,0,0,0,0,11413
1588,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203935195,https://github.com/rapidsai/cudf/issues/11434#issuecomment-1203935195,https://api.github.com/repos/rapidsai/cudf/issues/11434,1203935195,IC_kwDOBWUGps5Hwpfb,2022-08-03T13:14:31Z,2022-08-03T13:14:31Z,MEMBER,"While cuDF could raise a more informative error rather than leaking internals, this is a Dask issue due to not being able to align the indexes.

We can leave this issue open to track raising a more user-friendly error, but I recommend filing this issue at https://github.com/dask/dask/issues/ for further discussion as changing this behavior in Dask may have some wider implications.

```python
import dask.dataframe as dd
import pandas as pd
ddf1 = dd.from_pandas(pd.DataFrame({'a':[1,2,3], 'b':[4,5,6]}), npartitions=2)
f1 = dd.from_pandas(pd.Series([False, True, True]), npartitions=2)
f2 = dd.from_pandas(pd.Series([True, False]), npartitions=2)
ddf2 = ddf1.loc[f1]
ddf3 = ddf2.loc[f2]
print(ddf2.compute())
print(ddf3.compute())
   a  b
1  2  5
2  3  6

---------------------------------------------------------------------------
IndexingError                             Traceback (most recent call last)
Input In [10], in <cell line: 9>()
      7 ddf3 = ddf2.loc[f2]
      8 print(ddf2.compute())
----> 9 print(ddf3.compute())

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/base.py:312, in DaskMethodsMixin.compute(self, **kwargs)
    288 def compute(self, **kwargs):
    289     """"""Compute this dask collection
    290 
    291     This turns a lazy Dask collection into its in-memory equivalent.
   (...)
    310     dask.base.compute
    311     """"""
--> 312     (result,) = compute(self, traverse=False, **kwargs)
    313     return result

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/base.py:600, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)
    597     keys.append(x.__dask_keys__())
    598     postcomputes.append(x.__dask_postcompute__())
--> 600 results = schedule(dsk, keys, **kwargs)
    601 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/threaded.py:81, in get(dsk, result, cache, num_workers, pool, **kwargs)
     78     elif isinstance(pool, multiprocessing.pool.Pool):
     79         pool = MultiprocessingPoolExecutor(pool)
---> 81 results = get_async(
     82     pool.submit,
     83     pool._max_workers,
     84     dsk,
     85     result,
     86     cache=cache,
     87     get_id=_thread_get_id,
     88     pack_exception=pack_exception,
     89     **kwargs,
     90 )
     92 # Cleanup pools associated to dead threads
     93 with pools_lock:

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/local.py:508, in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)
    506         _execute_task(task, data)  # Re-execute locally
    507     else:
--> 508         raise_exception(exc, tb)
    509 res, worker_id = loads(res_info)
    510 state[""cache""][key] = res

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/local.py:316, in reraise(exc, tb)
    314 if exc.__traceback__ is not tb:
    315     raise exc.with_traceback(tb)
--> 316 raise exc

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/local.py:221, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)
    219 try:
    220     task, data = loads(task_info)
--> 221     result = _execute_task(task, data)
    222     id = get_id()
    223     result = dumps((result, id))

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/core.py:119, in _execute_task(arg, cache, dsk)
    115     func, args = arg[0], arg[1:]
    116     # Note: Don't assign the subtask results to a variable. numpy detects
    117     # temporaries by their reference count and can execute certain
    118     # operations in-place.
--> 119     return func(*(_execute_task(a, cache) for a in args))
    120 elif not ishashable(arg):
    121     return arg

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/optimization.py:990, in SubgraphCallable.__call__(self, *args)
    988 if not len(args) == len(self.inkeys):
    989     raise ValueError(""Expected %d args, got %d"" % (len(self.inkeys), len(args)))
--> 990 return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/core.py:149, in get(dsk, out, cache)
    147 for key in toposort(dsk):
    148     task = dsk[key]
--> 149     result = _execute_task(task, cache)
    150     cache[key] = result
    151 result = _execute_task(out, cache)

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/core.py:119, in _execute_task(arg, cache, dsk)
    115     func, args = arg[0], arg[1:]
    116     # Note: Don't assign the subtask results to a variable. numpy detects
    117     # temporaries by their reference count and can execute certain
    118     # operations in-place.
--> 119     return func(*(_execute_task(a, cache) for a in args))
    120 elif not ishashable(arg):
    121     return arg

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/utils.py:41, in apply(func, args, kwargs)
     39 def apply(func, args, kwargs=None):
     40     if kwargs:
---> 41         return func(*args, **kwargs)
     42     else:
     43         return func(*args)

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/dataframe/core.py:6533, in apply_and_enforce(*args, **kwargs)
   6531 func = kwargs.pop(""_func"")
   6532 meta = kwargs.pop(""_meta"")
-> 6533 df = func(*args, **kwargs)
   6534 if is_dataframe_like(df) or is_series_like(df) or is_index_like(df):
   6535     if not len(df):

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/dask/dataframe/methods.py:38, in loc(df, iindexer, cindexer)
     34 """"""
     35 .loc for known divisions
     36 """"""
     37 if cindexer is None:
---> 38     return df.loc[iindexer]
     39 else:
     40     return df.loc[iindexer, cindexer]

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/pandas/core/indexing.py:967, in _LocationIndexer.__getitem__(self, key)
    964 axis = self.axis or 0
    966 maybe_callable = com.apply_if_callable(key, self.obj)
--> 967 return self._getitem_axis(maybe_callable, axis=axis)

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/pandas/core/indexing.py:1182, in _LocIndexer._getitem_axis(self, key, axis)
   1180     return self._get_slice_axis(key, axis=axis)
   1181 elif com.is_bool_indexer(key):
-> 1182     return self._getbool_axis(key, axis=axis)
   1183 elif is_list_like_indexer(key):
   1184 
   1185     # an iterable multi-selection
   1186     if not (isinstance(key, tuple) and isinstance(labels, MultiIndex)):

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/pandas/core/indexing.py:984, in _LocationIndexer._getbool_axis(self, key, axis)
    981 def _getbool_axis(self, key, axis: int):
    982     # caller is responsible for ensuring non-None axis
    983     labels = self.obj._get_axis(axis)
--> 984     key = check_bool_indexer(labels, key)
    985     inds = key.nonzero()[0]
    986     return self.obj._take_with_is_copy(inds, axis=axis)

File ~/miniconda3/envs/rapids-22.06/lib/python3.9/site-packages/pandas/core/indexing.py:2383, in check_bool_indexer(index, key)
   2381     mask = isna(result._values)
   2382     if mask.any():
-> 2383         raise IndexingError(
   2384             ""Unalignable boolean Series provided as ""
   2385             ""indexer (index of the boolean Series and of ""
   2386             ""the indexed object do not match).""
   2387         )
   2388     return result.astype(bool)._values
   2389 if is_object_dtype(key):
   2390     # key might be object-dtype bool, check_array_indexer needs bool array

IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203935195/reactions,0,0,0,0,0,0,0,0,0,11434
1589,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204561033,https://github.com/rapidsai/cudf/issues/11434#issuecomment-1204561033,https://api.github.com/repos/rapidsai/cudf/issues/11434,1204561033,IC_kwDOBWUGps5HzCSJ,2022-08-03T22:52:11Z,2022-08-03T22:52:11Z,NONE,"Update: I've realized that the original code snippet I provided should not be expected to produce the output I've given in the expected behavior section. In fact, the code should produce an error, but the error message that Dask-cuDF outputs, namely `cuDF failure at: ../src/stream_compaction/apply_boolean_mask.cu:73: Column size mismatch` is confusing. On the other hand, the indexing error outputted by Dask with Pandas was more informative and led me to a workaround for my intended use. To summarize, **the focus of this issue now is to improve the error message**.",,alextxu,38475194,MDQ6VXNlcjM4NDc1MTk0,https://avatars.githubusercontent.com/u/38475194?v=4,,https://api.github.com/users/alextxu,https://github.com/alextxu,https://api.github.com/users/alextxu/followers,https://api.github.com/users/alextxu/following{/other_user},https://api.github.com/users/alextxu/gists{/gist_id},https://api.github.com/users/alextxu/starred{/owner}{/repo},https://api.github.com/users/alextxu/subscriptions,https://api.github.com/users/alextxu/orgs,https://api.github.com/users/alextxu/repos,https://api.github.com/users/alextxu/events{/privacy},https://api.github.com/users/alextxu/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1204561033/reactions,1,0,0,0,0,0,1,0,0,11434
1590,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235964005,https://github.com/rapidsai/cudf/issues/11434#issuecomment-1235964005,https://api.github.com/repos/rapidsai/cudf/issues/11434,1235964005,IC_kwDOBWUGps5Jq1Bl,2022-09-02T23:02:57Z,2022-09-02T23:02:57Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235964005/reactions,0,0,0,0,0,0,0,0,0,11434
1591,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203180955,https://github.com/rapidsai/cudf/issues/11445#issuecomment-1203180955,https://api.github.com/repos/rapidsai/cudf/issues/11445,1203180955,IC_kwDOBWUGps5HtxWb,2022-08-02T20:26:44Z,2022-08-02T20:26:44Z,CONTRIBUTOR,cc @VibhuJawa for potential downstream influences.,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1203180955/reactions,0,0,0,0,0,0,0,0,0,11445
1592,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235729232,https://github.com/rapidsai/cudf/issues/11445#issuecomment-1235729232,https://api.github.com/repos/rapidsai/cudf/issues/11445,1235729232,IC_kwDOBWUGps5Jp7tQ,2022-09-02T17:06:53Z,2022-09-02T17:06:53Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1235729232/reactions,0,0,0,0,0,0,0,0,0,11445
1593,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236032891,https://github.com/rapidsai/cudf/issues/11463#issuecomment-1236032891,https://api.github.com/repos/rapidsai/cudf/issues/11463,1236032891,IC_kwDOBWUGps5JrF17,2022-09-03T02:53:40Z,2022-09-03T02:53:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236032891/reactions,0,0,0,0,0,0,0,0,0,11463
1594,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212533618,https://github.com/rapidsai/cudf/issues/11469#issuecomment-1212533618,https://api.github.com/repos/rapidsai/cudf/issues/11469,1212533618,IC_kwDOBWUGps5IRcty,2022-08-11T21:53:36Z,2022-08-11T21:53:36Z,CONTRIBUTOR,"@hyperbolic2346 To make this issue more actionable, can you add links to a few of the places where these various alignment functions are defined or called?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212533618/reactions,1,1,0,0,0,0,0,0,0,11469
1595,https://api.github.com/repos/rapidsai/cudf/issues/comments/1242811112,https://github.com/rapidsai/cudf/issues/11469#issuecomment-1242811112,https://api.github.com/repos/rapidsai/cudf/issues/11469,1242811112,IC_kwDOBWUGps5KE8ro,2022-09-10T22:03:09Z,2022-09-10T22:03:09Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1242811112/reactions,0,0,0,0,0,0,0,0,0,11469
1596,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236229511,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1236229511,https://api.github.com/repos/rapidsai/cudf/issues/11477,1236229511,IC_kwDOBWUGps5Jr12H,2022-09-04T01:34:46Z,2022-09-04T01:34:46Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236229511/reactions,0,0,0,0,0,0,0,0,0,11477
1597,https://api.github.com/repos/rapidsai/cudf/issues/comments/1330808713,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1330808713,https://api.github.com/repos/rapidsai/cudf/issues/11477,1330808713,IC_kwDOBWUGps5PUoeJ,2022-11-29T15:16:02Z,2022-11-29T15:16:02Z,CONTRIBUTOR,"This is not possible because `Series` objects contain data of a single homogenous dtype. In this case (mixed string and numeric columns), the series that we want to get would contain heterogeneous dtypes, which is not supported. Pandas can happily store `object` arrays that really support heterogeneous dtypes so it is not a problem there.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1330808713/reactions,0,0,0,0,0,0,0,0,0,11477
1598,https://api.github.com/repos/rapidsai/cudf/issues/comments/1333979799,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1333979799,https://api.github.com/repos/rapidsai/cudf/issues/11477,1333979799,IC_kwDOBWUGps5PguqX,2022-12-01T15:53:58Z,2022-12-01T15:53:58Z,CONTRIBUTOR,"Should we {raise, warn, something_else}?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1333979799/reactions,0,0,0,0,0,0,0,0,0,11477
1599,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335139741,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335139741,https://api.github.com/repos/rapidsai/cudf/issues/11477,1335139741,IC_kwDOBWUGps5PlJ2d,2022-12-02T12:03:37Z,2022-12-02T12:03:37Z,CONTRIBUTOR,"I think we should never try and convert to a `Series`. That makes `.i?loc`-based indexing have consistent semantics in all cases, and try and convince pandas that that should also be the behaviour there. The isomorphism between a 1xN dataframe and length-N series in pandas is not really that strong anyway which is probably a cause of a bunch of special-casing.

e.g.
```python
import pandas as pd
df = pd.DataFrame({""a"": [1, 2, 3, 4],
                   ""b"": [1, 2, 1, 2],
                   ""c"": [1, 1, 2, 2],
                   ""d"": [1, 2, 3, 4]}, index=[""e"", ""f"", ""g"", ""h""])

print(df.loc[""e""][""a""] * df)    # single number is broadcast
#    a  b  c  d
# e  1  1  1  1
# f  2  2  1  2
# g  3  1  2  3
# h  4  2  2  4
print(df.loc[[""e""]][""a""] * df)  # (1,) series is not aligned
#     a   b   c   d   e
# e NaN NaN NaN NaN NaN
# f NaN NaN NaN NaN NaN
# g NaN NaN NaN NaN NaN
# h NaN NaN NaN NaN NaN

```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335139741/reactions,0,0,0,0,0,0,0,0,0,11477
1600,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335302760,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335302760,https://api.github.com/repos/rapidsai/cudf/issues/11477,1335302760,IC_kwDOBWUGps5Plxpo,2022-12-02T14:20:19Z,2022-12-02T14:20:19Z,CONTRIBUTOR,"I'd agree with @wence- here over the long term and would rather see pandas always return a dataframe. As for what to do in the short term, there was a little discussion around raising in https://github.com/rapidsai/cudf/pull/11501 that I liked. For me, both the casting and the returning of inconsistent object types (that might fail downstream handling) are approximately equally bad problems.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335302760/reactions,0,0,0,0,0,0,0,0,0,11477
1601,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335749550,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335749550,https://api.github.com/repos/rapidsai/cudf/issues/11477,1335749550,IC_kwDOBWUGps5Pneuu,2022-12-02T19:46:59Z,2022-12-02T19:46:59Z,CONTRIBUTOR,"I concur with everything @wence- says. It's not just a question of the special-casing of the code, but also the fact that the relationship between a single-row DataFrame and a Series is pretty weak (much weaker than between a row vector and a column vector I would argue given the metadata associated with the tabular structure). I don't think it makes much of an improvement to the API, and it's certainly inconsistent with databases like SQL that have no concept of a Series and will just produce a table with a single row for such operations. It's also important to realize that indexing methods are just one of multiple cases where pandas DataFrame operations will return a Series if the operations reduces to a single row. Reductions are one other example, e.g. `df.mean`. We should try to get this changed by pandas, and not just in this particular case.

From cudf's perspective I would also point out that the current behavior causes additional headaches due to the different memory layouts of DataFrame and Series, some of which can also lead to serious performance issues. One important case is when users want to do anything where the newly generated Series interacts with the original DataFrame. Consider something like `df[df == df.max()]`. This code is hiding an unexpected performance bottleneck. `max` will generate a Series where the index corresponds to the original column names. Since libcudf doesn't offer a way to create a scalar view into each element, the equality operator ends up requiring the creation of a new DeviceScalar (and therefore a new allocation + D2H2D transfer) for each element. 

CC @mroeschke ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335749550/reactions,0,0,0,0,0,0,0,0,0,11477
1602,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335873349,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1335873349,https://api.github.com/repos/rapidsai/cudf/issues/11477,1335873349,IC_kwDOBWUGps5Pn89F,2022-12-02T21:45:42Z,2022-12-02T21:45:42Z,CONTRIBUTOR,"pandas row indexing with a single element vs single element in a list (`.iloc[pos]` vs `.iloc[[pos]]`) was odd to me too when first encountering it, but I think overtime pandas has been trying to return a consistent object with respect to indexer type. Specifically centralizing around, ""a single list-like indexer should always return a DataFrame""

```
In [7]: import pandas as pd
   ...: df = pd.DataFrame({""a"": [1, 2, 3, 4],
   ...:                    ""b"": [1, 2, 1, 2],
   ...:                    ""c"": [1, 1, 2, 2],
   ...:                    ""d"": [1, 2, 3, 4]}, index=[""e"", ""f"", ""g"", ""h""])

In [8]: df.loc[[""e""]]
Out[8]:
   a  b  c  d
e  1  1  1  1

In [9]: df.loc[[]]
Out[9]:
Empty DataFrame
Columns: [a, b, c, d]
Index: []

In [10]: df.iloc[[0]]
Out[10]:
   a  b  c  d
e  1  1  1  1

In [11]: df.iloc[[]]
Out[11]:
Empty DataFrame
Columns: [a, b, c, d]
Index: []
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335873349/reactions,0,0,0,0,0,0,0,0,0,11477
1603,https://api.github.com/repos/rapidsai/cudf/issues/comments/1469758972,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1469758972,https://api.github.com/repos/rapidsai/cudf/issues/11477,1469758972,IC_kwDOBWUGps5Xmr38,2023-03-15T10:36:55Z,2023-03-15T10:36:55Z,CONTRIBUTOR,"> pandas row indexing with a single element vs single element in a list (`.iloc[pos]` vs `.iloc[[pos]]`) was odd to me too when first encountering it, but I think overtime pandas has been trying to return a consistent object with respect to indexer type. Specifically centralizing around, ""a single list-like indexer should always return a DataFrame""
> 
> ```
> In [7]: import pandas as pd
>    ...: df = pd.DataFrame({""a"": [1, 2, 3, 4],
>    ...:                    ""b"": [1, 2, 1, 2],
>    ...:                    ""c"": [1, 1, 2, 2],
>    ...:                    ""d"": [1, 2, 3, 4]}, index=[""e"", ""f"", ""g"", ""h""])
> 
> In [8]: df.loc[[""e""]]
> Out[8]:
>    a  b  c  d
> e  1  1  1  1
> 
> In [9]: df.loc[[]]
> Out[9]:
> Empty DataFrame
> Columns: [a, b, c, d]
> Index: []
> 
> In [10]: df.iloc[[0]]
> Out[10]:
>    a  b  c  d
> e  1  1  1  1
> 
> In [11]: df.iloc[[]]
> Out[11]:
> Empty DataFrame
> Columns: [a, b, c, d]
> Index: []
> ```

Just to follow up here, because I'm thinking about this again. The inconsistency is not when providing a singleton list index entry, but rather a singleton index entry:

Compare:

```python
import pandas as pd
df = pd.DataFrame({""a"": [1, 2, 3], ""b"": [1, 2, 3]}, index=[""c"", ""d""]})

df.loc[[""c""]] # => dataframe
df.loc[""c""] # => series
```
If trying to standardise on pyarrow datatypes rather than python ones in pandas, this will cause the same problems as @brandon-b-miller notes in the initial issue. When the columns of your dataframe have mixed types it's not possible to take a row and turn it into a series of homogenous type.

I realise it's rather late in the day, but do you think it is worth trying to make a change to these indexing semantics in pandas 2? (@mroeschke)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1469758972/reactions,0,0,0,0,0,0,0,0,0,11477
1604,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470418738,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1470418738,https://api.github.com/repos/rapidsai/cudf/issues/11477,1470418738,IC_kwDOBWUGps5XpM8y,2023-03-15T17:04:45Z,2023-03-15T17:04:45Z,CONTRIBUTOR,"Looks like currently pandas will fall back to object dtype if indexing a row of mixed pyarrow types

```
In [1]: df = pd.DataFrame({
   ...: ""A"": pd.array([1], dtype=""int64[pyarrow]""),
   ...: ""B"": pd.array([b""foo""], dtype=""binary[pyarrow]"")})

In [2]: df
Out[2]:
   A       B
0  1  b'foo'

In [3]: df.iloc[0]
Out[3]:
A         1
B    b'foo'
Name: 0, dtype: object
```

which I think is acceptable behavior for pandas to fall back to object type here even though there's no pyarrow object type.

I think it would be a fairly late to change this for pandas 2.0 since an RC already has been released but I think it might be worth discussing for pandas 3.0",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470418738/reactions,0,0,0,0,0,0,0,0,0,11477
1605,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905000541,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905000541,https://api.github.com/repos/rapidsai/cudf/issues/11477,1905000541,IC_kwDOBWUGps5xjABd,2024-01-22T23:16:07Z,2024-01-22T23:16:07Z,CONTRIBUTOR,"With respect to the original example https://github.com/rapidsai/cudf/issues/11477#issue-1329308430 and availability of `cudf.pandas`, I think that row indexing that would result in non-homogenous types should raise a `MixedTypeError` or `NotImplementedError`",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905000541/reactions,0,0,0,0,0,0,0,0,0,11477
1606,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905119692,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905119692,https://api.github.com/repos/rapidsai/cudf/issues/11477,1905119692,IC_kwDOBWUGps5xjdHM,2024-01-23T01:18:14Z,2024-01-23T01:18:14Z,CONTRIBUTOR,"So this already raises in pandas compatibility mode. To confirm, do we want to also make this raise in non pandas compatibility mode?

```python
In [5]: with cudf.option_context(""mode.pandas_compatible"", True):
   ...:     df1.iloc[0]
TypeError: cudf does not support mixed types, please type-cast both series to same dtypes.

In [6]: with cudf.option_context(""mode.pandas_compatible"", True):
   ...:     df1.loc[""a""]
TypeError: All columns need to be of same type, please typecast to common dtype.
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905119692/reactions,0,0,0,0,0,0,0,0,0,11477
1607,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905135144,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1905135144,https://api.github.com/repos/rapidsai/cudf/issues/11477,1905135144,IC_kwDOBWUGps5xjg4o,2024-01-23T01:37:05Z,2024-01-23T01:37:05Z,CONTRIBUTOR,"For regular mode, raising would be fine - but we should throw a deprecation warning for at least a release.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1905135144/reactions,0,0,0,0,0,0,0,0,0,11477
1608,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909096563,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1909096563,https://api.github.com/repos/rapidsai/cudf/issues/11477,1909096563,IC_kwDOBWUGps5xyoBz,2024-01-24T23:31:00Z,2024-01-24T23:31:00Z,CONTRIBUTOR,"One more follow up. How strict do we want to be about ""all columns must have the same type when selecting rows""? Do we want to try to implement coercion of types for numeric types coercion be absolutely strict (e.g. float32 & float64 columns would raise)?

```python
In [2]: pd.DataFrame([[1, 1.0]]).iloc[0]
Out[2]: 
0    1.0
1    1.0
Name: 0, dtype: float64
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909096563/reactions,0,0,0,0,0,0,0,0,0,11477
1609,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909801733,https://github.com/rapidsai/cudf/issues/11477#issuecomment-1909801733,https://api.github.com/repos/rapidsai/cudf/issues/11477,1909801733,IC_kwDOBWUGps5x1UMF,2024-01-25T10:04:24Z,2024-01-25T10:04:24Z,CONTRIBUTOR,"My finger in the air feeling is:

- try to coerce in pandas-compat mode
- raise without coercion in non-compat mode

I note that pandas has already deprecated the case of _setting_ a row of a dataframe with mismatching dtypes. Although it appears like it is still value-dependent:
```
In [19]: df = pd.DataFrame([[1, 1.0]])

In [20]: s = pd.Series([2.5, 2.5])

In [21]: df.iloc[0, :] = s
<ipython-input-21-dc029282b8b2>:1: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2.5' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.
  df.iloc[0, :] = s

In [22]: df
Out[22]: 
     0    1
0  2.5  2.5

In [23]: df = pd.DataFrame([[1, 1.0]])

In [24]: s = pd.Series([2.0, 2.0])

In [25]: df.iloc[0, :] = s

In [26]: df
Out[26]: 
   0    1
0  2  2.0
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909801733/reactions,0,0,0,0,0,0,0,0,0,11477
1610,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236406089,https://github.com/rapidsai/cudf/issues/11483#issuecomment-1236406089,https://api.github.com/repos/rapidsai/cudf/issues/11483,1236406089,IC_kwDOBWUGps5Jsg9J,2022-09-04T20:03:37Z,2022-09-04T20:03:37Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1236406089/reactions,0,0,0,0,0,0,0,0,0,11483
1611,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213065387,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213065387,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213065387,IC_kwDOBWUGps5ITeir,2022-08-12T12:34:42Z,2022-08-12T12:34:42Z,CONTRIBUTOR,"Thanks for writing this up, @trivialfis! Firstly, I'm not super familiar with CUDA IPC and any associated pitfalls, so I'll cc @trxcllnt and @kkraus14 here, who may be able to comment more on the suggested approach and API.

Regarding the suggestion to use a 'jsonified' interchange protocol for messaging, I do have some concerns. Firstly, the dataframe interchange protocol has the narrower goal of enabling interchange between Python libraries. The semantics may not always match 1-to-1 with IPC.

Secondly, and relatedly, I'm concerned that we would effectively be introducing a new IPC format, while others like [Feather](https://arrow.apache.org/docs/python/feather.html) already exist. Would supporting Feather solve this problem using a more standard approach? 

We recently [removed](https://github.com/rapidsai/cudf/pull/10995/) the bit of functionality around the Arrow IPC Format from cudf. I don't believe Spark was supporting that, and on the Python side, it was largely unused. More importantly, my understanding was that for GPU-resident data, the implementation wasn't even truly zero-copy (@trxcllnt can confirm). But perhaps we could consider bringing back (and fixing) that code?
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213065387/reactions,0,0,0,0,0,0,0,0,0,11514
1612,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213092498,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213092498,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213092498,IC_kwDOBWUGps5ITlKS,2022-08-12T13:08:08Z,2022-08-12T13:21:37Z,MEMBER,"@shwina Thank you for the reply.

> Would supporting Feather solve this problem using a more standard approach?

I looked into arrow IPC, which allows writing and reading data efficiently, and reading can be optimized with memory mapped file.  But still, we will have to go through device -> host then host -> device along with read-write to socket/mmap/pipe/file for transferring data from jvm to python process. Feel free to correct me if I'm wrong, the wording of the document seems a little bit vague.

> Secondly, and relatedly, I'm concerned that we would effectively be introducing a new IPC format

I think it will remain proprietary and doesn't need to be stable for some period of time since we are transferring CUDA IPC mem handle. Anyone who wants to read the data must understand how to use CUDA API to obtain the pointer. For the ""jsonify df protocol"", that's because the protocol has complete information about the dataframe and I would like to avoid reinventing the wheel.

> my understanding was that for GPU-resident data, the implementation wasn't even truly zero-copy

If it's close to zero-copy then it's probably good enough. The best case scenario is there's a way to let another process view the data in the current process without incurring significant overhead in data transfer using only arrow. At the moment, CUDA IPC handle (not arrow CUDA writer, but the IPC API provided by CUDA toolkit) is the only way I can think of: https://numba.pydata.org/numba-doc/latest/cuda/ipc.html",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213092498/reactions,0,0,0,0,0,0,0,0,0,11514
1613,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213447754,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213447754,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213447754,IC_kwDOBWUGps5IU75K,2022-08-12T19:30:08Z,2022-08-12T19:30:08Z,COLLABORATOR,"The previous Arrow IPC code that was recently removed didn't go through host memory, it was entirely in GPU. That being said it did require a lightweight serialization to pack the data of a dataframe into a single buffer that could be IPCed instead of having to IPC each underlying buffer. Here's the spec: https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format. One issue with this is that it expects the Schema to be inline with the data and it doesn't really make sense for the Schema to be in GPU memory.

The dataframe interchange protocol referenced by @shwina currently uses pointers within a process and has a pointer per underlying buffer in the dataframe. This could be an arbitrarily large number of buffers depending on the number of columns and their types. You could imagine building something similar to this and using CUDA IPC handles instead of pointers as well as serializing all of the Python class hierarchy and information surrounding it and using some form of side channel to move that between processes. Looks like you've roughly sketched this out already.

Ideally, something like this would get handled in C/C++ instead of in Python so that the implementation can be reused across languages.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213447754/reactions,0,0,0,0,0,0,0,0,0,11514
1614,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213650371,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213650371,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213650371,IC_kwDOBWUGps5IVtXD,2022-08-13T04:17:44Z,2022-08-13T04:17:44Z,MEMBER,"@kkraus14 Thank you for the comment!

> The previous Arrow IPC code that was recently removed didn't go through host memory, it was entirely in GPU. 

Could you please share some insight on how it's implemented under the hood?

> something like this would get handled in C/C++ instead

I agree, also might be easier to maintain due to memory management.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213650371/reactions,0,0,0,0,0,0,0,0,0,11514
1615,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213653018,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213653018,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213653018,IC_kwDOBWUGps5IVuAa,2022-08-13T04:31:21Z,2022-08-13T04:31:21Z,COLLABORATOR,"> Could you please share some insight on how it's implemented under the hood?

You can see the implementation here:
- https://github.com/rapidsai/cudf/blob/v22.06.01/cpp/src/comms/ipc/ipc.cpp
- https://github.com/rapidsai/cudf/blob/v22.06.01/cpp/include/cudf/ipc.hpp",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213653018/reactions,0,0,0,0,0,0,0,0,0,11514
1616,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213711612,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1213711612,https://api.github.com/repos/rapidsai/cudf/issues/11514,1213711612,IC_kwDOBWUGps5IV8T8,2022-08-13T05:12:39Z,2022-08-13T05:12:39Z,MEMBER,"Thank you for the reference. I will dig into arrow.

Also, this issue is more a question of whether this feature is welcomed for cuDF. I can help work on it if we agree on the design.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1213711612/reactions,0,0,0,0,0,0,0,0,0,11514
1617,https://api.github.com/repos/rapidsai/cudf/issues/comments/1215292428,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1215292428,https://api.github.com/repos/rapidsai/cudf/issues/11514,1215292428,IC_kwDOBWUGps5Ib-QM,2022-08-15T16:23:44Z,2022-08-15T16:23:44Z,MEMBER,"I looked into cuDF and arrow today. I think the arrow IPC should be sufficient for now. Will work on a wrapper tomorrow.

cc @wbo4958 ",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1215292428/reactions,1,1,0,0,0,0,0,0,0,11514
1618,https://api.github.com/repos/rapidsai/cudf/issues/comments/1215949478,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1215949478,https://api.github.com/repos/rapidsai/cudf/issues/11514,1215949478,IC_kwDOBWUGps5Ieeqm,2022-08-15T22:45:56Z,2022-08-15T22:45:56Z,MEMBER,cc @pentschev @madsbk (in case either of you have thoughts on this process interchange use case),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1215949478/reactions,0,0,0,0,0,0,0,0,0,11514
1619,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219750662,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1219750662,https://api.github.com/repos/rapidsai/cudf/issues/11514,1219750662,IC_kwDOBWUGps5Is-sG,2022-08-18T17:29:18Z,2022-08-18T17:29:18Z,MEMBER,"Hey, I opened a draft PR https://github.com/rapidsai/cudf/pull/11564 .",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1219750662/reactions,0,0,0,0,0,0,0,0,0,11514
1620,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222302193,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222302193,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222302193,IC_kwDOBWUGps5I2tnx,2022-08-22T12:39:07Z,2022-08-22T15:00:59Z,CONTRIBUTOR,"@trivialfis - Jake's comment [here](https://github.com/rapidsai/cudf/pull/11564#pullrequestreview-1078702940) raises an important question that I'd like for us to collectively answer: can something like UCX with serialization not be used here? 

> Suggested by @jakirkham , I looked into the serialize and deserialize methods. They are good starting points but not suitable for transferring ownership between 2 different language environments due to the use of pickle in type serialization.

`pickle` is used only for serializing and deserializing metadata between Python processes. For this use-case, couldn't we use e.g., json for the metadata, and `serialize()` for the data? 

Intra-node transfers via UCX _should_ use CUDA IPC. For communication between a Python process using cuDF, and a JVM process running PySpark, I can imagine using ucx-py for sending/writing messages and UCX for receiving/reading , although admittedly I'm not clear on the implementation details. cc: @pentschev who is the expert in this area and could provide more insight.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222302193/reactions,0,0,0,0,0,0,0,0,0,11514
1621,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222605537,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222605537,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222605537,IC_kwDOBWUGps5I33rh,2022-08-22T16:30:47Z,2022-08-22T17:23:51Z,MEMBER,"Thank you for the suggestions @shwina ! Would love to hear from @pentschev on the details.

If UCX can help zero-copy data transfer, we might still want to have a unified API as part of cuDF to help different language envs work together.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222605537/reactions,0,0,0,0,0,0,0,0,0,11514
1622,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222764591,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222764591,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222764591,IC_kwDOBWUGps5I4egv,2022-08-22T18:35:11Z,2022-08-22T18:35:11Z,MEMBER,"I've checked with UCX devs and zero-copy in the truest sense (directly accessing the remote process' memory without need for a local copy) is not currently supported by UCX. For the short-term, AFAICT the only way to achieve true zero-copy would be to manually handle CUDA IPC.

What we can do with UCX is as Ashwin said already above, transfer intra-GPU data via CUDA IPC. On a V100, this achieves bandwidth > 350GB/s (see [`CUDA_IPC_SELF` in UCX-Py's nightly benchmark charts](https://raw.githack.com/pentschev/ucx-py-ci/test-results/assets/ucx-py-barchart.html)), but will require data duplication while transferring.

Because UCX-Py is an interface for UCX, we could do UCX-Py<->UCX transfers with no problem, we are required to first establish endpoints between UCX workers on both processes. I know Spark uses Java bindings for UCX, but I'm not familiar with either Spark nor the Java bindings internals, is there any kind of interface within PySpark for UCX? Given the ""Py"" prefix, I would assume we could just use UCX-Py on both cuDF and PySpark ends, but maybe there's already some UCX within PySpark or that it could utilize.",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222764591/reactions,0,0,0,0,0,0,0,0,0,11514
1623,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222776276,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222776276,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222776276,IC_kwDOBWUGps5I4hXU,2022-08-22T18:47:43Z,2022-08-22T18:48:57Z,MEMBER,"Hi @revans2 , could you please share some insights into the current status of UCX in spark-rapids? https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222764591

I'm under the impression that it's very difficult for us to upstream any non-standard (GPU) changes to spark.

> What we can do with UCX is as Ashwin said already above, transfer intra-GPU data via CUDA IPC

Out of curiosity, does that mean we are simply doing a cudaMemcpy when two nodes are using the same GPU?",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222776276/reactions,0,0,0,0,0,0,0,0,0,11514
1624,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222778148,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222778148,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222778148,IC_kwDOBWUGps5I4h0k,2022-08-22T18:49:41Z,2022-08-22T18:49:41Z,MEMBER,"> Out of curiosity, does that mean we are simply doing a cudaMemcpy when two nodes are using the same GPU?

I assume by nodes in this context you mean processes on the same system, in that case yes, that's correct.",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222778148/reactions,1,1,0,0,0,0,0,0,0,11514
1625,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222789351,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222789351,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222789351,IC_kwDOBWUGps5I4kjn,2022-08-22T19:00:12Z,2022-08-22T19:00:27Z,MEMBER,">  assume by nodes in this context you mean processes on the same system, in that case yes, that's correct.

That's encouraging! Thank you for the confirmation.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222789351/reactions,0,0,0,0,0,0,0,0,0,11514
1626,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222879325,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222879325,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222879325,IC_kwDOBWUGps5I46hd,2022-08-22T19:58:26Z,2022-08-22T19:58:26Z,MEMBER,@pentschev Could you please point me to the code of ucx transferring cuDF dataframe?,,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222879325/reactions,0,0,0,0,0,0,0,0,0,11514
1627,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222916615,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222916615,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222916615,IC_kwDOBWUGps5I5DoH,2022-08-22T20:13:46Z,2022-08-22T20:13:46Z,MEMBER,"Just to be clear, the `cudaMemcpy` call is handled by UCX via its API (e.g., via [`ucp_tag_send_nbx`](https://openucx.readthedocs.io/en/master/api/file/ucp_8h.html#group___u_c_p___c_o_m_m_1ga8323878b60f426c630d4ff8996ede3cc)/[`ucp_tag_recv_nbx`](https://openucx.readthedocs.io/en/master/api/file/ucp_8h.html#group___u_c_p___c_o_m_m_1gaa842f8ca8ad1363ed857ab938285a16f)). IOW, you won't get the CUDA IPC handle to do the `cudaMemcpy` directly when using the UCP layer of UCX (which is what UCX-Py exposes). In UCX-Py, you would do that using [`send`](https://ucx-py.readthedocs.io/en/latest/api.html#ucp.Endpoint.send)/[`recv`](https://ucx-py.readthedocs.io/en/latest/api.html#ucp.Endpoint.recv) methods.

We have a [complete unit test for cuDF message transfer](https://github.com/rapidsai/ucx-py/blob/branch-0.28/tests/test_custom_send_recv.py), it shows the entire procedure to connect two processes (one being the listener and another being the client), which one process will [`write`](https://github.com/rapidsai/ucx-py/blob/f585c5084f4fa1cc1ff7f1f21dd24a8bcea3c630/tests/test_custom_send_recv.py#L42-L58) and another will [`read`](https://github.com/rapidsai/ucx-py/blob/f585c5084f4fa1cc1ff7f1f21dd24a8bcea3c630/tests/test_custom_send_recv.py#L60-L88)",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222916615/reactions,0,0,0,0,0,0,0,0,0,11514
1628,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222926126,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1222926126,https://api.github.com/repos/rapidsai/cudf/issues/11514,1222926126,IC_kwDOBWUGps5I5F8u,2022-08-22T20:17:40Z,2022-08-22T20:17:40Z,MEMBER,Thank you for the references! cc @wbo4958 .,,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1222926126/reactions,0,0,0,0,0,0,0,0,0,11514
1629,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224184580,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1224184580,https://api.github.com/repos/rapidsai/cudf/issues/11514,1224184580,IC_kwDOBWUGps5I95ME,2022-08-23T14:49:52Z,2022-08-24T19:10:23Z,MEMBER,"Hi, let me make a brief summary on the topic, there are serval proposed approaches:
1. Use Arrow IPC format along with its IO procedures. This is too slow and incurs data copies. Also, we need to patch arrow to handle the memory pool properly. Lastly, arrow_gpu dependency will be introduced back to cuDF along with libcuda.so.
2. Define custom IPC routines in cuDF with one handle per buffer as in https://github.com/rapidsai/cudf/pull/11564 . This adds a non-trivial amount of code to the cuDF which might be a potential burden on future maintenance for cuDF developers. But the upside is that there's no data copy in C++.
3. Define custom IPC routines in cuDF with one handle for a packed buffer based on `pack` and `unpack` functions. Tested by @wbo4958 and advocated by @abellina. This can reduce the amount of code compared to the per-column approach and is easier to implement and maintain. It needs a pair of methods in cuDF and some memory management for opened memory handle. Also, an extra copy of the data will be created. But overall is easier if we can live with the copy.
4. Use UCX. This has already been implemented in other places and also has some integration in spark. But mentioned by @abellina , introducing UCX into dependencies might impose additional configuration onto users due to signal handling conflicts between UCX and jvm.
5. Host the IPC code in https://github.com/NVIDIA/spark-rapids/issues/6391 .",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224184580/reactions,0,0,0,0,0,0,0,0,0,11514
1630,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224335003,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1224335003,https://api.github.com/repos/rapidsai/cudf/issues/11514,1224335003,IC_kwDOBWUGps5I-d6b,2022-08-23T16:48:40Z,2022-08-23T16:48:40Z,CONTRIBUTOR,"If we go with:

> Define custom IPC routines in cuDF with one handle for a packed buffer based on pack and unpack functions. Tested by @wbo4958 and advocated by @abellina. This can reduce the amount of code compared to the per-column approach and is easier to implement and maintain. It needs a pair of methods in cuDF and some memory management for opened memory handle. Also, an extra copy of the data will be created. But overall is easier if we can live with the copy.

Does that make it a smaller change that builds on the pack/unpack functionality already supported in cuDF/py-cuDF and java-cuDF?

It seems that the main thing that is needed here is to add code (somewhere) that takes the contiguous device buffer and opens a cuda IPC mem handle to it. This seems like a separate concern than packing and unpacking, so I would expect there to be a function that takes a packed table reference and returns an IPC mem handle that can be sent to a peer. 

The serialized mem handle is sent in addition to the opaque metadata generated in `pack`. On the other side, a function that can take this serialized IPC mem handle and the serialized metadata can be invoked to unpack a table view on this memory.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224335003/reactions,0,0,0,0,0,0,0,0,0,11514
1631,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224436208,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1224436208,https://api.github.com/repos/rapidsai/cudf/issues/11514,1224436208,IC_kwDOBWUGps5I-2nw,2022-08-23T17:40:08Z,2022-08-23T17:40:08Z,MEMBER,"yes, the code should be smaller with the conversion from cudf column to IPC memory handle removed. After unpacking the dataframe, we either attach the opened memory handle to the new dataframe and keep the original one alive, or make an additional copy. This part of the code is needed by both of the per-column and per-dataframe approaches.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1224436208/reactions,0,0,0,0,0,0,0,0,0,11514
1632,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225197208,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1225197208,https://api.github.com/repos/rapidsai/cudf/issues/11514,1225197208,IC_kwDOBWUGps5JBwaY,2022-08-24T05:03:56Z,2022-08-24T05:06:19Z,MEMBER,"Regarding the overhead of opening memory handles, from my very simple test with dataframe generated by:
``` python
    from cudf.testing.dataset_generator import rand_dataframe
    df = rand_dataframe([{""dtype"": ""float32"", ""null_frequency"": 0.0, ""cardinality"": 10}] * n_columns, rows=int(1e5))
    df = cudf.DataFrame.from_arrow(df)
````

With 128 primitive dtype columns, `export_ipc​` takes 0.003928661346435547 seconds, `import_ipc` takes 0.801159143447876 seconds. With 1024 primitive dtype columns, `export_ipc`​ takes 0.03810715675354004 while `import_ipc​` takes 0.9540588855743408.  According to the CUDA document of [cudaIpcGetMemHandle](https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g8a37f7dfafaca652391d0758b3667539) (the exporter):

> This is a lightweight operation and may be called multiple times on an allocation without adverse effects

I think the operation is fairly cheap, might even be cheaper than memory copies inside `pack`.  The problem is mostly about code gain. With the `pack` and `unpack` solution the code can be leaner. One additional concern raised by @abellina is memory deallocation on the producer side. We either have to export an additional RAII struct that tells the producer when it's safe to deallocate the dataframe or we make another copy on the consumer side.",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225197208/reactions,0,0,0,0,0,0,0,0,0,11514
1633,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225836252,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1225836252,https://api.github.com/repos/rapidsai/cudf/issues/11514,1225836252,IC_kwDOBWUGps5JEMbc,2022-08-24T14:52:40Z,2022-08-24T14:52:40Z,CONTRIBUTOR,"@trivialfis thank you for the excellent [summary](https://github.com/rapidsai/cudf/issues/11514#issuecomment-1224184580)! It sounds like we can discard the UCX approach, as it not only introduces extra copies, but also introduces a complex dependency that most users would not want to deal with.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225836252/reactions,0,0,0,0,0,0,0,0,0,11514
1634,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225847905,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1225847905,https://api.github.com/repos/rapidsai/cudf/issues/11514,1225847905,IC_kwDOBWUGps5JEPRh,2022-08-24T15:02:15Z,2022-08-24T15:02:15Z,CONTRIBUTOR,">  We either have to export an additional RAII struct that tells the producer when it's safe to deallocate the dataframe or we make another copy on the consumer side.

The RAII struct won't solve it for this scenario, since you don't want to free once the stack that called ""send"" goes out of scope. What you really need is some type of callback from an RPC message being sent back by the consumer saying ""I am done with the copy/operation"". Either way, if the consumer says they are not touching that memory anymore, the producer can then free or repurpose the memory. This would be the same protocol layer that sent the metadata and serialized IPC handle to begin with, just in the opposite direction.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225847905/reactions,0,0,0,0,0,0,0,0,0,11514
1635,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225862136,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1225862136,https://api.github.com/repos/rapidsai/cudf/issues/11514,1225862136,IC_kwDOBWUGps5JESv4,2022-08-24T15:13:34Z,2022-08-24T15:13:34Z,MEMBER,"`cudaIpcGetMemHandle` is a fairly cheap operation, but `cudaIpcOpenMemHandle` is very expensive (IIRC, that was > 100ms), so make sure that gets cached.",,pentschev,4398246,MDQ6VXNlcjQzOTgyNDY=,https://avatars.githubusercontent.com/u/4398246?v=4,,https://api.github.com/users/pentschev,https://github.com/pentschev,https://api.github.com/users/pentschev/followers,https://api.github.com/users/pentschev/following{/other_user},https://api.github.com/users/pentschev/gists{/gist_id},https://api.github.com/users/pentschev/starred{/owner}{/repo},https://api.github.com/users/pentschev/subscriptions,https://api.github.com/users/pentschev/orgs,https://api.github.com/users/pentschev/repos,https://api.github.com/users/pentschev/events{/privacy},https://api.github.com/users/pentschev/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1225862136/reactions,1,1,0,0,0,0,0,0,0,11514
1636,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226149110,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1226149110,https://api.github.com/repos/rapidsai/cudf/issues/11514,1226149110,IC_kwDOBWUGps5JFYz2,2022-08-24T19:26:17Z,2022-08-24T19:54:39Z,MEMBER,"@shwina I agree. So the remaining options are 2) and 3). I can change the PR to using 3) if it's believed to be a better alternative. 

Also, I just found out that in https://github.com/rapidsai/cudf/pull/11564 , even though there's no copy in c++, the cython code still does a copy with `Column.from_column_view` called inside `columns_from_table_view`. Is there a way to avoid that copy?

@abellina emphasized the importance of making sure the producer doesn't free the dataframe until the consumer is finished. That has an implication that, if the consumer never actually import the IPC message, the producer should keep the dataframe around forever. There are two possible ways to achieve this: Add a remote callback into the IPC message as suggested by Alessandro and use it for decreasing the reference counter in Python and Java.  An alternative to this is to handle the lifetime of dataframe on the user side (say, spark) instead of putting it into cuDF. (which I prefer, but the cuDF API becomes less safe).",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226149110/reactions,0,0,0,0,0,0,0,0,0,11514
1637,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226463904,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1226463904,https://api.github.com/repos/rapidsai/cudf/issues/11514,1226463904,IC_kwDOBWUGps5JGlqg,2022-08-24T22:01:41Z,2022-08-24T22:01:41Z,CONTRIBUTOR,"> though there's no copy in c++, the cython code still does a copy with Column.from_column_view called inside columns_from_table_view. Is there a way to avoid that copy?

If you're constructing a Python `Column` from a `column_view`, you should provide an additional `owner` argument, which is a Python object that owns the memory that the `column_view` points to. IIRC, if you don't provide an owner, the best we can do is copy from the column view.




",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226463904/reactions,0,0,0,0,0,0,0,0,0,11514
1638,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226848515,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1226848515,https://api.github.com/repos/rapidsai/cudf/issues/11514,1226848515,IC_kwDOBWUGps5JIDkD,2022-08-25T06:50:17Z,2022-08-25T06:50:17Z,MEMBER,"Thank you for the suggestion, I have provided a list of owners, but they are not `cudf.Column` objects. I think there's copying happening somewhere in the `build_column`",,trivialfis,16746409,MDQ6VXNlcjE2NzQ2NDA5,https://avatars.githubusercontent.com/u/16746409?v=4,,https://api.github.com/users/trivialfis,https://github.com/trivialfis,https://api.github.com/users/trivialfis/followers,https://api.github.com/users/trivialfis/following{/other_user},https://api.github.com/users/trivialfis/gists{/gist_id},https://api.github.com/users/trivialfis/starred{/owner}{/repo},https://api.github.com/users/trivialfis/subscriptions,https://api.github.com/users/trivialfis/orgs,https://api.github.com/users/trivialfis/repos,https://api.github.com/users/trivialfis/events{/privacy},https://api.github.com/users/trivialfis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1226848515/reactions,0,0,0,0,0,0,0,0,0,11514
1639,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256887278,https://github.com/rapidsai/cudf/issues/11514#issuecomment-1256887278,https://api.github.com/repos/rapidsai/cudf/issues/11514,1256887278,IC_kwDOBWUGps5K6pPu,2022-09-24T07:04:50Z,2022-09-24T07:04:50Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256887278/reactions,0,0,0,0,0,0,0,0,0,11514
1640,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212305118,https://github.com/rapidsai/cudf/issues/11515#issuecomment-1212305118,https://api.github.com/repos/rapidsai/cudf/issues/11515,1212305118,IC_kwDOBWUGps5IQk7e,2022-08-11T17:58:42Z,2022-08-11T17:58:42Z,CONTRIBUTOR,"This fundamentally comes down to cuDF not supporting custom aggregations, e.g.,:


```python
>>> df.groupby('b').agg(lambda x: (x**2).sum())
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [21], in <cell line: 1>()
----> 1 df.groupby('b').agg(lambda x: (x**2).sum())

File /raid/ashwint/cudf-dev/lib/python3.9/contextlib.py:79, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)
     76 @wraps(func)
     77 def inner(*args, **kwds):
     78     with self._recreate_cm():
---> 79         return func(*args, **kwds)

File /raid/ashwint/cudf-dev/lib/python3.9/site-packages/cudf/core/groupby/groupby.py:316, in GroupBy.agg(self, func)
    307 column_names, columns, normalized_aggs = self._normalize_aggs(func)
    309 # Note: When there are no key columns, the below produces
    310 # a Float64Index, while Pandas returns an Int64Index
    311 # (GH: 6945)
    312 (
    313     result_columns,
    314     grouped_key_cols,
    315     included_aggregations,
--> 316 ) = self._groupby.aggregate(columns, normalized_aggs)
    318 result_index = self.grouping.keys._from_columns_like_self(
    319     grouped_key_cols,
    320 )
    322 multilevel = _is_multi_agg(func)

File groupby.pyx:295, in cudf._lib.groupby.GroupBy.aggregate()

File groupby.pyx:170, in cudf._lib.groupby.GroupBy.aggregate_internal()

File aggregation.pyx:873, in cudf._lib.aggregation.make_groupby_aggregation()

Input In [21], in <lambda>(x)
----> 1 df.groupby('b').agg(lambda x: (x**2).sum())

TypeError: unsupported operand type(s) for ** or pow(): 'type' and 'int'
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212305118/reactions,1,0,0,0,0,0,1,0,0,11515
1641,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212423948,https://github.com/rapidsai/cudf/issues/11515#issuecomment-1212423948,https://api.github.com/repos/rapidsai/cudf/issues/11515,1212423948,IC_kwDOBWUGps5IRB8M,2022-08-11T19:52:29Z,2022-08-11T19:52:29Z,CONTRIBUTOR,Ah I see. Is there any other way to square the elements of a SeriesGroupBy object?,,ChrisJar,13131098,MDQ6VXNlcjEzMTMxMDk4,https://avatars.githubusercontent.com/u/13131098?v=4,,https://api.github.com/users/ChrisJar,https://github.com/ChrisJar,https://api.github.com/users/ChrisJar/followers,https://api.github.com/users/ChrisJar/following{/other_user},https://api.github.com/users/ChrisJar/gists{/gist_id},https://api.github.com/users/ChrisJar/starred{/owner}{/repo},https://api.github.com/users/ChrisJar/subscriptions,https://api.github.com/users/ChrisJar/orgs,https://api.github.com/users/ChrisJar/repos,https://api.github.com/users/ChrisJar/events{/privacy},https://api.github.com/users/ChrisJar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1212423948/reactions,0,0,0,0,0,0,0,0,0,11515
1642,https://api.github.com/repos/rapidsai/cudf/issues/comments/1242797179,https://github.com/rapidsai/cudf/issues/11515#issuecomment-1242797179,https://api.github.com/repos/rapidsai/cudf/issues/11515,1242797179,IC_kwDOBWUGps5KE5R7,2022-09-10T20:02:56Z,2022-09-10T20:02:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1242797179/reactions,0,0,0,0,0,0,0,0,0,11515
1643,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286560240,https://github.com/rapidsai/cudf/issues/11515#issuecomment-1286560240,https://api.github.com/repos/rapidsai/cudf/issues/11515,1286560240,IC_kwDOBWUGps5Mr1nw,2022-10-21T07:19:22Z,2022-10-21T07:19:22Z,CONTRIBUTOR,Would this be possible with `apply` instead of `agg`? Is there an extension of #11452 that could accept some custom aggregations?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286560240/reactions,0,0,0,0,0,0,0,0,0,11515
1644,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254398898,https://github.com/rapidsai/cudf/issues/11530#issuecomment-1254398898,https://api.github.com/repos/rapidsai/cudf/issues/11530,1254398898,IC_kwDOBWUGps5KxJuy,2022-09-22T01:33:41Z,2022-09-22T01:33:41Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254398898/reactions,0,0,0,0,0,0,0,0,0,11530
1645,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217161070,https://github.com/rapidsai/cudf/issues/11546#issuecomment-1217161070,https://api.github.com/repos/rapidsai/cudf/issues/11546,1217161070,IC_kwDOBWUGps5IjGdu,2022-08-16T21:01:47Z,2022-08-16T21:01:47Z,CONTRIBUTOR,"The gist of doing LD_PRELOAD injection for `cudaMalloc` is:

- Write an init function annotated with `__attribute__((constructor))` to ensure it runs during load time
- In the init, use `dlsym(RTLD_NEXT, ""cudaMalloc"")` to get a pointer to the _real_ cudaMalloc function
- Write an overload of `cudaMalloc` with an identical signature to the real one
- In that overload, add a `static` counter that ensures it is only called once and simply invokes the previously stored function pointer

Here's an example of how I did this in the past for `pthread_mutex_lock/unlock` when I was experimenting with annotating the Python GIL with NVTX (it didn't work because NVTX calls `pthread_mutex_lock` internally and you end up with infinite recursion :( ): 

https://github.com/jrhemstad/gil_preload/blob/main/gil_preload.cpp#L62-L80",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1217161070/reactions,0,0,0,0,0,0,0,0,0,11546
1646,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248627213,https://github.com/rapidsai/cudf/issues/11546#issuecomment-1248627213,https://api.github.com/repos/rapidsai/cudf/issues/11546,1248627213,IC_kwDOBWUGps5KbIoN,2022-09-15T21:02:59Z,2022-09-15T21:02:59Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248627213/reactions,0,0,0,0,0,0,0,0,0,11546
1647,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248863307,https://github.com/rapidsai/cudf/issues/11548#issuecomment-1248863307,https://api.github.com/repos/rapidsai/cudf/issues/11548,1248863307,IC_kwDOBWUGps5KcCRL,2022-09-16T02:59:14Z,2022-09-16T02:59:14Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1248863307/reactions,0,0,0,0,0,0,0,0,0,11548
1648,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287286516,https://github.com/rapidsai/cudf/issues/11548#issuecomment-1287286516,https://api.github.com/repos/rapidsai/cudf/issues/11548,1287286516,IC_kwDOBWUGps5Mum70,2022-10-21T18:10:27Z,2022-10-21T18:10:27Z,CONTRIBUTOR,"I see an [extraneous `sort_values` call in `Column._obtain_isin_result`](https://github.com/rapidsai/cudf/blob/branch-22.12/python/cudf/cudf/core/column/column.py#L760) that can be removed, but I don't see any impact on performance locally when I make that change. Perhaps you can try that locally and see if it improves things. However, I suspect part of the problem is that [we are explicitly sorting and then unsorting the data](https://github.com/rapidsai/cudf/blob/branch-22.12/python/cudf/cudf/core/indexed_frame.py#L2072). I'd have to dig a bit deeper to understand exactly why on the previous line we are actually joining and requesting a sorted result only to unsort afterwards. I assume there's some pandas compatibility at play here, perhaps @galipremsagar or @shwina knows offhand.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287286516/reactions,1,0,0,0,0,0,1,0,0,11548
1649,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221119749,https://github.com/rapidsai/cudf/issues/11570#issuecomment-1221119749,https://api.github.com/repos/rapidsai/cudf/issues/11570,1221119749,IC_kwDOBWUGps5IyM8F,2022-08-19T21:55:22Z,2022-08-19T21:55:22Z,CONTRIBUTOR,"In this case, `df.T.mode(axis=0).T` might solve the problem as expected. Generally, there are quite a few places where keyword arguments (especially `axis`) are documented, but non-default values are not yet supported.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1221119749/reactions,0,0,0,0,0,0,0,0,0,11570
1650,https://api.github.com/repos/rapidsai/cudf/issues/comments/1250395259,https://github.com/rapidsai/cudf/issues/11570#issuecomment-1250395259,https://api.github.com/repos/rapidsai/cudf/issues/11570,1250395259,IC_kwDOBWUGps5Kh4R7,2022-09-18T22:02:55Z,2022-09-18T22:02:55Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1250395259/reactions,0,0,0,0,0,0,0,0,0,11570
1651,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254225039,https://github.com/rapidsai/cudf/issues/11579#issuecomment-1254225039,https://api.github.com/repos/rapidsai/cudf/issues/11579,1254225039,IC_kwDOBWUGps5KwfSP,2022-09-21T21:03:00Z,2022-09-21T21:03:00Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1254225039/reactions,0,0,0,0,0,0,0,0,0,11579
1652,https://api.github.com/repos/rapidsai/cudf/issues/comments/1227805808,https://github.com/rapidsai/cudf/issues/11595#issuecomment-1227805808,https://api.github.com/repos/rapidsai/cudf/issues/11595,1227805808,IC_kwDOBWUGps5JLtRw,2022-08-25T22:04:32Z,2022-08-25T22:04:32Z,CONTRIBUTOR,"This isn't really about `float`, or casting at all. It's about _any_ Python builtin or function (with C implementation) that doesn't have a `__code__` attribute.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1227805808/reactions,0,0,0,0,0,0,0,0,0,11595
1653,https://api.github.com/repos/rapidsai/cudf/issues/comments/1238369072,https://github.com/rapidsai/cudf/issues/11595#issuecomment-1238369072,https://api.github.com/repos/rapidsai/cudf/issues/11595,1238369072,IC_kwDOBWUGps5J0AMw,2022-09-06T16:18:36Z,2022-09-06T16:18:43Z,CONTRIBUTOR,"A similar issue arose in https://github.com/rapidsai/cudf/pull/11319#discussion_r963912420:

> Can you add a test using len directly? Or is a `__code__` attribute required as noted in https://github.com/rapidsai/cudf/issues/11595?
> ```python
> run_udf_test(data, len, ""int64"")
> ```

> Right - we'd need some separate handling for this. Adding the test yields
> ```python
> AttributeError: 'builtin_function_or_method' object has no attribute '__defaults__'
> ```",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1238369072/reactions,0,0,0,0,0,0,0,0,0,11595
1654,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270426124,https://github.com/rapidsai/cudf/issues/11595#issuecomment-1270426124,https://api.github.com/repos/rapidsai/cudf/issues/11595,1270426124,IC_kwDOBWUGps5LuSoM,2022-10-06T17:12:21Z,2022-10-06T17:12:21Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1270426124/reactions,0,0,0,0,0,0,0,0,0,11595
1655,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257072439,https://github.com/rapidsai/cudf/issues/11606#issuecomment-1257072439,https://api.github.com/repos/rapidsai/cudf/issues/11606,1257072439,IC_kwDOBWUGps5K7Wc3,2022-09-24T22:02:52Z,2022-09-24T22:02:52Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1257072439/reactions,0,0,0,0,0,0,0,0,0,11606
1656,https://api.github.com/repos/rapidsai/cudf/issues/comments/1264773009,https://github.com/rapidsai/cudf/issues/11648#issuecomment-1264773009,https://api.github.com/repos/rapidsai/cudf/issues/11648,1264773009,IC_kwDOBWUGps5LYueR,2022-10-03T00:16:40Z,2022-10-03T00:16:40Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1264773009/reactions,0,0,0,0,0,0,0,0,0,11648
1657,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117836613,https://github.com/rapidsai/cudf/issues/11648#issuecomment-2117836613,https://api.github.com/repos/rapidsai/cudf/issues/11648,2117836613,IC_kwDOBWUGps5-O59F,2024-05-17T15:22:10Z,2024-05-17T15:22:10Z,CONTRIBUTOR,CC @mroeschke (might be of interest given some of your recent comments about converting to device and all the internal reworkings you're doing with our columns),,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117836613/reactions,1,1,0,0,0,0,0,0,0,11648
1658,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240031128,https://github.com/rapidsai/cudf/issues/11661#issuecomment-1240031128,https://api.github.com/repos/rapidsai/cudf/issues/11661,1240031128,IC_kwDOBWUGps5J6V-Y,2022-09-07T23:55:09Z,2022-09-07T23:55:09Z,CONTRIBUTOR,"Overall I think you're probably right that this is more work than it's worth, and that it could lead to more complexity and hurdles in setting up the pre-commit environment than we would like (such as if we tried to install a GPU-enabled library like cupy). 

From a 10000 foot view, I think the main benefit of doing these checks more is that they could uncover places where our internal dispatch patterns themselves are problematic. In cases where a function accepts an argument of type `Any` that needs to be dealt with differently depending on whether it's a pandas Series or a numpy array, the above style of if statements is probably necessary, but in other cases we may be able to use a single, simpler. ducktyped code path. However, in practice I think that's much more common when the objects being handled are our own objects (e.g. `Series` and `DataFrame` can often be handled identically rather than with separate branches) so I'm not sure how much the extra typing would actually buy us.

CC @shwina who's spent quite a bit of time with type hinting.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1240031128/reactions,0,0,0,0,0,0,0,0,0,11661
1659,https://api.github.com/repos/rapidsai/cudf/issues/comments/1272173499,https://github.com/rapidsai/cudf/issues/11661#issuecomment-1272173499,https://api.github.com/repos/rapidsai/cudf/issues/11661,1272173499,IC_kwDOBWUGps5L09O7,2022-10-08T00:16:39Z,2022-10-08T00:16:39Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1272173499/reactions,0,0,0,0,0,0,0,0,0,11661
1660,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117834916,https://github.com/rapidsai/cudf/issues/11661#issuecomment-2117834916,https://api.github.com/repos/rapidsai/cudf/issues/11661,2117834916,IC_kwDOBWUGps5-O5ik,2024-05-17T15:21:26Z,2024-05-17T15:21:26Z,CONTRIBUTOR,"I think we should revisit this after #15190 and once cudf's internals become pure Python and designed around pylibcudf. Cython substantially complicates the issue here, as do the many design issues with our current internals. I suspect that we will be able to do a much better job with type hinting at that stage than we do now. At minimum we will be able to tighten up the typing of our internals (the user-facing objects are still tricky due to the complete flexibility of the pandas API).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117834916/reactions,0,0,0,0,0,0,0,0,0,11661
1661,https://api.github.com/repos/rapidsai/cudf/issues/comments/1244902445,https://github.com/rapidsai/cudf/issues/11691#issuecomment-1244902445,https://api.github.com/repos/rapidsai/cudf/issues/11691,1244902445,IC_kwDOBWUGps5KM7Qt,2022-09-13T05:04:51Z,2022-09-13T05:06:08Z,CONTRIBUTOR,"@vuule @GregoryKimball Can you test with pandas for the examples above, please? `cpu =...` should be the ground true.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1244902445/reactions,0,0,0,0,0,0,0,0,0,11691
1662,https://api.github.com/repos/rapidsai/cudf/issues/comments/1245426978,https://github.com/rapidsai/cudf/issues/11691#issuecomment-1245426978,https://api.github.com/repos/rapidsai/cudf/issues/11691,1245426978,IC_kwDOBWUGps5KO7Ui,2022-09-13T13:37:52Z,2022-09-13T13:37:52Z,MEMBER,"Curious, does this only happen for dates before the [Julian-Gregorian calendar transition in 1582](https://www.timeanddate.com/calendar/julian-gregorian-switch.html)?",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1245426978/reactions,1,0,0,0,0,0,1,0,0,11691
1663,https://api.github.com/repos/rapidsai/cudf/issues/comments/1245577983,https://github.com/rapidsai/cudf/issues/11691#issuecomment-1245577983,https://api.github.com/repos/rapidsai/cudf/issues/11691,1245577983,IC_kwDOBWUGps5KPgL_,2022-09-13T15:27:32Z,2022-09-13T15:27:32Z,CONTRIBUTOR,Yeah the tests failed only for years before that year.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1245577983/reactions,0,0,0,0,0,0,0,0,0,11691
1664,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246778855,https://github.com/rapidsai/cudf/issues/11691#issuecomment-1246778855,https://api.github.com/repos/rapidsai/cudf/issues/11691,1246778855,IC_kwDOBWUGps5KUFXn,2022-09-14T13:37:47Z,2022-09-14T13:37:47Z,CONTRIBUTOR,"> Yeah the tests failed only for years before that year.

This is probably more complicated because the transition took ballpark 300 years, so really one needs to interpret the time relative to a location and government to be precise (timezone is not enough if it is only numeric because, for example, Finland has the same timezone as Moscow, but switched calendar 200 years earlier).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1246778855/reactions,0,0,0,0,0,0,0,0,0,11691
1665,https://api.github.com/repos/rapidsai/cudf/issues/comments/1247394893,https://github.com/rapidsai/cudf/issues/11696#issuecomment-1247394893,https://api.github.com/repos/rapidsai/cudf/issues/11696,1247394893,IC_kwDOBWUGps5KWbxN,2022-09-14T23:18:51Z,2022-09-14T23:18:51Z,CONTRIBUTOR,"Closing this as invalid; both `hashCode()` and `equals()` are correct.

1. `Scalar.hashCode()` returns `Objects.hashCode(type, valueHash)`. `type` includes the scale.
2. `Scalar.equals()` compares `type` first, before proceeding to compare values. `type`, again, includes the scale.

Apologies for the noise. This bug is invalid.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1247394893/reactions,0,0,0,0,0,0,0,0,0,11696
1666,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279607407,https://github.com/rapidsai/cudf/issues/11696#issuecomment-1279607407,https://api.github.com/repos/rapidsai/cudf/issues/11696,1279607407,IC_kwDOBWUGps5MRUJv,2022-10-15T00:16:16Z,2022-10-15T00:16:16Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279607407/reactions,0,0,0,0,0,0,0,0,0,11696
1667,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285684392,https://github.com/rapidsai/cudf/issues/11696#issuecomment-1285684392,https://api.github.com/repos/rapidsai/cudf/issues/11696,1285684392,IC_kwDOBWUGps5Mofyo,2022-10-20T14:52:53Z,2022-10-20T14:52:53Z,CONTRIBUTOR,This would sill be good to fix,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285684392/reactions,0,0,0,0,0,0,0,0,0,11696
1668,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255239864,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255239864,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255239864,IC_kwDOBWUGps5K0XC4,2022-09-22T16:04:20Z,2022-09-22T16:04:20Z,CONTRIBUTOR,@rjzamora This issue serves as our proposal for the new parsing-context aware CSV reader. We would love to discuss with you (or another Dask stakeholder) in more detail.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255239864/reactions,0,0,0,0,0,0,0,0,0,11728
1669,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255354385,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255354385,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255354385,IC_kwDOBWUGps5K0zAR,2022-09-22T17:45:43Z,2022-09-22T17:45:43Z,MEMBER,"Nice - I can't say I understand how the transition-vector logic works, but the general plan seems reasonable to me. My current understanding is that the corresponding dask graph would look something like this:

![possible-graph](https://user-images.githubusercontent.com/20461013/191814631-c45be4f7-9a2d-4411-96a4-827e2b2f5d4c.png)

We start by selecting overlapping byte ranges from the dataset (or perhaps they don't need to overlap?). Then we map the `read_csv_context` logic to each of these local byte-ranges. Then we do an overlapped mapping of the `merge_row_contexts` logic to update the context for each byte range. Then we do the final `read_csv` mapping to generate our `DataFrame` partitions.

Is this the general algorithm you have in mind?",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255354385/reactions,1,0,0,0,0,0,1,0,0,11728
1670,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255359399,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255359399,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255359399,IC_kwDOBWUGps5K00On,2022-09-22T17:50:26Z,2022-09-22T17:50:26Z,CONTRIBUTOR,"couple of points for completeness:
1. they must be non-overlapping, but adjacent for this to be correct
2. ""read local context"" reads exactly the specified byte range (plus/minus one character to detect whether the byte range starts after a newline)
3. ""combine contexts"" is really lightweight, we are basically passing around an integer, so it could happen via ""allgather + local exclusive prefix-scan"" as well
4. read_csv may read past the end of the byte range to find the end of the last row inside the range, other than that, everything's non-overlapping",,upsj,1693511,MDQ6VXNlcjE2OTM1MTE=,https://avatars.githubusercontent.com/u/1693511?v=4,,https://api.github.com/users/upsj,https://github.com/upsj,https://api.github.com/users/upsj/followers,https://api.github.com/users/upsj/following{/other_user},https://api.github.com/users/upsj/gists{/gist_id},https://api.github.com/users/upsj/starred{/owner}{/repo},https://api.github.com/users/upsj/subscriptions,https://api.github.com/users/upsj/orgs,https://api.github.com/users/upsj/repos,https://api.github.com/users/upsj/events{/privacy},https://api.github.com/users/upsj/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255359399/reactions,0,0,0,0,0,0,0,0,0,11728
1671,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255379056,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255379056,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255379056,IC_kwDOBWUGps5K05Bw,2022-09-22T18:10:59Z,2022-09-22T18:11:35Z,MEMBER,">1. they must be non-overlapping, but adjacent for this to be correct
>2. ""read local context"" reads exactly the specified byte range (plus/minus one character to detect whether the byte range starts after a newline)

Thanks for clarifying.  We will likely want to use a distinct IO task to physically pull each byte range from a (possibly remote) dataset. This means a given ""read local context"" task will only have access to the specific bytes that were read in the IO task it depends on. It seems like we would want to assign non-overlapping byte ranges to the ""read local context"" tasks, but that the IO tasks they depend on would need to have a bit of overlap (to deal with the ""plus/mins one character"" issue).

>3. ""combine contexts"" is really lightweight, we are basically passing around an integer, so it could happen via ""allgather + local exclusive prefix-scan"" as well

Lightweight sounds good. A map-overlap pattern may still be preferred (if possible), since allgather opperations are not particularly performant in Dask.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255379056/reactions,0,0,0,0,0,0,0,0,0,11728
1672,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255388850,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255388850,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255388850,IC_kwDOBWUGps5K07ay,2022-09-22T18:20:43Z,2022-09-22T18:20:43Z,CONTRIBUTOR,"> This means a given ""read local context"" task will only have access to the specific bytes that were read in the IO task it depends on.

This sounds like a problematic limitation - if a byte range ends shortly after the start of a long row, your IO task may provide too little data. Are you worried about reading the same data twice here? Maybe we could also buffer that on the libcudf data_source level? To expand some more, `read_csv` works in two steps:

1. finding row offsets, this means scanning the byte range for non-quoted/commented out newline characters, as well as finding the next newline after the end of the byte range. The IO here happens in small chunks and will most likely overrun the byte range.
2. loading everything between the first and last row offset computed by 1. into device memory and actually parsing the rows.

The very worst case I could imagine would be a single dask task's byte range that is completely contained within a row, so the corresponding output is empty, but its predecessor would need to read past that task's byte range.",,upsj,1693511,MDQ6VXNlcjE2OTM1MTE=,https://avatars.githubusercontent.com/u/1693511?v=4,,https://api.github.com/users/upsj,https://github.com/upsj,https://api.github.com/users/upsj/followers,https://api.github.com/users/upsj/following{/other_user},https://api.github.com/users/upsj/gists{/gist_id},https://api.github.com/users/upsj/starred{/owner}{/repo},https://api.github.com/users/upsj/subscriptions,https://api.github.com/users/upsj/orgs,https://api.github.com/users/upsj/repos,https://api.github.com/users/upsj/events{/privacy},https://api.github.com/users/upsj/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255388850/reactions,0,0,0,0,0,0,0,0,0,11728
1673,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255415329,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1255415329,https://api.github.com/repos/rapidsai/cudf/issues/11728,1255415329,IC_kwDOBWUGps5K1B4h,2022-09-22T18:45:13Z,2022-09-22T18:45:13Z,MEMBER,">if a byte range ends shortly after the start of a long row, your IO task may provide too little data. Are you worried about reading the same data twice here?

You are correct that it will be possible to ""break"" the Dask logic by assigning byte ranges that are too small (or by assigning too-little overlap). As far as I understand, this is already potential problem in dask's `read_csv`.  However, in the past the only alternative was to read the entire remote file on every worker.

Now that I think about it, this is no longer the only alternative, because we are now able to perform partial IO from a file opened with `fsspec` (as a pyarrow `NativeFile`). Therefore, as long as we can handle a pyarrow `NativeFile` source, then we can allow those tasks to access any byte from the file.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1255415329/reactions,0,0,0,0,0,0,0,0,0,11728
1674,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256008355,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1256008355,https://api.github.com/repos/rapidsai/cudf/issues/11728,1256008355,IC_kwDOBWUGps5K3Sqj,2022-09-23T09:50:37Z,2022-09-23T10:03:21Z,CONTRIBUTOR,"If we wanted to do this 100% cleanly, we could also extract row offsets in the parse context stage and exchange them between neighboring tasks/workers. Then the initial IO could be limited to the byte range + 1, and the subsequent parsing IO would know exactly which bytes to load a priori

Coming back to the communication patterns:
> A map-overlap pattern may still be preferred (if possible), since allgather opperations are not particularly performant in Dask.

Overlaps could potentially work somewhat heuristically in most cases, but I'd be more comfortable with an always safe solution, since the error-proneness across byte range boundaries was the original motivation for this discussion.",,upsj,1693511,MDQ6VXNlcjE2OTM1MTE=,https://avatars.githubusercontent.com/u/1693511?v=4,,https://api.github.com/users/upsj,https://github.com/upsj,https://api.github.com/users/upsj/followers,https://api.github.com/users/upsj/following{/other_user},https://api.github.com/users/upsj/gists{/gist_id},https://api.github.com/users/upsj/starred{/owner}{/repo},https://api.github.com/users/upsj/subscriptions,https://api.github.com/users/upsj/orgs,https://api.github.com/users/upsj/repos,https://api.github.com/users/upsj/events{/privacy},https://api.github.com/users/upsj/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256008355/reactions,0,0,0,0,0,0,0,0,0,11728
1675,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256202929,https://github.com/rapidsai/cudf/issues/11728#issuecomment-1256202929,https://api.github.com/repos/rapidsai/cudf/issues/11728,1256202929,IC_kwDOBWUGps5K4CKx,2022-09-23T13:20:48Z,2022-09-23T13:20:48Z,MEMBER,">I'd be more comfortable with an always safe solution

That makes sense. It would be fine for the first pass at the Dask algorithm to just execute a distinct task graph to calculate the **correct** byte range for each partition, followed by a conventional `read_csv` graph. The map-overlap pattern would allow us to avoid any eager execution, but my opinion is that eager execution is fine when it is well motivated.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1256202929/reactions,0,0,0,0,0,0,0,0,0,11728
1676,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287232548,https://github.com/rapidsai/cudf/issues/11737#issuecomment-1287232548,https://api.github.com/repos/rapidsai/cudf/issues/11737,1287232548,IC_kwDOBWUGps5MuZwk,2022-10-21T17:12:56Z,2022-10-21T17:12:56Z,NONE,"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.",,github-actions[bot],41898282,MDM6Qm90NDE4OTgyODI=,https://avatars.githubusercontent.com/in/15368?v=4,,https://api.github.com/users/github-actions%5Bbot%5D,https://github.com/apps/github-actions,https://api.github.com/users/github-actions%5Bbot%5D/followers,https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user},https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id},https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo},https://api.github.com/users/github-actions%5Bbot%5D/subscriptions,https://api.github.com/users/github-actions%5Bbot%5D/orgs,https://api.github.com/users/github-actions%5Bbot%5D/repos,https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy},https://api.github.com/users/github-actions%5Bbot%5D/received_events,Bot,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287232548/reactions,0,0,0,0,0,0,0,0,0,11737
1677,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117828327,https://github.com/rapidsai/cudf/issues/11737#issuecomment-2117828327,https://api.github.com/repos/rapidsai/cudf/issues/11737,2117828327,IC_kwDOBWUGps5-O37n,2024-05-17T15:18:17Z,2024-05-17T15:18:17Z,CONTRIBUTOR,See also #9639 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117828327/reactions,0,0,0,0,0,0,0,0,0,11737
1678,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117878564,https://github.com/rapidsai/cudf/issues/11795#issuecomment-2117878564,https://api.github.com/repos/rapidsai/cudf/issues/11795,2117878564,IC_kwDOBWUGps5-PEMk,2024-05-17T15:44:31Z,2024-05-17T15:44:31Z,CONTRIBUTOR,"This works now, but with the caveat that categorical column must be explicitly marked as ordered
```
In [1]: import cudf
   ...: import dask_cudf
   ...: df = cudf.DataFrame({""a"": list(""caba""), ""b"": list(range(4))})
   ...: df[""a""] = df[""a""].astype(""category"").cat.as_ordered()  # Without ordering the dask version fails.
   ...: ddf = dask_cudf.from_cudf(df, npartitions=2)
   ...: print(df.sort_values(""a""))
   ...: print(ddf.sort_values(""a"").compute())
   a  b
1  a  1
3  a  3
2  b  2
0  c  0
   a  b
1  a  1
3  a  3
2  b  2
0  c  0
```
@rjzamora any idea why dask_cudf behaves differently from cudf w.r.t. the ordering?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117878564/reactions,0,0,0,0,0,0,0,0,0,11795
1679,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118440759,https://github.com/rapidsai/cudf/issues/11795#issuecomment-2118440759,https://api.github.com/repos/rapidsai/cudf/issues/11795,2118440759,IC_kwDOBWUGps5-RNc3,2024-05-17T22:13:27Z,2024-05-17T22:16:32Z,MEMBER,"Good catch @vyasr - The dask behavior was actually ""fixed"" recently in dask-expr (https://github.com/dask/dask-expr/pull/1058), but I just realized that the `pd.CategoricalDtype` check will need to be updated to work for cudf (my mistake for missing that when I reviewed).

Even with dask-expr fixed, however, your snippet will not work for dask_cudf, because there seems to be a bug in cudf:

```python
import cudf as lib  # Works for pandas, but not for cudf

df = lib.DataFrame({""a"": list(""caba""), ""b"": list(range(4))})
df[""a""] = df[""a""].astype(""category"")
df = df.iloc[:2]
df[""a""].cat.as_ordered()
```
```
...
ValueError: Length of values (4) does not match length of index (2)
```

**EDIT**: I submitted https://github.com/rapidsai/cudf/issues/15778 to track this.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118440759/reactions,0,0,0,0,0,0,0,0,0,11795
1680,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121052488,https://github.com/rapidsai/cudf/issues/11795#issuecomment-2121052488,https://api.github.com/repos/rapidsai/cudf/issues/11795,2121052488,IC_kwDOBWUGps5-bLFI,2024-05-20T19:17:44Z,2024-05-20T19:17:44Z,MEMBER,"**Update**: Latest version of `dask-expr:main` + `dask:main` now results in an ugly segfault when sorting on a categorical column. After https://github.com/rapidsai/cudf/pull/15788, the user will get a clear error until the upstream divisions logic is ""generalized"" to work with cudf.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121052488/reactions,0,0,0,0,0,0,0,0,0,11795
1681,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121229790,https://github.com/rapidsai/cudf/issues/11795#issuecomment-2121229790,https://api.github.com/repos/rapidsai/cudf/issues/11795,2121229790,IC_kwDOBWUGps5-b2Xe,2024-05-20T21:19:34Z,2024-05-20T21:19:34Z,CONTRIBUTOR,"The chain has gotten a bit long here, let me summarize to make sure I have everything right. #15780 will fix #15778. Once that is merged, will this issue also be fixed in the dask-expr case, or is there still work to be done to generalize dask-expr to work correctly for cudf because https://github.com/dask/dask-expr/pull/1058 wasn't complete? And in either case, do we still expect this to fail for users of the legacy dask API (which I guess isn't too important if we're going to be forced to migrate to dask-expr anyway)?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121229790/reactions,0,0,0,0,0,0,0,0,0,11795
1682,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121418291,https://github.com/rapidsai/cudf/issues/11795#issuecomment-2121418291,https://api.github.com/repos/rapidsai/cudf/issues/11795,2121418291,IC_kwDOBWUGps5-ckYz,2024-05-20T23:42:12Z,2024-05-20T23:44:13Z,MEMBER,"**Summary**:

- Sorting by a categorical column works fine with dask-cudf, but only for the ""legacy"" API
- Until recently, categorical sorting has been broken for **both** pandas and cudf-backed data in dask-expr
  - https://github.com/dask/dask-expr/pull/1058 fixed the problem for pandas-backed data, but not for cudf-backed data
  
- In order to support cudf-backed data, we essentially need the [`RepartitionQuantiles`](https://github.com/dask/dask-expr/blob/8de39b0c9ccf61411a71bf2f91d4f38397d4c004/dask_expr/_quantiles.py#L36) logic to work for both cudf and pandas data
  - https://github.com/rapidsai/cudf/pull/15780 will indeed fix one of the reasons this logic doesn't work with cudf (a cudf slicing bug)
  - https://github.com/dask/dask-expr/pull/1070 fixed another problem in `RepartitionQuantiles`, but it didn't fix everything
    - The fact that this PR was only a ""partial"" fix ultimately motivated https://github.com/rapidsai/cudf/pull/15788, because the new failure mode was even worse than before.
    
I certainly want to fix categorical sorting for 24.06 if possible, but my current expectation is that we will need to raise an error and tell the user to disable query planning. If I can find a work-around in the next day or so, then we can remove the error. Otherwise, the proper/upstream fix will only apply to 24.08.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121418291/reactions,1,0,0,0,0,0,1,0,0,11795
1683,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260014585,https://github.com/rapidsai/cudf/issues/11796#issuecomment-1260014585,https://api.github.com/repos/rapidsai/cudf/issues/11796,1260014585,IC_kwDOBWUGps5LGkv5,2022-09-27T20:31:37Z,2022-09-27T20:31:37Z,MEMBER,"When you call `compute`, you are bringing all of the data to a single GPU and a single Python process, which is likely not what you want to do. [These](https://coiled.io/blog/dask-compute/) two [blogs](https://coiled.io/blog/dask-persist-dataframe/) from Coiled can provide some context on how to handle distributed data in memory.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260014585/reactions,0,0,0,0,0,0,0,0,0,11796
1684,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260466195,https://github.com/rapidsai/cudf/issues/11796#issuecomment-1260466195,https://api.github.com/repos/rapidsai/cudf/issues/11796,1260466195,IC_kwDOBWUGps5LITAT,2022-09-28T06:52:32Z,2022-09-28T06:53:42Z,NONE,"Thanks @beckernick That makes total sense. I will read more about the blogs you shared. I have a follow up question, actually what I want is to load the data to `cugraph` and run the pagerank algorithm, not `compute`. However, it still shows the OOM error. You may find the detailed error message in this issue: https://github.com/rapidsai/cugraph/issues/2694. 

```python
import dask
from dask_cuda import LocalCUDACluster
from dask.distributed import Client
import dask_cudf
import cugraph
import cugraph.dask as dask_cugraph
from cugraph.dask.common.mg_utils import get_visible_devices
from cugraph.dask.comms import comms as Comms
import time

csv_file_name = ""twitter-2010.csv""

with dask.config.set(jit_unspill=True):
    with LocalCUDACluster(n_workers=8, device_memory_limit=""16GB"") as cluster:
        with Client(cluster) as client:
            client.wait_for_workers(len(get_visible_devices()))
            Comms.initialize(p2p=True)
            chunksize = dask_cugraph.get_chunksize(csv_file_name)
            ddf = dask_cudf.read_csv(csv_file_name, chunksize=chunksize, delimiter=' ', names=['src', 'dst'], dtype=['int32', 'int32'])
            G = cugraph.Graph(directed=True)
            G.from_dask_cudf_edgelist(ddf, source='src', destination='dst')
```

This doesn't seem to be the same issue because I don't collect all the data to a single GPU. Do you maybe have a hint what could be the reason for that? Thanks!",,parkerzf,1273326,MDQ6VXNlcjEyNzMzMjY=,https://avatars.githubusercontent.com/u/1273326?v=4,,https://api.github.com/users/parkerzf,https://github.com/parkerzf,https://api.github.com/users/parkerzf/followers,https://api.github.com/users/parkerzf/following{/other_user},https://api.github.com/users/parkerzf/gists{/gist_id},https://api.github.com/users/parkerzf/starred{/owner}{/repo},https://api.github.com/users/parkerzf/subscriptions,https://api.github.com/users/parkerzf/orgs,https://api.github.com/users/parkerzf/repos,https://api.github.com/users/parkerzf/events{/privacy},https://api.github.com/users/parkerzf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260466195/reactions,0,0,0,0,0,0,0,0,0,11796
1685,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260753281,https://github.com/rapidsai/cudf/issues/11796#issuecomment-1260753281,https://api.github.com/repos/rapidsai/cudf/issues/11796,1260753281,IC_kwDOBWUGps5LJZGB,2022-09-28T11:14:27Z,2022-09-28T11:14:27Z,NONE,"@parkerzf , did you find any workaround for the above issue?",,Ankitkurani1997,29927383,MDQ6VXNlcjI5OTI3Mzgz,https://avatars.githubusercontent.com/u/29927383?v=4,,https://api.github.com/users/Ankitkurani1997,https://github.com/Ankitkurani1997,https://api.github.com/users/Ankitkurani1997/followers,https://api.github.com/users/Ankitkurani1997/following{/other_user},https://api.github.com/users/Ankitkurani1997/gists{/gist_id},https://api.github.com/users/Ankitkurani1997/starred{/owner}{/repo},https://api.github.com/users/Ankitkurani1997/subscriptions,https://api.github.com/users/Ankitkurani1997/orgs,https://api.github.com/users/Ankitkurani1997/repos,https://api.github.com/users/Ankitkurani1997/events{/privacy},https://api.github.com/users/Ankitkurani1997/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1260753281/reactions,0,0,0,0,0,0,0,0,0,11796
1686,https://api.github.com/repos/rapidsai/cudf/issues/comments/1261843528,https://github.com/rapidsai/cudf/issues/11796#issuecomment-1261843528,https://api.github.com/repos/rapidsai/cudf/issues/11796,1261843528,IC_kwDOBWUGps5LNjRI,2022-09-29T06:50:53Z,2022-09-29T06:50:53Z,NONE,"> 

Nope, hope that someone else could share their experience to deal with large dataset. ",,parkerzf,1273326,MDQ6VXNlcjEyNzMzMjY=,https://avatars.githubusercontent.com/u/1273326?v=4,,https://api.github.com/users/parkerzf,https://github.com/parkerzf,https://api.github.com/users/parkerzf/followers,https://api.github.com/users/parkerzf/following{/other_user},https://api.github.com/users/parkerzf/gists{/gist_id},https://api.github.com/users/parkerzf/starred{/owner}{/repo},https://api.github.com/users/parkerzf/subscriptions,https://api.github.com/users/parkerzf/orgs,https://api.github.com/users/parkerzf/repos,https://api.github.com/users/parkerzf/events{/privacy},https://api.github.com/users/parkerzf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1261843528/reactions,0,0,0,0,0,0,0,0,0,11796
1687,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287382948,https://github.com/rapidsai/cudf/issues/11896#issuecomment-1287382948,https://api.github.com/repos/rapidsai/cudf/issues/11896,1287382948,IC_kwDOBWUGps5Mu-ek,2022-10-21T20:01:51Z,2022-10-21T20:22:48Z,CONTRIBUTOR,"Thanks @miguelusque for raising this issue. ~I know that we've had trouble supporting the pandas MultiIndex behavior. I believe there was a proposal to drop MultiIndex support - how big of an impact would that be for the users you've worked with?~ To my surprise, it is `cudf` that is generating the `MultiIndex` - we should just return a simple `Index` instead! 

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287382948/reactions,0,0,0,0,0,0,0,0,0,11896
1688,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287644697,https://github.com/rapidsai/cudf/issues/11896#issuecomment-1287644697,https://api.github.com/repos/rapidsai/cudf/issues/11896,1287644697,IC_kwDOBWUGps5Mv-YZ,2022-10-22T06:20:19Z,2022-10-22T06:20:19Z,MEMBER,"Hi @GregoryKimball , thank you!.

Please find below the original code that I was porting from Pandas to cuDF. Unfortunately, `.add_prefix()` and `.and_suffix()` methods do not work with `MultiIndex`.

Original code:

```python
df = df.to_pandas()
# Which department have user ordered products?
df_ = pd.crosstab(df.user_id, df.department_id).add_prefix('user_department_').add_suffix('_freq')
feature_list.append(cudf.from_pandas(df_))
```

Workaround:

```python
 # Which department have user ordered products?
df_ = cudf.crosstab(df.user_id, df.department_id)
df_.columns = ['user_department_' + str(c[0]) + '_freq' for c in df_.columns]
feature_list.append(df_)
```

Hope it helps!",,miguelusque,26169771,MDQ6VXNlcjI2MTY5Nzcx,https://avatars.githubusercontent.com/u/26169771?v=4,,https://api.github.com/users/miguelusque,https://github.com/miguelusque,https://api.github.com/users/miguelusque/followers,https://api.github.com/users/miguelusque/following{/other_user},https://api.github.com/users/miguelusque/gists{/gist_id},https://api.github.com/users/miguelusque/starred{/owner}{/repo},https://api.github.com/users/miguelusque/subscriptions,https://api.github.com/users/miguelusque/orgs,https://api.github.com/users/miguelusque/repos,https://api.github.com/users/miguelusque/events{/privacy},https://api.github.com/users/miguelusque/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287644697/reactions,0,0,0,0,0,0,0,0,0,11896
1689,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287396273,https://github.com/rapidsai/cudf/issues/11923#issuecomment-1287396273,https://api.github.com/repos/rapidsai/cudf/issues/11923,1287396273,IC_kwDOBWUGps5MvBux,2022-10-21T20:17:55Z,2022-10-21T20:17:55Z,CONTRIBUTOR,I'd like to cross-reference this issue with #11968. It's likely that the `null_count` appearances in profiles will change as we refactor `null_count` for compatibility with user-provided streams.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287396273/reactions,0,0,0,0,0,0,0,0,0,11923
1690,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290684064,https://github.com/rapidsai/cudf/issues/11923#issuecomment-1290684064,https://api.github.com/repos/rapidsai/cudf/issues/11923,1290684064,IC_kwDOBWUGps5M7kag,2022-10-25T14:52:45Z,2022-10-25T14:52:45Z,CONTRIBUTOR,">  it would be great if explode could compute null count as part of that kernel.

I'm not following. `explode` returns a `table`: https://github.com/rapidsai/cudf/blob/7d173c9d144a64c5e1a0467d2a5eb4181854f25e/cpp/include/cudf/lists/explode.hpp#L72

Are you then constructing a `column_view` for each of the lists that were exploded? 

If so, then yeah, you're going to have a problem with computing the null count of each of those `column_view`s individually. 

To make that efficient, you'd have to do what we do in `cudf::split` where we compute the individual null counts in bulk with a single `segmented_null_count`: https://github.com/rapidsai/cudf/blob/9c06330363db4da99803a3728b8bf44f9829f0b9/cpp/include/cudf/detail/null_mask.hpp#L186-L204",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290684064/reactions,0,0,0,0,0,0,0,0,0,11923
1691,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279338649,https://github.com/rapidsai/cudf/issues/11924#issuecomment-1279338649,https://api.github.com/repos/rapidsai/cudf/issues/11924,1279338649,IC_kwDOBWUGps5MQSiZ,2022-10-14T18:37:48Z,2022-10-14T18:37:48Z,MEMBER,"@dawilliams-nvidia , can we create a separate feature request for `kendall` and `callable`? Supporting kendall rank correlation is conceptually separate from supporting arbitrary (or even constrained) callables as correlation functions.  ",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279338649/reactions,0,0,0,0,0,0,0,0,0,11924
1692,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279351703,https://github.com/rapidsai/cudf/issues/11924#issuecomment-1279351703,https://api.github.com/repos/rapidsai/cudf/issues/11924,1279351703,IC_kwDOBWUGps5MQVuX,2022-10-14T18:53:40Z,2022-10-14T18:53:40Z,NONE,"Ah, will do! I have edited the request to exclusively discuss the ""kendall"" method. ""callable"" can be found here: https://github.com/rapidsai/cudf/issues/11926",,dawilliams-nvidia,43862870,MDQ6VXNlcjQzODYyODcw,https://avatars.githubusercontent.com/u/43862870?v=4,,https://api.github.com/users/dawilliams-nvidia,https://github.com/dawilliams-nvidia,https://api.github.com/users/dawilliams-nvidia/followers,https://api.github.com/users/dawilliams-nvidia/following{/other_user},https://api.github.com/users/dawilliams-nvidia/gists{/gist_id},https://api.github.com/users/dawilliams-nvidia/starred{/owner}{/repo},https://api.github.com/users/dawilliams-nvidia/subscriptions,https://api.github.com/users/dawilliams-nvidia/orgs,https://api.github.com/users/dawilliams-nvidia/repos,https://api.github.com/users/dawilliams-nvidia/events{/privacy},https://api.github.com/users/dawilliams-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1279351703/reactions,1,1,0,0,0,0,0,0,0,11924
1693,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295099729,https://github.com/rapidsai/cudf/issues/11924#issuecomment-1295099729,https://api.github.com/repos/rapidsai/cudf/issues/11924,1295099729,IC_kwDOBWUGps5NMadR,2022-10-28T14:54:20Z,2022-10-28T14:54:20Z,NONE,Also adding a comment to clarify that ideally this functionality will also extend to dask+cudf as well! Happy to open a separate issue for dask discussion if needed,,dawilliams-nvidia,43862870,MDQ6VXNlcjQzODYyODcw,https://avatars.githubusercontent.com/u/43862870?v=4,,https://api.github.com/users/dawilliams-nvidia,https://github.com/dawilliams-nvidia,https://api.github.com/users/dawilliams-nvidia/followers,https://api.github.com/users/dawilliams-nvidia/following{/other_user},https://api.github.com/users/dawilliams-nvidia/gists{/gist_id},https://api.github.com/users/dawilliams-nvidia/starred{/owner}{/repo},https://api.github.com/users/dawilliams-nvidia/subscriptions,https://api.github.com/users/dawilliams-nvidia/orgs,https://api.github.com/users/dawilliams-nvidia/repos,https://api.github.com/users/dawilliams-nvidia/events{/privacy},https://api.github.com/users/dawilliams-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295099729/reactions,0,0,0,0,0,0,0,0,0,11924
1694,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282404537,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282404537,https://api.github.com/repos/rapidsai/cudf/issues/11925,1282404537,IC_kwDOBWUGps5Mb_C5,2022-10-18T13:39:47Z,2022-10-18T13:39:47Z,CONTRIBUTOR,"In general, `axis=1` for other methods like `max()` or `mean()` is supported via CuPy, which doesn't provide `mode()`.

I don't think it would be trivial or easy to implement `mode()` as it effectively needs a row-wise stream compaction. @GregoryKimball or @brandon-b-miller -- I wonder if you have any thoughts on the feasibility of implementing this using libcudf or numba respectively?
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282404537/reactions,0,0,0,0,0,0,0,0,0,11925
1695,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282476205,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282476205,https://api.github.com/repos/rapidsai/cudf/issues/11925,1282476205,IC_kwDOBWUGps5McQit,2022-10-18T14:20:10Z,2022-10-18T14:20:10Z,CONTRIBUTOR,"It seems like it would be possible to write a numba kernel that consumes a matrix-like data structure (possibly generated from the input dataframe) and computes the mode across the rows, however I think the challenge for us in cuDF would be making sure that kernel (or family of kernels) matches pandas for all the edge cases involving dataframes with mixed dtypes, nulls, nans, and the like. We'd also want to think about the UX of dispatching to cupy for some row-wise operations and a custom numba kernel which requires compilation for others. ",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282476205/reactions,0,0,0,0,0,0,0,0,0,11925
1696,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282483956,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1282483956,https://api.github.com/repos/rapidsai/cudf/issues/11925,1282483956,IC_kwDOBWUGps5McSb0,2022-10-18T14:25:28Z,2022-10-18T14:25:28Z,MEMBER,"I agree. This is probably in scope for CuPy, as SciPy explicitly implements it (with a fairly interesting return type). Given this operation is not columnar in nature, I think it makes sense to implement this in the Python layer by dispatching to a potential future CuPy implementation.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1282483956/reactions,0,0,0,0,0,0,0,0,0,11925
1697,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295282805,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295282805,https://api.github.com/repos/rapidsai/cudf/issues/11925,1295282805,IC_kwDOBWUGps5NNHJ1,2022-10-28T17:47:56Z,2022-10-28T17:47:56Z,MEMBER,"Per offline discussion with @dawilliams-nvidia , limited support for only numeric types would be sufficient",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295282805/reactions,0,0,0,0,0,0,0,0,0,11925
1698,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295364327,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295364327,https://api.github.com/repos/rapidsai/cudf/issues/11925,1295364327,IC_kwDOBWUGps5NNbDn,2022-10-28T19:16:40Z,2022-10-28T19:18:39Z,CONTRIBUTOR,"If numeric-only types are sufficient here, I would suggest the same thing as I mentioned here: https://github.com/rapidsai/cudf/issues/11570#issuecomment-1221119749

We can implement something like `axis=1` by returning `df.T.mode(axis=0).T`. The explicit transposes will only work for dataframes with similar dtypes (I am not exactly sure what qualifies for like-casting on tranpose) but it would permit a reasonable subset of `axis=1` use cases to be performed in a fairly efficient manner. The two transposes are not ideal for speed, but neither is row-wise operation. This might be an okay compromise between GPU perf and usability.

@shwina @beckernick @brandon-b-miller Do we have other issues like this where CuPy is limiting us? I suspect similar issues would exist for cuDF types that CuPy doesn't support, but a (transpose, columnar reduction, transpose) could be viable.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295364327/reactions,0,0,0,0,0,0,0,0,0,11925
1699,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295411696,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295411696,https://api.github.com/repos/rapidsai/cudf/issues/11925,1295411696,IC_kwDOBWUGps5NNmnw,2022-10-28T20:01:54Z,2022-10-28T20:01:54Z,MEMBER,"We changed transpose to return a contiguous buffer, right? I think that allocating thousands of columns will be a non-starter.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295411696/reactions,0,0,0,0,0,0,0,0,0,11925
1700,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295637078,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295637078,https://api.github.com/repos/rapidsai/cudf/issues/11925,1295637078,IC_kwDOBWUGps5NOdpW,2022-10-28T23:26:02Z,2022-10-28T23:26:02Z,CONTRIBUTOR,"> We changed transpose to return a contiguous buffer, right?

Indeed we did.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295637078/reactions,0,0,0,0,0,0,0,0,0,11925
1701,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295647173,https://github.com/rapidsai/cudf/issues/11925#issuecomment-1295647173,https://api.github.com/repos/rapidsai/cudf/issues/11925,1295647173,IC_kwDOBWUGps5NOgHF,2022-10-28T23:51:12Z,2022-10-28T23:52:35Z,CONTRIBUTOR,"I see. An alternative would be to allocate a single column that is matrix-like (has `columns*rows` entries), copy all the entries there (no need to transpose), and add an auxiliary column of row labels. Then do a groupby count over both columns `(row_label, value)` to get the counts of each value in each row. Take the result and do a groupby argmax over `row_label` to get the index of the mode of each row, and gather the corresponding values to return.

The first groupby cardinality could be very large with low counts for each grouping, but both groupby steps can use hash-based implementations.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295647173/reactions,0,0,0,0,0,0,0,0,0,11925
1702,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285814840,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285814840,https://api.github.com/repos/rapidsai/cudf/issues/11944,1285814840,IC_kwDOBWUGps5Mo_o4,2022-10-20T16:09:03Z,2022-10-20T16:09:03Z,CONTRIBUTOR,"@Ullar-Kask could you include a MWE, specifically how you constructed your `df`? Here is what I observe on the latest version of cudf, which looks like the same issue as #11298:
```
>>> df = cudf.DataFrame({'a': ['c', 'd', 'e'], 'b': ['x', 'y', 'z']})
>>> df.loc[df['a'] == 'c', 'b'] = ['0']
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/nvme/0/vyasr/rapids/cudf/python/cudf/cudf/core/dataframe.py"", line 149, in __setitem__
    return self._setitem_tuple_arg(key, value)
  File ""/nvme/0/vyasr/rapids/compose/etc/conda/cuda_11.5/envs/rapids/lib/python3.8/contextlib.py"", line 75, in inner
    return func(*args, **kwds)
  File ""/nvme/0/vyasr/rapids/cudf/python/cudf/cudf/core/dataframe.py"", line 380, in _setitem_tuple_arg
    value = cupy.asarray(value)
  File ""/nvme/0/vyasr/rapids/compose/etc/conda/cuda_11.5/envs/rapids/lib/python3.8/site-packages/cupy/_creation/from_data.py"", line 76, in asarray
    return _core.array(a, dtype, False, order)
  File ""cupy/_core/core.pyx"", line 2357, in cupy._core.core.array
  File ""cupy/_core/core.pyx"", line 2381, in cupy._core.core.array
  File ""cupy/_core/core.pyx"", line 2509, in cupy._core.core._array_default
ValueError: Unsupported dtype <U1
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285814840/reactions,0,0,0,0,0,0,0,0,0,11944
1703,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285850429,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285850429,https://api.github.com/repos/rapidsai/cudf/issues/11944,1285850429,IC_kwDOBWUGps5MpIU9,2022-10-20T16:36:59Z,2022-10-20T16:36:59Z,MEMBER,@wence- is also working on some potentially related fixes in #11904 ,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285850429/reactions,0,0,0,0,0,0,0,0,0,11944
1704,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285888145,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285888145,https://api.github.com/repos/rapidsai/cudf/issues/11944,1285888145,IC_kwDOBWUGps5MpRiR,2022-10-20T17:10:33Z,2022-10-20T17:10:33Z,CONTRIBUTOR,"As a note, I believe this will work:


```python
df.loc[df['column'] =='value', 'column2'] = cudf.Scalar(['0','1'])
```

(this is still a bug -- we shouldn't require the user to construct a `Scalar` manually)",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285888145/reactions,0,0,0,0,0,0,0,0,0,11944
1705,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285927246,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285927246,https://api.github.com/repos/rapidsai/cudf/issues/11944,1285927246,IC_kwDOBWUGps5MpbFO,2022-10-20T17:47:03Z,2022-10-20T17:47:03Z,NONE,"@vyasr  I've tried various ways to circumvent the error, e.g.

`df.loc[df['column'] =='value', 'column2'] = ['0','1']`
or,
```
neg_lst = random.choices(products_lst, k=len(lst))
df.loc[df['column'] =='value', 'column2'] = neg_lst 
```
or,
`df.loc[df['column'] =='value', 'column2'] = cudf.Series(neg_lst)`

but all fail with slightly different error msgs:
`ValueError: Unsupported dtype <U1`
or
`ValueError: Unsupported dtype <U6`
or

```
TypeError: Implicit conversion to a host NumPy array via array is not allowed, To explicitly construct a GPU matrix, consider using .to_cupy()
To explicitly construct a host matrix, consider using .to_numpy().
```

",,Ullar-Kask,13900171,MDQ6VXNlcjEzOTAwMTcx,https://avatars.githubusercontent.com/u/13900171?v=4,,https://api.github.com/users/Ullar-Kask,https://github.com/Ullar-Kask,https://api.github.com/users/Ullar-Kask/followers,https://api.github.com/users/Ullar-Kask/following{/other_user},https://api.github.com/users/Ullar-Kask/gists{/gist_id},https://api.github.com/users/Ullar-Kask/starred{/owner}{/repo},https://api.github.com/users/Ullar-Kask/subscriptions,https://api.github.com/users/Ullar-Kask/orgs,https://api.github.com/users/Ullar-Kask/repos,https://api.github.com/users/Ullar-Kask/events{/privacy},https://api.github.com/users/Ullar-Kask/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285927246/reactions,0,0,0,0,0,0,0,0,0,11944
1706,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286968922,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286968922,https://api.github.com/repos/rapidsai/cudf/issues/11944,1286968922,IC_kwDOBWUGps5MtZZa,2022-10-21T13:33:42Z,2022-10-21T13:33:42Z,NONE,"`df = cudf.DataFrame({'a': ['c', 'd', 'e'], 'b': ['x', 'y', 'z']})`

BTW, this works:
`df['c'] = cudf.Series(['1', '2', '3'])`

This also works:
`df.loc[:,'d'] = cudf.Series(['1', '2', '3'])`

But the last statement fails when re-executed:
```
TypeError: Implicit conversion to a host NumPy array via __array__ is not allowed, To explicitly construct a GPU matrix, consider using .to_cupy()
To explicitly construct a host matrix, consider using .to_numpy().
```",,Ullar-Kask,13900171,MDQ6VXNlcjEzOTAwMTcx,https://avatars.githubusercontent.com/u/13900171?v=4,,https://api.github.com/users/Ullar-Kask,https://github.com/Ullar-Kask,https://api.github.com/users/Ullar-Kask/followers,https://api.github.com/users/Ullar-Kask/following{/other_user},https://api.github.com/users/Ullar-Kask/gists{/gist_id},https://api.github.com/users/Ullar-Kask/starred{/owner}{/repo},https://api.github.com/users/Ullar-Kask/subscriptions,https://api.github.com/users/Ullar-Kask/orgs,https://api.github.com/users/Ullar-Kask/repos,https://api.github.com/users/Ullar-Kask/events{/privacy},https://api.github.com/users/Ullar-Kask/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286968922/reactions,0,0,0,0,0,0,0,0,0,11944
1707,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286971706,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286971706,https://api.github.com/repos/rapidsai/cudf/issues/11944,1286971706,IC_kwDOBWUGps5MtaE6,2022-10-21T13:35:56Z,2022-10-21T13:35:56Z,CONTRIBUTOR,"Here's a complete example:
```python
import cudf
df = cudf.DataFrame(data={""a"": [""yes"", ""no""], ""b"": [[""l1"", ""l2""], [""c"", ""d""]]})

df.loc[df.a == ""yes"", ""b""] = [""hello""]
```

This goes through `_DataFrameLocIndexer._setitem_tuple_arg` for which `is_scalar` returns `False`, `isinstance(value, DataFrame)` also returns `False`, so we try and turn the value `[""0"", ""1""]` into a cupy array which fails because cupy can't handle `str` dtypes.

Now it gets messy, because there's some logic error in list column setitem that precludes many of the other approaches from working.

As @shwina says, for the specific case of setting a ""scalar"" broadcastable value:

```
df.loc[df.a == ""yes"", ""b""] = cudf.Scalar([""hello""])
```

works

If you want to set something more complicated (say):

```python
df = cudf.DataFrame(data={""a"": [""yes"", ""no"", ""yes""], ""b"": [[""l1"", ""l2""], [""c"", ""d""], [""e""]]})

df.loc[df.a == ""yes"", ""b""] = [[""a""], [""g""]]
```

This fails, and all of the workarounds are very internals-heavy:

<details>
<summary>
WARNING, WARNING: Do not use this code!
</summary>

```python
import cudf
from cudf.core.column.column import ColumnBase, as_column
df = cudf.DataFrame(data={""a"": [""yes"", ""no"", ""yes""], ""b"": [[""l1"", ""l2""], [""c"", ""d""], [""e""]]})

ColumnBase.__setitem__(df.b._column, (df.a == ""yes"")._column, as_column([[""x""], [""y""]])

In [138]: df
Out[138]: 
     a       b
0  yes     [x]
1   no  [c, d]
2  yes     [y]
```

</details>",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286971706/reactions,0,0,0,0,0,0,0,0,0,11944
1708,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286973274,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286973274,https://api.github.com/repos/rapidsai/cudf/issues/11944,1286973274,IC_kwDOBWUGps5Mtada,2022-10-21T13:37:11Z,2022-10-21T13:37:11Z,CONTRIBUTOR,"> This also works: `df.loc[:,'d'] = cudf.Series(['1', '2', '3'])`
> 
> But the last statement fails when re-executed:

This works the first time because it's adding a new column. The second time you execute things, the column already exists so you go down the bad code path.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1286973274/reactions,0,0,0,0,0,0,0,0,0,11944
1709,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300625907,https://github.com/rapidsai/cudf/issues/11944#issuecomment-1300625907,https://api.github.com/repos/rapidsai/cudf/issues/11944,1300625907,IC_kwDOBWUGps5Nhfnz,2022-11-02T15:07:16Z,2022-11-02T15:07:16Z,NONE,"I've found a workaround for my problem. Instead of conditional assignment of string list I create a dataframe using the original index, populate the df and then merge with the original df joining by index:

```
df_neg= cudf.DataFrame({'col1': cudf.Series(dtype='object')})

for loop:
   mask = df[<condition>].index
   df_tmp = cudf.DataFrame([<some string list>], index=mask, columns=['col1'])
   df_neg= cudf.concat([df_neg, df_tmp], axis=0)

# After the loop:
df = df.merge(df_neg, how='left', right_index=True, left_index=True)
```",,Ullar-Kask,13900171,MDQ6VXNlcjEzOTAwMTcx,https://avatars.githubusercontent.com/u/13900171?v=4,,https://api.github.com/users/Ullar-Kask,https://github.com/Ullar-Kask,https://api.github.com/users/Ullar-Kask/followers,https://api.github.com/users/Ullar-Kask/following{/other_user},https://api.github.com/users/Ullar-Kask/gists{/gist_id},https://api.github.com/users/Ullar-Kask/starred{/owner}{/repo},https://api.github.com/users/Ullar-Kask/subscriptions,https://api.github.com/users/Ullar-Kask/orgs,https://api.github.com/users/Ullar-Kask/repos,https://api.github.com/users/Ullar-Kask/events{/privacy},https://api.github.com/users/Ullar-Kask/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300625907/reactions,0,0,0,0,0,0,0,0,0,11944
1710,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285538366,https://github.com/rapidsai/cudf/issues/11948#issuecomment-1285538366,https://api.github.com/repos/rapidsai/cudf/issues/11948,1285538366,IC_kwDOBWUGps5Mn8I-,2022-10-20T13:26:46Z,2022-10-20T13:26:46Z,CONTRIBUTOR,"I was able to make the test case a lot simpler and still see the same error.

```
1
2
acb""""
4
5
```

shows the same problems, only the first three lines come out, and the third entry is only `abc""`, it is missing the final `""`",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285538366/reactions,0,0,0,0,0,0,0,0,0,11948
1711,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285572051,https://github.com/rapidsai/cudf/issues/11948#issuecomment-1285572051,https://api.github.com/repos/rapidsai/cudf/issues/11948,1285572051,IC_kwDOBWUGps5MoEXT,2022-10-20T13:45:47Z,2022-10-20T13:45:47Z,CONTRIBUTOR,"Wow, even if I escape the quotes I still get the problem with the lines, but it ""fixes"" the issue with the quote at the end being removed, but it does not remove the escapes from the quotes.

```
1
2
""abc\""\""""
4
5
```

But the output is 

```
+-------+
|    _c0|
+-------+
|      1|
|      2|
|abc\""\""|
+-------+
```

when it should be 

```
+-----+
|  _c0|
+-----+
|    1|
|    2|
|abc""""|
|    4|
|    5|
+-----+
```

Oddly if I remove the escapes and just keep the entire thing quoted.

```
1
2
""abc""""""
4
5
```

It fixes the problem with dropping lines, but it does not fix the single entry.
```
+----+
| _c0|
+----+
|   1|
|   2|
|abc""|
|   4|
|   5|
+----+
```
vs from spark

```
+-----+
|  _c0|
+-----+
|    1|
|    2|
|abc""""|
|    4|
|    5|
+-----+
```

This one I am less sure that we have to match exactly what Spark is doing, because pandas matches CUDF in this case. Also pandas does different things for escaped quotes too, so just take these as info for now.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1285572051/reactions,1,0,0,0,0,0,0,0,1,11948
1712,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287303674,https://github.com/rapidsai/cudf/issues/11948#issuecomment-1287303674,https://api.github.com/repos/rapidsai/cudf/issues/11948,1287303674,IC_kwDOBWUGps5MurH6,2022-10-21T18:27:39Z,2022-10-21T18:27:39Z,CONTRIBUTOR,"Thanks @revans2 for investigating this. I'm posting a python reproducer:
```
>>> s = '1\n2\nabc""""\n4\n5'
>>> pd.read_csv(StringIO(s), header=None)
       0
0      1
1      2
2  abc""""
3      4
4      5
>>> cudf.read_csv(StringIO(s), header=None)
      0
0     1
1     2
2  abc""
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287303674/reactions,0,0,0,0,0,0,0,0,0,11948
1713,https://api.github.com/repos/rapidsai/cudf/issues/comments/1299030463,https://github.com/rapidsai/cudf/issues/11948#issuecomment-1299030463,https://api.github.com/repos/rapidsai/cudf/issues/11948,1299030463,IC_kwDOBWUGps5NbaG_,2022-11-01T19:45:09Z,2022-11-01T20:12:31Z,CONTRIBUTOR,"I can't repro the issue in the comment. Trying using Python:
`s = '1\n2\n""abc\""\""""\n4\n'`
But I'm getting the same output as with Pandas (and it looks correct):
```
      1
0     2
1  abc""
2     4
```",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1299030463/reactions,0,0,0,0,0,0,0,0,0,11948
1714,https://api.github.com/repos/rapidsai/cudf/issues/comments/1681340357,https://github.com/rapidsai/cudf/issues/11948#issuecomment-1681340357,https://api.github.com/repos/rapidsai/cudf/issues/11948,1681340357,IC_kwDOBWUGps5kNzfF,2023-08-16T22:18:17Z,2023-08-16T22:18:17Z,CONTRIBUTOR,"Did some scoping and it seems like this requires large changes in the way the reader finds row offsets. Current state machine has four states (represented by two bits) and handling this would require an additional state, and thus more bits. My main concern is with the work involved to change the way state machine packs and handles the states.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1681340357/reactions,0,0,0,0,0,0,0,0,0,11948
1715,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287189897,https://github.com/rapidsai/cudf/issues/11965#issuecomment-1287189897,https://api.github.com/repos/rapidsai/cudf/issues/11965,1287189897,IC_kwDOBWUGps5MuPWJ,2022-10-21T16:31:26Z,2022-10-21T16:31:38Z,CONTRIBUTOR,"Thanks @mattf for raising this suggestion. It seems like `filter` is something we could implement in the python layer based on our existing libcudf string APIs. Would you please share more about your application? Are you most interested in the `items`, `like` or `regex` parameter?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287189897/reactions,0,0,0,0,0,0,0,0,0,11965
1716,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287770743,https://github.com/rapidsai/cudf/issues/11965#issuecomment-1287770743,https://api.github.com/repos/rapidsai/cudf/issues/11965,1287770743,IC_kwDOBWUGps5MwdJ3,2022-10-22T11:52:08Z,2022-10-22T11:52:08Z,NONE,"@GregoryKimball i expect cudf's filter to behave like pandas', order of importance is `like` -> `regex` -> `items`",,mattf,112653,MDQ6VXNlcjExMjY1Mw==,https://avatars.githubusercontent.com/u/112653?v=4,,https://api.github.com/users/mattf,https://github.com/mattf,https://api.github.com/users/mattf/followers,https://api.github.com/users/mattf/following{/other_user},https://api.github.com/users/mattf/gists{/gist_id},https://api.github.com/users/mattf/starred{/owner}{/repo},https://api.github.com/users/mattf/subscriptions,https://api.github.com/users/mattf/orgs,https://api.github.com/users/mattf/repos,https://api.github.com/users/mattf/events{/privacy},https://api.github.com/users/mattf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1287770743/reactions,0,0,0,0,0,0,0,0,0,11965
1717,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289454625,https://github.com/rapidsai/cudf/issues/11978#issuecomment-1289454625,https://api.github.com/repos/rapidsai/cudf/issues/11978,1289454625,IC_kwDOBWUGps5M24Qh,2022-10-24T18:51:02Z,2022-10-24T18:51:02Z,CONTRIBUTOR,"I should clarify. It may be acceptable to write tests of detail APIs. Some detail APIs are important enough and used by multiple public APIs, so they may benefit from dedicated testing. However, I suspect that in many cases we are using detail APIs to construct tests for public APIs. One specific instance that I know occurs is the use of vector factories in the detail namespace. Those uses are suspect and should be analyzed. The JNI should certainly not need to rely on detail APIs.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289454625/reactions,0,0,0,0,0,0,0,0,0,11978
1718,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289941344,https://github.com/rapidsai/cudf/issues/11978#issuecomment-1289941344,https://api.github.com/repos/rapidsai/cudf/issues/11978,1289941344,IC_kwDOBWUGps5M4vFg,2022-10-25T03:53:38Z,2022-10-25T03:53:38Z,CONTRIBUTOR,"Note that some/most of the detail APIs used in Java are due to not having their public version to call. In order to fulfill the guideline, we also need to implement the public interface for them.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1289941344/reactions,0,0,0,0,0,0,0,0,0,11978
1719,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291144794,https://github.com/rapidsai/cudf/issues/11978#issuecomment-1291144794,https://api.github.com/repos/rapidsai/cudf/issues/11978,1291144794,IC_kwDOBWUGps5M9U5a,2022-10-25T21:07:13Z,2022-10-25T21:07:13Z,CONTRIBUTOR,"Yup I agree, I think there will be cases where we need new public APIs. That indicates a hole in libcudf's API though, not a reason to use the detail APIs externally.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291144794/reactions,0,0,0,0,0,0,0,0,0,11978
1720,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292132940,https://github.com/rapidsai/cudf/issues/11978#issuecomment-1292132940,https://api.github.com/repos/rapidsai/cudf/issues/11978,1292132940,IC_kwDOBWUGps5NBGJM,2022-10-26T14:23:57Z,2022-10-26T14:23:57Z,MEMBER,"Related to the comment about needing public APIs, note there is a growing amount of Spark-specific JNI code leveraging libcudf at https://github.com/NVIDIA/spark-rapids-jni/tree/branch-22.12/src/main/cpp.  There's a number of detail references in that code, including:
```
cudf::detail::bitmask_and
cudf::detail::gather
cudf::detail::make_counting_transform_iterator
cudf::detail::negative_index_policy
cudf::detail::sequence
cudf::detail::single_lane_block_sum_reduce
cudf::detail::size_in_bits
cudf::detail::valid_if
cudf::detail::warp_size
cudf::strings::detail::make_offsets_child_column
cudf::test::detail::column_wrapper
cudf::test::detail::make_null_mask
numeric::detail::abs
```

I haven't looked at these in detail (no pun intended).  Some of these may be using the detail interface solely to specify a specific stream to use, and that will be addressed when libcudf exposes streams in the public APIs.  Just wanted to point out another source base that can indicate what might need to be promoted to a public API.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292132940/reactions,0,0,0,0,0,0,0,0,0,11978
1721,https://api.github.com/repos/rapidsai/cudf/issues/comments/1294067238,https://github.com/rapidsai/cudf/issues/11978#issuecomment-1294067238,https://api.github.com/repos/rapidsai/cudf/issues/11978,1294067238,IC_kwDOBWUGps5NIeYm,2022-10-27T21:13:01Z,2022-10-27T21:13:01Z,CONTRIBUTOR,"@jlowe thanks! That definitely looks like a mixed bag: `bitmask_and` is something that we should expose publicly (I know that Python could use it too), `detail::gather` is most likely just being used to pass a stream, `make_counting_transform_iterator` and `warp_size` are conveniences that the JNI probably shouldn't be relying on, etc. Once stream APIs exist we can probably trim out some of these and reassess the rest.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1294067238/reactions,0,0,0,0,0,0,0,0,0,11978
1722,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290583243,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1290583243,https://api.github.com/repos/rapidsai/cudf/issues/11983,1290583243,IC_kwDOBWUGps5M7LzL,2022-10-25T13:42:00Z,2022-10-25T13:42:00Z,CONTRIBUTOR,"> Seperating the real and imaginary part is what I am doing now but this is a huge dataset and it is taking a lot of time.

As we don't support a `complex` type in cuDF, unfortunately that's the best approach I can think of as well. I understand that things are further complicated because what you want is a `List[complex]` data type.

Can you share an example of the kind of operations you wish to perform? Perhaps we can suggest adequate workarounds.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290583243/reactions,0,0,0,0,0,0,0,0,0,11983
1723,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290590057,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1290590057,https://api.github.com/repos/rapidsai/cudf/issues/11983,1290590057,IC_kwDOBWUGps5M7Ndp,2022-10-25T13:46:57Z,2022-10-25T13:46:57Z,CONTRIBUTOR,"I imagine this is yet another use-case for something like [Awkward Arrays on the GPU](https://github.com/scikit-hep/awkward/issues/1658). FYI @gmarkall, and also I hope you don't mind the cc @jpivarski :) ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290590057/reactions,0,0,0,0,0,0,0,0,0,11983
1724,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290651041,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1290651041,https://api.github.com/repos/rapidsai/cudf/issues/11983,1290651041,IC_kwDOBWUGps5M7cWh,2022-10-25T14:30:49Z,2022-10-25T14:30:49Z,NONE,"I have this dataformat where the ""DATA"" column values are list of imaginary numbers. I was trying to store them in similar way in cudf dataframe. I think I found another workaround, which is to convert the complex128 to strings so that cudf reads them as a list of strings and not complex numbers and when I read them back for some operation I convert them back to complex numbers.

![Screen Shot 2022-10-25 at 4 21 28 PM](https://user-images.githubusercontent.com/23120837/197801290-429e958c-3825-4c7c-993e-db891b0ac420.png)
",,arpan-das-astrophysics,23120837,MDQ6VXNlcjIzMTIwODM3,https://avatars.githubusercontent.com/u/23120837?v=4,,https://api.github.com/users/arpan-das-astrophysics,https://github.com/arpan-das-astrophysics,https://api.github.com/users/arpan-das-astrophysics/followers,https://api.github.com/users/arpan-das-astrophysics/following{/other_user},https://api.github.com/users/arpan-das-astrophysics/gists{/gist_id},https://api.github.com/users/arpan-das-astrophysics/starred{/owner}{/repo},https://api.github.com/users/arpan-das-astrophysics/subscriptions,https://api.github.com/users/arpan-das-astrophysics/orgs,https://api.github.com/users/arpan-das-astrophysics/repos,https://api.github.com/users/arpan-das-astrophysics/events{/privacy},https://api.github.com/users/arpan-das-astrophysics/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1290651041/reactions,0,0,0,0,0,0,0,0,0,11983
1725,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313106478,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1313106478,https://api.github.com/repos/rapidsai/cudf/issues/11983,1313106478,IC_kwDOBWUGps5ORGou,2022-11-14T05:09:28Z,2022-11-14T05:09:28Z,CONTRIBUTOR,Hello @arpan-das-astrophysics you mentioned storing imaginary numbers as floats in #12104 and as strings here in #11983. Would you please share a bit more about the processing steps you would like to apply to the `List[complex]` data?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313106478/reactions,0,0,0,0,0,0,0,0,0,11983
1726,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313276330,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1313276330,https://api.github.com/repos/rapidsai/cudf/issues/11983,1313276330,IC_kwDOBWUGps5ORwGq,2022-11-14T08:29:31Z,2022-11-14T08:29:31Z,NONE,"> Hello @arpan-das-astrophysics you mentioned storing imaginary numbers as floats in #12104 and as strings here in #11983. Would you please share a bit more about the processing steps you would like to apply to the `List[complex]` data?

Hi Gregory, thank you for looking into this. Initially I was using List[complex] however that is still memory efficient conversion. The best way I found is to cast the complex array into floats of adjacent (real,imag) which in principle shouldn't take any additional memory. I used `np.view(float32)` to cast the array into adjacent floats and then `tolist()` to store it in the dataframe. However, we are reading this column multiple times for several operations and it is not optimal to cast and recast every time. So it would be great if we can directly store the whole complex array without any conversion. ",,arpan-das-astrophysics,23120837,MDQ6VXNlcjIzMTIwODM3,https://avatars.githubusercontent.com/u/23120837?v=4,,https://api.github.com/users/arpan-das-astrophysics,https://github.com/arpan-das-astrophysics,https://api.github.com/users/arpan-das-astrophysics/followers,https://api.github.com/users/arpan-das-astrophysics/following{/other_user},https://api.github.com/users/arpan-das-astrophysics/gists{/gist_id},https://api.github.com/users/arpan-das-astrophysics/starred{/owner}{/repo},https://api.github.com/users/arpan-das-astrophysics/subscriptions,https://api.github.com/users/arpan-das-astrophysics/orgs,https://api.github.com/users/arpan-das-astrophysics/repos,https://api.github.com/users/arpan-das-astrophysics/events{/privacy},https://api.github.com/users/arpan-das-astrophysics/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313276330/reactions,0,0,0,0,0,0,0,0,0,11983
1727,https://api.github.com/repos/rapidsai/cudf/issues/comments/1334060747,https://github.com/rapidsai/cudf/issues/11983#issuecomment-1334060747,https://api.github.com/repos/rapidsai/cudf/issues/11983,1334060747,IC_kwDOBWUGps5PhCbL,2022-12-01T16:51:50Z,2022-12-01T16:51:50Z,NONE,"Hi @GregoryKimball any update on this? 

As an example, I have to run a big for loop to extract columns from a data frame where some columns are multidimensional array and some are even with complex numbers. As you can see extracting those columns making the for loop significantly and this is blocking the whole purpose of using cudF dataframe: 

![Screen Shot 2022-12-01 at 5 47 37 PM](https://user-images.githubusercontent.com/23120837/205111971-04e235a4-da6e-4baa-a264-1cfbc359105f.png)
![Screen Shot 2022-12-01 at 5 48 43 PM](https://user-images.githubusercontent.com/23120837/205112027-ee12aee0-1901-4f3f-98a0-60726705bf93.png)
",,arpan-das-astrophysics,23120837,MDQ6VXNlcjIzMTIwODM3,https://avatars.githubusercontent.com/u/23120837?v=4,,https://api.github.com/users/arpan-das-astrophysics,https://github.com/arpan-das-astrophysics,https://api.github.com/users/arpan-das-astrophysics/followers,https://api.github.com/users/arpan-das-astrophysics/following{/other_user},https://api.github.com/users/arpan-das-astrophysics/gists{/gist_id},https://api.github.com/users/arpan-das-astrophysics/starred{/owner}{/repo},https://api.github.com/users/arpan-das-astrophysics/subscriptions,https://api.github.com/users/arpan-das-astrophysics/orgs,https://api.github.com/users/arpan-das-astrophysics/repos,https://api.github.com/users/arpan-das-astrophysics/events{/privacy},https://api.github.com/users/arpan-das-astrophysics/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1334060747/reactions,0,0,0,0,0,0,0,0,0,11983
1728,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291036359,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1291036359,https://api.github.com/repos/rapidsai/cudf/issues/11990,1291036359,IC_kwDOBWUGps5M86bH,2022-10-25T19:28:41Z,2022-10-25T19:28:41Z,CONTRIBUTOR,"Regardless of what solution (if any) we choose longer term:

> Change the way _mimic_inplace(self, other, inplace=True) works:

is an acceptable solution that we should be able to implement with very little code change, and should fix our behaviour for many of the buggy cases described.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291036359/reactions,0,0,0,0,0,0,0,0,0,11990
1729,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291129554,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1291129554,https://api.github.com/repos/rapidsai/cudf/issues/11990,1291129554,IC_kwDOBWUGps5M9RLS,2022-10-25T20:52:36Z,2022-10-25T20:52:36Z,CONTRIBUTOR,"Well, I guess I lied. Copying into the buffers works only for fixed width types, not variable width types (like strings)",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1291129554/reactions,0,0,0,0,0,0,0,0,0,11990
1730,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292178457,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1292178457,https://api.github.com/repos/rapidsai/cudf/issues/11990,1292178457,IC_kwDOBWUGps5NBRQZ,2022-10-26T14:54:54Z,2022-10-26T14:54:54Z,CONTRIBUTOR,"Can we leverage the current work introducing copy-on-write semantics (cc @galipremsagar) to square this circle in a nice way?

If we want views to behave like copies what does that mean?

```
sr = cudf.Series(...)

sview = sr.iloc[:] # (or sr.copy() or sr.loc[:])

# this makes a copy at the libcudf layer right now, 
# which we try and fix up to make sview == sr 
# this works in some cases but not others
sr.iloc[...] = ... 

# What if we wanted sview != sr (copy-on-write)
# Then we would just have to detach the view from sr
# when making the update (which we do in a bunch of cases already)
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292178457/reactions,0,0,0,0,0,0,0,0,0,11990
1731,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292181233,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1292181233,https://api.github.com/repos/rapidsai/cudf/issues/11990,1292181233,IC_kwDOBWUGps5NBR7x,2022-10-26T14:56:56Z,2022-10-26T14:58:05Z,CONTRIBUTOR,"I think we can make the view mechanism work in cudf with weak references, let me think a bit about this and get back.",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292181233/reactions,0,0,0,0,0,0,0,0,0,11990
1732,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292245016,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1292245016,https://api.github.com/repos/rapidsai/cudf/issues/11990,1292245016,IC_kwDOBWUGps5NBhgY,2022-10-26T15:43:22Z,2022-11-01T18:42:53Z,CONTRIBUTOR,"> I think we can make the view mechanism work in cudf with weak references, let me think a bit about this and get back.

Note that I _think_ we are ""accidentally"" doing this for many cases already ~(so it's possible no weak references are required)~

Edit: we need reference tracking for the cases where a lazy copy is modified using an operation that is actually in-place at the libcudf level.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1292245016/reactions,0,0,0,0,0,0,0,0,0,11990
1733,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298953470,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1298953470,https://api.github.com/repos/rapidsai/cudf/issues/11990,1298953470,IC_kwDOBWUGps5NbHT-,2022-11-01T18:41:12Z,2022-11-01T18:41:12Z,CONTRIBUTOR,"To summarise a discussion with @galipremsagar, @vyasr, and @mroeschke.

Although there are at present inconsistencies in CUDF behaviour, they likely do not bite in too many cases (since people on the whole don't work with views).

The copy-on-write work in #11718 will (in an opt-in manner) remove the inconsistencies by removing the concept of a view (sharing data) and making everything a copy (albeit consed lazily).

In the fixed-width column case there might be a desire to expand the number of modifications in libcudf that actually operate in place (rather than being faked post-hoc via `_mimic_inplace`), but this becomes a much lower priority once copy-on-write becomes available (and then default).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298953470/reactions,0,0,0,0,0,0,0,0,0,11990
1734,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329522164,https://github.com/rapidsai/cudf/issues/11990#issuecomment-1329522164,https://api.github.com/repos/rapidsai/cudf/issues/11990,1329522164,IC_kwDOBWUGps5PPuX0,2022-11-28T18:03:21Z,2022-11-28T18:03:21Z,CONTRIBUTOR,"Since this can bite in various circumstances here are some proposals:

### Keep track of views and warn on read-after-write/write-after-write

When we create a view `child` keep a weakref to it on the `parent` `Series`/`DataFrame` (and vice versa). When we do a write into `parent` (`child`) if there are any weakrefs that are live, walk through them and mark the `child` (`parent`) as invalid: any subsequent read or write on this object would raise an error.

I suspect this is very similar to how the putative copy-on-write implementation keeps track of things and forces copies at the appropriate time. If so, we could probably piggy-back this warning/error system on that implementation (for the case when copy-on-write is _off_).

### Restructure cuDF internals so that setitem/getitem are one level of indirection higher

The problems with views arise because views effectively take references to columns inside a `DataFrame` or `Series` which a subsequently write-after-read can't know about. If a view were of a Series and not a Column, then I _think_ the problems in this issue would not exist.

I can't scope how much work this would be, but I suspect a lot.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1329522164/reactions,0,0,0,0,0,0,0,0,0,11990
1735,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298750194,https://github.com/rapidsai/cudf/issues/12023#issuecomment-1298750194,https://api.github.com/repos/rapidsai/cudf/issues/12023,1298750194,IC_kwDOBWUGps5NaVry,2022-11-01T15:55:42Z,2022-11-01T15:55:42Z,CONTRIBUTOR,"Just for completeness: libcudf does support cross joins, so we would just need to plumb it through to Python:

https://github.com/rapidsai/cudf/blob/7af461cd0a4b616932e2766050a87d4cc82cd963/cpp/include/cudf/join.hpp#L254
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1298750194/reactions,1,1,0,0,0,0,0,0,0,12023
1736,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295465636,https://github.com/rapidsai/cudf/issues/12026#issuecomment-1295465636,https://api.github.com/repos/rapidsai/cudf/issues/12026,1295465636,IC_kwDOBWUGps5NNzyk,2022-10-28T21:04:49Z,2022-10-28T21:04:49Z,CONTRIBUTOR,cc: @vuule ,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1295465636/reactions,0,0,0,0,0,0,0,0,0,12026
1737,https://api.github.com/repos/rapidsai/cudf/issues/comments/1297322199,https://github.com/rapidsai/cudf/issues/12031#issuecomment-1297322199,https://api.github.com/repos/rapidsai/cudf/issues/12031,1297322199,IC_kwDOBWUGps5NU5DX,2022-10-31T16:07:13Z,2022-10-31T16:07:13Z,CONTRIBUTOR,CC @sameerz @revans2.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1297322199/reactions,0,0,0,0,0,0,0,0,0,12031
1738,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949464391,https://github.com/rapidsai/cudf/issues/12031#issuecomment-1949464391,https://api.github.com/repos/rapidsai/cudf/issues/12031,1949464391,IC_kwDOBWUGps50MndH,2024-02-16T23:09:37Z,2024-02-16T23:09:37Z,CONTRIBUTOR,@revans2 should we remove the variable now?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949464391/reactions,0,0,0,0,0,0,0,0,0,12031
1739,https://api.github.com/repos/rapidsai/cudf/issues/comments/1954970044,https://github.com/rapidsai/cudf/issues/12031#issuecomment-1954970044,https://api.github.com/repos/rapidsai/cudf/issues/12031,1954970044,IC_kwDOBWUGps50hnm8,2024-02-20T20:06:25Z,2024-02-20T20:06:25Z,CONTRIBUTOR,We can remove it whenever. It is just a question of finding time to do the code cleanup.,,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1954970044/reactions,0,0,0,0,0,0,0,0,0,12031
1740,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300961342,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1300961342,https://api.github.com/repos/rapidsai/cudf/issues/12039,1300961342,IC_kwDOBWUGps5Nixg-,2022-11-02T17:20:07Z,2022-11-02T17:20:07Z,CONTRIBUTOR,What a fantastic analysis. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300961342/reactions,2,0,0,0,2,0,0,0,0,12039
1741,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302777325,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1302777325,https://api.github.com/repos/rapidsai/cudf/issues/12039,1302777325,IC_kwDOBWUGps5Nps3t,2022-11-03T23:11:36Z,2022-11-03T23:11:36Z,CONTRIBUTOR,"Just a comment about the `Lossy` classification:

One of the factors of `Lossy=""Yes""` is if: 

```
expect = (np.asarray if pandas else cupy.asarray)(
    initial_values[:new_location], dtype=dtype
)
original_lost_info = (s.iloc[:new_location].astype(dtype) != expect).any()
```

And in this example from your table had `Lossy=""Yes""`:

```
In [26]: ser = pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)

In [27]: ser
Out[27]:
0    9223372036854775798
1    9223372036854775708
2                      3
dtype: int64

In [29]: ser.iloc[2] = 10.5

In [32]: ser
Out[32]:
0    9.223372e+18
1    9.223372e+18
2    1.050000e+01
dtype: float64
```

I think this is ""lossy"" because of an `int64` -> `float64` -> `int64` conversion, not necessarily because there's a lossiness in value

```
In [47]: ser.iloc[0] == 2 ** 63 - 10
Out[47]: True

In [48]: ser.iloc[1] == 2 ** 63 - 100
Out[48]: True

In [49]: ser.iloc[2] == 10.5
Out[49]: True

In [50]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)
Out[50]:
0    9223372036854775798
1    9223372036854775708
2                      3
dtype: int64

In [51]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)
Out[51]:
0   -9223372036854775808
1   -9223372036854775808
2                      3
dtype: int64

In [52]: np.array([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)
Out[52]: array([-9223372036854775808, -9223372036854775808,                    3])
```
",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302777325/reactions,0,0,0,0,0,0,0,0,0,12039
1742,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302793797,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1302793797,https://api.github.com/repos/rapidsai/cudf/issues/12039,1302793797,IC_kwDOBWUGps5Npw5F,2022-11-03T23:39:15Z,2022-11-03T23:39:15Z,CONTRIBUTOR,"> What a fantastic analysis.

This is easily one of the most detailed issues I have ever seen!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302793797/reactions,0,0,0,0,0,0,0,0,0,12039
1743,https://api.github.com/repos/rapidsai/cudf/issues/comments/1303216105,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1303216105,https://api.github.com/repos/rapidsai/cudf/issues/12039,1303216105,IC_kwDOBWUGps5NrX_p,2022-11-04T10:15:37Z,2022-11-04T10:15:37Z,CONTRIBUTOR,"> Just a comment about the `Lossy` classification:
> 
> One of the factors of `Lossy=""Yes""` is if:
> 
> ```
> expect = (np.asarray if pandas else cupy.asarray)(
>     initial_values[:new_location], dtype=dtype
> )
> original_lost_info = (s.iloc[:new_location].astype(dtype) != expect).any()
> ```
> 
> And in this example from your table had `Lossy=""Yes""`:
> 
> ```
> In [26]: ser = pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)
> 
> In [27]: ser
> Out[27]:
> 0    9223372036854775798
> 1    9223372036854775708
> 2                      3
> dtype: int64
> 
> In [29]: ser.iloc[2] = 10.5
> 
> In [32]: ser
> Out[32]:
> 0    9.223372e+18
> 1    9.223372e+18
> 2    1.050000e+01
> dtype: float64
> ```
> 
> I think this is ""lossy"" because of an `int64` -> `float64` -> `int64` conversion, not necessarily because there's a lossiness in value

Depends what you mean by lossy. float64 only has enough precision to exactly represent int53 (because the mantissa has 53 bits). Hence, mapping between int64 and float64 is neither surjective (you can't reach nan and inf) nor injective (multiple int64s can map to the same float64), so you can't roundtrip successfully.

```python
In [36]: np.int64(2**63 - 10) == np.int64(2**63 - 100)
Out[36]: False

In [37]: np.int64(2**63 - 10).astype(np.float64) == np.int64(2**63 - 100).astype(np.float64)
Out[37]: True
```
> 
> ```
> In [47]: ser.iloc[0] == 2 ** 63 - 10
> Out[47]: True
> 
> In [48]: ser.iloc[1] == 2 ** 63 - 100
> Out[48]: True
> 
> In [49]: ser.iloc[2] == 10.5
> Out[49]: True

These are all true because the right operand of equality is promoted to `float64` before the comparison is performed.

> In [50]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64)
> Out[50]:
> 0    9223372036854775798
> 1    9223372036854775708
> 2                      3
> dtype: int64
> 
> In [51]: pd.Series([2 ** 63 - 10, 2 ** 63 - 100, 3], dtype=np.int64).astype(np.float64).astype(np.int64)
> Out[51]:
> 0   -9223372036854775808
> 1   -9223372036854775808

I characterise this as ""lossy"" because you didn't round-trip successfully. As noted, it isn't really a pandas issue per-se, but rather numpy (and thence promotion via C rules).

I note that numpy doesn't _quite_ implement [C/C++ promotion rules](https://en.cppreference.com/w/c/language/conversion) for integer and floating point types. Since it widens floating point types in addition between ints and floats.

[C++](https://gcc.godbolt.org/z/v9sPKbPE4):
```
typeof(1 + 1.0f) => float32
typeof(1L + 1.0f) => float32
typeof(1 + 1.0d) => float64
typeof(1L + 1.0d) => float64
```
These promotions are always in-range, since `max(float32) > max(int64)` but lossy since the mapping from integers to floating point types of the same width is not bijective.

numpy:
```
(np.int32(1) + np.float32(1)).dtype => float64
(np.int64(1) + np.float32(1)).dtype => float64
(np.int32(1) + np.float64(1)).dtype => float64
(np.int64(1) + np.float64(1)).dtype => float64
```
These promotions are bijective (if we ignore nan and inf) if the integer type is narrower than the floating point type. (So the int32 promotion can be undone losslessly).

These kind of automatic promotions are basically a fight I lost before I was born in old programming languages, though some more modern ones force you to always explicitly cast so that you're aware that you might be doing A Bad Thing.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1303216105/reactions,0,0,0,0,0,0,0,0,0,12039
1744,https://api.github.com/repos/rapidsai/cudf/issues/comments/1303938405,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1303938405,https://api.github.com/repos/rapidsai/cudf/issues/12039,1303938405,IC_kwDOBWUGps5NuIVl,2022-11-04T17:43:45Z,2022-11-04T17:43:45Z,CONTRIBUTOR,"Updated the code to generate tables for a bunch of different scenarios. You can now run and it produces a separate file for each scenario, which you can diff against each other to see the points of difference.

Mostly things work (with #11904), except #12072 means that equality is busted.

And, slice-based setitem is broken for length-one ranges if setting with an array rather than a scalar (that's #12073).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1303938405/reactions,0,0,0,0,0,0,0,0,0,12039
1745,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304063181,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304063181,https://api.github.com/repos/rapidsai/cudf/issues/12039,1304063181,IC_kwDOBWUGps5NumzN,2022-11-04T19:27:40Z,2022-11-04T20:03:13Z,CONTRIBUTOR,"Sorry for the long post, I hope it doesn't derail or is off topic.  I will mainly try to explain the state of NumPy and what [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html) does.  Happy to re-read again without that in mind!
(I will always make time to talk about these things, because just talking about it, even tangentially, helps me clear up things and move forward.)

N.B. please avoid `np.find_common_type` it needs to be deprecated.  `np.result_type` (for array inputs or if you need the value-based or future NEP 50 behavior) and `np.promote_types` are the weapons of choice.

First, there are three things that come together to understand the NumPy behavior:
1. Integers are converted to `long -> long long -> unsigned long long -> object` by NumPy based on value.  This is what happens if you do `np.asarray(integer)` and in many other contexts.
2. Storing values may or may not go via `np.asarray()`, if it does not, NumPy will be more strict sometimes.
   In fact, I *just* deprecated storing out-of-bounds integers like to disallow `np.asarray([-1], dtype=np.uint8)`.  This will be part of the next NumPy release, unless someone complains (which could happen).
3. *Promotion/Common DType:* i.e. what happens if you mix two dtypes
   * NumPy promotion rules are wonky, they try to be ""safe"", but make an exception by promoting `in64 + float64 -> float64`  (and worse `int64 + uint64 -> float64`).  The reason for this is that they fall out of the ""safe casting"" concept.  I disagree with this nowadays, while related, I feel it is better to see promotion/common-dtype and safe/non-lossy casting as distinct.  For numerical dtypes, I do agree that round-tripping correctly implies that promotion is acceptable.  (NumPy is implemented that way now after NEP 42.)
     The C promotion rules, etc. have the advantage of being e.g. strictly associative (EDIT) while ours are not: `(int16 + uint16) + float32 == int32 + float32 == float64 != float32 == (float32 + int16) + uint16`  (I/NumPy has a heuristic so that `np.result_type` finds `float32` if it is a single operation, it works always, but you can construct failures if you add new dtypes in the mix.)
   * *Current* promotion inspects values (of ""scalars"" including 0-D arrays, but not when all are scalars).  This allows an integer to match any dtype that will fit its value, and floats also to be ""down-promoted"" so long they are not approximately out of range.
    *NEP 50 is the proposal to remove this*.  Instead, NEP 50 proposes to insert the Python integer, float, complex as undefined/lowest precision.  For integers this means that `np.uint8(1) + 300` will error, because we try to do `uint8 + uint8 -> uint8` and that doesn't work.
   NEP 50 tries to describe this, the [JAX diagram](https://jax.readthedocs.io/en/latest/type_promotion.html) also helps.  This makes the Python scalars ""weak"".

---

There is discussion about *lossy* conversion of Python scalars.  Which touches something that I am currently struggling with to push NEP 50.  So bringing it up, because if you clearly want the notion of ""lossy"", it might inform how I do this for NEP 50 (it is not central to NEP 50, and doesn't have to be; but I need to settle on something).

For NumPy dtypes we have that defined through the ""casting safety"" (which can be ""no"", ""equiv"", ""safe"", ""same kind"", ""unsafe"".  For *values* we don't really define it, and I don't think the categories quite work.
`int64 -> int8` is same-kind, but `10000 -> int8` seems ""unsafe"", or is it ""safe"" but fails when you try it?  Whether or not I should try to introduce the notion ""safety"" to scalar assignments in NumPy is one of the things I am struggling with, because the notion of cast-safety doesn't seem to cleanly apply (but NumPy exposes it a lot).",,seberg,61977,MDQ6VXNlcjYxOTc3,https://avatars.githubusercontent.com/u/61977?v=4,,https://api.github.com/users/seberg,https://github.com/seberg,https://api.github.com/users/seberg/followers,https://api.github.com/users/seberg/following{/other_user},https://api.github.com/users/seberg/gists{/gist_id},https://api.github.com/users/seberg/starred{/owner}{/repo},https://api.github.com/users/seberg/subscriptions,https://api.github.com/users/seberg/orgs,https://api.github.com/users/seberg/repos,https://api.github.com/users/seberg/events{/privacy},https://api.github.com/users/seberg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304063181/reactions,0,0,0,0,0,0,0,0,0,12039
1746,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304068455,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304068455,https://api.github.com/repos/rapidsai/cudf/issues/12039,1304068455,IC_kwDOBWUGps5NuoFn,2022-11-04T19:32:39Z,2022-11-04T19:32:39Z,CONTRIBUTOR,"NEP 50 itself does not touch the annoying fact that `np.array([2**63, 2**61])` returns a float array.  But, since NEP 50 is likely a NumPy 2.0, I think it does make sense to stop doing it and only ever go to the default integer and otherwise raise an error.",,seberg,61977,MDQ6VXNlcjYxOTc3,https://avatars.githubusercontent.com/u/61977?v=4,,https://api.github.com/users/seberg,https://github.com/seberg,https://api.github.com/users/seberg/followers,https://api.github.com/users/seberg/following{/other_user},https://api.github.com/users/seberg/gists{/gist_id},https://api.github.com/users/seberg/starred{/owner}{/repo},https://api.github.com/users/seberg/subscriptions,https://api.github.com/users/seberg/orgs,https://api.github.com/users/seberg/repos,https://api.github.com/users/seberg/events{/privacy},https://api.github.com/users/seberg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304068455/reactions,0,0,0,0,0,0,0,0,0,12039
1747,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304284132,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1304284132,https://api.github.com/repos/rapidsai/cudf/issues/12039,1304284132,IC_kwDOBWUGps5Nvcvk,2022-11-04T21:43:29Z,2022-11-04T21:43:29Z,CONTRIBUTOR,"I think generally from the pandas point of view (with respect to `__setitem__`), I would say the general philosophy is ""the resulting dtype should be able to store the existing values & new value(s) without losing numeric precision"".

Here are some examples (related to your original table) where we differ from numpy due to the above:


1 . ""Don't truncate so upcast dtype"" example

```
In [6]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)

In [7]: ser.iloc[2] = 10.5

In [8]: ser
Out[8]:
0    9.223372e+18
1    9.223372e+18
2    1.050000e+01
dtype: float64

In [9]: np_arr = np.array([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)

In [10]: np_arr[2] = 10.5

In [11]: np_arr
Out[11]: array([9223372036854775798, 9223372036854775708,                  10])

In [14]: print(np.__version__) ; print(pd.__version__)
1.23.1
2.0.0.dev0+577.g7e9ca6e8af
``` 


2. ""Bend over backwards to accommodate the values"" examples
```
In [5]: ser = pd.Series([1, 2, 3], dtype=np.int64)

In [6]: ser.iloc[2] = 2**80

In [7]: ser
Out[7]:
0                            1
1                            2
2    1208925819614629174706176
dtype: object

In [8]: arr = np.array([1, 2, 3], dtype=np.int64)

In [9]: arr
Out[9]: array([1, 2, 3])

In [10]: arr[2] = 1208925819614629174706176
a---------------------------------------------------------------------------
OverflowError                             Traceback (most recent call last)
Input In [10], in <cell line: 1>()
----> 1 arr[2] = 1208925819614629174706176

OverflowError: Python int too large to convert to C long
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1304284132/reactions,0,0,0,0,0,0,0,0,0,12039
1748,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305470520,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305470520,https://api.github.com/repos/rapidsai/cudf/issues/12039,1305470520,IC_kwDOBWUGps5Nz-Y4,2022-11-07T11:29:04Z,2022-11-07T11:29:04Z,CONTRIBUTOR,"> 2\. ""Bend over backwards to accommodate the values"" examples

Unless we want to implement bignums in libcudf, I think this is not something we can really contemplate.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305470520/reactions,0,0,0,0,0,0,0,0,0,12039
1749,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305473958,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305473958,https://api.github.com/repos/rapidsai/cudf/issues/12039,1305473958,IC_kwDOBWUGps5Nz_Om,2022-11-07T11:32:51Z,2022-11-07T11:32:51Z,CONTRIBUTOR,"> I think generally from the pandas point of view (with respect to `__setitem__`), I would say the general philosophy is ""the resulting dtype should be able to store the existing values & new value(s) without losing numeric precision"".

This is a reasonable philosophy, though it does rather depend on what you mean by ""losing numeric precision"". 

> 1 . ""Don't truncate so upcast dtype"" example
> 
> ```
> In [6]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)
> 
> In [7]: ser.iloc[2] = 10.5
> 
> In [8]: ser
> Out[8]:
> 0    9.223372e+18
> 1    9.223372e+18
> 2    1.050000e+01
> dtype: float64
> ```

This seems like a nice thing to do, except that it changes behaviour of the series:

```
In [22]: ser = pd.Series([2**63 - 10, 2**63 - 100, 3], dtype=np.int64)

In [23]: ser == ser.iloc[0]
Out[23]: 
0     True
1    False
2    False
dtype: bool

In [24]: ser.iloc[2] = 10.5

In [25]: ser == ser.iloc[0]
Out[25]: 
0     True
1     True
2    False
dtype: bool
```

I would argue that this choice _did_ lose numeric precision, and particularly in _existing_ values that weren't touched by the indexing.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305473958/reactions,0,0,0,0,0,0,0,0,0,12039
1750,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305614751,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1305614751,https://api.github.com/repos/rapidsai/cudf/issues/12039,1305614751,IC_kwDOBWUGps5N0hmf,2022-11-07T13:25:40Z,2022-11-07T13:25:40Z,CONTRIBUTOR,"So pandas (and cudf) use common DType to promote a column when necessary.  That leads to two things:
* The special rule for going to float64 does lose precision for int64/uint64.
* Pandas will even allow going to `object` dtype.

The first issue is independent of NEP 50 and I am not sure there is much to do about it.  You could consider disallowing it.  It probably means making a clearer distinction between ""common DType"" (for storing into a single column) and ""promotion"" (for operations).
That is, the promotion in `float_arr + int64_arr -> float_arr` (i.e. adding two arrays) seems fine, but maybe storing the two into one container is not?
I make the distinction in NumPy, but not convenient to apply it broadly.  My gut feeling is that it is probably best to live with the way it is:  Yes, it loses precision, but it is usually OK.

For the second thing, NEP 50 might nudge towards making it an error in `pandas`:  If you apply NEP 50 promotion rules, the column should keep whatever `int` dtype it has, and if the Python integer cannot be assigned it should just error.  Auto-promoting to `object` dtype would then never work (which is also what will happen for `np.int64(1) + 2**500`).",,seberg,61977,MDQ6VXNlcjYxOTc3,https://avatars.githubusercontent.com/u/61977?v=4,,https://api.github.com/users/seberg,https://github.com/seberg,https://api.github.com/users/seberg/followers,https://api.github.com/users/seberg/following{/other_user},https://api.github.com/users/seberg/gists{/gist_id},https://api.github.com/users/seberg/starred{/owner}{/repo},https://api.github.com/users/seberg/subscriptions,https://api.github.com/users/seberg/orgs,https://api.github.com/users/seberg/repos,https://api.github.com/users/seberg/events{/privacy},https://api.github.com/users/seberg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1305614751/reactions,0,0,0,0,0,0,0,0,0,12039
1751,https://api.github.com/repos/rapidsai/cudf/issues/comments/1306037301,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1306037301,https://api.github.com/repos/rapidsai/cudf/issues/12039,1306037301,IC_kwDOBWUGps5N2Iw1,2022-11-07T18:45:54Z,2022-11-07T18:45:54Z,CONTRIBUTOR,"> I would argue that this choice did lose numeric precision, and particularly in existing values that weren't touched by the indexing.

That's fair. Not 100% sure of the origin of promoting to `float64` in pandas for this case, but I would venture to guess the numpy behavior of keeping int64 and truncating the 10.5 to 10 was a more suprising & more significant loss in precision behavior to pandas users.

> For the second thing, NEP 50 might nudge towards making it an error in pandas:

This is also fair. Maybe this is a case of pandas being too accomodating, but we can always nudge users to `astype(object)` in these cases.

 ",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1306037301/reactions,0,0,0,0,0,0,0,0,0,12039
1752,https://api.github.com/repos/rapidsai/cudf/issues/comments/1306911577,https://github.com/rapidsai/cudf/issues/12039#issuecomment-1306911577,https://api.github.com/repos/rapidsai/cudf/issues/12039,1306911577,IC_kwDOBWUGps5N5eNZ,2022-11-08T09:37:20Z,2022-11-08T09:37:20Z,CONTRIBUTOR,"> Not 100% sure of the origin of promoting to `float64` in pandas for this case,

If you're going to do integral to floating type promotion and want to maintain accuracy in the largest number of cases (and don't care too much about memory footprint) the promoting to float64 is a reasonable choice.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1306911577/reactions,0,0,0,0,0,0,0,0,0,12039
1753,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313080812,https://github.com/rapidsai/cudf/issues/12044#issuecomment-1313080812,https://api.github.com/repos/rapidsai/cudf/issues/12044,1313080812,IC_kwDOBWUGps5ORAXs,2022-11-14T04:25:34Z,2022-11-14T04:25:34Z,CONTRIBUTOR,"Thank you @revans2 for documenting this deviation. If this came from your testing of corner-cases in the parquet spec, that is a great outcome. 

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1313080812/reactions,0,0,0,0,0,0,0,0,0,12044
1754,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300927745,https://github.com/rapidsai/cudf/issues/12047#issuecomment-1300927745,https://api.github.com/repos/rapidsai/cudf/issues/12047,1300927745,IC_kwDOBWUGps5NipUB,2022-11-02T17:06:08Z,2022-11-02T17:06:08Z,CONTRIBUTOR,"As a workaround, you could remove `_` from your strings:

```python
In [5]: s = cudf.Series(['1_000', '20_000'])

In [6]: s.to_pandas().astype('int32')
Out[6]: 
0     1000
1    20000
dtype: int32

In [7]: s.str.replace('_', '').astype('int32')
Out[7]: 
0     1000
1    20000
dtype: int32

```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1300927745/reactions,0,0,0,0,0,0,0,0,0,12047
1755,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301234557,https://github.com/rapidsai/cudf/issues/12047#issuecomment-1301234557,https://api.github.com/repos/rapidsai/cudf/issues/12047,1301234557,IC_kwDOBWUGps5Nj0N9,2022-11-02T20:55:17Z,2022-11-02T20:57:04Z,CONTRIBUTOR,@davidwendt would it be possible for the `libstrings.is_integer` API's to handle `_` in strings? or do you think we should sanitize strings before we call `libstrings.is_integer`?,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301234557/reactions,0,0,0,0,0,0,0,0,0,12047
1756,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301325251,https://github.com/rapidsai/cudf/issues/12047#issuecomment-1301325251,https://api.github.com/repos/rapidsai/cudf/issues/12047,1301325251,IC_kwDOBWUGps5NkKXD,2022-11-02T21:37:59Z,2022-11-02T21:37:59Z,CONTRIBUTOR,"This seems to be python-specific. C++ does not support `_` for string-to-integer conversion.
https://godbolt.org/z/ocGfob1EG
libcudf aligns with C++ as much as possible so I think you will have to sanitize the strings beforehand.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301325251/reactions,0,0,0,0,0,0,0,0,0,12047
1757,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301329808,https://github.com/rapidsai/cudf/issues/12047#issuecomment-1301329808,https://api.github.com/repos/rapidsai/cudf/issues/12047,1301329808,IC_kwDOBWUGps5NkLeQ,2022-11-02T21:40:02Z,2022-11-02T21:40:02Z,CONTRIBUTOR,"makes sense, thanks @davidwendt ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1301329808/reactions,0,0,0,0,0,0,0,0,0,12047
1758,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302786742,https://github.com/rapidsai/cudf/issues/12052#issuecomment-1302786742,https://api.github.com/repos/rapidsai/cudf/issues/12052,1302786742,IC_kwDOBWUGps5NpvK2,2022-11-03T23:26:50Z,2022-11-03T23:27:09Z,CONTRIBUTOR,"I suspect that the main reason we haven't bothered with this in the past is that it is a scalar and we tend to support `pd.Timestamp` directly in most places that would allow it so the benefits performance-wise are quite limited. Aside from strict API compatibility concerns, the one other benefit that I could see here is if `cudf.Timestamp` existed more like `cudf.Scalar` as a way to avoid needing constant H2D copies each time.

@brandon-b-miller @shwina what do you think about that (in the context of previous Scalar work)?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1302786742/reactions,0,0,0,0,0,0,0,0,0,12052
1759,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323819306,https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323819306,https://api.github.com/repos/rapidsai/cudf/issues/12052,1323819306,IC_kwDOBWUGps5O5-Eq,2022-11-22T15:04:17Z,2022-11-22T15:04:17Z,CONTRIBUTOR,"A `Timestamp` sounds like a `cudf.Scalar` with `dtype=datetime64[resolution]`, and we can already construct those:

```python
>>> cudf.Scalar(pd.Timestamp('2001-01-01 00:00:01'))
>>> Scalar(2001-01-01T00:00:01.000000, dtype=datetime64[us])
```

So should we just make it so that `cudf.Timestamp` is a `cudf.Scalar` (inheritance relationship)?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323819306/reactions,0,0,0,0,0,0,0,0,0,12052
1760,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323837168,https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323837168,https://api.github.com/repos/rapidsai/cudf/issues/12052,1323837168,IC_kwDOBWUGps5O6Cbw,2022-11-22T15:16:06Z,2022-11-22T15:16:06Z,CONTRIBUTOR,"I see no reason why the scalar machinery couldn't be used to back `cudf.Timestamp` from a technical perspective. 

One question I would have is what would we do with the `cudf.Scalar` constructor when a timestamp is passed? Would we return a `cudf.Timestamp` at that point or would we still allow construction of a `cudf.Scalar` object of `datetime` dtype, that _isn't_ a `cudf.Timestamp`?",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323837168/reactions,0,0,0,0,0,0,0,0,0,12052
1761,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323844771,https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323844771,https://api.github.com/repos/rapidsai/cudf/issues/12052,1323844771,IC_kwDOBWUGps5O6ESj,2022-11-22T15:21:38Z,2022-11-22T15:21:38Z,CONTRIBUTOR,"> Would we return a cudf.Timestamp at that point or would we still allow construction of a cudf.Scalar object of datetime dtype, that isn't a cudf.Timestamp?

Assuming we all like the inheritance relationship, I would strongly be in favor of the latter than the former. Returning a subclass from a superclass ctor _a la_ `cudf.Index` is frustrating to support.

It doesn't feel too icky to do the latter to me. For instance, `pd.Timestamp` inherits from `datetime.datetime`, which is a fully constructible and usable type in and of itself. ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1323844771/reactions,2,2,0,0,0,0,0,0,0,12052
1762,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325470759,https://github.com/rapidsai/cudf/issues/12052#issuecomment-1325470759,https://api.github.com/repos/rapidsai/cudf/issues/12052,1325470759,IC_kwDOBWUGps5PARQn,2022-11-23T18:10:07Z,2022-11-23T18:10:07Z,CONTRIBUTOR,"Yeah, I'm a hard no on having `cudf.Scalar(...)` return a `cudf.Timestamp`. I'm fine with the inheritance relationship though.

While we're at it we should also look at #5882.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1325470759/reactions,0,0,0,0,0,0,0,0,0,12052
1763,https://api.github.com/repos/rapidsai/cudf/issues/comments/1307829417,https://github.com/rapidsai/cudf/issues/12093#issuecomment-1307829417,https://api.github.com/repos/rapidsai/cudf/issues/12093,1307829417,IC_kwDOBWUGps5N8-Sp,2022-11-08T21:10:17Z,2022-11-08T21:10:17Z,CONTRIBUTOR,"The `rmm::device_buffer` has a [set_stream](https://docs.rapids.ai/api/librmm/nightly/classrmm_1_1device__buffer.html#ab271ced85f304e3061a3ff72526dbc37) method. This proposed API would call that method of the underlying buffer.

This seems reasonable from what I can tell, but its utility (transferring ownership between streams) will be limited until we expose streams publicly, aside from the internal I/O methods that @hyperbolic2346 is working on. Perhaps we should wait to add this to the public API until we have a broader discussion of adding streams to libcudf APIs?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1307829417/reactions,0,0,0,0,0,0,0,0,0,12093
1764,https://api.github.com/repos/rapidsai/cudf/issues/comments/1307831516,https://github.com/rapidsai/cudf/issues/12093#issuecomment-1307831516,https://api.github.com/repos/rapidsai/cudf/issues/12093,1307831516,IC_kwDOBWUGps5N8-zc,2022-11-08T21:12:19Z,2022-11-08T21:12:19Z,CONTRIBUTOR,"I think that's totally fine.  The stuff Mike is working on is just experimental stuff as is, and doesn't actually require this from `column` itself.",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1307831516/reactions,0,0,0,0,0,0,0,0,0,12093
1765,https://api.github.com/repos/rapidsai/cudf/issues/comments/1308154290,https://github.com/rapidsai/cudf/issues/12093#issuecomment-1308154290,https://api.github.com/repos/rapidsai/cudf/issues/12093,1308154290,IC_kwDOBWUGps5N-Nmy,2022-11-09T03:22:50Z,2022-11-09T03:22:50Z,CONTRIBUTOR,"I added a PR showing what we are talking about here. I don't know if this is the best way to expose this, but it hopefully clears it up enough to have a solid conversation about it.",,hyperbolic2346,3506308,MDQ6VXNlcjM1MDYzMDg=,https://avatars.githubusercontent.com/u/3506308?v=4,,https://api.github.com/users/hyperbolic2346,https://github.com/hyperbolic2346,https://api.github.com/users/hyperbolic2346/followers,https://api.github.com/users/hyperbolic2346/following{/other_user},https://api.github.com/users/hyperbolic2346/gists{/gist_id},https://api.github.com/users/hyperbolic2346/starred{/owner}{/repo},https://api.github.com/users/hyperbolic2346/subscriptions,https://api.github.com/users/hyperbolic2346/orgs,https://api.github.com/users/hyperbolic2346/repos,https://api.github.com/users/hyperbolic2346/events{/privacy},https://api.github.com/users/hyperbolic2346/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1308154290/reactions,0,0,0,0,0,0,0,0,0,12093
1766,https://api.github.com/repos/rapidsai/cudf/issues/comments/1309040186,https://github.com/rapidsai/cudf/issues/12105#issuecomment-1309040186,https://api.github.com/repos/rapidsai/cudf/issues/12105,1309040186,IC_kwDOBWUGps5OBl46,2022-11-09T16:44:24Z,2022-11-09T16:44:24Z,MEMBER,"@arpan-das-astrophysics thanks for reporting the bug.  I was able to reproduce with the following:

```python
In [28]: import cudf

In [29]: df = cudf.datasets.timeseries()

In [30]: res = df.groupby(['id', 'name']).agg({""x"": ""sum"", ""y"": ""mean""})

In [31]: res.head()
Out[31]:
                      x         y
id   name
1077 Hannah   -6.402911  0.011002
993  Charlie -30.837110 -0.011802
962  Edith   -15.358664  0.045993
1021 Tim     -11.054711 -0.012046
913  Bob       1.828590  0.111917

In [32]: idx = cudf.MultiIndex.from_tuples([(1077,  'Hannah')], names=(""id"", ""name""))

In [33]: res.drop(index=idx)
---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
```",,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1309040186/reactions,0,0,0,0,0,0,0,0,0,12105
1767,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138473869,https://github.com/rapidsai/cudf/issues/12105#issuecomment-2138473869,https://api.github.com/repos/rapidsai/cudf/issues/12105,2138473869,IC_kwDOBWUGps5_doWN,2024-05-30T00:47:42Z,2024-05-30T00:47:42Z,CONTRIBUTOR,The underlying issue here may be the same as was originally reported in #8987,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138473869/reactions,0,0,0,0,0,0,0,0,0,12105
1768,https://api.github.com/repos/rapidsai/cudf/issues/comments/1309456384,https://github.com/rapidsai/cudf/issues/12112#issuecomment-1309456384,https://api.github.com/repos/rapidsai/cudf/issues/12112,1309456384,IC_kwDOBWUGps5ODLgA,2022-11-09T22:18:29Z,2022-11-09T22:18:29Z,CONTRIBUTOR,I'm not sure I agree with this global rule. I noticed that some detail functions are in separate files as needed. What makes sense to group together for the public API may not apply to internal detail functions used by multiple internal components.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1309456384/reactions,0,0,0,0,0,0,0,0,0,12112
1769,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494723332,https://github.com/rapidsai/cudf/issues/12143#issuecomment-1494723332,https://api.github.com/repos/rapidsai/cudf/issues/12143,1494723332,IC_kwDOBWUGps5ZF6sE,2023-04-03T17:39:54Z,2023-04-03T17:39:54Z,CONTRIBUTOR,@nvdbaranec is this issue still relevant?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494723332/reactions,0,0,0,0,0,0,0,0,0,12143
1770,https://api.github.com/repos/rapidsai/cudf/issues/comments/1315225965,https://github.com/rapidsai/cudf/issues/12145#issuecomment-1315225965,https://api.github.com/repos/rapidsai/cudf/issues/12145,1315225965,IC_kwDOBWUGps5OZMFt,2022-11-15T12:12:14Z,2022-11-15T12:12:14Z,CONTRIBUTOR,"I believe you can post process this with `cudf::replace_nulls` with an empty string https://docs.rapids.ai/api/libcudf/stable/group__transformation__replace.html#gad359a898c2b11e70c3e33720259c5596

Technically you could also just remove the null mask. This assumes that null entries are created as empty strings with a corresponding validity bit set to 0.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1315225965/reactions,0,0,0,0,0,0,0,0,0,12145
1771,https://api.github.com/repos/rapidsai/cudf/issues/comments/1315683184,https://github.com/rapidsai/cudf/issues/12145#issuecomment-1315683184,https://api.github.com/repos/rapidsai/cudf/issues/12145,1315683184,IC_kwDOBWUGps5Oa7tw,2022-11-15T18:04:16Z,2022-11-15T18:05:29Z,CONTRIBUTOR,"> you can post process this with cudf::replace_nulls with an empty string

The snag there is that we can't then differentiate between a legitimately null string and an empty one.
Consider that we have `csv_reader_options.set_na_values({""\N""})` as is common in Spark/Hive. The second and third fields of the following input row cannot be represented via CUDF columns:
```
First,,\N,Last
```
The Hive format would treat the second field as empty (`""""`), and the third as `null`.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1315683184/reactions,0,0,0,0,0,0,0,0,0,12145
1772,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341739327,https://github.com/rapidsai/cudf/issues/12145#issuecomment-1341739327,https://api.github.com/repos/rapidsai/cudf/issues/12145,1341739327,IC_kwDOBWUGps5P-VE_,2022-12-07T23:28:44Z,2022-12-07T23:28:44Z,CONTRIBUTOR,"This is surprising, I would expect `set_na_values` to impact this behavior. Checking if this is a bug.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1341739327/reactions,0,0,0,0,0,0,0,0,0,12145
1773,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117883947,https://github.com/rapidsai/cudf/issues/12154#issuecomment-2117883947,https://api.github.com/repos/rapidsai/cudf/issues/12154,2117883947,IC_kwDOBWUGps5-PFgr,2024-05-17T15:46:51Z,2024-05-17T15:46:51Z,CONTRIBUTOR,Scale and precision are documented in https://docs.rapids.ai/api/cudf/stable/user_guide/data-types/#decimal-data-types. We still need to document binops and promotion rules.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117883947/reactions,0,0,0,0,0,0,0,0,0,12154
1774,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321866364,https://github.com/rapidsai/cudf/issues/12172#issuecomment-1321866364,https://api.github.com/repos/rapidsai/cudf/issues/12172,1321866364,IC_kwDOBWUGps5OyhR8,2022-11-21T10:54:01Z,2022-11-21T10:54:01Z,MEMBER,Seconded.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1321866364/reactions,0,0,0,0,0,0,0,0,0,12172
1775,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331351152,https://github.com/rapidsai/cudf/issues/12212#issuecomment-1331351152,https://api.github.com/repos/rapidsai/cudf/issues/12212,1331351152,IC_kwDOBWUGps5PWs5w,2022-11-29T21:39:07Z,2022-11-29T21:39:07Z,CONTRIBUTOR,"Thanks @ttnghia for raising this issue. Would the ""find_all"" behavior in [parsing_utils.cu](https://github.com/rapidsai/cudf/blob/e67b94b19056282325bd5bad823fd66aeafd92c5/cpp/src/io/utilities/parsing_utils.cu#L117) be useful for this new option?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331351152/reactions,0,0,0,0,0,0,0,0,0,12212
1776,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331384843,https://github.com/rapidsai/cudf/issues/12212#issuecomment-1331384843,https://api.github.com/repos/rapidsai/cudf/issues/12212,1331384843,IC_kwDOBWUGps5PW1IL,2022-11-29T22:09:46Z,2022-11-29T22:09:46Z,CONTRIBUTOR,"No, it is similar but totally different here. That `parsing_utils.cu#find_all_from_set()` is dealing only with `char` type. For general lists (which may be nested) then the implementation is very different.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331384843/reactions,0,0,0,0,0,0,0,0,0,12212
1777,https://api.github.com/repos/rapidsai/cudf/issues/comments/1815502437,https://github.com/rapidsai/cudf/issues/12213#issuecomment-1815502437,https://api.github.com/repos/rapidsai/cudf/issues/12213,1815502437,IC_kwDOBWUGps5sNl5l,2023-11-16T23:41:27Z,2023-11-16T23:41:27Z,CONTRIBUTOR,@ttnghia Should we close this issue? Should we upstream an algorithm from https://github.com/NVIDIA/spark-rapids/pull/7115?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1815502437/reactions,0,0,0,0,0,0,0,0,0,12213
1778,https://api.github.com/repos/rapidsai/cudf/issues/comments/1815541021,https://github.com/rapidsai/cudf/issues/12213#issuecomment-1815541021,https://api.github.com/repos/rapidsai/cudf/issues/12213,1815541021,IC_kwDOBWUGps5sNvUd,2023-11-17T00:25:53Z,2023-11-17T00:26:19Z,CONTRIBUTOR,"No, https://github.com/NVIDIA/spark-rapids/pull/7115 is a workaround while waiting for this. Please see https://github.com/NVIDIA/spark-rapids/issues/7161.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1815541021/reactions,0,0,0,0,0,0,0,0,0,12213
1779,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331184498,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1331184498,https://api.github.com/repos/rapidsai/cudf/issues/12235,1331184498,IC_kwDOBWUGps5PWENy,2022-11-29T19:26:25Z,2022-11-29T19:26:25Z,CONTRIBUTOR,"Some thoughts:
- cuda-python/pynvml have APIs for checking total device memory usage (e.g. `cudaMemGetInfo`). Should we inject some checks at import time to ensure that the entire GPU is available, or maybe print some initial stats on the max pool size based on available GPU memory?
- Can we wrap the allocator in an adapter that checks (on OOM) whether memory has been allocated outside of the pool (perhaps just using a naive metric like `total_gpu_mem - pool_size`) and provides the user a more useful error?
- I'm always wary of making implicit and far-reaching changes like this silently. Should we consider adding some notification on `import cudf` that indicates that such a change is being made? I _also_ don't like libraries that print information (especially warnings) unconditionally on import, so I don't particularly like this suggestion, just raising the possibility. Alternatively it could be set up via logging of some sort. I think we can safely assume that no matter how we broadcast this some users will not read the docs/notification/warning/etc and be surprised at the behavior, but hopefully (and I think it's likely that) more people are happy about the pool usage improving default performance.
- Similar to the PyTorch example where cudf is imported later, could this change potentially break scripts that are using rmm to allocate memory prior to the cudf import? I believe that the answer is no since we made the necessary changes to save an allocator used for any allocation such that `set_allocator` won't make accessing allocations using the prior allocator UB, just want to be sure.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331184498/reactions,0,0,0,0,0,0,0,0,0,12235
1780,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331229185,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1331229185,https://api.github.com/repos/rapidsai/cudf/issues/12235,1331229185,IC_kwDOBWUGps5PWPIB,2022-11-29T20:02:54Z,2022-11-29T20:02:54Z,CONTRIBUTOR,"> cuda-python/pynvml have APIs for checking total device memory usage (e.g. cudaMemGetInfo). Should we inject some checks at import time to ensure that the entire GPU is available, or maybe print some initial stats on the max pool size based on available GPU memory?

I don't know what (if anything) this does for us, and perhaps my concerns about the `max_pool_size` were unfounded to begin with. I think the best option is simply not to set a maximum pool size and let the pool grow to whatever size it can. This is what happens today if you do `cudf.set_allocator(pool=True)`. Setting the `max_pool_size` to the amount of memory available at import time may be a bad idea because additional memory might be freed up later. 

> Can we wrap the allocator in an adapter that checks (on OOM) whether memory has been allocated outside of the pool (perhaps just using a naive metric like total_gpu_mem - pool_size) and provides the user a more useful error?

We can. I'm not opposed to it, but what can the user do with that information? When the GPU is e.g., being shared by multiple processes, it may even be misleading to say that their code is allocating memory outside of RMM's knowledge.

> Should we consider adding some notification on import cudf that indicates that such a change is being made?

Given that other libraries like CuPy and PyTorch also use a pool by default, I don't know if this is very controversial. I want to say that 99% of users won't ever know or care. 

> could this change potentially break scripts that are using rmm to allocate memory prior to the cudf import? 

I don't believe so (especially if we choose an initial pool size of 0). You are right that we keep a reference to the previous memory resource around so there's no danger/UB.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1331229185/reactions,1,1,0,0,0,0,0,0,0,12235
1781,https://api.github.com/repos/rapidsai/cudf/issues/comments/1486906239,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1486906239,https://api.github.com/repos/rapidsai/cudf/issues/12235,1486906239,IC_kwDOBWUGps5YoGN_,2023-03-28T13:37:53Z,2023-03-28T13:38:30Z,CONTRIBUTOR,"This question came up again today. Personally I tend to be against this sort of implicit behavior and prefer that it always be opt-in, but it seems like many feel that the benefit to users outweighs potential risks (but not all, CC @wence- and @pentschev). That said, increasing cudf import times is a concrete cost that I probably wouldn't be willing to stomach for pytorch, whereas for cupy and numba we are importing them already so the question is more of a philosophical one of whether or not we should have side effects to importing cudf.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1486906239/reactions,0,0,0,0,0,0,0,0,0,12235
1782,https://api.github.com/repos/rapidsai/cudf/issues/comments/1486932710,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1486932710,https://api.github.com/repos/rapidsai/cudf/issues/12235,1486932710,IC_kwDOBWUGps5YoMrm,2023-03-28T13:52:11Z,2023-03-28T13:52:11Z,CONTRIBUTOR,"In 23.04, importing RMM will no longer hook up cupy, numba, and pytorch to use the RMM allocators (that was https://github.com/rapidsai/rmm/pull/1221).

That was mostly done for import time reduction, but it also has the consequence that importing rmm doesn't modify the stateful allocation environment.

Within cudf, since we _use_ cupy and numba allocated data in some places, it makes sense to configure those libraries (when imported) to use the same allocator that cudf uses. For now at least, pytorch is not imported by cudf, so it's not as critical that we configure things.

That said, if we do go with pool-based allocation by default, then the likelihood of early (not actually) OOM does go up. My feeling is that we should solve this with a ""best practices for interop"" guide rather than trying to pin down all the possible libraries that might interoperate on device memory with cudf.

In general I tend not to like libraries that configure themselves into too many third-party systems (it always feels more ""framework"" than ""library"").",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1486932710/reactions,3,3,0,0,0,0,0,0,0,12235
1783,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487336245,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1487336245,https://api.github.com/repos/rapidsai/cudf/issues/12235,1487336245,IC_kwDOBWUGps5YpvM1,2023-03-28T17:33:12Z,2023-03-28T17:33:12Z,MEMBER,"There are two things here we are discussing here. 

1. Using RMM Pool by default 

This comes down to choosing perf over potential memory contention from other libraries .  

In all my interactions with customers when they are just using `cuDF` without `dask` i have never seen them use `rmm pool`. I agree with the technical challenges of doing this but the actual impact of this is 99% of customers will never use POOL and we will have to be fine with it.     


2. Configuring Pytorch to use rmm torch allocator. 

Regarding 2,  My fear is that most users wont know if this is configurable  and I think there is also no  clean way for us to inform user when they run into OOMs .  

That said , we cant probably use the RMM Pool cleanly right now with Pytorch as that can lead to fragmentation. We will have to probably use the `async ` memory allocator. 

Example of what a user will have to configure currently is below: 
```
    import cudf
    import cupy
    import rmm

    mr = rmm.mr.CudaAsyncMemoryResource()
    rmm.mr.set_current_device_resource(mr)
    torch.cuda.memory.change_current_allocator(rmm.rmm_torch_allocator)
    cupy.cuda.set_allocator(rmm.allocators.cupy.rmm_cupy_allocator)
```    

",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487336245/reactions,0,0,0,0,0,0,0,0,0,12235
1784,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487351583,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1487351583,https://api.github.com/repos/rapidsai/cudf/issues/12235,1487351583,IC_kwDOBWUGps5Ypy8f,2023-03-28T17:44:43Z,2023-03-28T17:44:43Z,MEMBER,"On 2, there's at least [a blogpost]( https://medium.com/rapids-ai/pytorch-rapids-rmm-maximize-the-memory-efficiency-of-your-workflows-f475107ba4d4 ) now. Maybe we can do more to promote that?",,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487351583/reactions,0,0,0,0,0,0,0,0,0,12235
1785,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487361362,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1487361362,https://api.github.com/repos/rapidsai/cudf/issues/12235,1487361362,IC_kwDOBWUGps5Yp1VS,2023-03-28T17:52:26Z,2023-03-28T17:52:26Z,MEMBER,"> On 2, there's at least [a blogpost](https://medium.com/rapids-ai/pytorch-rapids-rmm-maximize-the-memory-efficiency-of-your-workflows-f475107ba4d4) now. Maybe we can do more to promote that?

I agree that blog post is what I link so that is very useful indeed. 

I think having a dedicated place in the  cuDF docs for it will be great as a lot of people who use cuDF  would probably not know what RMM Pool is (similar to people using Pytorch not knowing about memory [management](https://pytorch.org/docs/stable/cuda.html#memory-management) ) so we will need a way to link it from cuDF docs too.  ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1487361362/reactions,0,0,0,0,0,0,0,0,0,12235
1786,https://api.github.com/repos/rapidsai/cudf/issues/comments/1726593271,https://github.com/rapidsai/cudf/issues/12235#issuecomment-1726593271,https://api.github.com/repos/rapidsai/cudf/issues/12235,1726593271,IC_kwDOBWUGps5m6bj3,2023-09-19T21:54:06Z,2023-09-19T21:54:06Z,MEMBER,"The first line of the PR description says:

> using an RMM managed memory pool 

Be careful. ""managed memory pool"" implies a `pool_memory_resource` with a `managed_memory_resource` (aka Unified Memory, `cudaMallocManaged`) as upstream. Are you saying that should be the default? Or do you mean a `pool_memory_resource` with `cuda_memory_resource` (`cudaMalloc`) as upstream?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1726593271/reactions,0,0,0,0,0,0,0,0,0,12235
1787,https://api.github.com/repos/rapidsai/cudf/issues/comments/2077739018,https://github.com/rapidsai/cudf/issues/12235#issuecomment-2077739018,https://api.github.com/repos/rapidsai/cudf/issues/12235,2077739018,IC_kwDOBWUGps5718gK,2024-04-25T16:52:17Z,2024-04-25T16:57:13Z,CONTRIBUTOR,"There is a great discussion in this issue so far, and it (implicitly) has mostly referred to a default _unmanaged_ (device-only) pool. The issue of a default memory resource is coming up again in the context of preventing OOM errors for the single workstation, beginner cuDF user, where a default _managed_ memory resource could be a good solution. 

I'm interested to learn more about the default pool behavior in cupy and pytorch as mentioned [above](https://github.com/rapidsai/cudf/issues/12235#issuecomment-1331229185). I'm also interested to learn more about how experienced users and other libraries could automatically be opted-out of a default managed resource, while still providing this feature automatically to the beginner user.

Perhaps we could have a hook on the first column allocation that checks if RMM has ever had `reinitialize` called, and if not, create a managed pool with initial size zero. Then when the pool grows we can add a hook to check the available system memory and throw an OOM exception well before completely locking up the system.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2077739018/reactions,0,0,0,0,0,0,0,0,0,12235
1788,https://api.github.com/repos/rapidsai/cudf/issues/comments/2078476149,https://github.com/rapidsai/cudf/issues/12235#issuecomment-2078476149,https://api.github.com/repos/rapidsai/cudf/issues/12235,2078476149,IC_kwDOBWUGps574wd1,2024-04-26T01:36:00Z,2024-04-26T01:36:00Z,MEMBER,Another concern I have in this issue is the recommendation to start with a pool of 0 bytes. With the current pool implementation this will create a lot of fragmentation.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2078476149/reactions,0,0,0,0,0,0,0,0,0,12235
1789,https://api.github.com/repos/rapidsai/cudf/issues/comments/2079784441,https://github.com/rapidsai/cudf/issues/12235#issuecomment-2079784441,https://api.github.com/repos/rapidsai/cudf/issues/12235,2079784441,IC_kwDOBWUGps579v35,2024-04-26T17:18:15Z,2024-04-26T17:18:15Z,CONTRIBUTOR,See also #14498,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2079784441/reactions,0,0,0,0,0,0,0,0,0,12235
1790,https://api.github.com/repos/rapidsai/cudf/issues/comments/1468629714,https://github.com/rapidsai/cudf/issues/12236#issuecomment-1468629714,https://api.github.com/repos/rapidsai/cudf/issues/12236,1468629714,IC_kwDOBWUGps5XiYLS,2023-03-14T18:34:01Z,2023-03-14T18:34:01Z,CONTRIBUTOR,"FWIW, I think we should also consider the (ongoing) maintenance cost of implementing this scheme. We would double the test-time run in a naive setup since we'd need to do everything twice (once with, once without order preservation).

I read through a bunch of the past discussions, I didn't see really any compelling use-cases for order-preserving API that would not be better served by using algorithmic approaches at the user-level that don't rely on order-preservation. I agree that sometimes you have to think a bit harder, but ...",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1468629714/reactions,0,0,0,0,0,0,0,0,0,12236
1791,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470808262,https://github.com/rapidsai/cudf/issues/12236#issuecomment-1470808262,https://api.github.com/repos/rapidsai/cudf/issues/12236,1470808262,IC_kwDOBWUGps5XqsDG,2023-03-15T20:39:45Z,2023-03-15T20:39:45Z,CONTRIBUTOR,"I'm assuming this comment was triggered by the discussion on https://github.com/rapidsai/cudf/pull/12939#discussion_r1136096460. I think it boils down to what degree we promise to match pandas, which I think will vary depending on how people use cudf. My 2c: in the cases where we are truly claiming to be a drop-in replacement, that includes ordering guarantees (even ones that pandas may have introduced unintentionally but is now maintaining in perpetuity anyway).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470808262/reactions,0,0,0,0,0,0,0,0,0,12236
1792,https://api.github.com/repos/rapidsai/cudf/issues/comments/1579227688,https://github.com/rapidsai/cudf/issues/12236#issuecomment-1579227688,https://api.github.com/repos/rapidsai/cudf/issues/12236,1579227688,IC_kwDOBWUGps5eIRoo,2023-06-06T18:04:13Z,2023-06-06T18:05:02Z,CONTRIBUTOR,"FWIW, #11656 made `drop_duplicates` have stable ordering. That removes part of the scope of the issue (#5286 is resolved). 🚀",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1579227688/reactions,0,0,0,0,0,0,0,0,0,12236
1793,https://api.github.com/repos/rapidsai/cudf/issues/comments/1601741406,https://github.com/rapidsai/cudf/issues/12236#issuecomment-1601741406,https://api.github.com/repos/rapidsai/cudf/issues/12236,1601741406,IC_kwDOBWUGps5feKJe,2023-06-21T22:04:50Z,2023-06-21T22:04:50Z,CONTRIBUTOR,"I see that Vyas has already covered `groupby` in this issue. So making note here that a python side solution to guarantee order with `sort=False` in `groupby` is being added for the time being: https://github.com/rapidsai/cudf/pull/13551, this will kick in only when the pandas compatibility(`mode.pandas_compatible`) mode option is enabled. ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1601741406/reactions,0,0,0,0,0,0,0,0,0,12236
1794,https://api.github.com/repos/rapidsai/cudf/issues/comments/1621572334,https://github.com/rapidsai/cudf/issues/12236#issuecomment-1621572334,https://api.github.com/repos/rapidsai/cudf/issues/12236,1621572334,IC_kwDOBWUGps5gpzru,2023-07-05T11:30:34Z,2023-07-05T11:30:34Z,CONTRIBUTOR,"Just FYI, https://github.com/rapidsai/cudf/pull/13657 is adding a workaround for non-deterministic behavior in `MultiIndex.loc` because of join/merge.",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1621572334/reactions,0,0,0,0,0,0,0,0,0,12236
1795,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375223707,https://github.com/rapidsai/cudf/issues/12255#issuecomment-1375223707,https://api.github.com/repos/rapidsai/cudf/issues/12255,1375223707,IC_kwDOBWUGps5R-D-b,2023-01-09T07:57:28Z,2023-01-09T07:57:28Z,CONTRIBUTOR,"This is very messy for `read_csv`, because we do need the data on the host in the current implementation. So this would lead to additional H2D and D2H copies.
Other than that, it should be possible to add a parameter to request device-side decompression. Not a trivial change in `read_csv`, though.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375223707/reactions,0,0,0,0,0,0,0,0,0,12255
1796,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408612910,https://github.com/rapidsai/cudf/issues/12263#issuecomment-1408612910,https://api.github.com/repos/rapidsai/cudf/issues/12263,1408612910,IC_kwDOBWUGps5T9bou,2023-01-30T13:14:59Z,2023-01-30T13:14:59Z,CONTRIBUTOR,"So pandas' behaviour with groupby-agg is to drop any column from the dataframe where any requested agg is not supported. In contrast, cudf only drops the column if _all_ aggs are unsupported. So this is probably easy to mimic the pandas behaviour (assuming that my description is complete in their treatment).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408612910/reactions,0,0,0,0,0,0,0,0,0,12263
1797,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332493049,https://github.com/rapidsai/cudf/issues/12266#issuecomment-1332493049,https://api.github.com/repos/rapidsai/cudf/issues/12266,1332493049,IC_kwDOBWUGps5PbDr5,2022-11-30T17:18:12Z,2022-11-30T17:18:12Z,CONTRIBUTOR,@karthikeyann Looks like libcudf `NULL_EQUALS` binary op isn't accounting for `np.nan` values ,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332493049/reactions,0,0,0,0,0,0,0,0,0,12266
1798,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332723149,https://github.com/rapidsai/cudf/issues/12266#issuecomment-1332723149,https://api.github.com/repos/rapidsai/cudf/issues/12266,1332723149,IC_kwDOBWUGps5Pb73N,2022-11-30T20:53:33Z,2022-11-30T20:53:33Z,CONTRIBUTOR,"I don't think this is a bug in libcudf (typically, NaNs do not compare equal). Possibly something we need to find a solution for in Python land.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332723149/reactions,1,1,0,0,0,0,0,0,0,12266
1799,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332754047,https://github.com/rapidsai/cudf/issues/12266#issuecomment-1332754047,https://api.github.com/repos/rapidsai/cudf/issues/12266,1332754047,IC_kwDOBWUGps5PcDZ_,2022-11-30T21:26:37Z,2022-11-30T21:26:37Z,CONTRIBUTOR,"The libcudf row-comparator has specialized supported to report equality when comparing NaNs:
https://github.com/rapidsai/cudf/blob/5f83a8491603eadc1de5cb174016801c1cca5824/cpp/include/cudf/table/row_operators.cuh#L138-L143
I think we can make this consistent at least for `NULL_EQUALS` 
https://github.com/rapidsai/cudf/blob/5f83a8491603eadc1de5cb174016801c1cca5824/cpp/src/binaryop/compiled/operation.cuh#L387-L400",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332754047/reactions,0,0,0,0,0,0,0,0,0,12266
1800,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332783274,https://github.com/rapidsai/cudf/issues/12266#issuecomment-1332783274,https://api.github.com/repos/rapidsai/cudf/issues/12266,1332783274,IC_kwDOBWUGps5PcKiq,2022-11-30T21:57:07Z,2022-11-30T21:57:07Z,CONTRIBUTOR,"I made a quick change to `NullEquals` in https://github.com/rapidsai/cudf/pull/12275 for discussion purposes and in case you want to try it out.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1332783274/reactions,0,0,0,0,0,0,0,0,0,12266
1801,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113114443,https://github.com/rapidsai/cudf/issues/12266#issuecomment-2113114443,https://api.github.com/repos/rapidsai/cudf/issues/12266,2113114443,IC_kwDOBWUGps5985FL,2024-05-15T17:47:40Z,2024-05-15T17:47:40Z,CONTRIBUTOR,@wence- is #15731 relevant here?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113114443/reactions,0,0,0,0,0,0,0,0,0,12266
1802,https://api.github.com/repos/rapidsai/cudf/issues/comments/2114679237,https://github.com/rapidsai/cudf/issues/12266#issuecomment-2114679237,https://api.github.com/repos/rapidsai/cudf/issues/12266,2114679237,IC_kwDOBWUGps5-C3HF,2024-05-16T09:25:04Z,2024-05-16T09:25:04Z,CONTRIBUTOR,"In this sense that it was adding another specialised binop equality comparator, yes. But using it wouldn't fix this problem.

If we want to carve out new `NANS_LIKE_NULL_EQUALS`/`NANS_LIKE_NULL_NOT_EQUALS` binops, we could do so. Otherwise we could support the requirements of `DataFrame.equals` by calling `nans_to_nulls` on the columns first and then comparing with `NULL_EQUALS`.

If we don't want to add to libcudf, we could have a PTX-jitted binop for this that we pass in via `GENERIC_PTX` or whatever it's called, I think.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2114679237/reactions,1,1,0,0,0,0,0,0,0,12266
1803,https://api.github.com/repos/rapidsai/cudf/issues/comments/1363224886,https://github.com/rapidsai/cudf/issues/12274#issuecomment-1363224886,https://api.github.com/repos/rapidsai/cudf/issues/12274,1363224886,IC_kwDOBWUGps5RQSk2,2022-12-22T18:44:55Z,2022-12-22T18:44:55Z,CONTRIBUTOR,"Thank you for posting this issue. `fillna` seems to be a function that has issues with list type support.

FWIW here is a shorter repro:
```
import cudf
df = cudf.DataFrame({'a':[[1], [1], None,None,None]})
subdf = cudf.DataFrame({'a':[None, None, [2], [2], [2]]})
df.fillna(subdf)
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1363224886/reactions,1,1,0,0,0,0,0,0,0,12274
1804,https://api.github.com/repos/rapidsai/cudf/issues/comments/1480480188,https://github.com/rapidsai/cudf/issues/12274#issuecomment-1480480188,https://api.github.com/repos/rapidsai/cudf/issues/12274,1480480188,IC_kwDOBWUGps5YPlW8,2023-03-23T02:05:45Z,2023-03-23T02:05:45Z,CONTRIBUTOR,"Bump.

xref: https://github.com/rapidsai/cugraph/issues/3010

Other examples using `cudf.Series`:
```python
import cudf

s = cudf.Series([[1], None, [3], None])
t = cudf.Series([None, [2], None, [4]])

# These all fail
s.fillna(t)
s.fillna(cudf.Scalar([0]))
s.fillna([0])
s[s.isnull()] = t
s[s.isnull()] = t[s.isnull()]

## These work:
# s[s.isnull()] = [0]
# t[t.isnull()] = cudf.Scalar([0])
```
It would be straightforward to add the Python layer for this (probably add `ListColumn.fillna`), but it would still need a low-level implementation (perhaps in CUDA called from `cpp/src/replace/nulls.cu:replace_nulls_column_kernel_forwarder`).",,eriknw,2058401,MDQ6VXNlcjIwNTg0MDE=,https://avatars.githubusercontent.com/u/2058401?v=4,,https://api.github.com/users/eriknw,https://github.com/eriknw,https://api.github.com/users/eriknw/followers,https://api.github.com/users/eriknw/following{/other_user},https://api.github.com/users/eriknw/gists{/gist_id},https://api.github.com/users/eriknw/starred{/owner}{/repo},https://api.github.com/users/eriknw/subscriptions,https://api.github.com/users/eriknw/orgs,https://api.github.com/users/eriknw/repos,https://api.github.com/users/eriknw/events{/privacy},https://api.github.com/users/eriknw/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1480480188/reactions,0,0,0,0,0,0,0,0,0,12274
1805,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335676171,https://github.com/rapidsai/cudf/issues/12286#issuecomment-1335676171,https://api.github.com/repos/rapidsai/cudf/issues/12286,1335676171,IC_kwDOBWUGps5PnM0L,2022-12-02T18:51:03Z,2022-12-02T18:51:03Z,CONTRIBUTOR,"@arpan-das-astrophysics - any chance you're able to provide a minimal reproducer of the issue? The snippet you posted above cannot be run in isolation as it depends on prior code and external data.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1335676171/reactions,0,0,0,0,0,0,0,0,0,12286
1806,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362161652,https://github.com/rapidsai/cudf/issues/12286#issuecomment-1362161652,https://api.github.com/repos/rapidsai/cudf/issues/12286,1362161652,IC_kwDOBWUGps5RMO_0,2022-12-21T22:01:41Z,2022-12-21T22:01:41Z,CONTRIBUTOR,"Thanks @arpan-das-astrophysics for sharing this use case. Would you please tell me a bit more about the data?
* how many rows does `df2` typically contain after the filter on `df3.TIME == t`?
* Can you reuse the `reshape` parameters (`len(dfflag),len(dfflag.iloc[0]),len(dfflag.iloc[0][0])`) between times or must it be computed for each value `t`?
* how expensive is the `view` function?

I suspect that poor scaling would be caused by looping over unique times instead of processing the full dataframe. 

Here was my sample data to study your example:
```
df = cudf.DataFrame()
df['TIME'] = [0,0,0,1,1,1,2,2,2,3]
unique_time = [1,2]
df['ANTENNA1'] = [[1,2,3]] * 10
df['ANTENNA2'] = [[1,2,3]] * 10
df['FLAG'] = [[[0,1],[1,0]]] * 10
df['DATA'] = [[[0,1],[1,0]]] * 10
```
",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362161652/reactions,0,0,0,0,0,0,0,0,0,12286
1807,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337941631,https://github.com/rapidsai/cudf/issues/12299#issuecomment-1337941631,https://api.github.com/repos/rapidsai/cudf/issues/12299,1337941631,IC_kwDOBWUGps5Pv15_,2022-12-05T18:48:06Z,2022-12-05T18:48:06Z,CONTRIBUTOR,"Note that Only a single source is currently supported in `read_csv`.
This work could help expand the same feature to csv reader.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337941631/reactions,1,1,0,0,0,0,0,0,0,12299
1808,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336788016,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336788016,https://api.github.com/repos/rapidsai/cudf/issues/12301,1336788016,IC_kwDOBWUGps5PrcQw,2022-12-05T06:00:33Z,2022-12-05T06:00:33Z,CONTRIBUTOR,"What do you mean groupby + aggregation? If I guessed correctly, we already have `MERGE_LIST` aggregation that does the merging for lists.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336788016/reactions,0,0,0,0,0,0,0,0,0,12301
1809,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336789949,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336789949,https://api.github.com/repos/rapidsai/cudf/issues/12301,1336789949,IC_kwDOBWUGps5Prcu9,2022-12-05T06:02:41Z,2022-12-05T06:03:02Z,CONTRIBUTOR,If you want to do groupby min/max etc. on lists as the input values then we recently have enough tools to support them---just a matter of time to enable them.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336789949/reactions,1,1,0,0,0,0,0,0,0,12301
1810,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336822660,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336822660,https://api.github.com/repos/rapidsai/cudf/issues/12301,1336822660,IC_kwDOBWUGps5PrkuE,2022-12-05T06:45:12Z,2022-12-05T06:45:12Z,NONE,"> If you want to do groupby min/max etc. on lists as the input values then we recently have enough tools to support them---just a matter of time to enable them.

@ttnghia Yes, something like this; there are a few questions:

1. How long will this feature be supported in the release version?
2. Our requirements are urgent. Is there a faster way to implement this function in the current version?

SQL case:

![捕获3](https://user-images.githubusercontent.com/43532055/205566477-dc2cced0-d664-4c74-a7d0-495cc3dff7d0.PNG)

",,infzo,43532055,MDQ6VXNlcjQzNTMyMDU1,https://avatars.githubusercontent.com/u/43532055?v=4,,https://api.github.com/users/infzo,https://github.com/infzo,https://api.github.com/users/infzo/followers,https://api.github.com/users/infzo/following{/other_user},https://api.github.com/users/infzo/gists{/gist_id},https://api.github.com/users/infzo/starred{/owner}{/repo},https://api.github.com/users/infzo/subscriptions,https://api.github.com/users/infzo/orgs,https://api.github.com/users/infzo/repos,https://api.github.com/users/infzo/events{/privacy},https://api.github.com/users/infzo/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336822660/reactions,0,0,0,0,0,0,0,0,0,12301
1811,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336848603,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1336848603,https://api.github.com/repos/rapidsai/cudf/issues/12301,1336848603,IC_kwDOBWUGps5PrrDb,2022-12-05T07:14:50Z,2022-12-05T07:15:49Z,NONE,"> @ttnghia

How do I perform operations such as count and sum after deduplication in the list?",,mjshare,60972404,MDQ6VXNlcjYwOTcyNDA0,https://avatars.githubusercontent.com/u/60972404?v=4,,https://api.github.com/users/mjshare,https://github.com/mjshare,https://api.github.com/users/mjshare/followers,https://api.github.com/users/mjshare/following{/other_user},https://api.github.com/users/mjshare/gists{/gist_id},https://api.github.com/users/mjshare/starred{/owner}{/repo},https://api.github.com/users/mjshare/subscriptions,https://api.github.com/users/mjshare/orgs,https://api.github.com/users/mjshare/repos,https://api.github.com/users/mjshare/events{/privacy},https://api.github.com/users/mjshare/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1336848603/reactions,0,0,0,0,0,0,0,0,0,12301
1812,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337546513,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337546513,https://api.github.com/repos/rapidsai/cudf/issues/12301,1337546513,IC_kwDOBWUGps5PuVcR,2022-12-05T15:11:00Z,2022-12-05T15:11:52Z,CONTRIBUTOR,"Oh sorry, what you've shown in the picture is per-list aggregation on the list elements (I thought that you want aggregation just at the lists level). This needs to implement new aggregations from scratch. I believe that @GregoryKimball can answer more questions about prioritizing for this FEA.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337546513/reactions,0,0,0,0,0,0,0,0,0,12301
1813,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337728767,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337728767,https://api.github.com/repos/rapidsai/cudf/issues/12301,1337728767,IC_kwDOBWUGps5PvB7_,2022-12-05T16:57:24Z,2022-12-05T16:57:24Z,CONTRIBUTOR,"After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:
1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then
2. Call segmented min/max/sum on the list elements using list offsets.

However, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337728767/reactions,1,1,0,0,0,0,0,0,0,12301
1814,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337769092,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1337769092,https://api.github.com/repos/rapidsai/cudf/issues/12301,1337769092,IC_kwDOBWUGps5PvLyE,2022-12-05T17:17:03Z,2022-12-05T17:17:03Z,CONTRIBUTOR,"@infzo perhaps I'm misunderstanding, but can you not just do this?

```python
In [67]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})

In [68]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})

In [69]: cudf.concat([df1, df2]).groupby('a').agg({'b': 'max', 'c': 'nunique'})
Out[69]: 
   b  c
a      
1  1  1
2  3  1
3  5  1

```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1337769092/reactions,0,0,0,0,0,0,0,0,0,12301
1815,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338601526,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338601526,https://api.github.com/repos/rapidsai/cudf/issues/12301,1338601526,IC_kwDOBWUGps5PyXA2,2022-12-06T01:36:44Z,2022-12-06T01:36:44Z,NONE,"
> After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:
> 
> 1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then
> 2. Call segmented min/max/sum on the list elements using list offsets.
> 
> However, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.
@ttnghia ，The problem is that the list does not support count, max, and sum with groupby
Does the community have a plan to support it? We have scenarios to support it？
",,mjshare,60972404,MDQ6VXNlcjYwOTcyNDA0,https://avatars.githubusercontent.com/u/60972404?v=4,,https://api.github.com/users/mjshare,https://github.com/mjshare,https://api.github.com/users/mjshare/followers,https://api.github.com/users/mjshare/following{/other_user},https://api.github.com/users/mjshare/gists{/gist_id},https://api.github.com/users/mjshare/starred{/owner}{/repo},https://api.github.com/users/mjshare/subscriptions,https://api.github.com/users/mjshare/orgs,https://api.github.com/users/mjshare/repos,https://api.github.com/users/mjshare/events{/privacy},https://api.github.com/users/mjshare/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338601526/reactions,0,0,0,0,0,0,0,0,0,12301
1816,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338610392,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338610392,https://api.github.com/repos/rapidsai/cudf/issues/12301,1338610392,IC_kwDOBWUGps5PyZLY,2022-12-06T01:43:35Z,2022-12-06T01:43:35Z,NONE,"> After thinking shortly, I realized that this doesn't require any new cudf aggregations. You can have it by:
> 
> 1. Merge your lists corresponding to the same key using MERGE_LIST aggregation, then
> 2. Call segmented min/max/sum on the list elements using list offsets.
> 
> However, I'm not sure how you can leverage these existing (internal) segmented APIs to do that.

@ttnghia Yes, this is our current solution. Segmented min/max/sum is a requirement for the list method. For details, see Describe alternatives you've considered. The current cudf version does not have these operators.
",,infzo,43532055,MDQ6VXNlcjQzNTMyMDU1,https://avatars.githubusercontent.com/u/43532055?v=4,,https://api.github.com/users/infzo,https://github.com/infzo,https://api.github.com/users/infzo/followers,https://api.github.com/users/infzo/following{/other_user},https://api.github.com/users/infzo/gists{/gist_id},https://api.github.com/users/infzo/starred{/owner}{/repo},https://api.github.com/users/infzo/subscriptions,https://api.github.com/users/infzo/orgs,https://api.github.com/users/infzo/repos,https://api.github.com/users/infzo/events{/privacy},https://api.github.com/users/infzo/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338610392/reactions,0,0,0,0,0,0,0,0,0,12301
1817,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338613411,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1338613411,https://api.github.com/repos/rapidsai/cudf/issues/12301,1338613411,IC_kwDOBWUGps5PyZ6j,2022-12-06T01:48:58Z,2022-12-06T01:48:58Z,NONE,"> @infzo perhaps I'm misunderstanding, but can you not just do this?
> 
> ```python
> In [67]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})
> 
> In [68]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})
> 
> In [69]: cudf.concat([df1, df2]).groupby('a').agg({'b': 'max', 'c': 'nunique'})
> Out[69]: 
>    b  c
> a      
> 1  1  1
> 2  3  1
> 3  5  1
> ```

@shwina A use case given above. In actual scenarios, more than one billion rows of data are queried in the table. As a result, the following problems occur:
1. The GPU of a single machine cannot accommodate such a large amount of data, and the cuDF DataFrame has an upper limit on the number of rows.
2. A large amount of data consumes a long time for network transmission, which reduces processing efficiency.",,infzo,43532055,MDQ6VXNlcjQzNTMyMDU1,https://avatars.githubusercontent.com/u/43532055?v=4,,https://api.github.com/users/infzo,https://github.com/infzo,https://api.github.com/users/infzo/followers,https://api.github.com/users/infzo/following{/other_user},https://api.github.com/users/infzo/gists{/gist_id},https://api.github.com/users/infzo/starred{/owner}{/repo},https://api.github.com/users/infzo/subscriptions,https://api.github.com/users/infzo/orgs,https://api.github.com/users/infzo/repos,https://api.github.com/users/infzo/events{/privacy},https://api.github.com/users/infzo/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1338613411/reactions,0,0,0,0,0,0,0,0,0,12301
1818,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339282229,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339282229,https://api.github.com/repos/rapidsai/cudf/issues/12301,1339282229,IC_kwDOBWUGps5P09M1,2022-12-06T12:57:28Z,2022-12-06T13:01:57Z,CONTRIBUTOR,"Thanks for the context, @infzo. I think I understand. How about doing it this way then?

The following happens on the local nodes:

```python
In [79]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})

In [80]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})

In [81]: df1
Out[81]: 
   a     b  c
0  1     1  x
1  1  <NA>  x
2  2     3  z

In [82]: df2
Out[82]: 
   a     b     c
0  1     1     x
1  3  <NA>     z
2  3     5  <NA>

In [83]: df1_unique = df1.groupby('a', as_index=False).unique()

In [84]: df2_unique = df2.groupby('a', as_index=False).unique()
```

The following happens on the merge node:

```python
In [85]: df_merged = cudf.concat([df1_unique, df2_unique], ignore_index=True)

In [86]: b_max = df_merged[['a', 'b']].explode('b').groupby('a').max()

In [87]: c_nunique = df_merged[['a', 'c']].explode('c').groupby('a').nunique()

In [88]: result = cudf.concat([b_max, c_nunique], axis=1)

In [89]: result
Out[89]: 
   b  c
a      
1  1  1
2  3  1
3  5  1
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339282229/reactions,1,1,0,0,0,0,0,0,0,12301
1819,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339380849,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339380849,https://api.github.com/repos/rapidsai/cudf/issues/12301,1339380849,IC_kwDOBWUGps5P1VRx,2022-12-06T13:20:52Z,2022-12-06T13:20:52Z,NONE,"> Thanks for the context, @infzo. I think I understand. How about doing it this way then?
> 
> The following happens on the local nodes:
> 
> ```python
> In [79]: df1 = cudf.DataFrame({'a': [1, 1, 2], 'b': [1, cudf.NA, 3], 'c': ['x', 'x', 'z']})
> 
> In [80]: df2 = cudf.DataFrame({'a': [1, 3, 3], 'b': [1, cudf.NA, 5], 'c': ['x', 'z', cudf.NA]})
> 
> In [81]: df1
> Out[81]: 
>    a     b  c
> 0  1     1  x
> 1  1  <NA>  x
> 2  2     3  z
> 
> In [82]: df2
> Out[82]: 
>    a     b     c
> 0  1     1     x
> 1  3  <NA>     z
> 2  3     5  <NA>
> 
> In [83]: df1_unique = df1.groupby('a', as_index=False).unique()
> 
> In [84]: df2_unique = df2.groupby('a', as_index=False).unique()
> ```
> 
> The following happens on the merge node:
> 
> ```python
> In [85]: df_merged = cudf.concat([df1_unique, df2_unique], ignore_index=True)
> 
> In [86]: b_max = df_merged[['a', 'b']].explode('b').groupby('a').max()
> 
> In [87]: c_nunique = df_merged[['a', 'c']].explode('c').groupby('a').nunique()
> 
> In [88]: result = cudf.concat([b_max, c_nunique], axis=1)
> 
> In [89]: result
> Out[89]: 
>    b  c
> a      
> 1  1  1
> 2  3  1
> 3  5  1
> ```
@shwina 
This method may have a risk: If there are multi-column aggregation and multi-column groupby, explode expansion may cause insufficient GPU memory. Is there any solution to this problem?",,mjshare,60972404,MDQ6VXNlcjYwOTcyNDA0,https://avatars.githubusercontent.com/u/60972404?v=4,,https://api.github.com/users/mjshare,https://github.com/mjshare,https://api.github.com/users/mjshare/followers,https://api.github.com/users/mjshare/following{/other_user},https://api.github.com/users/mjshare/gists{/gist_id},https://api.github.com/users/mjshare/starred{/owner}{/repo},https://api.github.com/users/mjshare/subscriptions,https://api.github.com/users/mjshare/orgs,https://api.github.com/users/mjshare/repos,https://api.github.com/users/mjshare/events{/privacy},https://api.github.com/users/mjshare/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339380849/reactions,0,0,0,0,0,0,0,0,0,12301
1820,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339429727,https://github.com/rapidsai/cudf/issues/12301#issuecomment-1339429727,https://api.github.com/repos/rapidsai/cudf/issues/12301,1339429727,IC_kwDOBWUGps5P1hNf,2022-12-06T13:57:40Z,2022-12-06T13:57:40Z,CONTRIBUTOR,"> If there are multi-column aggregation and multi-column groupby, explode expansion may cause insufficient GPU memory

You're right that the call to `explode()` does incur additional memory cost although that cost should be linear with the number of elements in the list column (`'b'` or `'c'` in this case).

What I'm proposing here is a workaround that is compatible with the existing Pandas/cuDF API. Segmented reduction would be the appropriate solution to the problem, but those are not currently available via the Python API.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339429727/reactions,2,2,0,0,0,0,0,0,0,12301
1821,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339934993,https://github.com/rapidsai/cudf/issues/12318#issuecomment-1339934993,https://api.github.com/repos/rapidsai/cudf/issues/12318,1339934993,IC_kwDOBWUGps5P3ckR,2022-12-06T20:00:01Z,2022-12-06T20:00:01Z,CONTRIBUTOR,"I would support this. The catch is that `eval` [has certain limitations](https://github.com/rapidsai/cudf/blob/branch-23.02/python/cudf/cudf/core/dataframe.py#L6989) that we may either need to relax or work around to maintain equivalent support. In particular, my two concerns are 1) the lack of automatic casting e.g. when comparing float to int, and 2) the lack of support for string/datetime types (I don't recall exactly what `query` supports right now, especially because I don't know how much all the work on string UDFs has or could be easily translated to `query`).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339934993/reactions,0,0,0,0,0,0,0,0,0,12318
1822,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339889345,https://github.com/rapidsai/cudf/issues/12319#issuecomment-1339889345,https://api.github.com/repos/rapidsai/cudf/issues/12319,1339889345,IC_kwDOBWUGps5P3RbB,2022-12-06T19:28:31Z,2022-12-06T19:28:31Z,CONTRIBUTOR,"[This is a known and documented behavior, we do not currently support automatic casting of types](https://github.com/rapidsai/cudf/blob/branch-23.02/python/cudf/cudf/core/dataframe.py#L6996). I just realized that the documentation for `eval` was not being published, [I've opened a PR to fix that](https://github.com/rapidsai/cudf/pull/12322).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1339889345/reactions,0,0,0,0,0,0,0,0,0,12319
1823,https://api.github.com/repos/rapidsai/cudf/issues/comments/1340265434,https://github.com/rapidsai/cudf/issues/12319#issuecomment-1340265434,https://api.github.com/repos/rapidsai/cudf/issues/12319,1340265434,IC_kwDOBWUGps5P4tPa,2022-12-07T01:54:37Z,2022-12-07T01:54:37Z,NONE,update to FEA from BUG,,mattf,112653,MDQ6VXNlcjExMjY1Mw==,https://avatars.githubusercontent.com/u/112653?v=4,,https://api.github.com/users/mattf,https://github.com/mattf,https://api.github.com/users/mattf/followers,https://api.github.com/users/mattf/following{/other_user},https://api.github.com/users/mattf/gists{/gist_id},https://api.github.com/users/mattf/starred{/owner}{/repo},https://api.github.com/users/mattf/subscriptions,https://api.github.com/users/mattf/orgs,https://api.github.com/users/mattf/repos,https://api.github.com/users/mattf/events{/privacy},https://api.github.com/users/mattf/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1340265434/reactions,0,0,0,0,0,0,0,0,0,12319
1824,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577856810,https://github.com/rapidsai/cudf/issues/12335#issuecomment-1577856810,https://api.github.com/repos/rapidsai/cudf/issues/12335,1577856810,IC_kwDOBWUGps5eDC8q,2023-06-06T03:45:04Z,2023-06-06T03:45:04Z,CONTRIBUTOR,I believe the discussion in https://github.com/pandas-dev/pandas/issues/21597 shows that this issue now unblocked as of 2 weeks ago.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577856810/reactions,0,0,0,0,0,0,0,0,0,12335
1825,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355041925,https://github.com/rapidsai/cudf/issues/12344#issuecomment-1355041925,https://api.github.com/repos/rapidsai/cudf/issues/12344,1355041925,IC_kwDOBWUGps5QxEyF,2022-12-16T15:15:58Z,2022-12-16T15:15:58Z,CONTRIBUTOR,"This is a [current restriction](https://docs.cupy.dev/en/stable/reference/generated/cupy.random.choice.html) of cupy, which we use to generate random samples: it is not possible to sample without replacement when using non-uniform weighting probabilities. I suspect therefore that the best way to get this if you need it is to ask there. It is possible to work-around this restriction by creating a supplementary array that gives each entry in your series the correct multiplicity and then sampling uniformly without replacement, but that might be a bit fiddly depending on use case.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1355041925/reactions,0,0,0,0,0,0,0,0,0,12344
1826,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362443168,https://github.com/rapidsai/cudf/issues/12344#issuecomment-1362443168,https://api.github.com/repos/rapidsai/cudf/issues/12344,1362443168,IC_kwDOBWUGps5RNTug,2022-12-22T05:43:53Z,2022-12-22T05:43:53Z,CONTRIBUTOR,@wence- Are there any cases where the `weights` argument is implemented? Should we update the [docs](https://docs.rapids.ai/api/cudf/nightly/api_docs/api/cudf.series.sample)?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1362443168/reactions,0,0,0,0,0,0,0,0,0,12344
1827,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375839007,https://github.com/rapidsai/cudf/issues/12344#issuecomment-1375839007,https://api.github.com/repos/rapidsai/cudf/issues/12344,1375839007,IC_kwDOBWUGps5SAaMf,2023-01-09T15:48:49Z,2023-01-09T15:48:49Z,CONTRIBUTOR,"> Are there any cases where the `weights` argument is implemented?

Sampling _with_ replacement is fine.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375839007/reactions,0,0,0,0,0,0,0,0,0,12344
1828,https://api.github.com/repos/rapidsai/cudf/issues/comments/1376111082,https://github.com/rapidsai/cudf/issues/12344#issuecomment-1376111082,https://api.github.com/repos/rapidsai/cudf/issues/12344,1376111082,IC_kwDOBWUGps5SBcnq,2023-01-09T18:41:52Z,2023-01-09T18:41:52Z,CONTRIBUTOR,"When @isVoid wrote this, he and I didn't think too hard about documenting the exact supported cases since there are multiple different possibilities (CPU vs GPU sampling depending on whether we're operating row-wise or column-wise, weights, etc) and in most cases I think we just transparently support whatever the underlying libraries (numpy or cupy) support. In my weakly held opinion it would probably be easier to focus on making these error messages more instructive (e.g. ""Random sampling with cupy does not support the input [insert input here]. Either [switch to using numpy for sampling] or [try this other workaround]"") rather than trying to keep documentation up to date for each case.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1376111082/reactions,0,0,0,0,0,0,0,0,0,12344
1829,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577857839,https://github.com/rapidsai/cudf/issues/12352#issuecomment-1577857839,https://api.github.com/repos/rapidsai/cudf/issues/12352,1577857839,IC_kwDOBWUGps5eDDMv,2023-06-06T03:47:12Z,2023-06-06T03:47:12Z,CONTRIBUTOR,I believe this is still needed.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577857839/reactions,0,0,0,0,0,0,0,0,0,12352
1830,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118606644,https://github.com/rapidsai/cudf/issues/12403#issuecomment-2118606644,https://api.github.com/repos/rapidsai/cudf/issues/12403,2118606644,IC_kwDOBWUGps5-R180,2024-05-18T02:35:22Z,2024-05-18T02:35:22Z,MEMBER,"I think long term we want to move away from `hash_vocab` functionality and make `subword` tokenizer work with `vocab` files directly. 

Similar to what we do in BPE ",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118606644/reactions,0,0,0,0,0,0,0,0,0,12403
1831,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121335671,https://github.com/rapidsai/cudf/issues/12403#issuecomment-2121335671,https://api.github.com/repos/rapidsai/cudf/issues/12403,2121335671,IC_kwDOBWUGps5-cQN3,2024-05-20T22:41:40Z,2024-05-20T22:41:40Z,CONTRIBUTOR,"Hmm OK so you think we'll end up removing this functionality altogether at some point, then?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121335671/reactions,0,0,0,0,0,0,0,0,0,12403
1832,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375211887,https://github.com/rapidsai/cudf/issues/12412#issuecomment-1375211887,https://api.github.com/repos/rapidsai/cudf/issues/12412,1375211887,IC_kwDOBWUGps5R-BFv,2023-01-09T07:39:01Z,2023-01-09T07:39:01Z,CONTRIBUTOR,@galipremsagar for viz,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375211887/reactions,0,0,0,0,0,0,0,0,0,12412
1833,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375639351,https://github.com/rapidsai/cudf/issues/12412#issuecomment-1375639351,https://api.github.com/repos/rapidsai/cudf/issues/12412,1375639351,IC_kwDOBWUGps5R_pc3,2023-01-09T13:38:21Z,2023-01-09T13:38:21Z,CONTRIBUTOR,"Some additional references: https://github.com/rapidsai/cudf/issues/2957, https://github.com/rapidsai/cudf/issues/2407",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1375639351/reactions,0,0,0,0,0,0,0,0,0,12412
1834,https://api.github.com/repos/rapidsai/cudf/issues/comments/1369987726,https://github.com/rapidsai/cudf/issues/12460#issuecomment-1369987726,https://api.github.com/repos/rapidsai/cudf/issues/12460,1369987726,IC_kwDOBWUGps5RqFqO,2023-01-03T16:42:58Z,2023-01-03T16:42:58Z,MEMBER,"The 22.12 pip packages provide cuDF as of version 22.12. The `DataFrame.corr` option `min_periods` is [not yet supported,](https://github.com/rapidsai/cudf/blob/8a1ff584e39084b588b82a4d8a5f909bd7451916/python/cudf/cudf/core/dataframe.py#L6495-L6496), which is why you're see a NotImplementedError. I'm going to convert this issue into a feature request for `min_periods`.

Would you be able to file separate feature requests for other functionality that you tried to use but an into errors?",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1369987726/reactions,0,0,0,0,0,0,0,0,0,12460
1835,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370318973,https://github.com/rapidsai/cudf/issues/12460#issuecomment-1370318973,https://api.github.com/repos/rapidsai/cudf/issues/12460,1370318973,IC_kwDOBWUGps5RrWh9,2023-01-03T23:13:29Z,2023-01-03T23:13:29Z,NONE,"@beckernick yes, thank you and appreciate it! One thing I found confusing is the documentation here https://docs.rapids.ai/api/cudf/stable/api_docs/dataframe.html lists a bunch of methods that are not yet supported, e.g., itertuples, iterrows, so the documentation seems a bit aspirational. I basically have a very large df, where I need to calculate the correlating matrix and then iterate over it. Interestingly, I also found some discussion online that mentions iterative calculations like iterrows are much faster on a CPU, so it doesn't really make sense to implement on a GPU. I think I might try the iterative part on a CPU again but would be curious to know if there're benefits to a GPU implementation, especially since it's part of the documentation already",,sokol11,35613945,MDQ6VXNlcjM1NjEzOTQ1,https://avatars.githubusercontent.com/u/35613945?v=4,,https://api.github.com/users/sokol11,https://github.com/sokol11,https://api.github.com/users/sokol11/followers,https://api.github.com/users/sokol11/following{/other_user},https://api.github.com/users/sokol11/gists{/gist_id},https://api.github.com/users/sokol11/starred{/owner}{/repo},https://api.github.com/users/sokol11/subscriptions,https://api.github.com/users/sokol11/orgs,https://api.github.com/users/sokol11/repos,https://api.github.com/users/sokol11/events{/privacy},https://api.github.com/users/sokol11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370318973/reactions,0,0,0,0,0,0,0,0,0,12460
1836,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370969393,https://github.com/rapidsai/cudf/issues/12460#issuecomment-1370969393,https://api.github.com/repos/rapidsai/cudf/issues/12460,1370969393,IC_kwDOBWUGps5Rt1Ux,2023-01-04T14:05:04Z,2023-01-04T14:05:04Z,CONTRIBUTOR,"Thanks for pointing this out, @sokol11 -- you're right that we incorrectly include `itertuples` and `iterrows` (and possibly a handful of other methods) as part of our API docs when in reality, we don't support those. I think the problem is that we _do_ have those methods defined, but all they do is raise a `NotImplementedError`. FYI @galipremsagar: we need to tackle this as part of our doc update effort",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1370969393/reactions,0,0,0,0,0,0,0,0,0,12460
1837,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371122505,https://github.com/rapidsai/cudf/issues/12460#issuecomment-1371122505,https://api.github.com/repos/rapidsai/cudf/issues/12460,1371122505,IC_kwDOBWUGps5RuatJ,2023-01-04T16:08:19Z,2023-01-04T16:08:19Z,CONTRIBUTOR,"Also @sokol11 to address this point of yours:
> Interestingly, I also found some discussion online that mentions iterative calculations like iterrows are much faster on a CPU, so it doesn't really make sense to implement on a GPU. 

This is exactly correct, and it is _why_ we define those methods are raising a `NotImplementedError`. We want to provide users a clear indication that working with cudf objects in this way is bad for performance. It's worth noting that even when using pandas there are usually much more efficient ways to get the answer you want. Here's an (admittedly trivial) example with just pandas

```
In [16]: import pandas as pd

In [17]: import numpy as np

In [18]: df = pd.DataFrame({'a': np.random.rand(10000)})

In [19]: %%timeit
    ...: total = 0
    ...: for idx, values in df.iterrows():
    ...:     total += values['a']
    ...: 
202 ms ± 760 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [20]: %%timeit
    ...: df['a'].sum()
    ...: 
    ...: 
34.6 µs ± 122 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)
```

If you are using cudf for performance and you find yourself reaching for methods like `iterrows`, it's usually worth reconsidering your approach to see if there's a way to avoid iteration altogether.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1371122505/reactions,0,0,0,0,0,0,0,0,0,12460
1838,https://api.github.com/repos/rapidsai/cudf/issues/comments/1372483347,https://github.com/rapidsai/cudf/issues/12477#issuecomment-1372483347,https://api.github.com/repos/rapidsai/cudf/issues/12477,1372483347,IC_kwDOBWUGps5Rzm8T,2023-01-05T17:03:01Z,2023-01-05T17:03:01Z,CONTRIBUTOR,"Spark also has a NullType, but it is not extensively used. It only shows up in cases where a null is explicitly put into the SQL with no type information at that point.  It is never used for any computation that I can see without casting it to a specific type first.  So like I said this is very minor and we are fine with out current solution where we store it as a INT8 that is null.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1372483347/reactions,0,0,0,0,0,0,0,0,0,12477
1839,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474122698,https://github.com/rapidsai/cudf/issues/12479#issuecomment-1474122698,https://api.github.com/repos/rapidsai/cudf/issues/12479,1474122698,IC_kwDOBWUGps5X3VPK,2023-03-17T16:51:17Z,2023-03-17T16:51:17Z,CONTRIBUTOR,"Thanks @JacoCheung for sharing these results.

* Would you please explain the ""features"" and ""row_group"" information in the table you shared above? I'm not sure how to interpret this information. I would like to convert it to a list of the columns and their types to better evaluate your observations.
* Did you perform OS cache clearing before each read operation? Generally we recommend this to make sure the order of read operations does not impact the speed of each operation.
* Would you please share nsys profiles of the 'criteo' data set in particular? (If you like we can follow up on profile or dataset exchange on Slack?)
* It looks like you are using the RMM pool - that's great! How does the CUDA memory resource compare?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474122698/reactions,0,0,0,0,0,0,0,0,0,12479
1840,https://api.github.com/repos/rapidsai/cudf/issues/comments/1374337828,https://github.com/rapidsai/cudf/issues/12494#issuecomment-1374337828,https://api.github.com/repos/rapidsai/cudf/issues/12494,1374337828,IC_kwDOBWUGps5R6rsk,2023-01-07T01:36:13Z,2023-01-07T01:45:42Z,CONTRIBUTOR,"I think there may be places that we call these utilities on things like Series objects. We could replace those instances with calling on the `.dtype` attribute instead.

Edit: apologies, I jumped the gun on responding :) ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1374337828/reactions,0,0,0,0,0,0,0,0,0,12494
1841,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117911462,https://github.com/rapidsai/cudf/issues/12494#issuecomment-2117911462,https://api.github.com/repos/rapidsai/cudf/issues/12494,2117911462,IC_kwDOBWUGps5-PMOm,2024-05-17T16:00:17Z,2024-05-17T16:00:17Z,CONTRIBUTOR,Related: #5695,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117911462/reactions,0,0,0,0,0,0,0,0,0,12494
1842,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474124965,https://github.com/rapidsai/cudf/issues/12501#issuecomment-1474124965,https://api.github.com/repos/rapidsai/cudf/issues/12501,1474124965,IC_kwDOBWUGps5X3Vyl,2023-03-17T16:53:16Z,2023-03-17T16:53:16Z,CONTRIBUTOR,Thank you @lvxhnat for sharing these results. Would you please post a code snippet that reproduces the issue?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474124965/reactions,0,0,0,0,0,0,0,0,0,12501
1843,https://api.github.com/repos/rapidsai/cudf/issues/comments/1484456076,https://github.com/rapidsai/cudf/issues/12501#issuecomment-1484456076,https://api.github.com/repos/rapidsai/cudf/issues/12501,1484456076,IC_kwDOBWUGps5YewCM,2023-03-27T04:03:48Z,2023-03-27T04:03:48Z,NONE,"@GregoryKimball  Hi Gregory, apologies for the late reply. This issue seems to be general and not specific to my dataset. This is what I did to replicate: 

In file ```df_memory_test.py```
```python
import cudf
import numpy as np
import pandas as pd
from memory_profiler import profile

@profile
def df_memory_test():
    rands = [np.random.random(1000) for i in range(3)]
    pd_df: pd.DataFrame = pd.DataFrame(rands).T
    pd_df.columns = ['sample_a', 'sample_b', 'sample_c']
    cu_df: cudf.DataFrame = cudf.DataFrame(pd_df)
    return 

if __name__ ==  '__main__':
   df_memory_test()
```

then ```python -m memory_profiler df_memory_test.py```

shows a memory spike during the conversion similarly:

```
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     6    596.6 MiB    596.6 MiB           1   @profile
     7                                         def df_memory_test():
     8    596.6 MiB      0.0 MiB           6       rands = [np.random.random(1000) for i in range(3)]
     9    597.4 MiB      0.8 MiB           1       pd_df: pd.DataFrame = pd.DataFrame(rands).T
    10    597.4 MiB      0.0 MiB           1       pd_df.columns = ['sample_a', 'sample_b', 'sample_c']
    11   2436.6 MiB   1839.2 MiB           1       cu_df: cudf.DataFrame = cudf.DataFrame(pd_df)
    12   2436.6 MiB      0.0 MiB           1       return 
```",,lvxhnat,58301316,MDQ6VXNlcjU4MzAxMzE2,https://avatars.githubusercontent.com/u/58301316?v=4,,https://api.github.com/users/lvxhnat,https://github.com/lvxhnat,https://api.github.com/users/lvxhnat/followers,https://api.github.com/users/lvxhnat/following{/other_user},https://api.github.com/users/lvxhnat/gists{/gist_id},https://api.github.com/users/lvxhnat/starred{/owner}{/repo},https://api.github.com/users/lvxhnat/subscriptions,https://api.github.com/users/lvxhnat/orgs,https://api.github.com/users/lvxhnat/repos,https://api.github.com/users/lvxhnat/events{/privacy},https://api.github.com/users/lvxhnat/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1484456076/reactions,0,0,0,0,0,0,0,0,0,12501
1844,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474196284,https://github.com/rapidsai/cudf/issues/12502#issuecomment-1474196284,https://api.github.com/repos/rapidsai/cudf/issues/12502,1474196284,IC_kwDOBWUGps5X3nM8,2023-03-17T17:47:06Z,2023-03-17T17:47:45Z,CONTRIBUTOR,"Hello @infzo thank you for raising this issue. I reworked your script a bit and found that `groupby().collect()` was about 15-30x slower than `groupby().sum()`. It looks like we are doing a lot of extra work in constructing a list output type in the `collect` case. Perhaps this could be because `collect` is doing a sort-based groupby whereas `sum` is doing a hash-based groupby. Perhaps there is an opportunity to improve libcudf performance here.

Profile:
![image](https://user-images.githubusercontent.com/12725111/225979786-ba227afe-3158-40e6-ae83-b2dad707bf45.png)

Script:
<details>
  <summary>issue12502.py</summary>
  import cudf
import time
import pandas
import pyarrow
import numpy as np
import nvtx


def create_table(n_rows, n_cols, n_range):
    table = pyarrow.Table.from_pydict(
        {f'col_{c}': np.random.randint(0, n_range, size=[n_rows]) for c in range(n_cols)})
    return table

def create_table_with_str(n_rows, n_cols, n_strs, n_strs_cols, n_range):
    prefix = 'xxxx_' * ((n_strs - 10) // 5)
    cdf = create_table(n_rows, n_cols, n_range).to_pandas()
    for i in range(n_strs_cols):
         cdf[f'col_{i}'] = cdf[f'col_{i}'].apply(lambda x: f'{prefix}{x:010}')
    return pyarrow.Table.from_pandas(cdf)    


def stat_cost(str_len):
    tbl = create_table_with_str(2000 * 10000, 2, str_len, 1, 1500 * 10000)
    start = time.time()
    df = cudf.DataFrame.from_arrow(tbl)
    print(f'from arrow cost: {time.time() - start} s, '
          f'bandwidth: {df.shape[0] / 10000 / (time.time() - start)} WRows/s')


    df_mb = (df['col_0'].str.byte_count().sum() + df['col_1'].size*8)/1e6

    with nvtx.annotate(f'groupby.collect {str_len}', color='orange'):
        t0 = time.time()
        result = df.groupby(['col_0']).collect()
        t1 = time.time()
    result_mb = (cudf.Series(result.index).str.byte_count().sum() + result['col_1'].list.len().sum()*8)/1e6
    
    print(f'group by collect cost: {t1 - t0} s, ',
           #f'bandwidth: {df.shape[0] / 10000 / (t1 - t0)} WRows/s',
           f'df MB: {df_mb}',
           f'result MB: {result_mb} MB',
           f'bandwidth: {(df_mb + result_mb) / (t1 - t0)} MB/s',)
    
    with nvtx.annotate(f'groupby.sum {str_len}', color='orange'):
        t0 = time.time()
        result = df.groupby(['col_0']).sum()
        t1 = time.time()
    result_mb = (cudf.Series(result.index).str.byte_count().sum() + result['col_1'].size*8)/1e6

    print(f'group by sum cost: {t1 - t0} s, ',
           #f'bandwidth: {df.shape[0] / 10000 / (t1 - t0)} WRows/s',
           f'df MB: {df_mb}',
           f'result MB: {result_mb} MB',
           f'bandwidth: {(df_mb + result_mb) / (t1 - t0)} MB/s',)


if __name__ == '__main__':

    print('stat_cost(10)')
    stat_cost(10)

    print('stat_cost(20)')
    stat_cost(20)


    print('stat_cost(30)')
    stat_cost(30)



</details>


Console output:
```
stat_cost(10)
from arrow cost: 0.9572014808654785 s, bandwidth: 2089.36701848911 WRows/s
group by collect cost: 0.25451135635375977 s,  df MB: 360.0 result MB: 270.49128 MB bandwidth: 2477.2618755905114 MB/s
group by sum cost: 0.020035982131958008 s,  df MB: 360.0 result MB: 198.884304 MB bandwidth: 27894.030865028686 MB/s
stat_cost(20)
from arrow cost: 0.05078125 s, bandwidth: 39371.675850222004 WRows/s
group by collect cost: 0.6336925029754639 s,  df MB: 560.0 result MB: 380.93408 MB bandwidth: 1484.8433200359832 MB/s
group by sum cost: 0.020110130310058594 s,  df MB: 560.0 result MB: 309.307712 MB bandwidth: 43227.353507758904 MB/s
stat_cost(30)
from arrow cost: 0.0644078254699707 s, bandwidth: 31043.73859721189 WRows/s
group by collect cost: 1.0736150741577148 s,  df MB: 760.0 result MB: 491.42092 MB bandwidth: 1165.6141480518793 MB/s
group by sum cost: 0.02320241928100586 s,  df MB: 760.0 result MB: 419.799832 MB bandwidth: 50848.13862345021 MB/s
```

Profile script:
```
/nfs/nsight-systems-2022.5.1/bin/nsys profile -t nvtx,cuda,osrt -f true --stats=true --cuda-memory-usage=true --gpu-metrics-device=0 --output=p python issue12502.py
```

System: 
```
23.02 release docker image, A100 GPU, AMD Epyc
```

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474196284/reactions,0,0,0,0,0,0,0,0,0,12502
1845,https://api.github.com/repos/rapidsai/cudf/issues/comments/1515473560,https://github.com/rapidsai/cudf/issues/12512#issuecomment-1515473560,https://api.github.com/repos/rapidsai/cudf/issues/12512,1515473560,IC_kwDOBWUGps5aVEqY,2023-04-19T22:42:13Z,2023-04-20T23:31:31Z,CONTRIBUTOR,"Hello I would like to update this issue now that we have support for libcudf ASTs in cuDF's `DataFrame.query`. I propose that we add a filtering step to `cudf.read_parquet` if the `filters` argument is present, similar to the following approach:

```
df = cudf.DataFrame({'a': range(10), 'b': range(10,20)})
df.to_parquet('test.parquet')
filters = [
    [('a', '>', 7),('b', '>', 15)],
    [('a', '<', 2)],
]
df = cudf.read_parquet('test.parquet', filters=filters)

assert isinstance(filters, list) and len(filters) > 0, ""Invalid filters""
if isinstance(filters[0], tuple):
    filters = [filters]
expr = ' or '.join([f'(({"") and ("".join([f""{col} {o} {val}"" for col, o, val in f])}))' for f in filters])
df_filtered = df.query(expr)
```

```
   a   b
0  0  10
1  1  11
8  8  18
9  9  19
```

Edit: now that we have string scalar support in libcudf ASTs we might want to add a pattern for double-quoting string values

See [pyarrow.parquet.read_table](https://arrow.apache.org/docs/python/generated/pyarrow.parquet.read_table.html) for more information about the grammar of `filters`. The grammar is single-column disjunctive normal form (DNF) and a subset of what ASTs can represent. We are missing `in` and `not in` operators but these could be converted to ANDed `==` or `!=`.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1515473560/reactions,0,0,0,0,0,0,0,0,0,12512
1846,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552000875,https://github.com/rapidsai/cudf/issues/12512#issuecomment-1552000875,https://api.github.com/repos/rapidsai/cudf/issues/12512,1552000875,IC_kwDOBWUGps5cgadr,2023-05-17T20:14:46Z,2023-05-17T20:14:46Z,CONTRIBUTOR,"For the parquet reader, this issue was addressed in #13334. We still need to verify/modify the ORC reader.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552000875/reactions,0,0,0,0,0,0,0,0,0,12512
1847,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408592582,https://github.com/rapidsai/cudf/issues/12562#issuecomment-1408592582,https://api.github.com/repos/rapidsai/cudf/issues/12562,1408592582,IC_kwDOBWUGps5T9WrG,2023-01-30T13:00:55Z,2023-01-30T13:00:55Z,CONTRIBUTOR,"This goes in to the `groupby-agg` code-path. Pandas has special-casing for ""size"" aggregations whereas cudf does not, which results in cudf broadcasting things. I think this could be handled relatively easily, but I had a brief look and there are a bunch of other inconsistencies. So I suspect this needs some systematic thinking in the groupby setup.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408592582/reactions,0,0,0,0,0,0,0,0,0,12562
1848,https://api.github.com/repos/rapidsai/cudf/issues/comments/1387475997,https://github.com/rapidsai/cudf/issues/12567#issuecomment-1387475997,https://api.github.com/repos/rapidsai/cudf/issues/12567,1387475997,IC_kwDOBWUGps5SszQd,2023-01-18T17:50:08Z,2023-01-18T17:50:08Z,CONTRIBUTOR,Targeting 23.04 release.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1387475997/reactions,0,0,0,0,0,0,0,0,0,12567
1849,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500505216,https://github.com/rapidsai/cudf/issues/12567#issuecomment-1500505216,https://api.github.com/repos/rapidsai/cudf/issues/12567,1500505216,IC_kwDOBWUGps5Zb-SA,2023-04-07T17:52:56Z,2023-04-07T17:52:56Z,CONTRIBUTOR,I would like to connect this issue and https://github.com/rapidsai/cudf/issues/12786. I would like to identify any libcudf algorithms that generate nonempty nulls and only add sanitization where it is needed due to implementation details for particular algorithms.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500505216/reactions,0,0,0,0,0,0,0,0,0,12567
1850,https://api.github.com/repos/rapidsai/cudf/issues/comments/1879015294,https://github.com/rapidsai/cudf/issues/12567#issuecomment-1879015294,https://api.github.com/repos/rapidsai/cudf/issues/12567,1879015294,IC_kwDOBWUGps5v_39-,2024-01-05T17:22:01Z,2024-01-05T17:23:33Z,CONTRIBUTOR,"To add some context to this work, we recently added null sanitization checks in #14559, and also started simplifying nulls checking in #13312. 

It's also worth mentioning that `purge_nonempty_null` has caused degenerate performance with copying columns with deeply nested structs (>16 levels). See #14363 for a patch that helped us avoid null sanitization for columns with no parent nulls. The performance observations are captured in issue #TBD.

We should continue to minimize the usage of `purge_nonempty_nulls`, as part of following our policy ""libcudf expects nested types to have sanitized null masks"" in the [developer guide](https://docs.rapids.ai/api/libcudf/stable/developer_guide)).",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1879015294/reactions,0,0,0,0,0,0,0,0,0,12567
1851,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577869658,https://github.com/rapidsai/cudf/issues/12568#issuecomment-1577869658,https://api.github.com/repos/rapidsai/cudf/issues/12568,1577869658,IC_kwDOBWUGps5eDGFa,2023-06-06T04:03:13Z,2023-06-06T04:03:41Z,CONTRIBUTOR,"I'm considering closing this as an issue where we do not want to match pandas.

We support these correctly:
`df.query(""(D > 5) & (E > 5)"")`, with parentheses
`df.query(""D > 5 and E > 5"")`, with ""and"" 
`df.query(""D > 5 & E > 5"")`, IMO should not be considered as valid...

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577869658/reactions,0,0,0,0,0,0,0,0,0,12568
1852,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118100823,https://github.com/rapidsai/cudf/issues/12568#issuecomment-2118100823,https://api.github.com/repos/rapidsai/cudf/issues/12568,2118100823,IC_kwDOBWUGps5-P6dX,2024-05-17T17:39:42Z,2024-05-17T17:39:42Z,CONTRIBUTOR,"This issue here is, I think, similar to [what we document for `eval`](https://github.com/rapidsai/cudf/blob/d10b8e4c9b437377cb6d231873e8f0fe9f8dc817/python/cudf/cudf/core/dataframe.py#L7684) where the meaning of the operators is type dependent. In this case, considering the following:
```
In [114]: np.bitwise_and(df[""D""], df[""E""])
Out[114]:
0    0
1    0
2    0
3    1
4    2
5    4
6    0
7    0
8    1
dtype: int64

In [115]: df.query(""(D & E) > 1"")
Out[115]:
     A    B      C  D  E
4  foo  two  small  3  6
5  bar  one  large  4  6
```
Here `&` is clearly being treated as a bitwise operator because the logical and would be empty (it can only return 0 or 1, so no rows would be >1). However, [Python operator precedence rules](https://docs.python.org/3/reference/expressions.html#operator-precedence) clearly state that `&` is higher precedence than `>`, which in turn is higher precedence than `and`. By that logic, 
```
df.query(""D > 5 & E > 5"")
```
Should be interpreted as
```
df.query(""D > (5 & E) > 5"")
```
which is obviously nonsensical. The only way to produce the observed pandas result is if this is being interpreted as 
```
df.query(""(D > 5) and (E > 5)"")
```
I would consider both this and the behavior of eval in this kind of situation to be bugs in pandas, which should treat these Python operators as they would be treated in pure Python code and follow the expected conventions.

@mroeschke WDYT?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118100823/reactions,0,0,0,0,0,0,0,0,0,12568
1853,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118358120,https://github.com/rapidsai/cudf/issues/12568#issuecomment-2118358120,https://api.github.com/repos/rapidsai/cudf/issues/12568,2118358120,IC_kwDOBWUGps5-Q5Ro,2024-05-17T20:42:41Z,2024-05-17T20:42:41Z,CONTRIBUTOR,"In the pandas docs, it does state that `eval` (which executes `query`) makes bitwise and boolean operators have the same precedence with it's default `""pandas""` engine. There does exist a `""python""` engine that should make these operators have the expected language precedence rules

https://pandas.pydata.org/docs/user_guide/enhancingperf.html#pandas-eval-parsers
https://pandas.pydata.org/docs/reference/api/pandas.eval.html#pandas.eval",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118358120/reactions,0,0,0,0,0,0,0,0,0,12568
1854,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121346530,https://github.com/rapidsai/cudf/issues/12568#issuecomment-2121346530,https://api.github.com/repos/rapidsai/cudf/issues/12568,2121346530,IC_kwDOBWUGps5-cS3i,2024-05-20T22:52:45Z,2024-05-20T22:52:45Z,CONTRIBUTOR,"Oh good call, I didn't consider the behavior of the different engines. This distinction is potentially problematic for cudf.pandas users. What we should consider doing is adding support for the engine keyword in cudf, but have the default value be ""python"" when using cudf directly and have it be ""pandas"" when cudf.pandas is active. We should raise an exception if the mode is anything other than ""python"". That way, cudf's default behavior is to match the python engine and it works out of the box, whereas with cudf.pandas (perhaps whenever the pandas-compatible option is set, depending on how we configure this; we could also monkey-patch) the default behavior is to use the nonexistent ""pandas"" engine, which triggers an exception and then falls back to pandas. That way users only get the speedup if they specify a python engine. It's a bit unfortunate since I imagine that most users don't specify an engine, but the only immediate alternative is giving users unexpected results. The other option is to actually implement the other semantics, of course, but I don't know if we can prioritize that anytime soon.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121346530/reactions,0,0,0,0,0,0,0,0,0,12568
1855,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397409775,https://github.com/rapidsai/cudf/issues/12582#issuecomment-1397409775,https://api.github.com/repos/rapidsai/cudf/issues/12582,1397409775,IC_kwDOBWUGps5TSsfv,2023-01-19T18:14:02Z,2023-01-19T18:14:02Z,CONTRIBUTOR,@galipremsagar this looks like a Python feature. Is anything needed from libcudf to implement this?,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397409775/reactions,0,0,0,0,0,0,0,0,0,12582
1856,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397416728,https://github.com/rapidsai/cudf/issues/12582#issuecomment-1397416728,https://api.github.com/repos/rapidsai/cudf/issues/12582,1397416728,IC_kwDOBWUGps5TSuMY,2023-01-19T18:19:50Z,2023-01-19T18:19:50Z,CONTRIBUTOR,"When header is not present, libcudf returns stringified integers as column names. The python layer may not know if the actual names are  integers string, or they are auto-generated. So, libcudf may have to indicate somehow that column names are not present in metadata. That might be the change required from libcudf (It could simply leave the metadata.schema_info empty?)",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397416728/reactions,1,1,0,0,0,0,0,0,0,12582
1857,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397424963,https://github.com/rapidsai/cudf/issues/12582#issuecomment-1397424963,https://api.github.com/repos/rapidsai/cudf/issues/12582,1397424963,IC_kwDOBWUGps5TSwND,2023-01-19T18:26:05Z,2023-01-19T18:26:05Z,CONTRIBUTOR,"> When header is not present, libcudf returns stringified integers as column names. The python layer may not know if the actual names are integers string, or they are auto-generated. So, libcudf may have to indicate somehow that column names are not present in metadata. That might be the change required from libcudf (It could simply leave the metadata.schema_info empty?)

+1",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1397424963/reactions,0,0,0,0,0,0,0,0,0,12582
1858,https://api.github.com/repos/rapidsai/cudf/issues/comments/1792476167,https://github.com/rapidsai/cudf/issues/12588#issuecomment-1792476167,https://api.github.com/repos/rapidsai/cudf/issues/12588,1792476167,IC_kwDOBWUGps5q1wQH,2023-11-03T13:52:12Z,2023-11-03T13:52:12Z,MEMBER,"A user hit this issue processing a Kaggle dataset. While it's not super common, it is supported in pandas (and Polars).",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1792476167/reactions,0,0,0,0,0,0,0,0,0,12588
1859,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401462766,https://github.com/rapidsai/cudf/issues/12593#issuecomment-1401462766,https://api.github.com/repos/rapidsai/cudf/issues/12593,1401462766,IC_kwDOBWUGps5TiJ_u,2023-01-24T06:46:55Z,2023-01-24T06:46:55Z,CONTRIBUTOR,"To be clear, I would expect the ""fast paths"" that you describe to largely be implemented as template specializations of the new comparators rather than leaving the old comparators in place. Much of the code should be reusable and that's the path we've been able to follow in other places e.g. #11129.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1401462766/reactions,1,1,0,0,0,0,0,0,0,12593
1860,https://api.github.com/repos/rapidsai/cudf/issues/comments/1418931893,https://github.com/rapidsai/cudf/issues/12608#issuecomment-1418931893,https://api.github.com/repos/rapidsai/cudf/issues/12608,1418931893,IC_kwDOBWUGps5Uky61,2023-02-06T11:27:43Z,2023-02-06T11:27:43Z,NONE,"Hi, brandon. I am interested in this part in cuDF, so I can give this a try in a few weeks.",,dlee992,8125675,MDQ6VXNlcjgxMjU2NzU=,https://avatars.githubusercontent.com/u/8125675?v=4,,https://api.github.com/users/dlee992,https://github.com/dlee992,https://api.github.com/users/dlee992/followers,https://api.github.com/users/dlee992/following{/other_user},https://api.github.com/users/dlee992/gists{/gist_id},https://api.github.com/users/dlee992/starred{/owner}{/repo},https://api.github.com/users/dlee992/subscriptions,https://api.github.com/users/dlee992/orgs,https://api.github.com/users/dlee992/repos,https://api.github.com/users/dlee992/events{/privacy},https://api.github.com/users/dlee992/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1418931893/reactions,3,0,0,0,0,0,3,0,0,12608
1861,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423214065,https://github.com/rapidsai/cudf/issues/12608#issuecomment-1423214065,https://api.github.com/repos/rapidsai/cudf/issues/12608,1423214065,IC_kwDOBWUGps5U1IXx,2023-02-08T20:41:44Z,2023-02-08T20:41:44Z,CONTRIBUTOR,"Hi @dlee992 , thanks so much for your interest in taking this on! I thought I'd share a little about how I'd approach this just to get you off the ground. 

The main tests I recommend trying to pass first would be [these ones which test simple reductions](https://github.com/rapidsai/cudf/blob/branch-23.04/python/cudf/cudf/tests/test_groupby.py#L403-L407). This test is parameterized based on a list of supported types we hardcode in `groupby_typing`. I tried adding `int32` locally and it looks like a lot works already when running the test:

```
error   : Undefined reference to 'BlockMin_int32' in '<cudapy-ptx>'
```

This hopefully means that adding a couple of lines around [here in the c++ library](https://github.com/rapidsai/cudf/blob/branch-23.04/python/cudf/udf_cpp/groupby/function.cu#L300) could pass a bunch of tests right off the bat if we're lucky :)

Happy to help at any time on the [RAPIDS goAI Slack](https://rapids-goai.slack.com/join/shared_invite/zt-trnsul8g-Sblci8dk6dIoEeGpoFcFOQ#/shared-invite/email) by the way, just ping me with any questions. Good luck!
",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423214065/reactions,0,0,0,0,0,0,0,0,0,12608
1862,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423543549,https://github.com/rapidsai/cudf/issues/12608#issuecomment-1423543549,https://api.github.com/repos/rapidsai/cudf/issues/12608,1423543549,IC_kwDOBWUGps5U2Yz9,2023-02-09T02:51:13Z,2023-02-09T06:48:46Z,NONE,"Thanks for your kindful comments! I have a little experience in Numba code, but I'm a newbie in cuDF and GPU testing. Anyway, since this is an interesting issue I think, I will give it a try as my side project.

In fact, I am now trying to get some GPU devices for local testing usage.

======

Updates: Got several GPU cards in an internal cluster.",,dlee992,8125675,MDQ6VXNlcjgxMjU2NzU=,https://avatars.githubusercontent.com/u/8125675?v=4,,https://api.github.com/users/dlee992,https://github.com/dlee992,https://api.github.com/users/dlee992/followers,https://api.github.com/users/dlee992/following{/other_user},https://api.github.com/users/dlee992/gists{/gist_id},https://api.github.com/users/dlee992/starred{/owner}{/repo},https://api.github.com/users/dlee992/subscriptions,https://api.github.com/users/dlee992/orgs,https://api.github.com/users/dlee992/repos,https://api.github.com/users/dlee992/events{/privacy},https://api.github.com/users/dlee992/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423543549/reactions,0,0,0,0,0,0,0,0,0,12608
1863,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117929411,https://github.com/rapidsai/cudf/issues/12608#issuecomment-2117929411,https://api.github.com/repos/rapidsai/cudf/issues/12608,2117929411,IC_kwDOBWUGps5-PQnD,2024-05-17T16:10:20Z,2024-05-17T16:11:01Z,CONTRIBUTOR,"@brandon-b-miller is this issue still valid? I see that this works now, for instance:
```
In [96]: cudf.DataFrame({
    ...:     ""a"": cudf.Series([1, 1, 2, 2, 3, 3], dtype=""float32""),
    ...:     ""b"": cudf.Series([2, 4, 0, 12, 30, 20], dtype=""float32""),
    ...: }).groupby(""a"").apply(
    ...:     lambda gp: gp['b'].sum(),
    ...:     engine=""jit"",
    ...: )
Out[96]:
a
1.0     6.0
2.0    12.0
3.0    50.0
dtype: float32
```

I'm going to close as resolved for the moment, but please reopen if I missed something.

Note that I'm only concerned with the numeric types mentioned above; I don't think this issue is the right place to track e.g. string or struct UDFs.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117929411/reactions,0,0,0,0,0,0,0,0,0,12608
1864,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117937364,https://github.com/rapidsai/cudf/issues/12608#issuecomment-2117937364,https://api.github.com/repos/rapidsai/cudf/issues/12608,2117937364,IC_kwDOBWUGps5-PSjU,2024-05-17T16:15:21Z,2024-05-17T16:15:31Z,CONTRIBUTOR,"I believe we only have definitions for 4 and 8 byte int and float types for now. It'd be useful if we had implementations for `int8`, `int16` types, etc. But IIRC the problem was missing features on the _cuda_ side. It might have been a lack of atomics for those widths. 

https://github.com/rapidsai/cudf/blob/branch-24.06/python/cudf/udf_cpp/shim.cu#L652",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117937364/reactions,0,0,0,0,0,0,0,0,0,12608
1865,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118180224,https://github.com/rapidsai/cudf/issues/12608#issuecomment-2118180224,https://api.github.com/repos/rapidsai/cudf/issues/12608,2118180224,IC_kwDOBWUGps5-QN2A,2024-05-17T18:36:38Z,2024-05-17T18:36:38Z,CONTRIBUTOR,"Ah OK. Perhaps we should keep this issue open for the moment, then.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118180224/reactions,1,1,0,0,0,0,0,0,0,12608
1866,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408032874,https://github.com/rapidsai/cudf/issues/12630#issuecomment-1408032874,https://api.github.com/repos/rapidsai/cudf/issues/12630,1408032874,IC_kwDOBWUGps5T7OBq,2023-01-30T05:47:29Z,2023-01-30T05:49:06Z,CONTRIBUTOR,"@taureandyernv I already build Documentation with current [23.02](https://github.com/rapidsai/cudf/tree/branch-23.02) it appear there is no problem. 

![image](https://user-images.githubusercontent.com/58826535/215397329-ad172d46-2674-4d70-a3bc-01bfe15bd5ac.png)

it seem problem come from somethings else.",,Touutae-lab,58826535,MDQ6VXNlcjU4ODI2NTM1,https://avatars.githubusercontent.com/u/58826535?v=4,,https://api.github.com/users/Touutae-lab,https://github.com/Touutae-lab,https://api.github.com/users/Touutae-lab/followers,https://api.github.com/users/Touutae-lab/following{/other_user},https://api.github.com/users/Touutae-lab/gists{/gist_id},https://api.github.com/users/Touutae-lab/starred{/owner}{/repo},https://api.github.com/users/Touutae-lab/subscriptions,https://api.github.com/users/Touutae-lab/orgs,https://api.github.com/users/Touutae-lab/repos,https://api.github.com/users/Touutae-lab/events{/privacy},https://api.github.com/users/Touutae-lab/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1408032874/reactions,0,0,0,0,0,0,0,0,0,12630
1867,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577882498,https://github.com/rapidsai/cudf/issues/12630#issuecomment-1577882498,https://api.github.com/repos/rapidsai/cudf/issues/12630,1577882498,IC_kwDOBWUGps5eDJOC,2023-06-06T04:22:56Z,2023-06-06T04:22:56Z,CONTRIBUTOR,@taureandyernv is this issue still needed?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577882498/reactions,0,0,0,0,0,0,0,0,0,12630
1868,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977292052,https://github.com/rapidsai/cudf/issues/12630#issuecomment-1977292052,https://api.github.com/repos/rapidsai/cudf/issues/12630,1977292052,IC_kwDOBWUGps512xUU,2024-03-04T19:19:49Z,2024-03-04T19:19:49Z,CONTRIBUTOR,"Yes, this is still appearing in the docs. Also reported in #14676.

I saw a similar issue reported in cupy. https://github.com/cupy/cupy/issues/6793",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977292052/reactions,0,0,0,0,0,0,0,0,0,12630
1869,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118109290,https://github.com/rapidsai/cudf/issues/12630#issuecomment-2118109290,https://api.github.com/repos/rapidsai/cudf/issues/12630,2118109290,IC_kwDOBWUGps5-P8hq,2024-05-17T17:46:18Z,2024-05-17T17:46:18Z,CONTRIBUTOR,I don't see this in the rendered docs anymore. I do see the cupy warning about jitify caching though.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118109290/reactions,0,0,0,0,0,0,0,0,0,12630
1870,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412646551,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1412646551,https://api.github.com/repos/rapidsai/cudf/issues/12667,1412646551,IC_kwDOBWUGps5UM0aX,2023-02-01T20:01:10Z,2023-02-01T20:01:10Z,CONTRIBUTOR,"Investigating this I found the problem is reported through `thrust::exclusive_scan` which is implemented using CUB's `Device::ExclusiveScan`. Exclusive-scan is a unique function where the last element is not processed. For example,

```
int data[6] = {1, 0, 2, 2, 1, 3};
thrust::exclusive_scan(data, data + 6, data); // in-place scan
// data is now {0, 1, 1, 3, 5, 6}

```
Note that the last element in `data` is not actually used. Any value can be there and it would not affect the result.
```
int data[6] = {1, 0, 2, 2, 1, X};
thrust::exclusive_scan(data, data + 6, data); // in-place scan
// data is now {0, 1, 1, 3, 5, 6}
```

The normal processing of strings APIs that return strings in libcudf is to do two passes. The 1st pass will compute the output sizes and is used to build the output chars column and offsets. The 2nd pass will fill in the chars column. The number of output offsets are usually known and so the output offsets column is created first. The 1st pass will place the sizes into this column temporarily. The sizes are usually only needed to build the offsets so there is normally no need to put the sizes into a separate temporary buffer/vector since the offsets can be computed directly in-place.

Although the number of output sizes is the same as the number of output rows, the offsets count is always +1 the number of output rows. The first element is 0 and the final element is the the total size in bytes. The exclusive-scan does this for us in a single step:

```
int output_rows = 5;
int offsets[] = {1, 2, 0, 2, 4, X};  // populated with sizes, the last entry is garbage
thrust::exclusive_scan(offsets, offsets + 6, offsets);
// offsets is now {0, 1, 3, 3, 5, 9}
```

Although the last element _may_ be read by thrust/CUB, it is never actually used. This is a limitation of the `initcheck` in `compute-sanitizer`. It only knows the uninitialized memory has been read, it has no idea that is not actually used in producing output. So I don't think we can reliably use `initcheck` to verify invalid usage of uninitialized data.

I would not recommend fixing this by artificially setting the last entry since it would impact the performance unnecessarily in the many, many places that this is used.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412646551/reactions,1,1,0,0,0,0,0,0,0,12667
1871,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412666850,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1412666850,https://api.github.com/repos/rapidsai/cudf/issues/12667,1412666850,IC_kwDOBWUGps5UM5Xi,2023-02-01T20:16:19Z,2023-02-01T20:16:19Z,CONTRIBUTOR,"Is this something we should take to the compute-sanitizer team?

I would have thought that a write to the final entry would not provoke an uninitialised read warning (it wouldn't in host code with valgrind I think)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412666850/reactions,0,0,0,0,0,0,0,0,0,12667
1872,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412688231,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1412688231,https://api.github.com/repos/rapidsai/cudf/issues/12667,1412688231,IC_kwDOBWUGps5UM-ln,2023-02-01T20:35:16Z,2023-02-01T20:35:16Z,CONTRIBUTOR,"> Is this something we should take to the compute-sanitizer team?

I doubt they can trace the read down to where it eventually is used/not-used -- at what level in the stack-trace does it actually get discarded. I'm guessing the values are block loaded into an array and then to a local register and then finally discarded. 

> I would have thought that a write to the final entry would not provoke an uninitialised read warning (it wouldn't in host code with valgrind I think)

I believe thrust/CUB is doing a read of all available data in some low-level utility probably common to both types of scans or other CUB functions. The fact the last value eventually is not used is specific to exclusive-scan. It may be worth opening an issue with thrust but I fear the solution would be non-performant checks.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412688231/reactions,0,0,0,0,0,0,0,0,0,12667
1873,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412713631,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1412713631,https://api.github.com/repos/rapidsai/cudf/issues/12667,1412713631,IC_kwDOBWUGps5UNEyf,2023-02-01T21:00:39Z,2023-02-01T21:00:39Z,CONTRIBUTOR,"In an ideal world (not saying this is in any way possible right now) this seems like a case where compute sanitizer would offer something like pragmas to allow code to say ""this block is going to include unsafe accesses, ignore them because it's actually OK"". I don't know that there's any other general fix, since IIUC effectively what is happening is that thrust is performing an unsafe access to potentially garbage data but it's OK because the value that is read will never be used.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1412713631/reactions,0,0,0,0,0,0,0,0,0,12667
1874,https://api.github.com/repos/rapidsai/cudf/issues/comments/1413566150,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1413566150,https://api.github.com/repos/rapidsai/cudf/issues/12667,1413566150,IC_kwDOBWUGps5UQU7G,2023-02-02T11:09:57Z,2023-02-02T11:09:57Z,CONTRIBUTOR,"> I believe thrust/CUB is doing a read of all available data in some low-level utility probably common to both types of scans or other CUB functions. The fact the last value eventually is not used is specific to exclusive-scan. It may be worth opening an issue with thrust but I fear the solution would be non-performant checks.

FWIW, I think the cudf usage here is UB (if we're going by thrust modelling std::algorithm). Since the first two arguments to `thrust::exclusive_scan` must model `InputIterator` which says that the full range of the iterator must be dereferencable. Since it is UB to read an uninitialised value, dereferencing the last entry in the input iterator is bad (since it _is_ uninitialised).

Arguably an `exclusive_scan` implementation doesn't need to dereference the last entry of the input iterator, but I can't see anything in the standard that requires that of an implementation.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1413566150/reactions,0,0,0,0,0,0,0,0,0,12667
1875,https://api.github.com/repos/rapidsai/cudf/issues/comments/1413850107,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1413850107,https://api.github.com/repos/rapidsai/cudf/issues/12667,1413850107,IC_kwDOBWUGps5URaP7,2023-02-02T14:41:02Z,2023-02-02T14:41:02Z,CONTRIBUTOR,"Related request to guarantee that the final entry of the input iterator is never read by CUB https://github.com/NVIDIA/cccl/issues/876

In terms of general uninitialized memory. Perhaps there should be a compile time option (off by default) for libcudf to zero-initialize device allocations (this is probably much harder than it sounds), to be used as a debugging tool.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1413850107/reactions,0,0,0,0,0,0,0,0,0,12667
1876,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423357895,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1423357895,https://api.github.com/repos/rapidsai/cudf/issues/12667,1423357895,IC_kwDOBWUGps5U1rfH,2023-02-08T23:09:12Z,2023-02-08T23:09:12Z,CONTRIBUTOR,"I agree, it seems like another case of technically UB but we're taking advantage of knowing the implementation detail that in practice this is safe. I doubt that that std::exclusive_scan standard will be modified to account for the desire to not read the final value, but I suppose thrust could promise that anyway. If there's a cub request then a thrust request also seems appropriate, @jrhemstad WDYT?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423357895/reactions,0,0,0,0,0,0,0,0,0,12667
1877,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423921552,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1423921552,https://api.github.com/repos/rapidsai/cudf/issues/12667,1423921552,IC_kwDOBWUGps5U31GQ,2023-02-09T09:59:39Z,2023-02-09T09:59:39Z,CONTRIBUTOR,"> technically UB but we're taking advantage of knowing the implementation detail that in practice this is safe.

Although this works right now, this is not how UB works. A sufficiently smart compiler™ will treat UB as an impossible situation, and is free to (for example) eliminate any code related to it. In this circumstance, that might be elimination of the call to `exclusive_scan` completely (admittedly the reasoning to get here is pretty convoluted, so I don't think it is very likely that this would occur, since the iteration bounds to the iterator that partially initialise the input to `exclusive_scan` are not compile-time known). So it would be a totally valid to erase any calls to `sizes_to_offsets` that occur in these contexts. Even if the implementation of `exclusive_scan` remains unchanged.

I agree with @davidwendt that running an extra kernel to memset the final entry in the allocated offsets array to zero is not the solution.

I would prefer to try and fix this in CUB, and ideally the C++ standard, though I don't know how amenable they'd be to changing the definition of exclusive_scan.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1423921552/reactions,1,0,0,1,0,0,0,0,0,12667
1878,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426289078,https://github.com/rapidsai/cudf/issues/12667#issuecomment-1426289078,https://api.github.com/repos/rapidsai/cudf/issues/12667,1426289078,IC_kwDOBWUGps5VA3G2,2023-02-10T20:14:04Z,2023-02-10T20:14:04Z,CONTRIBUTOR,"I mean, that's the definition of an implementation detail right? UB says an implementation can do whatever it wants. One of the options is to do something that we think is sensible. We know empirically that the code thrust produces is not being elided in the way you describe by the CUDA compiler, even though it could be. I'm not saying that we should rely on the current behavior, of course. We need thrust to promise not to read the last value, which in turn means we need cub to promise not to read the last value. If we can get that upstreamed to the C++ standard for `std::exclusive_scan`, that's even better.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1426289078/reactions,0,0,0,0,0,0,0,0,0,12667
1879,https://api.github.com/repos/rapidsai/cudf/issues/comments/1435001546,https://github.com/rapidsai/cudf/issues/12765#issuecomment-1435001546,https://api.github.com/repos/rapidsai/cudf/issues/12765,1435001546,IC_kwDOBWUGps5ViGLK,2023-02-17T17:34:14Z,2023-02-17T17:34:14Z,CONTRIBUTOR,"Copy-on-write looks to be the only matching option right now. Matching the intricacies of the pandas system is actually somewhat more complicated than just renaming, since they implement the nested dictionaries as attribute access on the the `pd.options` module.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1435001546/reactions,0,0,0,0,0,0,0,0,0,12765
1880,https://api.github.com/repos/rapidsai/cudf/issues/comments/1429946388,https://github.com/rapidsai/cudf/issues/12774#issuecomment-1429946388,https://api.github.com/repos/rapidsai/cudf/issues/12774,1429946388,IC_kwDOBWUGps5VO0AU,2023-02-14T15:36:42Z,2023-02-14T15:38:32Z,CONTRIBUTOR,"This is a duplicate of https://github.com/rapidsai/cudf/issues/12551 but this issue summarizes the problem well and has useful context / code snippets for validation. I believe the person who posted that diagnosed the reason for the slowness correctly:

> I think it calculates the whole window every time rather than just replacing the first and last elements of the moving window of 400000 elements, causing this delay whereas pandas does not do it that way.

We would need to investigate some kind of cooperative groups or consider the use of thrust/cub if appropriate (and not already used). I'm not sure how much of that we can combine with the JIT approaches to custom rolling aggregations.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1429946388/reactions,0,0,0,0,0,0,0,0,0,12774
1881,https://api.github.com/repos/rapidsai/cudf/issues/comments/1433423318,https://github.com/rapidsai/cudf/issues/12793#issuecomment-1433423318,https://api.github.com/repos/rapidsai/cudf/issues/12793,1433423318,IC_kwDOBWUGps5VcE3W,2023-02-16T17:09:08Z,2023-02-16T17:09:08Z,CONTRIBUTOR,Thank you for putting in the effort to collect these issues!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1433423318/reactions,0,0,0,0,0,0,0,0,0,12793
1882,https://api.github.com/repos/rapidsai/cudf/issues/comments/1629088286,https://github.com/rapidsai/cudf/issues/12793#issuecomment-1629088286,https://api.github.com/repos/rapidsai/cudf/issues/12793,1629088286,IC_kwDOBWUGps5hGeoe,2023-07-10T14:26:21Z,2023-07-10T14:26:21Z,CONTRIBUTOR,cc @mroeschke ,,mmccarty,625946,MDQ6VXNlcjYyNTk0Ng==,https://avatars.githubusercontent.com/u/625946?v=4,,https://api.github.com/users/mmccarty,https://github.com/mmccarty,https://api.github.com/users/mmccarty/followers,https://api.github.com/users/mmccarty/following{/other_user},https://api.github.com/users/mmccarty/gists{/gist_id},https://api.github.com/users/mmccarty/starred{/owner}{/repo},https://api.github.com/users/mmccarty/subscriptions,https://api.github.com/users/mmccarty/orgs,https://api.github.com/users/mmccarty/repos,https://api.github.com/users/mmccarty/events{/privacy},https://api.github.com/users/mmccarty/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1629088286/reactions,0,0,0,0,0,0,0,0,0,12793
1883,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109047922,https://github.com/rapidsai/cudf/issues/12793#issuecomment-2109047922,https://api.github.com/repos/rapidsai/cudf/issues/12793,2109047922,IC_kwDOBWUGps59tYRy,2024-05-14T00:24:26Z,2024-05-14T00:24:26Z,CONTRIBUTOR,"@wence- @mroeschke how many of these issues become moot once COW becomes the default behavior in pandas 3.0? If many, I think that is probably the better path for us to follow on those issues rather than trying to fix issues that we know are going away.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109047922/reactions,0,0,0,0,0,0,0,0,0,12793
1884,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109661598,https://github.com/rapidsai/cudf/issues/12793#issuecomment-2109661598,https://api.github.com/repos/rapidsai/cudf/issues/12793,2109661598,IC_kwDOBWUGps59vuGe,2024-05-14T09:02:31Z,2024-05-14T09:02:31Z,CONTRIBUTOR,"CoW unfortunately, I think, does not fix most of the issues here. They are mostly not to do with views vs copies. Most of them are that the desugaring step from the top-level syntax is not handled compatibly with pandas.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2109661598/reactions,0,0,0,0,0,0,0,0,0,12793
1885,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113621738,https://github.com/rapidsai/cudf/issues/12793#issuecomment-2113621738,https://api.github.com/repos/rapidsai/cudf/issues/12793,2113621738,IC_kwDOBWUGps59-07q,2024-05-15T23:03:19Z,2024-05-15T23:03:19Z,CONTRIBUTOR,"Sad, but not surprising. Just wanted to check since I did close a couple of related issues over the past week where COW definitely does fix them, but many others didn't look like they would be.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113621738/reactions,0,0,0,0,0,0,0,0,0,12793
1886,https://api.github.com/repos/rapidsai/cudf/issues/comments/1441521459,https://github.com/rapidsai/cudf/issues/12801#issuecomment-1441521459,https://api.github.com/repos/rapidsai/cudf/issues/12801,1441521459,IC_kwDOBWUGps5V698z,2023-02-23T10:29:17Z,2023-02-23T10:29:17Z,CONTRIBUTOR,Suspect this is morally similar to #12504. ,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1441521459/reactions,0,0,0,0,0,0,0,0,0,12801
1887,https://api.github.com/repos/rapidsai/cudf/issues/comments/1458878904,https://github.com/rapidsai/cudf/issues/12899#issuecomment-1458878904,https://api.github.com/repos/rapidsai/cudf/issues/12899,1458878904,IC_kwDOBWUGps5W9Lm4,2023-03-07T21:10:07Z,2023-03-07T21:10:07Z,CONTRIBUTOR,Unfortunately https://github.com/NVIDIA/cub/issues/297 is not in a released cub/thrust and we need to wait for a thrust release and cuDF to move to this new version. So this issue is currently blocked.,,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1458878904/reactions,0,0,0,0,0,0,0,0,0,12899
1888,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577262812,https://github.com/rapidsai/cudf/issues/12903#issuecomment-1577262812,https://api.github.com/repos/rapidsai/cudf/issues/12903,1577262812,IC_kwDOBWUGps5eAx7c,2023-06-05T18:21:50Z,2023-06-05T18:21:50Z,CONTRIBUTOR,"Thank you @kijeungchoi for raising this, we will look into updating the docs or adding this feature.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577262812/reactions,0,0,0,0,0,0,0,0,0,12903
1889,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474113309,https://github.com/rapidsai/cudf/issues/12917#issuecomment-1474113309,https://api.github.com/repos/rapidsai/cudf/issues/12917,1474113309,IC_kwDOBWUGps5X3S8d,2023-03-17T16:43:29Z,2023-03-17T16:43:29Z,CONTRIBUTOR,"Thank you @vaceslav for sharing this detailed performance comparison. The ""category"" type in cuDF is a relatively new feature, and part of the poor performance is that we haven't mapped any category functions to the underlying [libcudf dictionary type](https://github.com/rapidsai/cudf/tree/branch-23.04/cpp/src/dictionary). 

Would you please share a bit more about why categories are important to your work, rather than just using non-category string columns?

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1474113309/reactions,0,0,0,0,0,0,0,0,0,12917
1890,https://api.github.com/repos/rapidsai/cudf/issues/comments/1482623938,https://github.com/rapidsai/cudf/issues/12917#issuecomment-1482623938,https://api.github.com/repos/rapidsai/cudf/issues/12917,1482623938,IC_kwDOBWUGps5YXwvC,2023-03-24T11:03:54Z,2023-03-24T11:03:54Z,NONE,"Hello @GregoryKimball ,

to answer to your question ""why categories are important"" is easy: performance :-) 
That is why everyone of us use cuDF. It is more faster that pandas implementation. 

Here are key points:
- category consumes much less memory
- df column as category is much faster than string, because of internal structure. (at least in pandas)

In our business use case we have many DataFrames and need to calculate data on the fly. Means under 1 second per request.  In worst case we have 5_000_000 rows and  need to calculate some **groupby** + aggregate operations.
We are working with Geospatial data and some of our columns have [geohash](https://en.wikipedia.org/wiki/Geohash) value. There are more than 500_000 unique values per column.

If we use strings the amount of data is about 2.5 GB. That data needs to be transfered to the GPU. It takes about 2 seconds.
If we use categories the amount of data is about 250 MB. 

Because of slow performance in cuDF we made following workaround: We converted our strings to int64. 
Now amount of data is about 300-400 MB and the performance is good. 

But nevertheless it would be great to have good performance with categorical data. ",,vaceslav,24871,MDQ6VXNlcjI0ODcx,https://avatars.githubusercontent.com/u/24871?v=4,,https://api.github.com/users/vaceslav,https://github.com/vaceslav,https://api.github.com/users/vaceslav/followers,https://api.github.com/users/vaceslav/following{/other_user},https://api.github.com/users/vaceslav/gists{/gist_id},https://api.github.com/users/vaceslav/starred{/owner}{/repo},https://api.github.com/users/vaceslav/subscriptions,https://api.github.com/users/vaceslav/orgs,https://api.github.com/users/vaceslav/repos,https://api.github.com/users/vaceslav/events{/privacy},https://api.github.com/users/vaceslav/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1482623938/reactions,1,1,0,0,0,0,0,0,0,12917
1891,https://api.github.com/repos/rapidsai/cudf/issues/comments/1465516157,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1465516157,https://api.github.com/repos/rapidsai/cudf/issues/12926,1465516157,IC_kwDOBWUGps5XWgB9,2023-03-13T05:03:39Z,2023-03-13T05:03:39Z,CONTRIBUTOR,"Please share the environment details.

**Environment overview (please complete the following information)**
 - Environment location: [Bare-metal, Docker, Cloud(specify cloud provider)]
 - Method of cuDF install: [conda, Docker, or from source]
   - If method of install is [Docker], provide `docker pull` & `docker run` commands used

**Environment details**
Please run and paste the output of the `cudf/print_env.sh` script here, to gather any other relevant environment details
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1465516157/reactions,0,0,0,0,0,0,0,0,0,12926
1892,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466382705,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1466382705,https://api.github.com/repos/rapidsai/cudf/issues/12926,1466382705,IC_kwDOBWUGps5XZzlx,2023-03-13T15:37:27Z,2023-03-13T15:37:27Z,NONE,"Environment location: Docker.
Method of cuDF install: conda

output of  print_env.sh is attached. 
[env.txt](https://github.com/rapidsai/cudf/files/10959041/env.txt)

Same issue happens with 23.04 nightly too. 
",,mlahir1,24844705,MDQ6VXNlcjI0ODQ0NzA1,https://avatars.githubusercontent.com/u/24844705?v=4,,https://api.github.com/users/mlahir1,https://github.com/mlahir1,https://api.github.com/users/mlahir1/followers,https://api.github.com/users/mlahir1/following{/other_user},https://api.github.com/users/mlahir1/gists{/gist_id},https://api.github.com/users/mlahir1/starred{/owner}{/repo},https://api.github.com/users/mlahir1/subscriptions,https://api.github.com/users/mlahir1/orgs,https://api.github.com/users/mlahir1/repos,https://api.github.com/users/mlahir1/events{/privacy},https://api.github.com/users/mlahir1/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466382705/reactions,0,0,0,0,0,0,0,0,0,12926
1893,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466610363,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1466610363,https://api.github.com/repos/rapidsai/cudf/issues/12926,1466610363,IC_kwDOBWUGps5XarK7,2023-03-13T17:41:46Z,2023-03-13T17:41:46Z,CONTRIBUTOR,"is it your own dockerfile?

Try installing `tzdata` in your dockerfile
`apt-get install --reinstall tzdata`
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466610363/reactions,0,0,0,0,0,0,0,0,0,12926
1894,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466819661,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1466819661,https://api.github.com/repos/rapidsai/cudf/issues/12926,1466819661,IC_kwDOBWUGps5XbeRN,2023-03-13T19:26:02Z,2023-03-13T19:26:02Z,NONE,"reinstall tzdata fixed it, i will add that to the docker file.",,mlahir1,24844705,MDQ6VXNlcjI0ODQ0NzA1,https://avatars.githubusercontent.com/u/24844705?v=4,,https://api.github.com/users/mlahir1,https://github.com/mlahir1,https://api.github.com/users/mlahir1/followers,https://api.github.com/users/mlahir1/following{/other_user},https://api.github.com/users/mlahir1/gists{/gist_id},https://api.github.com/users/mlahir1/starred{/owner}{/repo},https://api.github.com/users/mlahir1/subscriptions,https://api.github.com/users/mlahir1/orgs,https://api.github.com/users/mlahir1/repos,https://api.github.com/users/mlahir1/events{/privacy},https://api.github.com/users/mlahir1/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466819661/reactions,1,1,0,0,0,0,0,0,0,12926
1895,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466828968,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1466828968,https://api.github.com/repos/rapidsai/cudf/issues/12926,1466828968,IC_kwDOBWUGps5Xbgio,2023-03-13T19:33:17Z,2023-03-13T19:33:17Z,CONTRIBUTOR,"Keeping this open to provide a method to use `tzdata` package installed via conda, in orc reader.

@vuule Right now, tzif_system_directory is hardcoded to `""/usr/share/zoneinfo/""` https://github.com/rapidsai/cudf/blob/276bcf4171c82101a12b3d2392802e4746d0d2e3/cpp/src/io/orc/timezone.cpp#L27  
 when cudf installed conda, `tzdata` package is installed but orc reader cannot access it now. Alternate path in conda is `$CONDA_PREFIX/share/zoneinfo`, it should be accessible by orc reader.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466828968/reactions,0,0,0,0,0,0,0,0,0,12926
1896,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466832324,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1466832324,https://api.github.com/repos/rapidsai/cudf/issues/12926,1466832324,IC_kwDOBWUGps5XbhXE,2023-03-13T19:36:08Z,2023-03-13T19:36:08Z,CONTRIBUTOR,"Understood.
Should we default to `/usr/share/zoneinfo/`, but fall back to `$CONDA_PREFIX/share/zoneinfo` if the default dir fails?",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466832324/reactions,0,0,0,0,0,0,0,0,0,12926
1897,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470173951,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1470173951,https://api.github.com/repos/rapidsai/cudf/issues/12926,1470173951,IC_kwDOBWUGps5XoRL_,2023-03-15T15:05:43Z,2023-03-15T15:05:43Z,CONTRIBUTOR,I'm guessing we'd want the reverse? We generally prefer conda files (libraries/headers/whatever) inside a conda environment to system files.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470173951/reactions,1,1,0,0,0,0,0,0,0,12926
1898,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470661960,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1470661960,https://api.github.com/repos/rapidsai/cudf/issues/12926,1470661960,IC_kwDOBWUGps5XqIVI,2023-03-15T19:16:52Z,2023-03-15T19:16:52Z,CONTRIBUTOR,Sounds good. I'll make the change after the refactor PR is merged.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470661960/reactions,0,0,0,0,0,0,0,0,0,12926
1899,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964903817,https://github.com/rapidsai/cudf/issues/12926#issuecomment-1964903817,https://api.github.com/repos/rapidsai/cudf/issues/12926,1964903817,IC_kwDOBWUGps51Hg2J,2024-02-26T18:47:24Z,2024-02-26T18:47:24Z,CONTRIBUTOR,I believe this is closed. @vuule please feel free to re-open if I'm mistaken.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964903817/reactions,0,0,0,0,0,0,0,0,0,12926
1900,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466973380,https://github.com/rapidsai/cudf/issues/12928#issuecomment-1466973380,https://api.github.com/repos/rapidsai/cudf/issues/12928,1466973380,IC_kwDOBWUGps5XcDzE,2023-03-13T21:16:08Z,2023-03-13T21:16:08Z,CONTRIBUTOR,"The resulting CuPy array would need to be F-contiguous, IIUC. Would that be alright?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466973380/reactions,0,0,0,0,0,0,0,0,0,12928
1901,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470386698,https://github.com/rapidsai/cudf/issues/12928#issuecomment-1470386698,https://api.github.com/repos/rapidsai/cudf/issues/12928,1470386698,IC_kwDOBWUGps5XpFIK,2023-03-15T16:46:11Z,2023-03-15T16:46:11Z,CONTRIBUTOR,"> The resulting CuPy array would need to be F-contiguous, IIUC. Would that be alright?

Yes, since cupy dot handles that fine.

The right answer here (since the `.T` is already expensive) is to do:
```
tmp = gdf.values
result = cudf.DataFrame(tmp.T.dot(tmp))
```
But that is certainly not as seamless",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470386698/reactions,0,0,0,0,0,0,0,0,0,12928
1902,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470582720,https://github.com/rapidsai/cudf/issues/12928#issuecomment-1470582720,https://api.github.com/repos/rapidsai/cudf/issues/12928,1470582720,IC_kwDOBWUGps5Xp0_A,2023-03-15T18:44:21Z,2023-03-15T18:44:21Z,MEMBER,"Agreed, F contiguousness would be fine. With that said, if we decide that a fastpath for this sceniaro has a non-trivial cost (in performance or complexity) associated with it and isn't worth the cost, that's also reasonable.

For completeness, when the user hit this originally they switched to CuPy to do the operations (like Lawrence suggested).",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470582720/reactions,0,0,0,0,0,0,0,0,0,12928
1903,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118170275,https://github.com/rapidsai/cudf/issues/12928#issuecomment-2118170275,https://api.github.com/repos/rapidsai/cudf/issues/12928,2118170275,IC_kwDOBWUGps5-QLaj,2024-05-17T18:29:19Z,2024-05-17T18:29:19Z,CONTRIBUTOR,Related: #11648 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118170275/reactions,0,0,0,0,0,0,0,0,0,12928
1904,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466589316,https://github.com/rapidsai/cudf/issues/12929#issuecomment-1466589316,https://api.github.com/repos/rapidsai/cudf/issues/12929,1466589316,IC_kwDOBWUGps5XamCE,2023-03-13T17:27:25Z,2023-03-13T17:27:37Z,CONTRIBUTOR,"Some parts of large code/algorithm, are available as detail APIs, but not as public APIs, and they could use some fundamental unit tests. These unit tests helps to build the top level public APIs without any errors, and also helps figuring out the errors easily when some tests fail.
Detail APIs are exposed in include/cudf/ headers, so, it is good to test them too, unless it's exactly identical to public APIs (except the stream parameter).",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466589316/reactions,0,0,0,0,0,0,0,0,0,12929
1905,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470151865,https://github.com/rapidsai/cudf/issues/12929#issuecomment-1470151865,https://api.github.com/repos/rapidsai/cudf/issues/12929,1470151865,IC_kwDOBWUGps5XoLy5,2023-03-15T14:52:27Z,2023-03-15T14:52:27Z,CONTRIBUTOR,"I agree, my original wording was probably a bit too strong. I don't necessarily think that we should remove _all_ tests of detail APIs, but we should be much more judicious about using them if tests of public APIs would be sufficient. Where possible, we should convert them to testing the corresponding public APIs (if one exists).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470151865/reactions,2,2,0,0,0,0,0,0,0,12929
1906,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466953177,https://github.com/rapidsai/cudf/issues/12935#issuecomment-1466953177,https://api.github.com/repos/rapidsai/cudf/issues/12935,1466953177,IC_kwDOBWUGps5Xb-3Z,2023-03-13T21:03:05Z,2023-03-13T21:03:05Z,CONTRIBUTOR,Perhaps related: https://github.com/rapidsai/cudf/pull/12882,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1466953177/reactions,0,0,0,0,0,0,0,0,0,12935
1907,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470352198,https://github.com/rapidsai/cudf/issues/12935#issuecomment-1470352198,https://api.github.com/repos/rapidsai/cudf/issues/12935,1470352198,IC_kwDOBWUGps5Xo8tG,2023-03-15T16:25:25Z,2023-03-15T16:25:25Z,CONTRIBUTOR,"Resampling is somewhat different, I _think_. One possible implementation might be to produce the grouped dataframe and then call `DataFrame.resample` on the whole thing (since I _think_ that the resampling commutes with grouping)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470352198/reactions,0,0,0,0,0,0,0,0,0,12935
1908,https://api.github.com/repos/rapidsai/cudf/issues/comments/1469971895,https://github.com/rapidsai/cudf/issues/12951#issuecomment-1469971895,https://api.github.com/repos/rapidsai/cudf/issues/12951,1469971895,IC_kwDOBWUGps5Xnf23,2023-03-15T13:04:03Z,2023-03-15T13:04:03Z,CONTRIBUTOR,"How many files? What filesystem? It seems like the globbing that `fsspec` does is a bit slower than `glob.glob` or `os.listdir`, but that doesn't make that much difference for me on a local filesystem with 50000 empty files.

I think this is all happening in the graph construction (since no work is being done yet) so can you run the client-side code under a profiler and post the output (e.g. `pyinstrument` for a sampling-based callgraph). Or even just interrupt the ""hung"" code and see where it is.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1469971895/reactions,0,0,0,0,0,0,0,0,0,12951
1909,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470396620,https://github.com/rapidsai/cudf/issues/12951#issuecomment-1470396620,https://api.github.com/repos/rapidsai/cudf/issues/12951,1470396620,IC_kwDOBWUGps5XpHjM,2023-03-15T16:51:28Z,2023-03-15T16:51:28Z,MEMBER,"So the graph creation is fine the reading is now working as well as directly using cuDF. 


### Using dask_cudf.read_json 
```python3
with performance_report(filename=""dask-report-read_json.html""):
    text_ddf = dask_cudf.read_json(f'{INPUT_PATH}/data/*',engine='cudf',lines=True)
    subset_ddf = text_ddf.partitions[:5_000]
    st = time.time()
    len_ddf = len(subset_ddf)
    et = time.time()
    print(f""Time taken in reading = {et-st} s"")
    print(len_ddf)
  ```
  
``` python3
Time taken in reading = 175.02658891677856 s
27206847
```


### Using cudf.read_json
[](url)
```python3
def read_json(paths):
    return cudf.read_json(paths,lines=True)

with performance_report(filename=""dask-report-read_with_glob.html""):
    paths = [entry.path for entry in os.scandir(f'{INPUT_PATH}/data')]
    text_ddf = dd.from_map(read_json,paths)
    subset_ddf = text_ddf.partitions[:5_000]
    st = time.time()
    len_ddf = len(subset_ddf)
    et = time.time()
    print(f""Time taken in reading = {et-st} s"")
    print(len_ddf)
```
```python3
Time taken in reading = 58.15872025489807 s
27458208
```



See Profiles here: https://gist.github.com/VibhuJawa/93e88e8f326546069f8abcb5f50deda6

",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470396620/reactions,0,0,0,0,0,0,0,0,0,12951
1910,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470406509,https://github.com/rapidsai/cudf/issues/12951#issuecomment-1470406509,https://api.github.com/repos/rapidsai/cudf/issues/12951,1470406509,IC_kwDOBWUGps5XpJ9t,2023-03-15T16:57:55Z,2023-03-15T16:57:55Z,CONTRIBUTOR,"So that really does look like fsspec is taking 60 or so seconds to open a bunch of filehandles.

Can you compare the time for:
```
text_ddf = dask_cudf.read_json(f'{INPUT_PATH}/data/*',engine='cudf',lines=True)
```

and
```
paths = [entry.path for entry in os.scandir(f'{INPUT_PATH}/data')]
text_ddf = dd.from_map(read_json,paths)
```
?

Would again be useful to know how many files you have.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470406509/reactions,0,0,0,0,0,0,0,0,0,12951
1911,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470553815,https://github.com/rapidsai/cudf/issues/12951#issuecomment-1470553815,https://api.github.com/repos/rapidsai/cudf/issues/12951,1470553815,IC_kwDOBWUGps5Xpt7X,2023-03-15T18:29:21Z,2023-03-15T18:29:21Z,MEMBER,"
>Comparison:
```python3
text_ddf = dask_cudf.read_json(f'{INPUT_PATH}/data/*',engine='cudf',lines=True)
```
```
CPU times: user 7.23 s, sys: 2.67 s, total: 9.9 s
Wall time: 12.1 s
```

```python3
def read_json(paths):
    return cudf.read_json(paths,lines=True)

paths = [entry.path for entry in os.scandir(f'{INPUT_PATH}/data')]
text_ddf = dd.from_map(read_json,paths)
```
```
CPU times: user 393 ms, sys: 213 ms, total: 606 ms
Wall time: 593 ms
```


>Would again be useful to know how many files you have.
```
print(len(paths))
60000
```
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1470553815/reactions,0,0,0,0,0,0,0,0,0,12951
1912,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581478603,https://github.com/rapidsai/cudf/issues/12951#issuecomment-1581478603,https://api.github.com/repos/rapidsai/cudf/issues/12951,1581478603,IC_kwDOBWUGps5eQ3LL,2023-06-07T20:41:26Z,2023-06-07T20:42:30Z,CONTRIBUTOR,"Seems like this could be related to https://github.com/rapidsai/cudf/issues/13246. Some suggestions from there were:
* setting environment variable LIBCUDF_CUFILE_POLICY=""OFF"". 
* increasing the DefaultLimitNOLIMIT of systemd to one million files ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581478603/reactions,0,0,0,0,0,0,0,0,0,12951
1913,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118168908,https://github.com/rapidsai/cudf/issues/12951#issuecomment-2118168908,https://api.github.com/repos/rapidsai/cudf/issues/12951,2118168908,IC_kwDOBWUGps5-QLFM,2024-05-17T18:28:14Z,2024-05-17T18:28:14Z,CONTRIBUTOR,"I still see a meaningful performance difference here, but not as drastic of one. Some of this behavior could be largely filesystem-dependent, so my numbers may not be directly comparable to @VibhuJawa's above, especially if the overhead is mostly coming from a filesystem library like fsspec, but running this script
```
import cudf
import dask_cudf
import json
import os
from tqdm import tqdm
import time

# Write 10000 copies of the same JSON file to a subdirectory
subdir = ""subdir""
os.makedirs(subdir, exist_ok=True)
for i in tqdm(range(60000)):
    with open(os.path.join(subdir, f""file_{i}.json""), ""w"") as f:
        json.dump({""key"": ""value""}, f)



start = time.time()
text_ddf = dask_cudf.read_json(os.path.join(subdir, ""*""), engine='cudf', lines=True)
print(""Time to read 60000 files with dask_cudf:"", time.time() - start)

start = time.time()
text_df = cudf.read_json(os.path.join(subdir, ""*""), lines=True)
print(""Time to read 60000 files with cudf:"", time.time() - start)
```

produces
```
(rapids) coder _ ~/cudf $ python test.py
100%|_____________________________________________________________________________________________________________________________________| 60000/60000 [00:05<00:00, 11487.66it/s]
Time to read 60000 files with dask_cudf: 20.821030139923096
Time to read 60000 files with cudf: 7.378933429718018
```

@VibhuJawa @wence- do you think there's some action we should be taking here based on these numbers?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118168908/reactions,0,0,0,0,0,0,0,0,0,12951
1914,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118433636,https://github.com/rapidsai/cudf/issues/12951#issuecomment-2118433636,https://api.github.com/repos/rapidsai/cudf/issues/12951,2118433636,IC_kwDOBWUGps5-RLtk,2024-05-17T22:04:20Z,2024-05-17T22:06:00Z,MEMBER,"> I still see a meaningful performance difference here

@vyasr , I think we forgot a `.compute` here, dask is lazy be default so here example is not really computing here. 

 I changed to `6_000` from  `60_000` (10x lower) , the delta on `6_000` files is still very significant and i think at 10x the files its only going to increase. 

```python3

import cudf
import dask_cudf
import json
import os
from tqdm import tqdm
import time

# Directory to write the JSON files
subdir = ""/raid/vjawa/test_dir""
os.makedirs(subdir, exist_ok=True)

# Write 6000 copies of the same JSON file to the subdirectory
for i in tqdm(range(6000)):
    with open(os.path.join(subdir, f""file_{i}.json""), ""w"") as f:
        json.dump({""key"": ""value""}, f)

# Measure time to read files with dask_cudf
start = time.time()
text_ddf = dask_cudf.read_json(os.path.join(subdir, ""*""), engine='cudf', lines=True).compute()
print(""Time to read 6000 files with dask_cudf:"", time.time() - start)

# Measure time to read files with cudf
start = time.time()
text_df = cudf.read_json(os.path.join(subdir, ""*""), lines=True)
print(""Time to read 6000 files with cudf:"", time.time() - start)

```

This produces: 

```
Time to read 6000 files with dask_cudf: 44.730552434921265
Time to read 6000 files with cudf: 0.32662487030029297
```

So we are still suffering from the problem. 

The workaround we have of using `dd.from_map(read_json,paths)` for Nemo-Curator can potentially cause problems on S3 based systems, cc: @ayushdg  to add more context here. 
",,VibhuJawa,4837571,MDQ6VXNlcjQ4Mzc1NzE=,https://avatars.githubusercontent.com/u/4837571?v=4,,https://api.github.com/users/VibhuJawa,https://github.com/VibhuJawa,https://api.github.com/users/VibhuJawa/followers,https://api.github.com/users/VibhuJawa/following{/other_user},https://api.github.com/users/VibhuJawa/gists{/gist_id},https://api.github.com/users/VibhuJawa/starred{/owner}{/repo},https://api.github.com/users/VibhuJawa/subscriptions,https://api.github.com/users/VibhuJawa/orgs,https://api.github.com/users/VibhuJawa/repos,https://api.github.com/users/VibhuJawa/events{/privacy},https://api.github.com/users/VibhuJawa/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118433636/reactions,0,0,0,0,0,0,0,0,0,12951
1915,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121347457,https://github.com/rapidsai/cudf/issues/12951#issuecomment-2121347457,https://api.github.com/repos/rapidsai/cudf/issues/12951,2121347457,IC_kwDOBWUGps5-cTGB,2024-05-20T22:53:51Z,2024-05-20T22:53:51Z,CONTRIBUTOR,"I thought I had computed, but that must have been on a different issue... lost track of things a bit during all the triaging I was doing last week. Thanks for the catch. I can reproduce this now by adding the compute call to make it hang.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121347457/reactions,0,0,0,0,0,0,0,0,0,12951
1916,https://api.github.com/repos/rapidsai/cudf/issues/comments/1605017292,https://github.com/rapidsai/cudf/issues/13024#issuecomment-1605017292,https://api.github.com/repos/rapidsai/cudf/issues/13024,1605017292,IC_kwDOBWUGps5fqp7M,2023-06-23T21:45:35Z,2023-06-23T21:45:35Z,CONTRIBUTOR,@nvdbaranec I'm curious if #13302 had any impact on the file used to generate the profile above.,,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1605017292/reactions,1,0,0,0,0,0,0,0,1,13024
1917,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949505542,https://github.com/rapidsai/cudf/issues/13024#issuecomment-1949505542,https://api.github.com/repos/rapidsai/cudf/issues/13024,1949505542,IC_kwDOBWUGps50MxgG,2024-02-17T00:03:09Z,2024-02-17T00:03:09Z,CONTRIBUTOR,@vuule recently conducted some experiments using an internal stream pool to hide latencies during column buffer allocation. Perhaps evaluating string types with larger column counts would show a bigger signal.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949505542/reactions,0,0,0,0,0,0,0,0,0,13024
1918,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581485697,https://github.com/rapidsai/cudf/issues/13032#issuecomment-1581485697,https://api.github.com/repos/rapidsai/cudf/issues/13032,1581485697,IC_kwDOBWUGps5eQ46B,2023-06-07T20:48:05Z,2023-06-07T20:48:05Z,CONTRIBUTOR,"Hello @ttnghia, thinking about the priority of this suggestion, do we have a way to estimate the performance impact of high nesting levels for the `cudf::experimental::decompose_structs` implementation?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581485697/reactions,0,0,0,0,0,0,0,0,0,13032
1919,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581492528,https://github.com/rapidsai/cudf/issues/13032#issuecomment-1581492528,https://api.github.com/repos/rapidsai/cudf/issues/13032,1581492528,IC_kwDOBWUGps5eQ6kw,2023-06-07T20:52:49Z,2023-06-07T20:52:49Z,CONTRIBUTOR,"> do we have a way to estimate the performance impact of high nesting levels for the cudf::experimental::decompose_structs implementation?

We can run a benchmark comparing sortings of two non-nullable tables:
1. A table with highly nested struct+list
2. A table resulted from calling `cudf::structs::detail::flatten_nested_columns` on the table above.

The second table is flattened from the first table so it will have all columns having at max 1 nested level.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581492528/reactions,0,0,0,0,0,0,0,0,0,13032
1920,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622583544,https://github.com/rapidsai/cudf/issues/13032#issuecomment-1622583544,https://api.github.com/repos/rapidsai/cudf/issues/13032,1622583544,IC_kwDOBWUGps5gtqj4,2023-07-05T21:58:11Z,2023-07-05T21:58:11Z,CONTRIBUTOR,"@divyegala and I discussed this idea today, and we would like to also monitor the impact to peak memory usage when experimenting with this idea.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1622583544/reactions,0,0,0,0,0,0,0,0,0,13032
1921,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491245570,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1491245570,https://api.github.com/repos/rapidsai/cudf/issues/13039,1491245570,IC_kwDOBWUGps5Y4poC,2023-03-31T03:44:23Z,2023-03-31T03:44:49Z,NONE,Team can you please take a look? This is currently a show stopper for me and I am literally freezed with GPU related development. Thanks a lot!,,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491245570/reactions,0,0,0,0,0,0,0,0,0,13039
1922,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491736604,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1491736604,https://api.github.com/repos/rapidsai/cudf/issues/13039,1491736604,IC_kwDOBWUGps5Y6hgc,2023-03-31T10:54:29Z,2023-03-31T10:54:29Z,NONE,"I've got a few more bug-like issues, I'll raise them here shortly. ",,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491736604/reactions,0,0,0,0,0,0,0,0,0,13039
1923,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491737840,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1491737840,https://api.github.com/repos/rapidsai/cudf/issues/13039,1491737840,IC_kwDOBWUGps5Y6hzw,2023-03-31T10:55:29Z,2023-03-31T10:55:29Z,NONE,"In the meanwhile if someone has got a good introduction/tutorial about cudf other than the one already posted like 10-minute series, please throw it in here.",,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1491737840/reactions,0,0,0,0,0,0,0,0,0,13039
1924,https://api.github.com/repos/rapidsai/cudf/issues/comments/1493055395,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1493055395,https://api.github.com/repos/rapidsai/cudf/issues/13039,1493055395,IC_kwDOBWUGps5Y_jej,2023-04-01T17:43:41Z,2023-04-01T17:43:41Z,NONE,"I've appended full error log below:

---------------------------------------------------------------------------
```
NotImplementedError                       Traceback (most recent call last)
File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask/backends.py:133, in CreationDispatch.register_inplace.<locals>.decorator.<locals>.wrapper(*args, **kwargs)
    132 try:
--> 133     return func(*args, **kwargs)
    134 except Exception as e:

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask/dataframe/io/parquet/core.py:530, in read_parquet(path, columns, filters, categories, index, storage_options, engine, use_nullable_dtypes, calculate_divisions, ignore_metadata_file, metadata_task_size, split_row_groups, chunksize, aggregate_files, parquet_file_extension, filesystem, **kwargs)
    528     index = [index]
--> 530 read_metadata_result = engine.read_metadata(
    531     fs,
    532     paths,
    533     categories=categories,
    534     index=index,
    535     use_nullable_dtypes=use_nullable_dtypes,
    536     gather_statistics=calculate_divisions,
    537     filters=filters,
    538     split_row_groups=split_row_groups,
    539     chunksize=chunksize,
    540     aggregate_files=aggregate_files,
    541     ignore_metadata_file=ignore_metadata_file,
    542     metadata_task_size=metadata_task_size,
    543     parquet_file_extension=parquet_file_extension,
    544     dataset=dataset_options,
    545     read=read_options,
    546     **other_options,
    547 )
    549 # In the future, we may want to give the engine the
    550 # option to return a dedicated element for `common_kwargs`.
    551 # However, to avoid breaking the API, we just embed this
    552 # data in the first element of `parts` for now.
    553 # The logic below is inteded to handle backward and forward
    554 # compatibility with a user-defined engine.

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/io/parquet.py:41, in CudfEngine.read_metadata(*args, **kwargs)
     39 if parts:
     40     # Re-set ""object"" dtypes align with pa schema
---> 41     set_object_dtypes_from_pa_schema(
     42         new_meta,
     43         parts[0].get(""common_kwargs"", {}).get(""schema"", None),
     44     )
     46 # If `strings_to_categorical==True`, convert objects to int32

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/io/parquet.py:403, in set_object_dtypes_from_pa_schema(df, schema)
    402     continue
--> 403 typ = cudf_dtype_from_pa_type(schema.field(col_name).type)
    404 if (
    405     col_name in schema.names
    406     and not isinstance(typ, (cudf.ListDtype, cudf.StructDtype))
    407     and isinstance(col, cudf.core.column.StringColumn)
    408 ):

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/cudf/utils/dtypes.py:231, in cudf_dtype_from_pa_type(typ)
    230 else:
--> 231     return cudf.api.types.pandas_dtype(typ.to_pandas_dtype())

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/pyarrow/types.pxi:220, in pyarrow.lib.DataType.to_pandas_dtype()

NotImplementedError: large_string

The above exception was the direct cause of the following exception:

NotImplementedError                       Traceback (most recent call last)
File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask/backends.py:133, in CreationDispatch.register_inplace.<locals>.decorator.<locals>.wrapper(*args, **kwargs)
    132 try:
--> 133     return func(*args, **kwargs)
    134 except Exception as e:

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/backends.py:497, in CudfBackendEntrypoint.read_parquet(engine, *args, **kwargs)
    495 from dask_cudf.io.parquet import CudfEngine
--> 497 return _default_backend(
    498     dd.read_parquet,
    499     *args,
    500     engine=CudfEngine,
    501     **kwargs,
    502 )

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/backends.py:446, in _default_backend(func, *args, **kwargs)
    445 with config.set({""dataframe.backend"": ""pandas""}):
--> 446     return func(*args, **kwargs)

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask/backends.py:135, in CreationDispatch.register_inplace.<locals>.decorator.<locals>.wrapper(*args, **kwargs)
    134 except Exception as e:
--> 135     raise type(e)(
    136         f""An error occurred while calling the {funcname(func)} ""
    137         f""method registered to the {self.backend} backend.\n""
    138         f""Original Message: {e}""
    139     ) from e

NotImplementedError: An error occurred while calling the read_parquet method registered to the pandas backend.
Original Message: large_string

The above exception was the direct cause of the following exception:

NotImplementedError                       Traceback (most recent call last)
Cell In[9], line 1
----> 1 dask_cudf.read_parquet('/home/demo/Live-usb-storage/projects/.share/data/test_cudf.parquet')

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/io/parquet.py:465, in read_parquet(path, columns, **kwargs)
    462         kwargs[""read""] = {}
    463     kwargs[""read""][""check_file_size""] = check_file_size
--> 465 return dd.read_parquet(path, columns=columns, engine=CudfEngine, **kwargs)

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask/backends.py:135, in CreationDispatch.register_inplace.<locals>.decorator.<locals>.wrapper(*args, **kwargs)
    133     return func(*args, **kwargs)
    134 except Exception as e:
--> 135     raise type(e)(
    136         f""An error occurred while calling the {funcname(func)} ""
    137         f""method registered to the {self.backend} backend.\n""
    138         f""Original Message: {e}""
    139     ) from e

NotImplementedError: An error occurred while calling the read_parquet method registered to the cudf backend.
Original Message: An error occurred while calling the read_parquet method registered to the pandas backend.
Original Message: large_string
```
",,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1493055395/reactions,0,0,0,0,0,0,0,0,0,13039
1925,https://api.github.com/repos/rapidsai/cudf/issues/comments/1493061714,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1493061714,https://api.github.com/repos/rapidsai/cudf/issues/13039,1493061714,IC_kwDOBWUGps5Y_lBS,2023-04-01T18:02:20Z,2023-04-02T06:22:55Z,NONE,"Reading the log, I found that `cudf` is converting `pyarrow` explicitly to `pandas` dtypes (before they become `cudf` dtypes); therefore I tried using `pandas` to write the same data to a parquet file. 

The pandas-written parquet file was successfully converted to a `dask_cudf` dataframe.

Here's the highlighted line of code in error log that did this:

```
File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/io/parquet.py:41, in CudfEngine.read_metadata(*args, **kwargs)
     39 if parts:
     40     # Re-set ""object"" dtypes align with pa schema
---> 41     **set_object_dtypes_from_pa_schema**(
     42         new_meta,
     43         parts[0].get(""common_kwargs"", {}).get(""schema"", None),
     44     )
     46 # If `strings_to_categorical==True`, convert objects to int32

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/dask_cudf/io/parquet.py:403, in set_object_dtypes_from_pa_schema(df, schema)
    402     continue
--> 403 typ = **cudf_dtype_from_pa_type(schema.field(col_name).type)**
    404 if (
    405     col_name in schema.names
    406     and not isinstance(typ, (cudf.ListDtype, cudf.StructDtype))
    407     and isinstance(col, cudf.core.column.StringColumn)
    408 ):

File ~/Live-usb-storage/projects/python/alpha/lib/python3.10/site-packages/cudf/utils/dtypes.py:231, in cudf_dtype_from_pa_type(typ)
    230 else:
--> 231     **return cudf.api.types.pandas_dtype(typ.to_pandas_dtype()**)
```

`parquet` is simply a data container, whoever writes `parquet` is going to write a `parquet`, after all. 

Until I found that when we write `parquet` using different library, the parquet file can be different! (The original `parquet` that failed was written by `polars`). 

By the way, `pandas` and `polars` both called `pa.write_table` for `parquet` creation. 

I am not sure whether this involves support for `polars` or we could replace `pandas` dtype conversion with a python dtypes conversion, but at the moment understanding only `parquet` from `pandas` is fairly limited.

Hope you guys can take a look, thanks a lot! 
",,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1493061714/reactions,0,0,0,0,0,0,0,0,0,13039
1926,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494429481,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1494429481,https://api.github.com/repos/rapidsai/cudf/issues/13039,1494429481,IC_kwDOBWUGps5ZEy8p,2023-04-03T14:26:39Z,2023-04-03T14:26:39Z,MEMBER,Thanks for raising @stucash - I'll take a look at this today to see how I can help.,,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494429481/reactions,0,0,0,0,0,0,0,0,0,13039
1927,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494520991,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1494520991,https://api.github.com/repos/rapidsai/cudf/issues/13039,1494520991,IC_kwDOBWUGps5ZFJSf,2023-04-03T15:17:57Z,2023-04-03T15:17:57Z,MEMBER,"@stucash - I cannot be 100% certain without having a complete write + read reproducer to run locally. However, it looks like your original dataset may contain extremely large row-groups. Unfortunately, until [very recently](https://github.com/apache/arrow/issues/34280) the default row-group size in PyArrow was 64Mi rows, which can sometimes result in string columns that cannot be read back by `cudf` (since `cudf` has a 2B character limit for an individual single string column; see: [cudf#3958](https://github.com/rapidsai/cudf/issues/3958)).

If the problem is that the row-groups are too large, you will need to rewrite the files with polars or pandas, passing through `row_group_size=<something-smaller>` to the pyarrow backend.

It may also be possible that your row-groups are within the cudf limit, but that pyarrow is choosing to use a [large_string](https://arrow.apache.org/docs/python/generated/pyarrow.large_string.html) when converting the dtype to pandas (note that cudf's read_parquet code currently leans on the arrow's native pandas logic to figure out what cudf dtypes to use). If I can get my hands on a reproducer for this, we can probably resolve the problem in cudf/dask-cudf.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494520991/reactions,0,0,0,0,0,0,0,0,0,13039
1928,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494543621,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1494543621,https://api.github.com/repos/rapidsai/cudf/issues/13039,1494543621,IC_kwDOBWUGps5ZFO0F,2023-04-03T15:32:45Z,2023-04-03T15:32:45Z,MEMBER,"> I tried using pandas to write the same data to a parquet file... The pandas-written parquet file was successfully converted to a dask_cudf dataframe.

Hmmm, this is interesting. I was expecting the same pyarrow issue to show up for a pandas-written parquet file as well (since both are presumably using arrow as the backend). Good to know.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494543621/reactions,0,0,0,0,0,0,0,0,0,13039
1929,https://api.github.com/repos/rapidsai/cudf/issues/comments/1495513611,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1495513611,https://api.github.com/repos/rapidsai/cudf/issues/13039,1495513611,IC_kwDOBWUGps5ZI7oL,2023-04-04T07:54:46Z,2023-04-04T07:54:46Z,NONE,"@rjzamora Thanks for taking the time to investigate;  

I've got 7 parquet files (1.5GB ish per file) originally from `polars`, all of which failed with `dask_cudf`, and once all were rewritten by `pandas` they could be read by `dask_cudf` in one go with no problem. 

Let me prepare a reproducer with data; in the meanwhile I'll try your suggestion of the `row_group_size` to `pyarrow` backend. ",,stucash,6358866,MDQ6VXNlcjYzNTg4NjY=,https://avatars.githubusercontent.com/u/6358866?v=4,,https://api.github.com/users/stucash,https://github.com/stucash,https://api.github.com/users/stucash/followers,https://api.github.com/users/stucash/following{/other_user},https://api.github.com/users/stucash/gists{/gist_id},https://api.github.com/users/stucash/starred{/owner}{/repo},https://api.github.com/users/stucash/subscriptions,https://api.github.com/users/stucash/orgs,https://api.github.com/users/stucash/repos,https://api.github.com/users/stucash/events{/privacy},https://api.github.com/users/stucash/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1495513611/reactions,0,0,0,0,0,0,0,0,0,13039
1930,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577275840,https://github.com/rapidsai/cudf/issues/13039#issuecomment-1577275840,https://api.github.com/repos/rapidsai/cudf/issues/13039,1577275840,IC_kwDOBWUGps5eA1HA,2023-06-05T18:33:33Z,2023-06-05T18:33:33Z,CONTRIBUTOR,Thank you @stucash for posting this. It also occurs to me that libcudf does not support the `large_string` type that we see in [pyarrow](https://arrow.apache.org/docs/python/generated/pyarrow.large_string.html). Have you tried converting your column to a `string` type instead of `long_string`?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577275840/reactions,0,0,0,0,0,0,0,0,0,13039
1931,https://api.github.com/repos/rapidsai/cudf/issues/comments/2133527661,https://github.com/rapidsai/cudf/issues/13039#issuecomment-2133527661,https://api.github.com/repos/rapidsai/cudf/issues/13039,2133527661,IC_kwDOBWUGps5_Kwxt,2024-05-27T13:49:42Z,2024-05-27T13:49:59Z,NONE,"I've been having this kind of issues using NVTabular that relies on cudf.
Everything smooth when dataframes were saved throught pandas.`to_parquet` function, but lot of problems when using Polars `.write_parquet`.

Given that pandas was not an option due to its slowness, I managed to save the polars dataframe through a manually crafted function that uses `pyarrow`.

This part simplifies the schema removing the  `pa.types.large_string`, `pa.types.large_list` in favor of their non_large counterpart.

```python

def pyarrow_simplified_schema(schema: pa.Schema) -> pa.Schema:
    """"""
    Convert LargeList<LargeString> fields to LargeList<String> in a PyArrow schema.

    Parameters
    ----------
    schema : pa.Schema
        The original schema of the PyArrow Table.

    Returns
    -------
    pa.Schema
        A new schema where all LargeList<LargeString> fields are converted to LargeList<String>.
    """"""
    fields = []
    for field in schema:
        if pa.types.is_float64(field.type):
            warn(
                f""NVTabular does not support double precision, downcasting {field.name} to float32""
            )
            fields.append(pa.field(field.name, pa.float32()))
        elif pa.types.is_large_list(field.type) or pa.types.is_list(field.type):
            if pa.types.is_large_string(field.type.value_type):
                fields.append(pa.field(field.name, pa.list_(pa.string())))
            elif pa.types.is_float64(field.type.value_type):
                warn(
                    f""NVTabular does not support double precision, downcasting {field.name} to float32""
                )
                fields.append(pa.field(field.name, pa.list_(pa.float32())))
            else:
                # passthrough on other types
                fields.append(pa.field(field.name, pa.list_(field.type.value_type)))
        elif pa.types.is_large_string(field.type):
            fields.append(pa.field(field.name, pa.string()))
        else:
            # passthrough on other types
            fields.append(field)
    return pa.schema(fields)
```

After this I was able to load everything correctly using the cudf implementation of NVTabular.",,CarloNicolini,1758847,MDQ6VXNlcjE3NTg4NDc=,https://avatars.githubusercontent.com/u/1758847?v=4,,https://api.github.com/users/CarloNicolini,https://github.com/CarloNicolini,https://api.github.com/users/CarloNicolini/followers,https://api.github.com/users/CarloNicolini/following{/other_user},https://api.github.com/users/CarloNicolini/gists{/gist_id},https://api.github.com/users/CarloNicolini/starred{/owner}{/repo},https://api.github.com/users/CarloNicolini/subscriptions,https://api.github.com/users/CarloNicolini/orgs,https://api.github.com/users/CarloNicolini/repos,https://api.github.com/users/CarloNicolini/events{/privacy},https://api.github.com/users/CarloNicolini/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2133527661/reactions,0,0,0,0,0,0,0,0,0,13039
1932,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577279573,https://github.com/rapidsai/cudf/issues/13040#issuecomment-1577279573,https://api.github.com/repos/rapidsai/cudf/issues/13040,1577279573,IC_kwDOBWUGps5eA2BV,2023-06-05T18:36:15Z,2023-06-05T18:36:15Z,CONTRIBUTOR,Thank you @stucash for your message. Are you able to transform your string/datetime columns appropriately in cuDf-python? Or is the problem only at the `dask_cudf` layer?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577279573/reactions,0,0,0,0,0,0,0,0,0,13040
1933,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494790921,https://github.com/rapidsai/cudf/issues/13045#issuecomment-1494790921,https://api.github.com/repos/rapidsai/cudf/issues/13045,1494790921,IC_kwDOBWUGps5ZGLMJ,2023-04-03T18:32:45Z,2023-04-03T18:34:04Z,CONTRIBUTOR,"We currently raise an error for our `DataFrame.__array__` implementation, should we be doing the same for `__array_function__` too? or give this an exception to have an implementation on our end?  cc: @shwina ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494790921/reactions,0,0,0,0,0,0,0,0,0,13045
1934,https://api.github.com/repos/rapidsai/cudf/issues/comments/1496582027,https://github.com/rapidsai/cudf/issues/13045#issuecomment-1496582027,https://api.github.com/repos/rapidsai/cudf/issues/13045,1496582027,IC_kwDOBWUGps5ZNAeL,2023-04-04T20:43:58Z,2023-04-04T20:43:58Z,CONTRIBUTOR,"A similar question too for `__array_ufunc__`

```
In [3]: cudf.DataFrame(np.eye(2)) * np.eye(2)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[3], line 1
----> 1 cudf.DataFrame(np.eye(2)) * np.eye(2)

TypeError: operand type(s) all returned NotImplemented from __array_ufunc__(<ufunc 'multiply'>, '__call__',      0    1
0  1.0  0.0
1  0.0  1.0, array([[1., 0.],
       [0., 1.]])): 'DataFrame', 'ndarray'

In [4]: import pandas as pd

In [5]: pd.DataFrame(np.eye(2)) * np.eye(2)
Out[5]: 
     0    1
0  1.0  0.0
1  0.0  1.0
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1496582027/reactions,0,0,0,0,0,0,0,0,0,13045
1935,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500736672,https://github.com/rapidsai/cudf/issues/13045#issuecomment-1500736672,https://api.github.com/repos/rapidsai/cudf/issues/13045,1500736672,IC_kwDOBWUGps5Zc2yg,2023-04-08T00:14:42Z,2023-04-08T00:14:42Z,CONTRIBUTOR,"No, we should not raise by default. However, we probably want a smarter dispatch pattern here.

The problem with `__array__` is that it provides an implicit conversion pathway from device data to host data. That means that a cudf object could be passed to some other library that accesses this attribute and triggers an implicit conversion to host memory. That's an easy performance footgun to eliminate.

`__array_ufunc__` and `__array_function__` are different since they are dispatch pathways for functions. If possible, we should support them. ufuncs are easier since they are [enumerated by numpy](https://numpy.org/doc/stable/reference/ufuncs.html#available-ufuncs). The set of functions supported by the [`__array_function__` protocol](https://numpy.org/doc/stable/reference/arrays.classes.html#numpy.class.__array_function__), on the other hand, is not. Ideally, our implementation is designed to try to run the function in a way that we know, and fail if no such way is found, and that is what we want.

The two errors above indicate to me that we may want to clean up our failure pathways, though. I'm not sure what errors look like for a given object that is supposed to support these protocols if they don't support a particular ufunc/array func, but we should endeavor to match that. The easiest way to test is probably to define a trivial array-like object with those attribute and see what the expected traceback is. Alternatively the specs for those protocols should indicate exactly what should be done. We may be returning `NotImplemented` somewhere that we should be doing something else, or accessing `__array_ufunc__` directly without the necessary error checking that numpy does internally when it accesses that attribute.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500736672/reactions,0,0,0,0,0,0,0,0,0,13045
1936,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494765258,https://github.com/rapidsai/cudf/issues/13048#issuecomment-1494765258,https://api.github.com/repos/rapidsai/cudf/issues/13048,1494765258,IC_kwDOBWUGps5ZGE7K,2023-04-03T18:13:04Z,2023-04-03T18:14:02Z,CONTRIBUTOR,"This is a great use of a ""Story"" issue for documenting this work. I have some very high level comments / ideas:

- Some of these algorithms might benefit from using [Cooperative Groups](https://developer.nvidia.com/blog/cooperative-groups/) and/or studying implementations of related algorithms in CUB.
- For some of these cases, I suspect that ""prefix strings"" as described in the [Velox paper](https://vldb.org/pvldb/vol15/p3372-pedreira.pdf) could be useful. That would use a (non-Arrow) layout with a fixed-width prefix that could be computed as a temporary column used to quickly eliminate possible matches. Filtering and ordering are specifically called out in that paper.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1494765258/reactions,2,2,0,0,0,0,0,0,0,13048
1937,https://api.github.com/repos/rapidsai/cudf/issues/comments/1507872992,https://github.com/rapidsai/cudf/issues/13048#issuecomment-1507872992,https://api.github.com/repos/rapidsai/cudf/issues/13048,1507872992,IC_kwDOBWUGps5Z4FDg,2023-04-14T03:18:53Z,2023-04-14T03:18:53Z,CONTRIBUTOR,"After studying the results of the strings microbenchmarks in libcudf, I'd like to share some results and early thoughts on the performance we should target with long strings. 

First, here is data throughput versus data size for the `split_record` API. It shows about 15-35 GB/s throughput at the ~100 MB data size for string lengths between 32 and 8192 bytes.
<img width=""899"" alt=""image"" src=""https://user-images.githubusercontent.com/12725111/231931798-1fef4e13-00f0-43ad-8963-904df29e73c7.png"">

Next, here is the same plot for `filter_characters_of_type`. It shows 20 GB/s throughput for ~100 MB data size and strings lengths <100 bytes. For longer strings the throughput falls to the 1-6 GB/s range.
<img width=""906"" alt=""image"" src=""https://user-images.githubusercontent.com/12725111/231932289-9f85f3cd-8c89-42ea-a7e9-88368da538d5.png"">

So perhaps we should target data throughputs for long strings to be better than 80% of data throughput for short strings.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1507872992/reactions,0,0,0,0,0,0,0,0,0,13048
1938,https://api.github.com/repos/rapidsai/cudf/issues/comments/1692268017,https://github.com/rapidsai/cudf/issues/13048#issuecomment-1692268017,https://api.github.com/repos/rapidsai/cudf/issues/13048,1692268017,IC_kwDOBWUGps5k3fXx,2023-08-24T19:12:38Z,2023-08-24T19:12:38Z,CONTRIBUTOR,"Hello @davidwendt, I was discussing this issue with @elstehle. Do you think the ""combining"" or ""copying"" strings algorithms could benefit from [DeviceBatchMemcpy](https://github.com/NVIDIA/cub/pull/359)?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1692268017/reactions,0,0,0,0,0,0,0,0,0,13048
1939,https://api.github.com/repos/rapidsai/cudf/issues/comments/1697875214,https://github.com/rapidsai/cudf/issues/13048#issuecomment-1697875214,https://api.github.com/repos/rapidsai/cudf/issues/13048,1697875214,IC_kwDOBWUGps5lM4UO,2023-08-29T17:39:50Z,2023-08-29T17:39:50Z,CONTRIBUTOR,"> Hello @davidwendt, I was discussing this issue with @elstehle. Do you think the ""combining"" or ""copying"" strings algorithms could benefit from [DeviceBatchMemcpy](https://github.com/NVIDIA/cub/pull/359)?

There are several parts of the strings (and nvtext) API implementations that basically resolve into a fragmented set of (pointer,size) pairs which are passed to a factory that performs an optimized gather function to build a contiguous byte array for an output strings column. So a significant impact here may be to improve that gather function by taking advantage of `DeviceBatchMemcpy` perhaps.

The factory function that uses the gather is illustrated in my blog post which use the custom kernel here: https://github.com/rapidsai/cudf/blob/cd56cc2b4cc47a1d0c63e56fac945a66905c28df/cpp/examples/strings/custom_prealloc.cu#L118

I'll locate other places that libcudf uses this factory function that also include benchmarks.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1697875214/reactions,1,0,0,0,0,0,1,0,0,13048
1940,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030317551,https://github.com/rapidsai/cudf/issues/13048#issuecomment-2030317551,https://api.github.com/repos/rapidsai/cudf/issues/13048,2030317551,IC_kwDOBWUGps55BC_v,2024-04-01T18:33:59Z,2024-04-01T18:33:59Z,CONTRIBUTOR,Spark-RAPIDS identified long strings performance issues in `find` (#15405) as well as `upper`/`lower` (#15406),,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030317551/reactions,0,0,0,0,0,0,0,0,0,13048
1941,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526081324,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1526081324,https://api.github.com/repos/rapidsai/cudf/issues/13059,1526081324,IC_kwDOBWUGps5a9ics,2023-04-27T17:37:05Z,2023-04-27T17:37:05Z,CONTRIBUTOR,"This is a consequence of cudf's `DataFrame.all` method not handling an `axis=None` keyword argument correctly. Most pandas reductions like this support `axis=0` or `axis=1` (for reducing over rows or columns) and use `axis=None` as a default which gets converted to `axis=0`.

However, `all` (and `any`) support `axis=None` to mean reducing over both rows _and_ columns. Right now cudf does not handle this distinction correctly.

I don't know if other reductions also support `axis=None` to mean reduce to scalar.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526081324/reactions,0,0,0,0,0,0,0,0,0,13059
1942,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526268342,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1526268342,https://api.github.com/repos/rapidsai/cudf/issues/13059,1526268342,IC_kwDOBWUGps5a-QG2,2023-04-27T19:38:11Z,2023-04-27T19:38:53Z,CONTRIBUTOR,"I couldn't find a way to do `np.sum(df, ...)` and have it reduce over all axes (even for a Pandas DataFrame):

```python
>>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]})
>>>  np.sum(df, axis=None)  # defaults to 0
>>>  np.sum(df, axis=(0, 1))  # ValueError
>>> np.sum(df.values, axis=None)   # works for arrays
8
>>> np.sum(df.values, axis=(0, 1))
8
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526268342/reactions,0,0,0,0,0,0,0,0,0,13059
1943,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527550896,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527550896,https://api.github.com/repos/rapidsai/cudf/issues/13059,1527550896,IC_kwDOBWUGps5bDJOw,2023-04-28T13:17:20Z,2023-04-28T13:17:20Z,CONTRIBUTOR,"As of pandas 2, `axis=None` means ""both rows and columns"" for reductions over dataframes (see https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html#pandas-dataframe-sum)

So we can fix this en-masse as part of the pandas-2 changes?",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527550896/reactions,0,0,0,0,0,0,0,0,0,13059
1944,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527564102,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527564102,https://api.github.com/repos/rapidsai/cudf/issues/13059,1527564102,IC_kwDOBWUGps5bDMdG,2023-04-28T13:27:19Z,2023-04-28T13:27:40Z,CONTRIBUTOR,"Argh, but not all reductions, so `axis=None` as a default means different things depending on what type of reduction one is doing (e.g. `df.sum(axis=None)` returns [a scalar](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html), but `df.var(axis=None)` returns [a series](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.var.html))",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527564102/reactions,0,0,0,0,0,0,0,0,0,13059
1945,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527573475,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527573475,https://api.github.com/repos/rapidsai/cudf/issues/13059,1527573475,IC_kwDOBWUGps5bDOvj,2023-04-28T13:34:47Z,2023-04-28T13:37:20Z,CONTRIBUTOR,"Ah, but that [appears to be an oversight](https://github.com/pandas-dev/pandas/issues/21597). FWIW, this is a subset of the enhancement request in #12335.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527573475/reactions,0,0,0,0,0,0,0,0,0,13059
1946,https://api.github.com/repos/rapidsai/cudf/issues/comments/1530663919,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1530663919,https://api.github.com/repos/rapidsai/cudf/issues/13059,1530663919,IC_kwDOBWUGps5bPBPv,2023-05-02T00:23:08Z,2023-05-02T00:23:08Z,CONTRIBUTOR,"Sorry just getting caught up after a few days deep in the weeds of some other work. Yes, this is something we can fix once we switch over to pandas 2.0 compatibility. Unless something has changed since I last looked, we will still need to support the axis keyword, but the default behavior will be a reduction over all axes. Note that `np.all` supports providing multiple axes i.e. `np.all(..., axis=(1, 2))`. Obviously for a DataFrame the only valid multiple would be `(0, 1)`, but it would be good verify whether pandas 2 aliases that to `None` (i.e. all axes) and if so mimic that behavior.

We can probably close this issue as a dup of https://github.com/rapidsai/cudf/issues/12335. ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1530663919/reactions,0,0,0,0,0,0,0,0,0,13059
1947,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531095193,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1531095193,https://api.github.com/repos/rapidsai/cudf/issues/13059,1531095193,IC_kwDOBWUGps5bQqiZ,2023-05-02T08:42:44Z,2023-05-02T08:42:44Z,CONTRIBUTOR,"> Obviously for a DataFrame the only valid multiple would be `(0, 1)`, but it would be good verify whether pandas 2 aliases that to `None` (i.e. all axes) and if so mimic that behavior.

```python
import pandas as pd
import numpy as np

print(pd.__version__) # => 2.1.0.dev0+683.g56537f4490
df = pd.DataFrame(np.zeros((3, 3)))
np.all(df, axis=None) # => False
np.all(df, axis=(0, 1)) # => ValueError No axis named (0, 1) for object type DataFrame
```

Which is what we have right now in cudf.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531095193/reactions,0,0,0,0,0,0,0,0,0,13059
1948,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532309999,https://github.com/rapidsai/cudf/issues/13059#issuecomment-1532309999,https://api.github.com/repos/rapidsai/cudf/issues/13059,1532309999,IC_kwDOBWUGps5bVTHv,2023-05-03T00:26:15Z,2023-05-03T00:26:15Z,CONTRIBUTOR,"OK good that helps, so we only need to address the `None` case. ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1532309999/reactions,0,0,0,0,0,0,0,0,0,13059
1949,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500488210,https://github.com/rapidsai/cudf/issues/13087#issuecomment-1500488210,https://api.github.com/repos/rapidsai/cudf/issues/13087,1500488210,IC_kwDOBWUGps5Zb6IS,2023-04-07T17:28:08Z,2023-04-07T17:28:08Z,NONE,"From Slack: There's thinking of starting at the level of pylibcudf cpython bindings layer 

I can imagine there may be some worthwhile cudf internals that can be the first consumer of such things. Ex: Maybe some cuml kernels, or `df.str.xyz` df-level ones like hashing.",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1500488210/reactions,0,0,0,0,0,0,0,0,0,13087
1950,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577282854,https://github.com/rapidsai/cudf/issues/13087#issuecomment-1577282854,https://api.github.com/repos/rapidsai/cudf/issues/13087,1577282854,IC_kwDOBWUGps5eA20m,2023-06-05T18:39:26Z,2023-06-06T05:57:23Z,CONTRIBUTOR,"Thank you @lmeyerov for raising this, and thank you for joining into the Slack discussion. 

Here are some points from the discussion:
* RAPIDS is working on a new `pylibcudf` API that has low-level bindings to libcudf and will enable CUDA stream control. We expect that the appropriate usage pattern of streams in Python could accelerate your high-column-count transformations, even if it's not host-async
* `asyncio` is associated with [high overhead](https://rapids-goai.slack.com/archives/C5E06F4DC/p1681368614519629?thread_ts=1680710488.795869&cid=C5E06F4DC) for short-running tasks, and most column transformations are likely to be small tasks 
* When CUDA streams are exposed in the python API, users will be able to write their own [asyncio coroutines](https://rapids-goai.slack.com/archives/C5E06F4DC/p1681372363833429?thread_ts=1680710488.795869&cid=C5E06F4DC).",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577282854/reactions,0,0,0,0,0,0,0,0,0,13087
1951,https://api.github.com/repos/rapidsai/cudf/issues/comments/1579504086,https://github.com/rapidsai/cudf/issues/13087#issuecomment-1579504086,https://api.github.com/repos/rapidsai/cudf/issues/13087,1579504086,IC_kwDOBWUGps5eJVHW,2023-06-06T21:59:22Z,2023-06-06T21:59:22Z,NONE,"Yes, that'll be interesting to us wrt some of the hot loops in https://github.com/graphistry/cu-cat: parallel per-column tasks, some sparse matrix math, ...",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1579504086/reactions,0,0,0,0,0,0,0,0,0,13087
1952,https://api.github.com/repos/rapidsai/cudf/issues/comments/1511846090,https://github.com/rapidsai/cudf/issues/13154#issuecomment-1511846090,https://api.github.com/repos/rapidsai/cudf/issues/13154,1511846090,IC_kwDOBWUGps5aHPDK,2023-04-17T18:03:18Z,2023-04-17T18:03:18Z,CONTRIBUTOR,CC @davidwendt.,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1511846090/reactions,0,0,0,0,0,0,0,0,0,13154
1953,https://api.github.com/repos/rapidsai/cudf/issues/comments/1512063880,https://github.com/rapidsai/cudf/issues/13157#issuecomment-1512063880,https://api.github.com/repos/rapidsai/cudf/issues/13157,1512063880,IC_kwDOBWUGps5aIEOI,2023-04-17T20:46:50Z,2023-04-17T20:46:50Z,MEMBER,cc @sleeepyjack,,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1512063880/reactions,0,0,0,0,0,0,0,0,0,13157
1954,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553922778,https://github.com/rapidsai/cudf/issues/13157#issuecomment-1553922778,https://api.github.com/repos/rapidsai/cudf/issues/13157,1553922778,IC_kwDOBWUGps5cnvra,2023-05-19T02:38:42Z,2023-05-19T02:40:32Z,CONTRIBUTOR,"@PointKernel Let's discuss this -- I'm targeting #11656 for 23.06 and it also affects downstream work like #13244. I am surprised that the new cuco work would eliminate the need for a stable/unstable path here. The stability is with respect to key collection, not key insertion (that's controlled by ""keep"" behavior). Can you give more context about the ordering of the keys that are used to gather distinct results?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553922778/reactions,0,0,0,0,0,0,0,0,0,13157
1955,https://api.github.com/repos/rapidsai/cudf/issues/comments/1816140875,https://github.com/rapidsai/cudf/issues/13157#issuecomment-1816140875,https://api.github.com/repos/rapidsai/cudf/issues/13157,1816140875,IC_kwDOBWUGps5sQBxL,2023-11-17T10:45:41Z,2023-11-17T10:45:41Z,CONTRIBUTOR,"> @PointKernel Let's discuss this -- I'm targeting #11656 for 23.06 and it also affects downstream work like #13244. I am surprised that the new cuco work would eliminate the need for a stable/unstable path here. The stability is with respect to key collection, not key insertion (that's controlled by ""keep"" behavior). Can you give more context about the ordering of the keys that are used to gather distinct results?

The current `stable_distinct` implementation would still be needed I think. This approach using the proposed cuco `insert_or_apply` interface in https://github.com/NVIDIA/cuCollections/pull/384 (which supersedes https://github.com/NVIDIA/cuCollections/pull/98) would avoid the need for the thrust-based post-processing of the result that is currently done in the `keep != ANY` case.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1816140875/reactions,1,1,0,0,0,0,0,0,0,13157
1956,https://api.github.com/repos/rapidsai/cudf/issues/comments/1838394891,https://github.com/rapidsai/cudf/issues/13157#issuecomment-1838394891,https://api.github.com/repos/rapidsai/cudf/issues/13157,1838394891,IC_kwDOBWUGps5tk64L,2023-12-04T11:00:42Z,2023-12-04T11:00:42Z,CONTRIBUTOR,"Just to note, I would like any putative API that exposes the `insert_or_apply` interface in libcudf to allow user-provided binops. Any value type (within the usual cuco constraints) with monoid structure overlaid should be allowable. This would allow, for example, implementation of `value_counts` (count multiplicity of unique rows) which is needed in cudf's `Index.union` implementation (or will be soon), by using `(0, +)`. Right now, we must compute a groupby over the rows and then compute groupby.size() on a dummy column to deduce multiplicity

As noted, the distinct flavours use `(MAX_INT, min)` (for keep=first), `(MIN_INT, max)` (for keep=last). ",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1838394891/reactions,0,0,0,0,0,0,0,0,0,13157
1957,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527712989,https://github.com/rapidsai/cudf/issues/13158#issuecomment-1527712989,https://api.github.com/repos/rapidsai/cudf/issues/13158,1527712989,IC_kwDOBWUGps5bDwzd,2023-04-28T15:09:28Z,2023-04-28T15:09:28Z,CONTRIBUTOR,"This error occurs somewhere in torch, it calls `cudaPointerGetAttributes` on the pointer passed into torch, but somehow this is returning attribute data that says that the pointer is a host one. I don't know enough about torch to even find the path through `as_tensor` to see how this is happening.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1527712989/reactions,0,0,0,0,0,0,0,0,0,13158
1958,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702106247,https://github.com/rapidsai/cudf/issues/13159#issuecomment-1702106247,https://api.github.com/repos/rapidsai/cudf/issues/13159,1702106247,IC_kwDOBWUGps5ldBSH,2023-09-01T03:30:56Z,2023-09-01T03:33:02Z,CONTRIBUTOR,"On `branch-23.10` commit `ad9fa501192`, I ran `build.sh libcudf` with a 64-bit size type and identified the unique lines that threw compilation errors.

Dictionary errors
```
cudf/cpp/src/groupby/sort/group_single_pass_reduction_util.cuh(64): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
cudf/cpp/include/cudf/dictionary/detail/iterator.cuh(88): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
cudf/cpp/include/cudf/detail/aggregation/aggregation.cuh(346): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
cudf/cpp/src/groupby/sort/group_correlation.cu(87): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
cudf/cpp/src/groupby/hash/multi_pass_kernels.cuh(107): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
cudf/cpp/include/cudf/dictionary/detail/iterator.cuh(41): error: no suitable conversion function from ""cudf::dictionary32"" to ""cudf::size_type"" exists
```

AtomicAdd errors
```
cudf/cpp/include/cudf/detail/copy_if_else.cuh(97): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/include/cudf/detail/null_mask.cuh(108): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/groupby/sort/group_std.cu(153): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/bitmask/null_mask.cu(303): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/include/cudf/detail/valid_if.cuh(68): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(274): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(375): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(207): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(204): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(264): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(266): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(281): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(209): error: no instance of overloaded function ""atomicAdd"" matches the argument list
cudf/cpp/src/io/csv/csv_gpu.cu(283): error: no instance of overloaded function ""atomicAdd"" matches the argument list
```

Thrust 
```
cudf/cpp/src/groupby/groupby.cu(269): error: no instance of overloaded function ""std::transform"" matches the argument list
cudf/cpp/src/copying/contiguous_split.cu(631): error: no instance of overloaded function ""std::transform"" matches the argument list
cudf/cpp/src/groupby/groupby.cu(304): error: no instance of overloaded function ""std::all_of"" matches the argument list
cudf/cpp/src/hash/md5_hash.cu(343): error: no instance of overloaded function ""thrust::for_each"" matches the argument list
cudf/cpp/include/cudf/lists/detail/scatter.cuh(245): error: no instance of overloaded function ""thrust::sequence"" matches the argument list
cudf/cpp/src/groupby/groupby.cu(313): error: no instance of overloaded function ""std::transform"" matches the argument list
cudf/cpp/src/filling/repeat.cu(124): error: no instance of overloaded function ""thrust::upper_bound"" matches the argument list
```

Device span errors 
```
cudf/cpp/include/cudf/table/experimental/row_operators.cuh(848): error: no instance of constructor ""std::optional<_Tp>::optional [with _Tp=cudf::device_span<const int, 18446744073709551615UL>]"" matches the argument list
cudf/cpp/include/cudf/table/experimental/row_operators.cuh(848): error: no instance of constructor ""std::optional<_Tp>::optional [with _Tp=cudf::device_span<const int32_t, 18446744073709551615UL>]"" matches the argument list
```


`int` typing errors
```
cudf/cpp/src/binaryop/compiled/binary_ops.cuh(272): error: no instance of function template ""cudf::util::div_rounding_up_safe"" matches the argument list
cudf/cpp/include/cudf/detail/utilities/cuda.cuh(169): error: no instance of overloaded function ""std::clamp"" matches the argument list
```

Assorted errors
```
cudf/cpp/src/hash/spark_murmurhash3_x86_32.cu(230): error: no instance of overloaded function ""std::max"" matches the argument list
cudf/cpp/src/copying/purge_nonempty_nulls.cu(93): error: no instance of function template ""cudf::detail::gather"" matches the argument list
cudf/cpp/include/cudf/detail/copy_if.cuh(166): error: more than one instance of overloaded function ""min"" matches the argument list:
```
",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702106247/reactions,0,0,0,0,0,0,0,0,0,13159
1959,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702818700,https://github.com/rapidsai/cudf/issues/13159#issuecomment-1702818700,https://api.github.com/repos/rapidsai/cudf/issues/13159,1702818700,IC_kwDOBWUGps5lfvOM,2023-09-01T14:15:18Z,2023-09-01T14:15:18Z,CONTRIBUTOR,"The java code right now hard codes a signed 32-bits as the size type in many places. We can switch it to 64-bits everywhere along with a dynamic check depending on how the code is compiled. But also just so you are aware Spark has a top level limitation of a singed 32-bit int for the number of rows in a table. We can work around this in some places, but moving the Spark plugin over to a 64-bit index is not going to be super simple.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702818700/reactions,1,1,0,0,0,0,0,0,0,13159
1960,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554912642,https://github.com/rapidsai/cudf/issues/13182#issuecomment-1554912642,https://api.github.com/repos/rapidsai/cudf/issues/13182,1554912642,IC_kwDOBWUGps5crhWC,2023-05-19T16:55:43Z,2023-05-19T16:55:43Z,CONTRIBUTOR,"This one slipped due to other things taking a lot longer. At this stage, I'll target 23.08 early for a patch but I am looking to experiment with it as a performance enhancement in the plugin as well.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554912642/reactions,0,0,0,0,0,0,0,0,0,13182
1961,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577294820,https://github.com/rapidsai/cudf/issues/13220#issuecomment-1577294820,https://api.github.com/repos/rapidsai/cudf/issues/13220,1577294820,IC_kwDOBWUGps5eA5vk,2023-06-05T18:49:49Z,2023-06-05T18:49:49Z,CONTRIBUTOR,Thank you @Rridley7 for raising this. We should be able to process this shape of data in `dask_cudf`,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577294820/reactions,0,0,0,0,0,0,0,0,0,13220
1962,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577551461,https://github.com/rapidsai/cudf/issues/13220#issuecomment-1577551461,https://api.github.com/repos/rapidsai/cudf/issues/13220,1577551461,IC_kwDOBWUGps5eB4Zl,2023-06-05T22:13:18Z,2023-06-05T22:13:54Z,NONE,"Hi, I found that for regular dask, the recommended workflow is to use `map_partitions`, then groupby (e.g. [https://saturncloud.io/docs/troubleshooting/package-support/dask/dask_groupby_aggregations/](url) ) . This may also be the case for dask_cudf?",,Rridley7,94660828,U_kgDOBaRo3A,https://avatars.githubusercontent.com/u/94660828?v=4,,https://api.github.com/users/Rridley7,https://github.com/Rridley7,https://api.github.com/users/Rridley7/followers,https://api.github.com/users/Rridley7/following{/other_user},https://api.github.com/users/Rridley7/gists{/gist_id},https://api.github.com/users/Rridley7/starred{/owner}{/repo},https://api.github.com/users/Rridley7/subscriptions,https://api.github.com/users/Rridley7/orgs,https://api.github.com/users/Rridley7/repos,https://api.github.com/users/Rridley7/events{/privacy},https://api.github.com/users/Rridley7/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577551461/reactions,0,0,0,0,0,0,0,0,0,13220
1963,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526039762,https://github.com/rapidsai/cudf/issues/13229#issuecomment-1526039762,https://api.github.com/repos/rapidsai/cudf/issues/13229,1526039762,IC_kwDOBWUGps5a9YTS,2023-04-27T17:01:50Z,2023-04-27T17:01:50Z,CONTRIBUTOR,"The first benchmark there doesn't appear to be valgrind-clean which may give a hint:
```
==45341== Warning: set address range perms: large range [0x300200000, 0x8f41ff000) (noaccess)
Run:  [1/24] parquet_read_io_compression [Device=0 io=FILEPATH compression=SNAPPY cardinality=0 run_length=1]
==45341== Invalid read of size 4
==45341==    at 0x7CC2078: cudf::io::detail::parquet::writer::impl::write(cudf::table_view const&, std::vector<cudf::io::partition_info, std::allocator<cudf::io::partition_info> > const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x7CC56E0: cudf::io::detail::parquet::writer::write(cudf::table_view const&, std::vector<cudf::io::partition_info, std::allocator<cudf::io::partition_info> > const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x7B9F8FA: cudf::io::write_parquet(cudf::io::parquet_writer_options const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x1588E1: parquet_read_common(cudf::io::parquet_writer_options const&, cuio_source_sink_pair&, nvbench::state&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x15F8D5: void BM_parquet_read_io_compression<(cudf::io::io_type)0, (cudf::io::compression_type)2>(nvbench::state&, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >) [clone .isra.0] (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x15FACE: void nvbench::tl::detail::foreach<nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > >, nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run_device(std::optional<nvbench::device_info> const&)::{lambda(auto:1)#1}, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul>, nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run_device(std::optional<nvbench::device_info> const&)::{lambda(auto:1)#1}&&) [clone .isra.0] (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x161D09: nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run() (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x161DAC: nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > >::do_run() (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x12837E: main (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==  Address 0x83739940 is 0 bytes after a block of size 272 alloc'd
==45341==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==45341==    by 0x7CC1665: cudf::io::detail::parquet::writer::impl::write(cudf::table_view const&, std::vector<cudf::io::partition_info, std::allocator<cudf::io::partition_info> > const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x7CC56E0: cudf::io::detail::parquet::writer::write(cudf::table_view const&, std::vector<cudf::io::partition_info, std::allocator<cudf::io::partition_info> > const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x7B9F8FA: cudf::io::write_parquet(cudf::io::parquet_writer_options const&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/libcudf.so)
==45341==    by 0x1588E1: parquet_read_common(cudf::io::parquet_writer_options const&, cuio_source_sink_pair&, nvbench::state&) (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x15F8D5: void BM_parquet_read_io_compression<(cudf::io::io_type)0, (cudf::io::compression_type)2>(nvbench::state&, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >) [clone .isra.0] (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x15FACE: void nvbench::tl::detail::foreach<nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > >, nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run_device(std::optional<nvbench::device_info> const&)::{lambda(auto:1)#1}, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul>(std::integer_sequence<unsigned long, 0ul, 1ul, 2ul, 3ul, 4ul, 5ul>, nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run_device(std::optional<nvbench::device_info> const&)::{lambda(auto:1)#1}&&) [clone .isra.0] (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x161D09: nvbench::runner<nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > > >::run() (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x161DAC: nvbench::benchmark<BM_parquet_read_io_compression_line_142, nvbench::type_list<nvbench::type_list<nvbench::enum_type<(cudf::io::io_type)0, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)1, cudf::io::io_type>, nvbench::enum_type<(cudf::io::io_type)2, cudf::io::io_type> >, nvbench::type_list<nvbench::enum_type<(cudf::io::compression_type)2, cudf::io::compression_type>, nvbench::enum_type<(cudf::io::compression_type)0, cudf::io::compression_type> > > >::do_run() (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341==    by 0x12837E: main (in /home/wence/Documents/src/rapids/cudf/cpp/build/cuda-11.8.0/branch-23.06/release/benchmarks/PARQUET_READER_NVBENCH)
==45341== 
[ 45341][17:55:37:116091][warning] Running benchmarks without dropping the L3 cache; results may not reflect file IO throughput
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1526039762/reactions,0,0,0,0,0,0,0,0,0,13229
1964,https://api.github.com/repos/rapidsai/cudf/issues/comments/1524107056,https://github.com/rapidsai/cudf/issues/13230#issuecomment-1524107056,https://api.github.com/repos/rapidsai/cudf/issues/13230,1524107056,IC_kwDOBWUGps5a2Acw,2023-04-26T22:12:47Z,2023-04-26T22:12:47Z,MEMBER,cc @madsbk,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1524107056/reactions,0,0,0,0,0,0,0,0,0,13230
1965,https://api.github.com/repos/rapidsai/cudf/issues/comments/1590135889,https://github.com/rapidsai/cudf/issues/13230#issuecomment-1590135889,https://api.github.com/repos/rapidsai/cudf/issues/13230,1590135889,IC_kwDOBWUGps5ex4xR,2023-06-13T22:25:52Z,2023-06-13T22:25:52Z,MEMBER,KvikIO also uses nvCOMP and could benefit from using a package as well. Filed issue ( https://github.com/rapidsai/kvikio/issues/242 ) to track that,,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1590135889/reactions,1,1,0,0,0,0,0,0,0,13230
1966,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113245836,https://github.com/rapidsai/cudf/issues/13230#issuecomment-2113245836,https://api.github.com/repos/rapidsai/cudf/issues/13230,2113245836,IC_kwDOBWUGps599ZKM,2024-05-15T18:54:45Z,2024-05-15T18:54:45Z,CONTRIBUTOR,@bdice should we move this issue to https://github.com/rapidsai/build-planning/issues/54 for a more centralized discussion?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113245836/reactions,1,1,0,0,0,0,0,0,0,13230
1967,https://api.github.com/repos/rapidsai/cudf/issues/comments/1528280925,https://github.com/rapidsai/cudf/issues/13251#issuecomment-1528280925,https://api.github.com/repos/rapidsai/cudf/issues/13251,1528280925,IC_kwDOBWUGps5bF7dd,2023-04-29T00:14:14Z,2023-04-29T00:14:14Z,CONTRIBUTOR,"Additional optimization:

- divide your threads into 2 chunks based on the average length of a varint.
- Let's say 2 bytes / 1 varint.   2:1
- Divide your block of say 768 threads into 2 chunks of 512 and 256. 
- Overlap generation of the next set of offsets (512 threads) with decoding the last set (256 threads).",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1528280925/reactions,0,0,0,0,0,0,0,0,0,13251
1968,https://api.github.com/repos/rapidsai/cudf/issues/comments/1530287177,https://github.com/rapidsai/cudf/issues/13251#issuecomment-1530287177,https://api.github.com/repos/rapidsai/cudf/issues/13251,1530287177,IC_kwDOBWUGps5bNlRJ,2023-05-01T21:13:41Z,2023-05-01T21:13:41Z,CONTRIBUTOR,Also see https://github.com/rapidsai/cudf/issues/12677 for profiling examples,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1530287177/reactions,0,0,0,0,0,0,0,0,0,13251
1969,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531302606,https://github.com/rapidsai/cudf/issues/13266#issuecomment-1531302606,https://api.github.com/repos/rapidsai/cudf/issues/13266,1531302606,IC_kwDOBWUGps5bRdLO,2023-05-02T11:25:21Z,2023-05-02T15:24:46Z,CONTRIBUTOR,"This is probably a consequence of cudf not supporting duplicate column names:
```
pd.DataFrame(np.arange(4).reshape(2,2), columns=[""a"", ""a""])
#    a  a
# 0  0  1
# 1  2  3
cudf.DataFrame(np.arange(4).reshape(2,2), columns=[""a"", ""a""])
#    a
# 0  1
# 1  3
```

Yes, see #13273, the end result will depend on what we do for that case.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531302606/reactions,0,0,0,0,0,0,0,0,0,13266
1970,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531671894,https://github.com/rapidsai/cudf/issues/13269#issuecomment-1531671894,https://api.github.com/repos/rapidsai/cudf/issues/13269,1531671894,IC_kwDOBWUGps5bS3VW,2023-05-02T15:24:10Z,2023-05-02T15:24:10Z,CONTRIBUTOR,"This is a consequence of #13273, and how it will be fixed depends on what we do there.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531671894/reactions,0,0,0,0,0,0,0,0,0,13269
1971,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531890681,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1531890681,https://api.github.com/repos/rapidsai/cudf/issues/13274,1531890681,IC_kwDOBWUGps5bTsv5,2023-05-02T17:46:07Z,2023-05-02T17:46:07Z,CONTRIBUTOR,This is needed because `GeoSeries` in cuSpatial need to be able to replace `NA` with `np.nan` in order to easily print them. Ref https://github.com/rapidsai/cuspatial/issues/1102,,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531890681/reactions,0,0,0,0,0,0,0,0,0,13274
1972,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531917762,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1531917762,https://api.github.com/repos/rapidsai/cudf/issues/13274,1531917762,IC_kwDOBWUGps5bTzXC,2023-05-02T18:05:45Z,2023-05-02T18:06:02Z,CONTRIBUTOR,"The fix appears to be
```
new_children = [child for child in y._column.points._column._base_children[:-1]]
new_children.append(y._column.points._column._base_children[-1].fillna(5))
y._column.points._column.set_base_children(tuple(new_children))
```

I don't have a working cudf build at the moment but I'll look into a PR.",,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1531917762/reactions,1,0,0,0,0,0,1,0,0,13274
1973,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534384360,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534384360,https://api.github.com/repos/rapidsai/cudf/issues/13274,1534384360,IC_kwDOBWUGps5bdNjo,2023-05-04T09:23:48Z,2023-05-04T09:23:48Z,CONTRIBUTOR,"I think this is working as designed. `NA` or `NaN` for empty is a top-level flag indicating that the relevant entry in the series is missing. On the other hand, in your case you want to dive into a list and replace a non-top-level flag. But I don't think this is right: `None` is not the same as `[None]`.

Certainly making this change would be an API break from pandas:
```python
import pandas as pd

x = pd.Series([[1], [2], [pd.NA]])
y = x.fillna(5)
x == y # => True

x = pd.Series([1, 2, pd.NA])
y = x.fillna(5)
x == y # => False
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534384360/reactions,0,0,0,0,0,0,0,0,0,13274
1974,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534449264,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534449264,https://api.github.com/repos/rapidsai/cudf/issues/13274,1534449264,IC_kwDOBWUGps5bddZw,2023-05-04T09:57:41Z,2023-05-04T09:57:41Z,CONTRIBUTOR,I think the API we want to expose for this is `s.list.fillna()`. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534449264/reactions,1,1,0,0,0,0,0,0,0,13274
1975,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534541320,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534541320,https://api.github.com/repos/rapidsai/cudf/issues/13274,1534541320,IC_kwDOBWUGps5bdz4I,2023-05-04T10:50:03Z,2023-05-04T10:50:03Z,CONTRIBUTOR,"> I think the API we want to expose for this is `s.list.fillna()`.

I guess that traverses arbitrarily deep (since if you have nested lists the `ListMethods` object doesn't expose the intermediate levels, I think)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534541320/reactions,1,1,0,0,0,0,0,0,0,13274
1976,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535172371,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535172371,https://api.github.com/repos/rapidsai/cudf/issues/13274,1535172371,IC_kwDOBWUGps5bgN8T,2023-05-04T17:47:51Z,2023-05-04T17:47:51Z,CONTRIBUTOR,Thanks for the follow up on this @wence- I certainly don't want to break any pandas compatibility. I'm writing `s.list.fillna()` now.,,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535172371/reactions,0,0,0,0,0,0,0,0,0,13274
1977,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535286258,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535286258,https://api.github.com/repos/rapidsai/cudf/issues/13274,1535286258,IC_kwDOBWUGps5bgpvy,2023-05-04T19:21:40Z,2023-05-04T19:21:40Z,CONTRIBUTOR,"Yeah I'm hesitant, do you really want a `.list.fillna` method that traverses the arbitrary depth of the `ListColumn` and replaces all of the null values? That's where I am in development now, do you want me to finish it and send a PR? @shwina @wence- ",,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535286258/reactions,0,0,0,0,0,0,0,0,0,13274
1978,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535294567,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535294567,https://api.github.com/repos/rapidsai/cudf/issues/13274,1535294567,IC_kwDOBWUGps5bgrxn,2023-05-04T19:28:21Z,2023-05-04T19:28:21Z,CONTRIBUTOR,I could just write this for cuspatial and leave cudf alone. :),,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535294567/reactions,0,0,0,0,0,0,0,0,0,13274
1979,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535516542,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535516542,https://api.github.com/repos/rapidsai/cudf/issues/13274,1535516542,IC_kwDOBWUGps5bhh9-,2023-05-04T23:12:53Z,2023-05-04T23:12:53Z,CONTRIBUTOR,"Additionally, `cudf` seems very sensitive about what kinds of `ListColumn` can be created from the `Series` constructor. Arbitrary nesting seems allowed if the only value is `None`, if I mix `None` with floating points I get funky errors.

```
s = cudf.Series([
    [[[[None]]]],
    [[[None]]],
    [[None]],
    [None],
])
s
```
```
0    [[[[None]]]]
1      [[[None]]]
2        [[None]]
3          [None]
dtype: list
```

but
```
s = cudf.Series([
    [[[[None]]]],
    [[[None]]],
    [[None]],
    [None, 0.0],
])
s
```

gets
```
ArrowInvalid: cannot mix list and non-list, non-null values
```

so I'm less certain that handling complex nesting cases is worth pursuing. Opinions?",,thomcom,410931,MDQ6VXNlcjQxMDkzMQ==,https://avatars.githubusercontent.com/u/410931?v=4,,https://api.github.com/users/thomcom,https://github.com/thomcom,https://api.github.com/users/thomcom/followers,https://api.github.com/users/thomcom/following{/other_user},https://api.github.com/users/thomcom/gists{/gist_id},https://api.github.com/users/thomcom/starred{/owner}{/repo},https://api.github.com/users/thomcom/subscriptions,https://api.github.com/users/thomcom/orgs,https://api.github.com/users/thomcom/repos,https://api.github.com/users/thomcom/events{/privacy},https://api.github.com/users/thomcom/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1535516542/reactions,0,0,0,0,0,0,0,0,0,13274
1980,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536084031,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536084031,https://api.github.com/repos/rapidsai/cudf/issues/13274,1536084031,IC_kwDOBWUGps5bjsg_,2023-05-05T10:59:51Z,2023-05-05T10:59:51Z,CONTRIBUTOR,"Oh wow, that's an odd one, that seems like an arrow thing? The way I _thought_ lists in cudf work is that every rows must have the same type, so your first entry has type `List (List (List (List (int | None))))`. Now, _I_ think that `List None` does not have the same type as `None`, and so I would have thought that writing `[[None], None]` would not be allowed because the first entry has type `List None` and the second has type `None`. However, it seems like arrow treats `None` as an arbitrary placeholder at any depth which blows a hole through the type system in my book.

I suppose the type is something like:

```
data List a = None | [a | None]
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536084031/reactions,1,1,0,0,0,0,0,0,0,13274
1981,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536188142,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536188142,https://api.github.com/repos/rapidsai/cudf/issues/13274,1536188142,IC_kwDOBWUGps5bkF7u,2023-05-05T12:28:35Z,2023-05-05T12:28:58Z,CONTRIBUTOR,"That's right, at any level of nesting, you can have a ""null"" list. So `[[1, 2, 3], None, [None], [1, 2, None]]` is a valid list column in cuDF/Arrow.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536188142/reactions,0,0,0,0,0,0,0,0,0,13274
1982,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536828210,https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536828210,https://api.github.com/repos/rapidsai/cudf/issues/13274,1536828210,IC_kwDOBWUGps5bmiMy,2023-05-05T22:00:05Z,2023-05-05T22:00:05Z,CONTRIBUTOR,"```
s = cudf.Series([
    [[[[None]]]],
    [[[None]]],
    [[None]],
    [None, 0.0],
])
s
```

This fails because [[[[None]]]] and [None, 0.0] isn't the same type. As @wence- points out, the first row is `List (List (List (List (int | None))))`, the second is `List( float | None )`.",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1536828210/reactions,0,0,0,0,0,0,0,0,0,13274
1983,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534501613,https://github.com/rapidsai/cudf/issues/13281#issuecomment-1534501613,https://api.github.com/repos/rapidsai/cudf/issues/13281,1534501613,IC_kwDOBWUGps5bdqLt,2023-05-04T10:26:44Z,2023-05-04T10:26:44Z,CONTRIBUTOR,"This looks to be a bug in `cudf.core.column.concat_columns`, which does not preserve the correct dtype-data when concatenating `Interval` columns.

A simpler reproducer:
```python
import cudf

p = cudf.cut([1, 2, 3], 3)
p2 = cudf.concat([p, p])
```

What's going on? When categorical indices/columns are concatenated, we need to deduce the unique categories of the concatenated result. This is done like so:
```
unique_categories = cudf.core.column.concat_columns([p.categories, p.categories]).unique(preserve_order=True)
```
These unique categories then have to be merged back with the result columns, which goes through the merge machinery. So far, all fine, _but_ `concat_columns` returns a new column of unique categories that has a different dtype than the inputs for `Interval` dtypes:

```python
import pandas as pd
import cudf
from cudf.core.column import concat_columns

s = cudf.Series([pd.Interval(0.5, 1)]) # an interval series

print(s._column.dtype) # => interval[float64, right]
y = concat_columns([s._column])
print(y.dtype) # => StructDtype({'0': dtype('float64'), '1': dtype('float64')})
```
So some information has been lost, and when cudf then comes to merge the dtypes of the two columns it fails.

Aside: the reason you see this error when printing with 201 rows but not 200 is that if your dataframe is longer than a certain limit (by default 200 rows) we don't print the whole thing, but rather take a few rows from the start and the end and concatenate them together to show that. It is at the concatenation step that the bug occurs.

",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1534501613/reactions,0,0,0,0,0,0,0,0,0,13281
1984,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581505988,https://github.com/rapidsai/cudf/issues/13291#issuecomment-1581505988,https://api.github.com/repos/rapidsai/cudf/issues/13291,1581505988,IC_kwDOBWUGps5eQ93E,2023-06-07T21:02:07Z,2023-06-07T21:02:07Z,CONTRIBUTOR,Is this topic covered by another issue in https://github.com/rapidsai/cudf/issues/12793?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581505988/reactions,0,0,0,0,0,0,0,0,0,13291
1985,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581518796,https://github.com/rapidsai/cudf/issues/13291#issuecomment-1581518796,https://api.github.com/repos/rapidsai/cudf/issues/13291,1581518796,IC_kwDOBWUGps5eRA_M,2023-06-07T21:10:53Z,2023-06-07T21:10:53Z,CONTRIBUTOR,Maybe related to #11944 ?,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581518796/reactions,0,0,0,0,0,0,0,0,0,13291
1986,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581508467,https://github.com/rapidsai/cudf/issues/13293#issuecomment-1581508467,https://api.github.com/repos/rapidsai/cudf/issues/13293,1581508467,IC_kwDOBWUGps5eQ-dz,2023-06-07T21:03:12Z,2023-06-07T21:03:12Z,CONTRIBUTOR,Is this issue already covered in https://github.com/rapidsai/cudf/issues/12793?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581508467/reactions,0,0,0,0,0,0,0,0,0,13293
1987,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581515319,https://github.com/rapidsai/cudf/issues/13293#issuecomment-1581515319,https://api.github.com/repos/rapidsai/cudf/issues/13293,1581515319,IC_kwDOBWUGps5eRAI3,2023-06-07T21:08:28Z,2023-06-07T21:08:28Z,CONTRIBUTOR,"I haven't referenced it there yet, I think",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581515319/reactions,0,0,0,0,0,0,0,0,0,13293
1988,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553440620,https://github.com/rapidsai/cudf/issues/13332#issuecomment-1553440620,https://api.github.com/repos/rapidsai/cudf/issues/13332,1553440620,IC_kwDOBWUGps5cl59s,2023-05-18T18:16:46Z,2023-05-18T18:16:46Z,CONTRIBUTOR,Note that there was more feedback https://github.com/rapidsai/cudf/pull/13260#pullrequestreview-1431795631 that it would be good to tackle as a clean up PR separate from this particular issue.,,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553440620/reactions,0,0,0,0,0,0,0,0,0,13332
1989,https://api.github.com/repos/rapidsai/cudf/issues/comments/1549933661,https://github.com/rapidsai/cudf/issues/13357#issuecomment-1549933661,https://api.github.com/repos/rapidsai/cudf/issues/13357,1549933661,IC_kwDOBWUGps5cYhxd,2023-05-16T15:51:19Z,2023-05-16T15:52:11Z,CONTRIBUTOR,"Here's a (possibly too magic) way of implementing this without too much code duplication:

```python
from functools import cached_property

class Immutable(type):
    __immutable_properties__ = ()
    def __init__(cls, name, bases, dict):
        super().__init__(name, bases, dict)
        for prop in cls.__immutable_properties__:
            cprop = cached_property(lambda self: getattr(super(cls, self), prop))
            cprop.__set_name__(cls, prop)
            setattr(cls, prop, cprop)


class Index(SingleColumnFrame, metaclass=Immutable):
    __immutable_properties__ = (""is_monotonic_increasing"", ...)
    ...
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1549933661/reactions,0,0,0,0,0,0,0,0,0,13357
1990,https://api.github.com/repos/rapidsai/cudf/issues/comments/1574209708,https://github.com/rapidsai/cudf/issues/13357#issuecomment-1574209708,https://api.github.com/repos/rapidsai/cudf/issues/13357,1574209708,IC_kwDOBWUGps5d1Iis,2023-06-02T19:23:36Z,2023-06-02T19:23:36Z,CONTRIBUTOR,Related to https://github.com/rapidsai/cudf/issues/9593 (the immutability is also mentioned there).,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1574209708/reactions,0,0,0,0,0,0,0,0,0,13357
1991,https://api.github.com/repos/rapidsai/cudf/issues/comments/1551958411,https://github.com/rapidsai/cudf/issues/13370#issuecomment-1551958411,https://api.github.com/repos/rapidsai/cudf/issues/13370,1551958411,IC_kwDOBWUGps5cgQGL,2023-05-17T19:47:00Z,2023-05-17T19:47:00Z,CONTRIBUTOR,Related: https://github.com/rapidsai/cudf/pull/13334,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1551958411/reactions,0,0,0,0,0,0,0,0,0,13370
1992,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581520181,https://github.com/rapidsai/cudf/issues/13370#issuecomment-1581520181,https://api.github.com/repos/rapidsai/cudf/issues/13370,1581520181,IC_kwDOBWUGps5eRBU1,2023-06-07T21:12:13Z,2023-06-07T21:12:13Z,CONTRIBUTOR,I would like to close this in favor of #12512,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581520181/reactions,0,0,0,0,0,0,0,0,0,13370
1993,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552043817,https://github.com/rapidsai/cudf/issues/13371#issuecomment-1552043817,https://api.github.com/repos/rapidsai/cudf/issues/13371,1552043817,IC_kwDOBWUGps5cgk8p,2023-05-17T20:33:54Z,2023-05-17T20:34:30Z,CONTRIBUTOR,"I don't like the idea of having the ability to do self-comparison inside two-table-comparision. Instead, the ability to do comparison either between `lhs-lhs`, `lhs-rhs` and `rhs-rhs` should be a ""mixed comparison"" thus we should have a new comparator alongside with `self_comparator` and `two_table_comparator`. Something may be called `mixed_table_compartor`. Maybe with this comparator, we can remove `two_table_comparator` completely, but we should not use the name ""two table comparator"" for mixed comparison like that.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552043817/reactions,1,1,0,0,0,0,0,0,0,13371
1994,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552049080,https://github.com/rapidsai/cudf/issues/13371#issuecomment-1552049080,https://api.github.com/repos/rapidsai/cudf/issues/13371,1552049080,IC_kwDOBWUGps5cgmO4,2023-05-17T20:36:10Z,2023-05-17T20:36:10Z,MEMBER,@ttnghia that's acceptable. We'll still need many of the changes from the description to support mixed_table_comparator.,,divyegala,14876585,MDQ6VXNlcjE0ODc2NTg1,https://avatars.githubusercontent.com/u/14876585?v=4,,https://api.github.com/users/divyegala,https://github.com/divyegala,https://api.github.com/users/divyegala/followers,https://api.github.com/users/divyegala/following{/other_user},https://api.github.com/users/divyegala/gists{/gist_id},https://api.github.com/users/divyegala/starred{/owner}{/repo},https://api.github.com/users/divyegala/subscriptions,https://api.github.com/users/divyegala/orgs,https://api.github.com/users/divyegala/repos,https://api.github.com/users/divyegala/events{/privacy},https://api.github.com/users/divyegala/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1552049080/reactions,0,0,0,0,0,0,0,0,0,13371
1995,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554382067,https://github.com/rapidsai/cudf/issues/13375#issuecomment-1554382067,https://api.github.com/repos/rapidsai/cudf/issues/13375,1554382067,IC_kwDOBWUGps5cpfzz,2023-05-19T10:43:24Z,2023-05-19T10:43:24Z,CONTRIBUTOR,"Hi @justkrismanohar -- thanks for raising this issue! This is not currently possible. Are you able to provide a real example of `fn`? I'd like to see if it's at all possible to suggest any workarounds that could apply to your specific use-case.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554382067/reactions,0,0,0,0,0,0,0,0,0,13375
1996,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554554915,https://github.com/rapidsai/cudf/issues/13375#issuecomment-1554554915,https://api.github.com/repos/rapidsai/cudf/issues/13375,1554554915,IC_kwDOBWUGps5cqKAj,2023-05-19T13:14:43Z,2023-05-19T13:15:06Z,NONE,"Thanks for clarifying @shwina okay so I have my test_df and this fn pred3. To make the prediction it needs the entire train_df. So right now it looks like this

`        for index, tx in test_df.to_pandas().iterrows():
            test_df.loc[index,'pred'] = pred3(tx,train_df, kappa,target_col=target_col, att_list=att_list)`

I wanna get rid of that for loop, so I was trying the apply rows, but i can't seem to pass in the dataframe

Some other thoughts I had, was if it were possible to get a reference to the df on the GPU and just pass that - its purely looks ups i need to do, no modifications to the dataframe...",,justkrismanohar,11635363,MDQ6VXNlcjExNjM1MzYz,https://avatars.githubusercontent.com/u/11635363?v=4,,https://api.github.com/users/justkrismanohar,https://github.com/justkrismanohar,https://api.github.com/users/justkrismanohar/followers,https://api.github.com/users/justkrismanohar/following{/other_user},https://api.github.com/users/justkrismanohar/gists{/gist_id},https://api.github.com/users/justkrismanohar/starred{/owner}{/repo},https://api.github.com/users/justkrismanohar/subscriptions,https://api.github.com/users/justkrismanohar/orgs,https://api.github.com/users/justkrismanohar/repos,https://api.github.com/users/justkrismanohar/events{/privacy},https://api.github.com/users/justkrismanohar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554554915/reactions,0,0,0,0,0,0,0,0,0,13375
1997,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554620370,https://github.com/rapidsai/cudf/issues/13375#issuecomment-1554620370,https://api.github.com/repos/rapidsai/cudf/issues/13375,1554620370,IC_kwDOBWUGps5cqZ_S,2023-05-19T14:00:46Z,2023-05-19T14:00:46Z,CONTRIBUTOR,"If your data is static, you can wrap it in a couple of numpy arrays and access it from inside your function using `apply`. For example:
```python
import cudf
import numpy as np

df = cudf.DataFrame({
    'a': [1,2,3],
    'b': [4,5,6] 
})

my_data = np.array([1,2,3])

def f(row):
    sum = row['a'] + row['b']
    for i in my_data:
        sum += i
    return sum

res = df.apply(f, axis=1)
print(res)
```
This yields
```
0    11
1    13
2    15
dtype: int64
```",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554620370/reactions,0,0,0,0,0,0,0,0,0,13375
1998,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554657767,https://github.com/rapidsai/cudf/issues/13375#issuecomment-1554657767,https://api.github.com/repos/rapidsai/cudf/issues/13375,1554657767,IC_kwDOBWUGps5cqjHn,2023-05-19T14:17:18Z,2023-05-19T14:17:18Z,CONTRIBUTOR,(note that this requires all your data to be numeric),,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1554657767/reactions,1,1,0,0,0,0,0,0,0,13375
1999,https://api.github.com/repos/rapidsai/cudf/issues/comments/1555660031,https://github.com/rapidsai/cudf/issues/13375#issuecomment-1555660031,https://api.github.com/repos/rapidsai/cudf/issues/13375,1555660031,IC_kwDOBWUGps5cuXz_,2023-05-20T06:06:21Z,2023-05-20T06:06:55Z,NONE,"neat trick, i guess should work for 2d data as well, I'll give it a go and let you know. Would dictionaries be allowed in the definition of f above - I am thinking it has to compile down to numba ...",,justkrismanohar,11635363,MDQ6VXNlcjExNjM1MzYz,https://avatars.githubusercontent.com/u/11635363?v=4,,https://api.github.com/users/justkrismanohar,https://github.com/justkrismanohar,https://api.github.com/users/justkrismanohar/followers,https://api.github.com/users/justkrismanohar/following{/other_user},https://api.github.com/users/justkrismanohar/gists{/gist_id},https://api.github.com/users/justkrismanohar/starred{/owner}{/repo},https://api.github.com/users/justkrismanohar/subscriptions,https://api.github.com/users/justkrismanohar/orgs,https://api.github.com/users/justkrismanohar/repos,https://api.github.com/users/justkrismanohar/events{/privacy},https://api.github.com/users/justkrismanohar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1555660031/reactions,0,0,0,0,0,0,0,0,0,13375
2000,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553291435,https://github.com/rapidsai/cudf/issues/13379#issuecomment-1553291435,https://api.github.com/repos/rapidsai/cudf/issues/13379,1553291435,IC_kwDOBWUGps5clVir,2023-05-18T16:13:35Z,2023-05-18T16:13:35Z,CONTRIBUTOR,"TBF, pandas used to behave like this too (but it's been removed for a while).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553291435/reactions,0,0,0,0,0,0,0,0,0,13379
2001,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553326367,https://github.com/rapidsai/cudf/issues/13380#issuecomment-1553326367,https://api.github.com/repos/rapidsai/cudf/issues/13380,1553326367,IC_kwDOBWUGps5cleEf,2023-05-18T16:41:29Z,2023-05-18T16:41:53Z,CONTRIBUTOR,"Yeah I've encountered pytz having different UTC offsets than other libraries in some of these edge cases.

FWIW pandas will default to zoneinfo in 3.0 so this will align with cudf in the future",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1553326367/reactions,1,0,0,0,0,0,1,0,0,13380
2002,https://api.github.com/repos/rapidsai/cudf/issues/comments/1557568436,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1557568436,https://api.github.com/repos/rapidsai/cudf/issues/13405,1557568436,IC_kwDOBWUGps5c1pu0,2023-05-22T16:52:37Z,2023-05-22T16:54:55Z,CONTRIBUTOR,"I think parts of this could make some sense for libcudf, but I think there's room for reasonable disagreement. From a surface review of the APIs in libcudf, I don't feel strongly enough in favor of (or against) this to make any changes.

First, this _is_ the task of stream compaction. Moving to ""copying"" may not be a benefit here. The line between what goes in ""Stream Compaction"" and what goes in ""Copying"" is pretty vague to me, from looking at current APIs. Maybe others have opinions here.

Note that there is also a Python API named `[_]apply_boolean_mask`:
- https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/indexed_frame.py#L2899
- https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/column/column.py#L1090

The Python API is similar to [DataFrame.mask](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html). There is precedence for a name with the word ""mask"" in it.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1557568436/reactions,0,0,0,0,0,0,0,0,0,13405
2003,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559612397,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1559612397,https://api.github.com/repos/rapidsai/cudf/issues/13405,1559612397,IC_kwDOBWUGps5c9cvt,2023-05-23T14:58:24Z,2023-05-23T14:58:24Z,CONTRIBUTOR,"Although `thrust` considers `thrust::copy_if` a stream compaction function: https://nvidia.github.io/thrust/api/groups/group__stream__compaction.html
The function declaration is in `copy.h` https://nvidia.github.io/thrust/api/groups/group__stream__compaction.html#function-copy-if
I think we should consider being consistent with this in our doxygen documentation.

The `std::copy_if` is no help since it declares the function in the `<algorithm>` header
https://en.cppreference.com/w/cpp/algorithm/copy",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559612397/reactions,0,0,0,0,0,0,0,0,0,13405
2004,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559633308,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1559633308,https://api.github.com/repos/rapidsai/cudf/issues/13405,1559633308,IC_kwDOBWUGps5c9h2c,2023-05-23T15:07:34Z,2023-05-23T15:07:34Z,CONTRIBUTOR,"Thanks @davidwendt -- you've given this topic a lot more attention than I have so I am interested in your thoughts.

> I think we should consider being consistent with this in our doxygen documentation.

Just to clarify, consistent with what? Calling `apply_boolean_mask` ""stream compaction"" because of the Thrust docs' organization, or calling it ""copying"" (because of `copy.h`)?

Do you have opinions on the name of the function being `apply_boolean_mask` vs. `copy_if`?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559633308/reactions,0,0,0,0,0,0,0,0,0,13405
2005,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559682956,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1559682956,https://api.github.com/repos/rapidsai/cudf/issues/13405,1559682956,IC_kwDOBWUGps5c9t-M,2023-05-23T15:35:36Z,2023-05-23T15:35:36Z,CONTRIBUTOR,"Our [Stream Compaction](https://docs.rapids.ai/api/libcudf/stable/group__reorder__compact.html) page aligns well with the [thust page](https://nvidia.github.io/thrust/api/groups/group__stream__compaction.htmlhttps://nvidia.github.io/thrust/api/groups/group__stream__compaction.html).
So regardless of the name, I think it would be good to preserve this consistency.

As for the name, I agree that `cudf::copy_if` would be a better name for alignment with `thrust::copy_if` and `std::copy_if`.
Also, instead of a `column` for the mask, I'd like to propose a `device_span<bool>` parameter instead so we don't have to do a type-dispatch. Unless there is a compelling reason to support nulls in the mask or types besides bool.

For reference: https://docs.rapids.ai/api/libcudf/stable/group__reorder__compact.html#ga97d53fa661beb3217c01a0fb117a2ac1",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559682956/reactions,3,3,0,0,0,0,0,0,0,13405
2006,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559941084,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1559941084,https://api.github.com/repos/rapidsai/cudf/issues/13405,1559941084,IC_kwDOBWUGps5c-s_c,2023-05-23T18:25:48Z,2023-05-23T18:25:48Z,CONTRIBUTOR,"I really like that proposal @davidwendt. @ttnghia Looks like you assigned yourself -- happy to review if you want to make a PR. Thanks, both of you!",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1559941084/reactions,1,1,0,0,0,0,0,0,0,13405
2007,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563258149,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1563258149,https://api.github.com/repos/rapidsai/cudf/issues/13405,1563258149,IC_kwDOBWUGps5dLW0l,2023-05-25T17:24:04Z,2023-05-25T17:24:04Z,CONTRIBUTOR,"> Note that there is also a Python API named `[_]apply_boolean_mask`:
> 
> * https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/indexed_frame.py#L2899
> * https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/column/column.py#L1090
> 
> The Python API is similar to [DataFrame.mask](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html). There is precedence for a name with the word ""mask"" in it.

@bdice Can we also rename the python API?",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563258149/reactions,0,0,0,0,0,0,0,0,0,13405
2008,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563455125,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1563455125,https://api.github.com/repos/rapidsai/cudf/issues/13405,1563455125,IC_kwDOBWUGps5dMG6V,2023-05-25T20:16:11Z,2023-05-25T20:25:50Z,CONTRIBUTOR,"> Also, instead of a column for the mask, I'd like to propose a device_span<bool> parameter instead so we don't have to do a type-dispatch. Unless there is a compelling reason to support nulls in the mask or types besides bool.

@davidwendt There is an issue with nullable columns. Switching `device_span<bool>` will not be able to handle such nulls in the boolean mask. Switching to `device_span<bool>` will add much more (similar, repeated) codes to handle nulls at the callers than the amount of removed code for handling nulls for `column_view` input.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563455125/reactions,0,0,0,0,0,0,0,0,0,13405
2009,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563514367,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1563514367,https://api.github.com/repos/rapidsai/cudf/issues/13405,1563514367,IC_kwDOBWUGps5dMVX_,2023-05-25T21:14:31Z,2023-05-25T21:14:31Z,CONTRIBUTOR,I'm not sure why allowing a nullable boolean mask is so important. I know we currently support it but it seems the caller could easily replace the null entries with `false` (in-place even) and get the same result. I'd like for us to consider removing support for nulls in the mask here.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1563514367/reactions,2,1,0,0,0,0,1,0,0,13405
2010,https://api.github.com/repos/rapidsai/cudf/issues/comments/1564590486,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1564590486,https://api.github.com/repos/rapidsai/cudf/issues/13405,1564590486,IC_kwDOBWUGps5dQcGW,2023-05-26T15:47:50Z,2023-05-26T15:47:50Z,CONTRIBUTOR,"> Can we also rename the python API?

Maybe? I'd propose it and see what Python reviewers think. I'd be fine if this name change was for C++ only, or for both C++ and Python.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1564590486/reactions,0,0,0,0,0,0,0,0,0,13405
2011,https://api.github.com/repos/rapidsai/cudf/issues/comments/1610250084,https://github.com/rapidsai/cudf/issues/13405#issuecomment-1610250084,https://api.github.com/repos/rapidsai/cudf/issues/13405,1610250084,IC_kwDOBWUGps5f-ndk,2023-06-27T21:34:29Z,2023-06-27T21:34:29Z,CONTRIBUTOR,"> > Note that there is also a Python API named `[_]apply_boolean_mask`:
> > 
> > * https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/indexed_frame.py#L2899
> > * https://github.com/rapidsai/cudf/blob/383c3cfe4232ace46273a85da97a26d6acc5220e/python/cudf/cudf/core/column/column.py#L1090
> > 
> > The Python API is similar to [DataFrame.mask](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html). There is precedence for a name with the word ""mask"" in it.
> 
> @bdice Can we also rename the python API?

These are both internal functions with no guarantee of api stability I suspect, so i am happy to change them if there is a better name. The pythonic name would probably be `filter` (although that has type `(a -> Bool) -> [a] -> [a]` rather than `[Bool] -> [a] -> [a]` so `copy_if` would be fine)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1610250084/reactions,0,0,0,0,0,0,0,0,0,13405
2012,https://api.github.com/repos/rapidsai/cudf/issues/comments/1557979555,https://github.com/rapidsai/cudf/issues/13409#issuecomment-1557979555,https://api.github.com/repos/rapidsai/cudf/issues/13409,1557979555,IC_kwDOBWUGps5c3OGj,2023-05-22T20:55:10Z,2023-06-07T21:29:48Z,CONTRIBUTOR,Maybe a related PR previously worked on similar issue: https://github.com/rapidsai/cudf/pull/11854,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1557979555/reactions,0,0,0,0,0,0,0,0,0,13409
2013,https://api.github.com/repos/rapidsai/cudf/issues/comments/1558200971,https://github.com/rapidsai/cudf/issues/13409#issuecomment-1558200971,https://api.github.com/repos/rapidsai/cudf/issues/13409,1558200971,IC_kwDOBWUGps5c4EKL,2023-05-22T23:49:14Z,2023-05-22T23:49:14Z,CONTRIBUTOR,"[a_cudf.zip](https://github.com/rapidsai/cudf/files/11537765/a_cudf.zip)
[a_pyarrow.zip](https://github.com/rapidsai/cudf/files/11537766/a_pyarrow.zip)
",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1558200971/reactions,0,0,0,0,0,0,0,0,0,13409
2014,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581558989,https://github.com/rapidsai/cudf/issues/13409#issuecomment-1581558989,https://api.github.com/repos/rapidsai/cudf/issues/13409,1581558989,IC_kwDOBWUGps5eRKzN,2023-06-07T21:54:28Z,2023-06-07T21:55:42Z,CONTRIBUTOR,"This seems to be a problem where libcudf is not writing `datetime64[s]` or `timedelta64[s]` correctly. My testing shows that libcudf is also not roundtripping it faithfully:

```
import pyarrow as pa
import cudf

for type in [
    'timedelta64[s]',
    'timedelta64[ms]',
    'timedelta64[us]',
    'timedelta64[ns]',
    'datetime64[s]',
    'datetime64[ms]',
    'datetime64[us]',
    'datetime64[ns]',
]:

    df = cudf.DataFrame({""s"": cudf.Series([1234, 3456, 32442], dtype=type)})
    df.to_parquet(""a"")
    df2 = cudf.read_parquet(""a"")
    df3 = pa.parquet.read_table(""a"")    

    print(df['s'].dtype, df2['s'].dtype, df3['s'].type)
```

output
timedelta64[s] **timedelta64[ms] time32[ms]**
timedelta64[ms] timedelta64[ms] time32[ms]
timedelta64[us] timedelta64[us] time64[us]
timedelta64[ns] timedelta64[ns] time64[ns]
datetime64[s] **datetime64[ms] timestamp[ms]**
datetime64[ms] datetime64[ms] timestamp[ms]
datetime64[us] datetime64[us] timestamp[us]
datetime64[ns] datetime64[ns] timestamp[ns]

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581558989/reactions,0,0,0,0,0,0,0,0,0,13409
2015,https://api.github.com/repos/rapidsai/cudf/issues/comments/2016059578,https://github.com/rapidsai/cudf/issues/13409#issuecomment-2016059578,https://api.github.com/repos/rapidsai/cudf/issues/13409,2016059578,IC_kwDOBWUGps54KqC6,2024-03-22T23:02:11Z,2024-03-25T20:40:40Z,MEMBER,"Investigation Notes: 

1. `SECONDS` is not as a valid `TimeUnit` in Parquet and hence converted to milliseconds by both cudf and arrow.
2. I have been able to locally update this behavior and add `SECONDS` to our `TimeUnit` enum class. It round-trips correctly with `cudf` but produces an error when read with pyarrow's parquet reader (invalid unit)
3. cudf's `timedelta` actually corresponds to Arrow's `duration` type instead of `time` type as seen with cudf's `to_arrow` and `from_arrow` functions. However, it is not yet possible to convert between `timedelta64` and `duration` by only using Parquet spec. 
4. This is because Arrow encodes `duration` as `int64` in parquet instead of `TimeType`. Arrow does it by also writing serialized `arrow schema` with parquet files: https://github.com/apache/arrow/issues/23117 and https://github.com/apache/arrow/pull/12449/. 
5. Arrow types and Parquet types are different sets mapped as needed using arrow schema as a part of parquet file.",,mhaseeb123,14217455,MDQ6VXNlcjE0MjE3NDU1,https://avatars.githubusercontent.com/u/14217455?v=4,,https://api.github.com/users/mhaseeb123,https://github.com/mhaseeb123,https://api.github.com/users/mhaseeb123/followers,https://api.github.com/users/mhaseeb123/following{/other_user},https://api.github.com/users/mhaseeb123/gists{/gist_id},https://api.github.com/users/mhaseeb123/starred{/owner}{/repo},https://api.github.com/users/mhaseeb123/subscriptions,https://api.github.com/users/mhaseeb123/orgs,https://api.github.com/users/mhaseeb123/repos,https://api.github.com/users/mhaseeb123/events{/privacy},https://api.github.com/users/mhaseeb123/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2016059578/reactions,0,0,0,0,0,0,0,0,0,13409
2016,https://api.github.com/repos/rapidsai/cudf/issues/comments/1564380737,https://github.com/rapidsai/cudf/issues/13456#issuecomment-1564380737,https://api.github.com/repos/rapidsai/cudf/issues/13456,1564380737,IC_kwDOBWUGps5dPo5B,2023-05-26T13:16:24Z,2023-05-26T13:16:24Z,CONTRIBUTOR,The better change in many places might be to eliminate “take” when used in an “argsort and gather” in favor of a sort-by-key. https://github.com/rapidsai/cudf/pull/13419#discussion_r1203866268,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1564380737/reactions,0,0,0,0,0,0,0,0,0,13456
2017,https://api.github.com/repos/rapidsai/cudf/issues/comments/1573103826,https://github.com/rapidsai/cudf/issues/13473#issuecomment-1573103826,https://api.github.com/repos/rapidsai/cudf/issues/13473,1573103826,IC_kwDOBWUGps5dw6jS,2023-06-02T03:48:59Z,2023-06-02T03:48:59Z,CONTRIBUTOR,"Thank you @revans2 for posting this. Would you please share if you exploring JSON file read or JSON strings column parsing when you encountered these issues?

The two topics about column projection and empty rows seem like they could be different issues. Would you please let me know if there is a reason to combine them?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1573103826/reactions,0,0,0,0,0,0,0,0,0,13473
2018,https://api.github.com/repos/rapidsai/cudf/issues/comments/1573936104,https://github.com/rapidsai/cudf/issues/13473#issuecomment-1573936104,https://api.github.com/repos/rapidsai/cudf/issues/13473,1573936104,IC_kwDOBWUGps5d0Fvo,2023-06-02T15:34:33Z,2023-06-02T15:34:33Z,CONTRIBUTOR,"The peak memory usage of JSON reader will not reduce if we add this feature. JSON tokenizer, Tree construction and traversal will still be same. Only datatype parsing will be eliminated for non-selected columns. (saves some time, but not that big).

**A quick analysis on json reader benchmark:**
In the screenshot attached of a benchmark run for 64 columns, filesize 1.28GB, datatype parsing takes ~21% (green) of the time. Also note that `get_token_stream` and `get_tree_representation` takes the peak memory usage. Not datatype parsing (in green).
![image](https://github.com/rapidsai/cudf/assets/6488848/6dcfe696-6856-41b2-a634-4a69703e7e20)
Speedup could be <20%.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1573936104/reactions,1,1,0,0,0,0,0,0,0,13473
2019,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577306829,https://github.com/rapidsai/cudf/issues/13473#issuecomment-1577306829,https://api.github.com/repos/rapidsai/cudf/issues/13473,1577306829,IC_kwDOBWUGps5eA8rN,2023-06-05T18:59:31Z,2023-06-05T18:59:31Z,CONTRIBUTOR,"@GregoryKimball this was when we were reading a file, but it is the same for both code paths in this case.

@karthikeyann 

Thanks for the info. I understand that this might not have a huge impact to the memory usage or computation time.  The majority of the memory usage and computation would be going into tokenizing and parsing the data. But even then if I have a case like the following

```
{""B"": true, ""A"": [100, 200, 300, 400, 500.... hundreds of values ...]}
... thousands of rows ...
{""B"": false, ""A"": [1, 2, 3, 4, 5...]}
```

If all I save is on not needing to materialize the output for A that is a win. May not be something that you want to prioritize super high for a performance standpoint.

The big problem for us in a really odd corner case which we did run into in one of our integration tests, and I am nervous we will run into with a customer at some point.  Spark when it writes out JSON data by default will remove entries that are null.  It is a space savings optimization.  So if we end up with a row that are all nulls we end up with an output row of `{}`. This is not that uncommon in terms of a JSON optimizations.  The problem shows up if all of the rows in a batch show up this way.  


```
{}
{}
{}
```

I don't think it is likely to happen for large runs of rows, but with Spark it is very possible to have a few rows at the end of a file that show up like this and because of splits they would end up in a single batch. CUDF is unable to parse that batch and had us back the number of rows.  The best that we could do as a work around is to count the number of input rows before sending the data to CUDF and catch this exception after it happens. But I am not 100% sure that it will work in all cases, especially if CUDF support [comments](https://github.com/rapidsai/cudf/issues/10265), because Spark strips out lines that are fully comments in files. Then we would not know how many rows there are without some help.

Again probably not the highest priority, but it does end up being rather hacky to work around a lack of this type of feature.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577306829/reactions,0,0,0,0,0,0,0,0,0,13473
2020,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577352347,https://github.com/rapidsai/cudf/issues/13473#issuecomment-1577352347,https://api.github.com/repos/rapidsai/cudf/issues/13473,1577352347,IC_kwDOBWUGps5eBHyb,2023-06-05T19:23:48Z,2023-06-05T19:25:02Z,CONTRIBUTOR,"Linking this issue to #5712 - which seems to capture the empty row issue well.

Let's leave this issue to focus on the column projection optimization.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577352347/reactions,0,0,0,0,0,0,0,0,0,13473
2021,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646663352,https://github.com/rapidsai/cudf/issues/13487#issuecomment-1646663352,https://api.github.com/repos/rapidsai/cudf/issues/13487,1646663352,IC_kwDOBWUGps5iJha4,2023-07-22T20:12:45Z,2023-07-22T20:12:45Z,CONTRIBUTOR,Thank you @bdice for raising this. I have noticed it frequently in profiles and I'm glad you created an issue for it.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646663352/reactions,0,0,0,0,0,0,0,0,0,13487
2022,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646718116,https://github.com/rapidsai/cudf/issues/13487#issuecomment-1646718116,https://api.github.com/repos/rapidsai/cudf/issues/13487,1646718116,IC_kwDOBWUGps5iJuyk,2023-07-23T01:31:36Z,2023-07-23T01:31:36Z,CONTRIBUTOR,"@GregoryKimball I tried to dig into this but couldn’t quite identify the root cause. Is it specific to these column getter methods? Only when NVTX ranges reach a certain depth? If you have any insight or patterns you’ve seen, please share.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646718116/reactions,0,0,0,0,0,0,0,0,0,13487
2023,https://api.github.com/repos/rapidsai/cudf/issues/comments/1576604705,https://github.com/rapidsai/cudf/issues/13490#issuecomment-1576604705,https://api.github.com/repos/rapidsai/cudf/issues/13490,1576604705,IC_kwDOBWUGps5d-RQh,2023-06-05T11:19:36Z,2023-06-05T11:19:36Z,CONTRIBUTOR,"Some (slightly unstructured) thoughts here.

- The fix for #13479 (https://github.com/rapidsai/cudf/pull/13489) was actually a race condition (so only indirectly uninitialised bits). Unfortunately, it wasn't spotted by compute-sanitizer in synccheck mode, since, AFAICT synccheck only detects hazards on shared memory conflicts, whereas the relevant kernel in this case had a RAW-conflict in global memory.

- Bitmasks allocations are always a multiple of 64 bytes (512 bits), and any words not contributing to the actual bitmask are left uninitialised. This has a twofold consequence, `memcheck` will not catch off-by-one errors (for most kernels) since the memory is _allocated_; `initcheck` complains on most `memcpy`-like operations because the source array for a bitmask is almost-always partially uninitialised. There is good reason not to fully initialise the extra bits by making an additional kernel call to memzero the relevant parts every time a bitmask is manipulated. However, it _might_ be worthwhile adapting all of the bitmask-manipulation kernels to explicitly zero out the trailing allocation (that doesn't correspond to an actual bitmask). That way we might be able to spot actual bugs due to `initcheck` errors. But see discussion in #12667.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1576604705/reactions,0,0,0,0,0,0,0,0,0,13490
2024,https://api.github.com/repos/rapidsai/cudf/issues/comments/1718466158,https://github.com/rapidsai/cudf/issues/13501#issuecomment-1718466158,https://api.github.com/repos/rapidsai/cudf/issues/13501,1718466158,IC_kwDOBWUGps5mbbZu,2023-09-14T00:07:10Z,2023-09-14T00:07:10Z,CONTRIBUTOR,@GregoryKimball should there be an entry for adding python bindings for the V2 options?,,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1718466158/reactions,0,0,0,0,0,0,0,0,0,13501
2025,https://api.github.com/repos/rapidsai/cudf/issues/comments/1574155689,https://github.com/rapidsai/cudf/issues/13504#issuecomment-1574155689,https://api.github.com/repos/rapidsai/cudf/issues/13504,1574155689,IC_kwDOBWUGps5d07Wp,2023-06-02T18:36:16Z,2023-06-02T18:36:16Z,CONTRIBUTOR,"Oh right when I do these PR's I'll also axe:
- https://github.com/rapidsai/cudf/blob/branch-23.08/.github/workflows/add_to_project.yml 
- https://github.com/rapidsai/cudf/blob/branch-23.08/.github/workflows/new-issues-to-triage-projects.yml

Projects now have a [built-in workflow](https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/adding-items-automatically#configuring-the-auto-add-workflow-in-your-project) to add to project, and all classic projects have been closed.",,jarmak-nv,104460670,U_kgDOBjnxfg,https://avatars.githubusercontent.com/u/104460670?v=4,,https://api.github.com/users/jarmak-nv,https://github.com/jarmak-nv,https://api.github.com/users/jarmak-nv/followers,https://api.github.com/users/jarmak-nv/following{/other_user},https://api.github.com/users/jarmak-nv/gists{/gist_id},https://api.github.com/users/jarmak-nv/starred{/owner}{/repo},https://api.github.com/users/jarmak-nv/subscriptions,https://api.github.com/users/jarmak-nv/orgs,https://api.github.com/users/jarmak-nv/repos,https://api.github.com/users/jarmak-nv/events{/privacy},https://api.github.com/users/jarmak-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1574155689/reactions,0,0,0,0,0,0,0,0,0,13504
2026,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684155063,https://github.com/rapidsai/cudf/issues/13504#issuecomment-1684155063,https://api.github.com/repos/rapidsai/cudf/issues/13504,1684155063,IC_kwDOBWUGps5kYiq3,2023-08-18T16:26:41Z,2023-08-18T16:26:41Z,CONTRIBUTOR,"Hello @jarmak-nv, I noticed this issue while triaging cudf 😂. My process has been to check the `? - Needs Triage` flags every week or two and then assign labels, milestones and project status at that time. If we stopped using the `? - Needs Triage` label.. I would miss issues like this! 

At the same time, I like the idea of giving a special label to externally-filed issues. ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684155063/reactions,1,0,0,0,0,0,1,0,0,13504
2027,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684184935,https://github.com/rapidsai/cudf/issues/13504#issuecomment-1684184935,https://api.github.com/repos/rapidsai/cudf/issues/13504,1684184935,IC_kwDOBWUGps5kYp9n,2023-08-18T16:53:34Z,2023-08-18T16:53:34Z,CONTRIBUTOR,"I think I've come around to the feedback on #13542 and will drop the issue template part of it (because there's no ETA on the length fix) and update the GHA to use `external` as the label.

This way we can have a slack channel that alerts us to any activity on an issue/PR that's labeled `external` and we don't interrupt existing processes.",,jarmak-nv,104460670,U_kgDOBjnxfg,https://avatars.githubusercontent.com/u/104460670?v=4,,https://api.github.com/users/jarmak-nv,https://github.com/jarmak-nv,https://api.github.com/users/jarmak-nv/followers,https://api.github.com/users/jarmak-nv/following{/other_user},https://api.github.com/users/jarmak-nv/gists{/gist_id},https://api.github.com/users/jarmak-nv/starred{/owner}{/repo},https://api.github.com/users/jarmak-nv/subscriptions,https://api.github.com/users/jarmak-nv/orgs,https://api.github.com/users/jarmak-nv/repos,https://api.github.com/users/jarmak-nv/events{/privacy},https://api.github.com/users/jarmak-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684184935/reactions,0,0,0,0,0,0,0,0,0,13504
2028,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684228415,https://github.com/rapidsai/cudf/issues/13504#issuecomment-1684228415,https://api.github.com/repos/rapidsai/cudf/issues/13504,1684228415,IC_kwDOBWUGps5kY0k_,2023-08-18T17:36:00Z,2023-08-18T17:36:09Z,CONTRIBUTOR,"Done - assuming all are happy with the GHA, all it needs is someone with `write`+ access to the cuDF repo to create an `external` label.",,jarmak-nv,104460670,U_kgDOBjnxfg,https://avatars.githubusercontent.com/u/104460670?v=4,,https://api.github.com/users/jarmak-nv,https://github.com/jarmak-nv,https://api.github.com/users/jarmak-nv/followers,https://api.github.com/users/jarmak-nv/following{/other_user},https://api.github.com/users/jarmak-nv/gists{/gist_id},https://api.github.com/users/jarmak-nv/starred{/owner}{/repo},https://api.github.com/users/jarmak-nv/subscriptions,https://api.github.com/users/jarmak-nv/orgs,https://api.github.com/users/jarmak-nv/repos,https://api.github.com/users/jarmak-nv/events{/privacy},https://api.github.com/users/jarmak-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1684228415/reactions,0,0,0,0,0,0,0,0,0,13504
2029,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113284391,https://github.com/rapidsai/cudf/issues/13504#issuecomment-2113284391,https://api.github.com/repos/rapidsai/cudf/issues/13504,2113284391,IC_kwDOBWUGps599ikn,2024-05-15T19:13:07Z,2024-05-15T19:13:07Z,CONTRIBUTOR,@jarmak-nv @GregoryKimball could you comment on whether this issue is still actionable?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113284391/reactions,0,0,0,0,0,0,0,0,0,13504
2030,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113325240,https://github.com/rapidsai/cudf/issues/13504#issuecomment-2113325240,https://api.github.com/repos/rapidsai/cudf/issues/13504,2113325240,IC_kwDOBWUGps599si4,2024-05-15T19:38:36Z,2024-05-15T19:38:36Z,CONTRIBUTOR,"Good question! 

Been very away from this for a bit, but I'd be happy to contribute a PR to label external issues if that's something that's still valuable.

The replacing `.md`s with `.yml`s has officially been shelved though",,jarmak-nv,104460670,U_kgDOBjnxfg,https://avatars.githubusercontent.com/u/104460670?v=4,,https://api.github.com/users/jarmak-nv,https://github.com/jarmak-nv,https://api.github.com/users/jarmak-nv/followers,https://api.github.com/users/jarmak-nv/following{/other_user},https://api.github.com/users/jarmak-nv/gists{/gist_id},https://api.github.com/users/jarmak-nv/starred{/owner}{/repo},https://api.github.com/users/jarmak-nv/subscriptions,https://api.github.com/users/jarmak-nv/orgs,https://api.github.com/users/jarmak-nv/repos,https://api.github.com/users/jarmak-nv/events{/privacy},https://api.github.com/users/jarmak-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113325240/reactions,0,0,0,0,0,0,0,0,0,13504
2031,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117658744,https://github.com/rapidsai/cudf/issues/13504#issuecomment-2117658744,https://api.github.com/repos/rapidsai/cudf/issues/13504,2117658744,IC_kwDOBWUGps5-OOh4,2024-05-17T13:52:06Z,2024-05-17T13:52:06Z,CONTRIBUTOR,@GregoryKimball WDYT? Do you like the idea of an external label?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2117658744/reactions,0,0,0,0,0,0,0,0,0,13504
2032,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577019888,https://github.com/rapidsai/cudf/issues/13509#issuecomment-1577019888,https://api.github.com/repos/rapidsai/cudf/issues/13509,1577019888,IC_kwDOBWUGps5d_2nw,2023-06-05T15:28:10Z,2023-06-05T15:49:01Z,CONTRIBUTOR,"I also believe, that improving the performance for `gather` will help with `copy_if` (for non fixed width, for fix width it looks like we implement our own `scatter` kernel). `copy_if` is another kernel with very similar behavior. I think we can discuss what we want here and we can target `copy_if` as a follow on given what we learn with `gather`.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577019888/reactions,0,0,0,0,0,0,0,0,0,13509
2033,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577024120,https://github.com/rapidsai/cudf/issues/13509#issuecomment-1577024120,https://api.github.com/repos/rapidsai/cudf/issues/13509,1577024120,IC_kwDOBWUGps5d_3p4,2023-06-05T15:31:00Z,2023-06-05T15:32:26Z,CONTRIBUTOR,"If we ignore lists and strings for the moment, I think it would be pretty easy to put together a proof-of-concept for doing batched fixed width gathers as a single kernel invocation (well, maybe 2 - one more for validity).

Strings is probably not too hard of an extension.  Lists would definitely be tricky.  I'd have to wrap my head around the list gather stuff to remember :) ",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577024120/reactions,0,0,0,0,0,0,0,0,0,13509
2034,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577094296,https://github.com/rapidsai/cudf/issues/13509#issuecomment-1577094296,https://api.github.com/repos/rapidsai/cudf/issues/13509,1577094296,IC_kwDOBWUGps5eAIyY,2023-06-05T16:15:40Z,2023-06-05T16:16:14Z,CONTRIBUTOR,"At one point cudf (possibly before libcudf!) used a stream pool for gather operations. Each gather is independent, so we can launch all the kernels on separate streams and synchronize them with an event on the input stream. I would love to reimplement this approach and see if it can improve the performance. See also #12086.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1577094296/reactions,1,1,0,0,0,0,0,0,0,13509
2035,https://api.github.com/repos/rapidsai/cudf/issues/comments/1999956313,https://github.com/rapidsai/cudf/issues/13525#issuecomment-1999956313,https://api.github.com/repos/rapidsai/cudf/issues/13525,1999956313,IC_kwDOBWUGps53NOlZ,2024-03-15T15:52:21Z,2024-03-15T15:52:21Z,CONTRIBUTOR,"@GregoryKimball From the Spark perspective The following are in priority order. This is based mostly on how likely I think it is that a customer would see these problems/limitations.  And also if we have a work around that would let us enable the JSON parsing functionality by default or not without this change, even if it is limited functionality.

Blocker:
1. #15260
2. #15278
3. #15277
4. #15280
5. #15303
6. #15222 - This is likely going to need to be broken down into smaller pieces, not all of which are going to be blockers. I also think we need to what is the best way to support this because there will be a performance impact to others that don't want validation like this.
7. #15318 I don't want to mark this a blocker, but we have a customer that insists on it. We are in the process of trying to develop normalization code that would work, but a lot of the problem is how can/would we be able to integrate this with the existing JSON parsing code. 

Non-Blocker:
1. #5712 - I think I can work around this, but it will end up being a performance hit if we don't have a better way to deal with it.
2. #14951 / #13473 - performance optimization (I think these might be dupes of each other)


",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1999956313/reactions,1,1,0,0,0,0,0,0,0,13525
2036,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000478103,https://github.com/rapidsai/cudf/issues/13525#issuecomment-2000478103,https://api.github.com/repos/rapidsai/cudf/issues/13525,2000478103,IC_kwDOBWUGps53PN-X,2024-03-15T21:36:39Z,2024-03-15T21:36:39Z,CONTRIBUTOR,"Thank you @revans2 for summarizing your investigation. We've been studying these requirements and we would like to continue the discussion with you next week.

libcudf will soon address:
1, 2, 5

libcudf is doing design work on:
emitting raw strings (helps with 6, 7)
moving whitespace normalization after tokenization (helps with 4)

libcudf suggests that 3 is a non-blocker",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000478103/reactions,0,0,0,0,0,0,0,0,0,13525
2037,https://api.github.com/repos/rapidsai/cudf/issues/comments/2004048432,https://github.com/rapidsai/cudf/issues/13525#issuecomment-2004048432,https://api.github.com/repos/rapidsai/cudf/issues/13525,2004048432,IC_kwDOBWUGps53c1ow,2024-03-18T14:19:50Z,2024-03-18T14:19:50Z,CONTRIBUTOR,"Like I said I can work around 3, but I don't know how to make it performant without help from CUDF, and we have seen this in actual customer data.  Perhaps I can write a custom kernel myself that looks at quotes and replaces values in quotes vs outside of quotes as needed. I'll see.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2004048432/reactions,0,0,0,0,0,0,0,0,0,13525
2038,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015817023,https://github.com/rapidsai/cudf/issues/13525#issuecomment-2015817023,https://api.github.com/repos/rapidsai/cudf/issues/13525,2015817023,IC_kwDOBWUGps54Ju0_,2024-03-22T20:01:18Z,2024-03-22T20:01:18Z,CONTRIBUTOR,"We had more discussions on the JSON compatibility issues and identified ""multi-line"" support as a blocker (relates to 3 above). We don't currently have a way to process a strings column as JSON Lines when the rows contain unquoted newline characters. Also our whitespace normalization can't remove unquoted newline characters. (See #10267 and #15277 for related requests)",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015817023/reactions,0,0,0,0,0,0,0,0,0,13525
2039,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581236827,https://github.com/rapidsai/cudf/issues/13526#issuecomment-1581236827,https://api.github.com/repos/rapidsai/cudf/issues/13526,1581236827,IC_kwDOBWUGps5eP8Jb,2023-06-07T17:26:19Z,2023-06-07T17:26:19Z,CONTRIBUTOR,"@wence- Can you add links to the relevant sections of code that need changed, to make this more actionable? Are all the changes we need in https://github.com/rapidsai/cudf/blob/branch-23.08/python/cudf/cudf/_lib/copying.pyx , or do the callers of those functions also need changes?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1581236827/reactions,0,0,0,0,0,0,0,0,0,13526
2040,https://api.github.com/repos/rapidsai/cudf/issues/comments/1582148459,https://github.com/rapidsai/cudf/issues/13526#issuecomment-1582148459,https://api.github.com/repos/rapidsai/cudf/issues/13526,1582148459,IC_kwDOBWUGps5eTatr,2023-06-08T08:39:49Z,2023-06-08T08:39:49Z,CONTRIBUTOR,"> @wence- Can you add links to the relevant sections of code that need changed, to make this more actionable? 

Good point, added a bunch more information.

> Are all the changes we need in https://github.com/rapidsai/cudf/blob/branch-23.08/python/cudf/cudf/_lib/copying.pyx , or do the callers of those functions also need changes?

Callers of those functions need to change (indeed, they need to exist, since currently almost all the calls into `copying.pyx` are via either `Column` objects or else on `Series`).
",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1582148459/reactions,0,0,0,0,0,0,0,0,0,13526
2041,https://api.github.com/repos/rapidsai/cudf/issues/comments/1584944136,https://github.com/rapidsai/cudf/issues/13544#issuecomment-1584944136,https://api.github.com/repos/rapidsai/cudf/issues/13544,1584944136,IC_kwDOBWUGps5eeFQI,2023-06-09T17:51:49Z,2023-06-09T17:51:49Z,CONTRIBUTOR,"100% agree. I've made very similar points on multiple occasions (everywhere from design documents to issues) specifically focused on: 1) the performance impacts of multiple validation, 2) the correctness impacts of inconsistent and hard to track validation, and 3) the readability impacts of the resulting spaghetti code. One of the most pervasive issues is simply tracking calls to `as_column`, which on certain particularly convoluted code paths can happen a dozen times to the same inputs. 

I like the approach that you're proposing. It is analogous in many ways to the approach I've taken in various specific aspects of refactoring. For instance, here are a handful of PRs around an extended binops refactor that essentially implement more internal APIs that are allowed to make assumptions about input sanitization: https://github.com/rapidsai/cudf/pull/10509, https://github.com/rapidsai/cudf/pull/10563, https://github.com/rapidsai/cudf/pull/10421, https://github.com/rapidsai/cudf/pull/8598. Certainly not sufficient, and not entirely the same as what you're proposing, but along the same lines and aimed at tackling the same types of problems. Using types to formalize the structures would go a long way to expressing the dispatch cleanly.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1584944136/reactions,0,0,0,0,0,0,0,0,0,13544
2042,https://api.github.com/repos/rapidsai/cudf/issues/comments/1590863914,https://github.com/rapidsai/cudf/issues/13549#issuecomment-1590863914,https://api.github.com/repos/rapidsai/cudf/issues/13549,1590863914,IC_kwDOBWUGps5e0qgq,2023-06-14T09:47:55Z,2023-06-14T09:47:55Z,CONTRIBUTOR,"Hi @gucasbrg. Can you describe what exactly you'd like to do with `multiprocessing` + `cudf`? Are you looking to chunk your data up and hand off each chunk to a separate process? If so, perhaps you could use `dask`: https://medium.com/rapids-ai/easy-cpu-gpu-arrays-and-dataframes-run-your-dask-code-where-youd-like-e349d92351d?

---

I modified your script as follows:

```python
import cudf
from multiprocessing import get_context
import time
pdf = cudf.DataFrame({
        'low':[i for i in range(1000)],
        'close':[i for i in range(1000)],
    })

def get_df(idx):
    return idx.rolling(5).mean()

if __name__ == ""__main__"":
    ctx = get_context(""spawn"")
    for num in range(1, 10):
        with ctx.Pool(num) as pool:
            start = time.time()
            cudf.concat(pool.map(get_df, [pdf.low[i:] for i in range(100, 200)]))
            print(time.time()-start)
```

And the output is:

```
2.704458713531494
2.7769949436187744
2.8762805461883545
2.846607208251953
3.157398223876953
3.077711582183838
2.9359912872314453
3.0212976932525635
3.5092809200286865
3.669832229614258
```

Could you please post your result for the same script? ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1590863914/reactions,0,0,0,0,0,0,0,0,0,13549
2043,https://api.github.com/repos/rapidsai/cudf/issues/comments/1642342490,https://github.com/rapidsai/cudf/issues/13557#issuecomment-1642342490,https://api.github.com/repos/rapidsai/cudf/issues/13557,1642342490,IC_kwDOBWUGps5h5Cha,2023-07-19T15:49:41Z,2023-07-19T15:50:20Z,CONTRIBUTOR,"We also have a related problem in the C++ layer, where we [sort indices and then gather in places like `segmented_sort_by_key_common`](https://github.com/rapidsai/cudf/blob/84578d793e4bf5a0924766d39ff717f5d9d71820/cpp/src/sort/segmented_sort_impl.cuh#L302C24-L302C52). At the libcudf level, we have to consider nulls and nontrivial types (where a gather is needed for handling those) but the same general idea applies: sort directly wherever possible. https://github.com/rapidsai/cudf/pull/13669#discussion_r1268276705",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1642342490/reactions,0,0,0,0,0,0,0,0,0,13557
2044,https://api.github.com/repos/rapidsai/cudf/issues/comments/1627954085,https://github.com/rapidsai/cudf/issues/13575#issuecomment-1627954085,https://api.github.com/repos/rapidsai/cudf/issues/13575,1627954085,IC_kwDOBWUGps5hCJul,2023-07-10T01:54:32Z,2023-07-10T01:54:32Z,MEMBER,Depends on https://github.com/NVIDIA/cccl/issues/1024,,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1627954085/reactions,0,0,0,0,0,0,0,0,0,13575
2045,https://api.github.com/repos/rapidsai/cudf/issues/comments/1597416143,https://github.com/rapidsai/cudf/issues/13581#issuecomment-1597416143,https://api.github.com/repos/rapidsai/cudf/issues/13581,1597416143,IC_kwDOBWUGps5fNqLP,2023-06-19T15:51:16Z,2023-06-19T15:51:25Z,CONTRIBUTOR,"This needs to happen in the `cudf` implementation of `merge` (which doesn't support `indicator` either). The implementation is relatively straightforward. You carry around an extra column that is `2^0` for the left frame, `2^1` for the right frame. Then you merge, and sum those columns (treating null as zero). Where this result column is `2^0`, the input only appeared in the left frame, where it is `2^1` it only appeared in the right frame, if it's `3`, it appeared in both. This can be encoded as a categorical column.

Care to try implementing that (relevant code is in `cudf/python/core/join/join.py`)?",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1597416143/reactions,1,0,0,0,0,0,1,0,0,13581
2046,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646665146,https://github.com/rapidsai/cudf/issues/13684#issuecomment-1646665146,https://api.github.com/repos/rapidsai/cudf/issues/13684,1646665146,IC_kwDOBWUGps5iJh26,2023-07-22T20:23:24Z,2023-07-22T20:23:24Z,CONTRIBUTOR,"Thank you @paleolimbot for your request. We've taken the approach to use libcudf ASTs for processing `read_parquet` filters. We could extend the existing approach to flatten/extract nested types, or perhaps even expand the type support for ASTs. Once we stabilize our IO filtering improvements we will revisit this request.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646665146/reactions,0,0,0,0,0,0,0,0,0,13684
2047,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646665855,https://github.com/rapidsai/cudf/issues/13700#issuecomment-1646665855,https://api.github.com/repos/rapidsai/cudf/issues/13700,1646665855,IC_kwDOBWUGps5iJiB_,2023-07-22T20:28:10Z,2023-07-22T20:28:10Z,CONTRIBUTOR,Thank you @gaohao95 for suggesting this. We will do some scoping and return to this request.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1646665855/reactions,1,1,0,0,0,0,0,0,0,13700
2048,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648474428,https://github.com/rapidsai/cudf/issues/13700#issuecomment-1648474428,https://api.github.com/repos/rapidsai/cudf/issues/13700,1648474428,IC_kwDOBWUGps5iQbk8,2023-07-24T19:16:29Z,2023-07-24T19:16:29Z,CONTRIBUTOR,"There are some important limitations to be aware of.
- Conceptually, semi/anti joins actually use a different data structure than inner/left/full joins (maps vs multimaps). The reason is that with inner/left/full joins each row in one table could corresponding to multiple rows in the other table, i.e. the multimap supports non-unique keys. Therefore, the reuse would be limited between two disjoint sets of APIs: semi_join could reuse a map built for anti_join and vice versa, but it could not use a multimap built for inner/left/full joins.
- The current implementation of semi/anti joins relies internally on `cudf::contains`, which is what builds the hash map internally. Therefore, beyond the previous conceptual limitation, supporting this functionality would also require a deeper refactor to expose the hash table in some way.
- There is ongoing work to refactor cuco data structures and expand their usage within libcudf. I would not recommend making any changes to the join APIs until that work is further along.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648474428/reactions,0,0,0,0,0,0,0,0,0,13700
2049,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648547332,https://github.com/rapidsai/cudf/issues/13700#issuecomment-1648547332,https://api.github.com/repos/rapidsai/cudf/issues/13700,1648547332,IC_kwDOBWUGps5iQtYE,2023-07-24T20:19:23Z,2023-07-24T20:19:23Z,CONTRIBUTOR,"Thanks @vyasr! Those are good points!

> Therefore, the reuse would be limited between two disjoint sets of APIs: semi_join could reuse a map built for anti_join and vice versa, but it could not use a multimap built for inner/left/full joins.

In my use case (broadcast join) this is fine. An object is only needed to probe a single join type.

> There is ongoing work to refactor cuco data structures and expand their usage within libcudf. I would not recommend making any changes to the join APIs until that work is further along.

This is not a blocker for us so we can wait.",,gaohao95,21973464,MDQ6VXNlcjIxOTczNDY0,https://avatars.githubusercontent.com/u/21973464?v=4,,https://api.github.com/users/gaohao95,https://github.com/gaohao95,https://api.github.com/users/gaohao95/followers,https://api.github.com/users/gaohao95/following{/other_user},https://api.github.com/users/gaohao95/gists{/gist_id},https://api.github.com/users/gaohao95/starred{/owner}{/repo},https://api.github.com/users/gaohao95/subscriptions,https://api.github.com/users/gaohao95/orgs,https://api.github.com/users/gaohao95/repos,https://api.github.com/users/gaohao95/events{/privacy},https://api.github.com/users/gaohao95/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648547332/reactions,0,0,0,0,0,0,0,0,0,13700
2050,https://api.github.com/repos/rapidsai/cudf/issues/comments/1896209662,https://github.com/rapidsai/cudf/issues/13706#issuecomment-1896209662,https://api.github.com/repos/rapidsai/cudf/issues/13706,1896209662,IC_kwDOBWUGps5xBdz-,2024-01-17T16:52:02Z,2024-01-17T16:52:02Z,CONTRIBUTOR,"- @nvdbaranec proposed moving the hash utilities added in #14391 (like `swap_endian`, `uint32ToLowercaseHexString`, ...) to a reusable utility header. Some of them might have applications beyond hashing.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1896209662/reactions,0,0,0,0,0,0,0,0,0,13706
2051,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901194560,https://github.com/rapidsai/cudf/issues/13706#issuecomment-1901194560,https://api.github.com/repos/rapidsai/cudf/issues/13706,1901194560,IC_kwDOBWUGps5xUe1A,2024-01-19T22:13:01Z,2024-01-19T22:13:01Z,CONTRIBUTOR,"@davidwendt proposed removing unsanitized nulls from hashing tests. I agree with this idea. I refactored MD5's tests in https://github.com/rapidsai/cudf/pull/14391/commits/01881154feacfbc1fca4ee0e3b0a40ef56b5802f and will do the same for SHA in PR #14391, but additional work is needed for other hashing algorithms to remove unsanitized nulls from the tests.

https://github.com/rapidsai/cudf/pull/14391#discussion_r1440568562",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901194560/reactions,0,0,0,0,0,0,0,0,0,13706
2052,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904962098,https://github.com/rapidsai/cudf/issues/13706#issuecomment-1904962098,https://api.github.com/repos/rapidsai/cudf/issues/13706,1904962098,IC_kwDOBWUGps5xi2oy,2024-01-22T22:45:52Z,2024-01-22T22:45:52Z,CONTRIBUTOR,We also need to standardize null behavior for hashing algorithms. See https://github.com/rapidsai/cudf/pull/10451.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904962098/reactions,0,0,0,0,0,0,0,0,0,13706
2053,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648252183,https://github.com/rapidsai/cudf/issues/13731#issuecomment-1648252183,https://api.github.com/repos/rapidsai/cudf/issues/13731,1648252183,IC_kwDOBWUGps5iPlUX,2023-07-24T16:41:25Z,2023-07-24T16:41:25Z,CONTRIBUTOR,"The problem here is kind of that `-` is not defined between string columns, but if one of the values is `pd.NA` then suddenly it becomes defined in pandas land.

This might do the trick:
```
diff --git a/python/cudf/cudf/core/column/string.py b/python/cudf/cudf/core/column/string.py
index 32538939a6..dbe2da77e6 100644
--- a/python/cudf/cudf/core/column/string.py
+++ b/python/cudf/cudf/core/column/string.py
@@ -5804,6 +5804,8 @@ class StringColumn(column.ColumnBase):
             return NotImplemented
 
         if isinstance(other, (StringColumn, str, cudf.Scalar)):
+            if isinstance(other, cudf.Scalar) and other.value is cudf.NA:
+                return column.full(len(self), other, dtype=str)
             if isinstance(other, cudf.Scalar) and other.dtype != ""O"":
                 if op in {
                     ""__eq__"",
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648252183/reactions,0,0,0,0,0,0,0,0,0,13731
2054,https://api.github.com/repos/rapidsai/cudf/issues/comments/1727560137,https://github.com/rapidsai/cudf/issues/13733#issuecomment-1727560137,https://api.github.com/repos/rapidsai/cudf/issues/13733,1727560137,IC_kwDOBWUGps5m-HnJ,2023-09-20T11:43:15Z,2023-09-20T11:44:12Z,MEMBER,"**👏 praise:** ‏ Great descriptive issue!
**💡 suggestion:** ‏ I think the table in the description could be a GH task list so each ""step"" can be made into an issue.
**❓ question:** ‏ 
> ""large strings column"": int64 character data and int64 offset data

int64 data with int64 offsets sounds larger than:

> ""unbounded strings column"": int8 character data up to 2^64 bytes and int64 offset data

And this sounds bounded, but large. Not boundless.

Can you clarify or give an example of the structure?
",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1727560137/reactions,1,0,0,1,0,0,0,0,0,13733
2055,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743420700,https://github.com/rapidsai/cudf/issues/13733#issuecomment-1743420700,https://api.github.com/repos/rapidsai/cudf/issues/13733,1743420700,IC_kwDOBWUGps5n6n0c,2023-10-02T17:06:09Z,2023-10-02T17:06:09Z,CONTRIBUTOR,"This feature would be a great help for us. We use `cudf::table` as a CPU-memory storage to enable zero-copy. In theory, CPU memory has more capacity to hold larger tables, but we constantly run into the character limits.",,gaohao95,21973464,MDQ6VXNlcjIxOTczNDY0,https://avatars.githubusercontent.com/u/21973464?v=4,,https://api.github.com/users/gaohao95,https://github.com/gaohao95,https://api.github.com/users/gaohao95/followers,https://api.github.com/users/gaohao95/following{/other_user},https://api.github.com/users/gaohao95/gists{/gist_id},https://api.github.com/users/gaohao95/starred{/owner}{/repo},https://api.github.com/users/gaohao95/subscriptions,https://api.github.com/users/gaohao95/orgs,https://api.github.com/users/gaohao95/repos,https://api.github.com/users/gaohao95/events{/privacy},https://api.github.com/users/gaohao95/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743420700/reactions,1,1,0,0,0,0,0,0,0,13733
2056,https://api.github.com/repos/rapidsai/cudf/issues/comments/1744557487,https://github.com/rapidsai/cudf/issues/13733#issuecomment-1744557487,https://api.github.com/repos/rapidsai/cudf/issues/13733,1744557487,IC_kwDOBWUGps5n-9Wv,2023-10-03T09:12:50Z,2023-10-03T09:12:50Z,NONE,"Following up on @gaohao95's comment, our use case is storing TPC-H data in a `cudf::table`. At scale factor 100, the `l_comment` and `ps_comment` string columns overflow the 32-bit offset.",,LutzCle,14541978,MDQ6VXNlcjE0NTQxOTc4,https://avatars.githubusercontent.com/u/14541978?v=4,,https://api.github.com/users/LutzCle,https://github.com/LutzCle,https://api.github.com/users/LutzCle/followers,https://api.github.com/users/LutzCle/following{/other_user},https://api.github.com/users/LutzCle/gists{/gist_id},https://api.github.com/users/LutzCle/starred{/owner}{/repo},https://api.github.com/users/LutzCle/subscriptions,https://api.github.com/users/LutzCle/orgs,https://api.github.com/users/LutzCle/repos,https://api.github.com/users/LutzCle/events{/privacy},https://api.github.com/users/LutzCle/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1744557487/reactions,1,1,0,0,0,0,0,0,0,13733
2057,https://api.github.com/repos/rapidsai/cudf/issues/comments/2060290747,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2060290747,https://api.github.com/repos/rapidsai/cudf/issues/13733,2060290747,IC_kwDOBWUGps56zYq7,2024-04-17T03:45:41Z,2024-04-17T03:46:29Z,CONTRIBUTOR,"Now that #15195 is merged, I did some testing via cuDF-python
```
>>> df2['char'].str.slice(0,2)  
OK

>>> df2['char'].str.contains(0,2)  
OK

>>> df2['char'].str.contains('p', regex=True)
OK

>>> df2['char'].nunique()
57

# add a column, df2['c'] = 1
>>> df2.groupby('char').sum()['c'].reset_index()
OK

>>> df2['char'] + 'b'
OverflowError: CUDF failure at: /nfs/repo/cudf24.06/cpp/include/cudf/strings/
detail/strings_children.cuh:82: Size of output exceeds the column size limit

>>> df2['char'].str.upper()
RuntimeError: THRUST_INDEX_TYPE_DISPATCH 64-bit count is unsupported in libcudf
```

So far so good! Many APIs can successfully consume large strings, and only concat can produce them for now. 🎉 ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2060290747/reactions,0,0,0,0,0,0,0,0,0,13733
2058,https://api.github.com/repos/rapidsai/cudf/issues/comments/2079656314,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2079656314,https://api.github.com/repos/rapidsai/cudf/issues/13733,2079656314,IC_kwDOBWUGps579Ql6,2024-04-26T15:51:01Z,2024-04-26T15:57:18Z,MEMBER,"This is incredibly exciting! More than any individual string operation, one of the most common pain points I see in workflows is the inability to bring strings along as a payload during joins (now that concat works):

```python
%env LIBCUDF_LARGE_STRINGS_ENABLED=1

import cudf
import numpy as np

N = 6000

df1 = cudf.DataFrame({
    ""val"": [""this is a fairly short string"", ""this one is a bit longer, but not much""]*N,
    ""key"": [0, 1]*N
})

res = df1.merge(df1, on=""key"")
print(f""{res.val_x.str.len().sum():,} characters in string column"")
---------------------------------------------------------------------------
OverflowError                             Traceback (most recent call last)
Cell In[11], line 13
      6 N = 6000
      8 df1 = cudf.DataFrame({
      9     ""val"": [""this is a fairly short string"", ""this one is a bit longer, but not much""]*N,
     10     ""key"": [0, 1]*N
     11 })
---> 13 res = df1.merge(df1, on=""key"")
     14 print(f""{res.val_x.str.len().sum():,} characters in string column"")

File [/nvme/0/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116]
...
File copying.pyx:151, in cudf._lib.copying.gather()

File copying.pyx:34, in cudf._lib.pylibcudf.copying.gather()

File copying.pyx:66, in cudf._lib.pylibcudf.copying.gather()

OverflowError: CUDF failure at: /opt/conda/conda-bld/work/cpp/include/cudf/detail/sizes_to_offsets_iterator.cuh:323: Size of output exceeds the column size limit
```

If I only have numeric data, this works smoothly as the output dataframe is only 72M rows.

```python
%env LIBCUDF_LARGE_STRINGS_ENABLED=1

import cudf
import numpy as np

N = 6000

df1 = cudf.DataFrame({
    ""val"": [10, 100]*N,
    ""key"": [0, 1]*N
})

res = df1.merge(df1, on=""key"")
print(f""{len(res):,} rows in dataframe"")
72,000,000 rows in dataframe
```

I'd love to be able to complete this (contrived) example, because I think it's representative of something we see often: this limit causing failures in workflows where users _expect_ things to work smoothly.

As a reference, the self-join works with `N=5000` as it only ends up with 1.7B total characters.

```python
%env LIBCUDF_LARGE_STRINGS_ENABLED=1

import cudf
import numpy as np

N = 5000

df1 = cudf.DataFrame({
    ""val"": [""this is a fairly short string"", ""this one is a bit longer, but not much""]*N,
    ""key"": [0, 1]*N
})

res = df1.merge(df1, on=""key"")
print(f""{res.val_x.str.len().sum():,} characters in string column"")
env: LIBCUDF_LARGE_STRINGS_ENABLED=1
1,675,000,000 characters in string column
```",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2079656314/reactions,0,0,0,0,0,0,0,0,0,13733
2059,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101596054,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2101596054,https://api.github.com/repos/rapidsai/cudf/issues/13733,2101596054,IC_kwDOBWUGps59Q8-W,2024-05-08T22:19:43Z,2024-05-08T22:19:43Z,CONTRIBUTOR,The issue described here https://github.com/rapidsai/cudf/issues/13733#issuecomment-2079656314 should be fixed with https://github.com/rapidsai/cudf/pull/15621,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101596054/reactions,0,0,0,0,0,0,0,0,0,13733
2060,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142054132,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2142054132,https://api.github.com/repos/rapidsai/cudf/issues/13733,2142054132,IC_kwDOBWUGps5_rSb0,2024-05-31T12:50:31Z,2024-05-31T12:50:31Z,CONTRIBUTOR,And now the issue described here https://github.com/rapidsai/cudf/issues/13733#issuecomment-2060290747 should be fixed with #15721 ,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142054132/reactions,0,0,0,0,0,0,0,0,0,13733
2061,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148404497,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2148404497,https://api.github.com/repos/rapidsai/cudf/issues/13733,2148404497,IC_kwDOBWUGps6ADg0R,2024-06-04T20:57:28Z,2024-06-05T03:53:36Z,MEMBER,"> CSV |   | This uses factories that are already enabled. Still needs testing.
> -- | -- | --

Gave this a quick spin -- the CSV reader itself works but we fail ~if we need to copy a libcudf column/table from device to host (e.g., if we call `.head()`~ if we need to go down the `to_pandas` codepath for device-to-host copies.

So I'd say:
- CSV reader appears to work
- `to_pandas` device-to-host transfer fails (will file an issue), while `to_arrow` works (which makes sense given ""part 3"" above)

```python
%env LIBCUDF_LARGE_STRINGS_ENABLED=1

import cudf

N = int(5e7)

df = cudf.DataFrame({
    ""val"": [""this is a short string"", ""this one is a bit longer, but not much""]*N,
    ""key"": [0, 1]*N
})
df.to_csv(""large_string_df.csv"", chunksize=1000000, index=False)
del df
```

```python
df = cudf.read_csv(""large_string_df.csv"")
print(len(df))
print(df.iloc[0])
100000000
                      val  key
0  this is a short string    0
```

```python
df.head()
---------------------------------------------------------------------------
ArrowException                            Traceback (most recent call last)
File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/core/formatters.py:711](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/core/formatters.py#line=710), in PlainTextFormatter.__call__(self, obj)
    704 stream = StringIO()
    705 printer = pretty.RepresentationPrinter(stream, self.verbose,
    706     self.max_width, self.newline,
    707     max_seq_length=self.max_seq_length,
    708     singleton_pprinters=self.singleton_printers,
    709     type_pprinters=self.type_printers,
    710     deferred_pprinters=self.deferred_printers)
--> 711 printer.pretty(obj)
    712 printer.flush()
    713 return stream.getvalue()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py:411](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py#line=410), in RepresentationPrinter.pretty(self, obj)
    408                         return meth(obj, self, cycle)
    409                 if cls is not object \
    410                         and callable(cls.__dict__.get('__repr__')):
--> 411                     return _repr_pprint(obj, self, cycle)
    413     return _default_pprint(obj, self, cycle)
    414 finally:

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py:779](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/IPython/lib/pretty.py#line=778), in _repr_pprint(obj, p, cycle)
    777 """"""A pprint that just redirects to the normal repr function.""""""
    778 # Find newlines and replace them with p.break_()
--> 779 output = repr(obj)
    780 lines = output.splitlines()
    781 with p.group():

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py#line=115), in annotate.__call__.<locals>.inner(*args, **kwargs)
    113 @wraps(func)
    114 def inner(*args, **kwargs):
    115     libnvtx_push_range(self.attributes, self.domain.handle)
--> 116     result = func(*args, **kwargs)
    117     libnvtx_pop_range(self.domain.handle)
    118     return result

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:1973](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=1972), in DataFrame.__repr__(self)
   1970 @_cudf_nvtx_annotate
   1971 def __repr__(self):
   1972     output = self._get_renderable_dataframe()
-> 1973     return self._clean_renderable_dataframe(output)

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:1835](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=1834), in DataFrame._clean_renderable_dataframe(self, output)
   1832 else:
   1833     width = None
-> 1835 output = output.to_pandas().to_string(
   1836     max_rows=max_rows,
   1837     min_rows=min_rows,
   1838     max_cols=max_cols,
   1839     line_width=width,
   1840     max_colwidth=max_colwidth,
   1841     show_dimensions=show_dimensions,
   1842 )
   1844 lines = output.split(""\n"")
   1846 if lines[-1].startswith(""[""):

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py:116](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/nvtx/nvtx.py#line=115), in annotate.__call__.<locals>.inner(*args, **kwargs)
    113 @wraps(func)
    114 def inner(*args, **kwargs):
    115     libnvtx_push_range(self.attributes, self.domain.handle)
--> 116     result = func(*args, **kwargs)
    117     libnvtx_pop_range(self.domain.handle)
    118     return result

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:5324](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=5323), in DataFrame.to_pandas(self, nullable, arrow_type)
   5249 """"""
   5250 Convert to a Pandas DataFrame.
   5251 
   (...)
   5321 dtype: object
   5322 """"""
   5323 out_index = self.index.to_pandas()
-> 5324 out_data = {
   5325     i: col.to_pandas(
   5326         index=out_index, nullable=nullable, arrow_type=arrow_type
   5327     )
   5328     for i, col in enumerate(self._data.columns)
   5329 }
   5331 out_df = pd.DataFrame(out_data, index=out_index)
   5332 out_df.columns = self._data.to_pandas_index()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py:5325](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/dataframe.py#line=5324), in <dictcomp>(.0)
   5249 """"""
   5250 Convert to a Pandas DataFrame.
   5251 
   (...)
   5321 dtype: object
   5322 """"""
   5323 out_index = self.index.to_pandas()
   5324 out_data = {
-> 5325     i: col.to_pandas(
   5326         index=out_index, nullable=nullable, arrow_type=arrow_type
   5327     )
   5328     for i, col in enumerate(self._data.columns)
   5329 }
   5331 out_df = pd.DataFrame(out_data, index=out_index)
   5332 out_df.columns = self._data.to_pandas_index()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/string.py:5802](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/string.py#line=5801), in StringColumn.to_pandas(self, index, nullable, arrow_type)
   5800     return pd.Series(pandas_array, copy=False, index=index)
   5801 else:
-> 5802     return super().to_pandas(index=index, nullable=nullable)

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/column.py:215](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/cudf/core/column/column.py#line=214), in ColumnBase.to_pandas(self, index, nullable, arrow_type)
    211     return pd.Series(
    212         pd.arrays.ArrowExtensionArray(pa_array), index=index
    213     )
    214 else:
--> 215     pd_series = pa_array.to_pandas()
    217     if index is not None:
    218         pd_series.index = index

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:872](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=871), in pyarrow.lib._PandasConvertible.to_pandas()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:1517](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=1516), in pyarrow.lib.Array._to_pandas()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi:1916](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/array.pxi#line=1915), in pyarrow.lib._array_like_to_pandas()

File [/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/error.pxi:91](http://10.117.23.184:8881/lab/tree/raid/nicholasb/raid/nicholasb/miniconda3/envs/rapids-24.06/lib/python3.10/site-packages/pyarrow/error.pxi#line=90), in pyarrow.lib.check_status()

ArrowException: Unknown error: Wrapping
```



",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148404497/reactions,0,0,0,0,0,0,0,0,0,13733
2062,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150827149,https://github.com/rapidsai/cudf/issues/13733#issuecomment-2150827149,https://api.github.com/repos/rapidsai/cudf/issues/13733,2150827149,IC_kwDOBWUGps6AMwSN,2024-06-05T19:43:00Z,2024-06-06T13:03:02Z,MEMBER,"From a local run of our Python test suite with large strings enabled, it seems like:
- Enabling this doesn't break things when we've got < 2.1B characters
- We don't test scenarios with >= 2.1B characters except when we intentionally trigger and catch a large string OverflowError (which we correctly _fail_ with this turned on), so passing doesn't give a strong signal about readiness 

@GregoryKimball @vyasr @davidwendt , what do you think is the right balance of exhaustiveness vs. practicality? I don't think we want to add a large string scenario to every Python unit test.. 

(Running the test suite with large strings enabled in https://github.com/rapidsai/cudf/pull/15932 so folks can review more easily)",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150827149/reactions,0,0,0,0,0,0,0,0,0,13733
2063,https://api.github.com/repos/rapidsai/cudf/issues/comments/2053497682,https://github.com/rapidsai/cudf/issues/13734#issuecomment-2053497682,https://api.github.com/repos/rapidsai/cudf/issues/13734,2053497682,IC_kwDOBWUGps56ZeNS,2024-04-13T05:23:03Z,2024-04-13T05:23:03Z,NONE,"Hi Gregory, I tried using read_text for reading but coudl not possible, as bytesio reads both strutured and unstrurted data and for read_text it handles unstrutured data, before data passing the structure data we have has to convert into unstructure,  and it did not possible here.  we can alternatively tried changing to series from data frame , i tried like that, but we dont reuqire the function of read_text here.  is the issue with read_text here that it cannot handle the data from bytesio or something else",,Pavanmahaveer7,79128839,MDQ6VXNlcjc5MTI4ODM5,https://avatars.githubusercontent.com/u/79128839?v=4,,https://api.github.com/users/Pavanmahaveer7,https://github.com/Pavanmahaveer7,https://api.github.com/users/Pavanmahaveer7/followers,https://api.github.com/users/Pavanmahaveer7/following{/other_user},https://api.github.com/users/Pavanmahaveer7/gists{/gist_id},https://api.github.com/users/Pavanmahaveer7/starred{/owner}{/repo},https://api.github.com/users/Pavanmahaveer7/subscriptions,https://api.github.com/users/Pavanmahaveer7/orgs,https://api.github.com/users/Pavanmahaveer7/repos,https://api.github.com/users/Pavanmahaveer7/events{/privacy},https://api.github.com/users/Pavanmahaveer7/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2053497682/reactions,0,0,0,0,0,0,0,0,0,13734
2064,https://api.github.com/repos/rapidsai/cudf/issues/comments/1688219271,https://github.com/rapidsai/cudf/issues/13735#issuecomment-1688219271,https://api.github.com/repos/rapidsai/cudf/issues/13735,1688219271,IC_kwDOBWUGps5koC6H,2023-08-22T13:44:45Z,2023-08-22T13:44:45Z,CONTRIBUTOR,"Hi, I want to start contributing to cudf and would like to work on this issue.

Should I create one PR per benchmark or put all in one PR?",,Blonck,3457580,MDQ6VXNlcjM0NTc1ODA=,https://avatars.githubusercontent.com/u/3457580?v=4,,https://api.github.com/users/Blonck,https://github.com/Blonck,https://api.github.com/users/Blonck/followers,https://api.github.com/users/Blonck/following{/other_user},https://api.github.com/users/Blonck/gists{/gist_id},https://api.github.com/users/Blonck/starred{/owner}{/repo},https://api.github.com/users/Blonck/subscriptions,https://api.github.com/users/Blonck/orgs,https://api.github.com/users/Blonck/repos,https://api.github.com/users/Blonck/events{/privacy},https://api.github.com/users/Blonck/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1688219271/reactions,0,0,0,0,0,0,0,0,0,13735
2065,https://api.github.com/repos/rapidsai/cudf/issues/comments/1689909044,https://github.com/rapidsai/cudf/issues/13735#issuecomment-1689909044,https://api.github.com/repos/rapidsai/cudf/issues/13735,1689909044,IC_kwDOBWUGps5kufc0,2023-08-23T12:52:33Z,2023-08-23T12:52:33Z,CONTRIBUTOR,"> Should I create one PR per benchmark or put all in one PR?

Thanks for looking into this. Smaller PRs are easier to review so I would prefer one PR per benchmark.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1689909044/reactions,0,0,0,0,0,0,0,0,0,13735
2066,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648048909,https://github.com/rapidsai/cudf/issues/13736#issuecomment-1648048909,https://api.github.com/repos/rapidsai/cudf/issues/13736,1648048909,IC_kwDOBWUGps5iOzsN,2023-07-24T14:41:35Z,2023-07-24T14:41:35Z,MEMBER,Related to https://github.com/NVIDIA/cccl/issues/1024,,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648048909/reactions,0,0,0,0,0,0,0,0,0,13736
2067,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648545501,https://github.com/rapidsai/cudf/issues/13737#issuecomment-1648545501,https://api.github.com/repos/rapidsai/cudf/issues/13737,1648545501,IC_kwDOBWUGps5iQs7d,2023-07-24T20:17:49Z,2023-07-24T20:17:49Z,CONTRIBUTOR,"The title here sounds like a duplicate of #11463, but I think the work here is a subset of that (a single API, and just a removal of the old API).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1648545501/reactions,0,0,0,0,0,0,0,0,0,13737
2068,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813195165,https://github.com/rapidsai/cudf/issues/13744#issuecomment-1813195165,https://api.github.com/repos/rapidsai/cudf/issues/13744,1813195165,IC_kwDOBWUGps5sEymd,2023-11-15T20:13:09Z,2023-11-15T20:13:23Z,CONTRIBUTOR,"Hi, 

I took a look yesterday and from what I saw the API for the column headers already expose the cuda stream in the API. However I do not see a direct test for it. ",,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813195165/reactions,0,0,0,0,0,0,0,0,0,13744
2069,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813208833,https://github.com/rapidsai/cudf/issues/13744#issuecomment-1813208833,https://api.github.com/repos/rapidsai/cudf/issues/13744,1813208833,IC_kwDOBWUGps5sE18B,2023-11-15T20:24:46Z,2023-11-15T20:24:46Z,CONTRIBUTOR,"> I took a look yesterday and from what I saw the API for the column headers already expose the cuda stream in the API. However I do not see a direct test for it.

The stream tests are located here: https://github.com/rapidsai/cudf/tree/branch-23.12/cpp/tests/streams
It is certainly possible we missed some tests. Which APIs did you find that are missing tests?",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813208833/reactions,0,0,0,0,0,0,0,0,0,13744
2070,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813245969,https://github.com/rapidsai/cudf/issues/13744#issuecomment-1813245969,https://api.github.com/repos/rapidsai/cudf/issues/13744,1813245969,IC_kwDOBWUGps5sE_AR,2023-11-15T20:53:07Z,2023-11-15T20:53:28Z,CONTRIBUTOR,"There are a small set of APIs that had streams added before we made the current push for adding streams, largely in cases where cuspatial needed them. Those predate the stream testing. We would welcome adding stream testing for those APIs if you find missing ones!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813245969/reactions,0,0,0,0,0,0,0,0,0,13744
2071,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845488622,https://github.com/rapidsai/cudf/issues/13744#issuecomment-1845488622,https://api.github.com/repos/rapidsai/cudf/issues/13744,1845488622,IC_kwDOBWUGps5t_-vu,2023-12-07T14:54:09Z,2023-12-07T14:54:09Z,CONTRIBUTOR,"Source code of groupby should be updated to use stream from top level APIs.
https://github.com/rapidsai/cudf/pull/14354#discussion_r1384175665
Related https://github.com/rapidsai/cudf/issues/11463  https://github.com/rapidsai/cudf/issues/13737
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845488622/reactions,0,0,0,0,0,0,0,0,0,13744
2072,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652288651,https://github.com/rapidsai/cudf/issues/13755#issuecomment-1652288651,https://api.github.com/repos/rapidsai/cudf/issues/13755,1652288651,IC_kwDOBWUGps5ie-yL,2023-07-26T18:20:24Z,2023-07-26T18:20:24Z,MEMBER,Wonder if we can go further and make these `noarch` (assuming there is no compiled code),,jakirkham,3019665,MDQ6VXNlcjMwMTk2NjU=,https://avatars.githubusercontent.com/u/3019665?v=4,,https://api.github.com/users/jakirkham,https://github.com/jakirkham,https://api.github.com/users/jakirkham/followers,https://api.github.com/users/jakirkham/following{/other_user},https://api.github.com/users/jakirkham/gists{/gist_id},https://api.github.com/users/jakirkham/starred{/owner}{/repo},https://api.github.com/users/jakirkham/subscriptions,https://api.github.com/users/jakirkham/orgs,https://api.github.com/users/jakirkham/repos,https://api.github.com/users/jakirkham/events{/privacy},https://api.github.com/users/jakirkham/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652288651/reactions,0,0,0,0,0,0,0,0,0,13755
2073,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652296251,https://github.com/rapidsai/cudf/issues/13755#issuecomment-1652296251,https://api.github.com/repos/rapidsai/cudf/issues/13755,1652296251,IC_kwDOBWUGps5ifAo7,2023-07-26T18:26:35Z,2023-07-26T18:26:35Z,CONTRIBUTOR,`cudf-kafka` has compiled code (which is why I'm less sure if it's CUDA-version-independent) but `custreamz` and `dask-cudf` can become noarch.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652296251/reactions,0,0,0,0,0,0,0,0,0,13755
2074,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652296980,https://github.com/rapidsai/cudf/issues/13755#issuecomment-1652296980,https://api.github.com/repos/rapidsai/cudf/issues/13755,1652296980,IC_kwDOBWUGps5ifA0U,2023-07-26T18:27:06Z,2023-07-26T18:27:06Z,CONTRIBUTOR,I fixed the build string for cudf-kafka in #13769.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1652296980/reactions,0,0,0,0,0,0,0,0,0,13755
2075,https://api.github.com/repos/rapidsai/cudf/issues/comments/1658532063,https://github.com/rapidsai/cudf/issues/13756#issuecomment-1658532063,https://api.github.com/repos/rapidsai/cudf/issues/13756,1658532063,IC_kwDOBWUGps5i2zDf,2023-07-31T14:52:20Z,2023-07-31T14:52:20Z,CONTRIBUTOR,"I disagree with this change. I think [`cudf::reduce`](https://docs.rapids.ai/api/libcudf/stable/group__aggregation__reduction.html#ga48cc284a9371891975a6219cd3d2e36e) has become too monolithic and difficult to maintain as more aggregations are added. Special rules have to be applied and adjusted (and documented) concerning combinations of parameters and parameter types. For example, certain aggregations do not accept `init` values and others only accept specific `output_type`s.

I'd like to see libcudf split up the reduce algorithms into functional names like `cudf::reduction::any(), cudf::reduction::all(), cudf::reduction::max(), etc`
Internally the reduce/aggregation types are implemented as `cudf::reduction::detail::any(), cudf::reduction::detail::all(), cudf::reduction::detail::max(), etc`
This will make it easier to maintain and document as well as add new reductions in the future without breaking the monolithic API. I can open a separate issue to further discuss this more practically. 

Regardless, I don't think we should provide a convenience wrapper on the existing `cudf::column::size()` or `cudf::column::null_count()`",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1658532063/reactions,1,1,0,0,0,0,0,0,0,13756
2076,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662622192,https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662622192,https://api.github.com/repos/rapidsai/cudf/issues/13756,1662622192,IC_kwDOBWUGps5jGZnw,2023-08-02T17:09:53Z,2023-08-02T17:09:53Z,CONTRIBUTOR,"Thank you for your perspective, @davidwendt.

> Special rules have to be applied and adjusted (and documented) concerning combinations of parameters and parameter types. 

I see what you mean.

What's your view on the code such as the following?
```c++
  auto const reduce_results = [&] {
    auto const return_dtype = cudf::detail::target_type(input.type(), aggr.kind);
    if (aggr.kind == aggregation::COUNT_ALL) {
      return cudf::make_fixed_width_scalar(input.size(), stream);
    } else if (aggr.kind == aggregation::COUNT_VALID) {
      return cudf::make_fixed_width_scalar(input.size() - input.null_count(), stream);
    } else {
      return cudf::reduction::detail::reduce(input,
                                             *convert_to<cudf::reduce_aggregation>(aggr),
                                             return_dtype,
                                             std::nullopt,
                                             stream,
                                             rmm::mr::get_current_device_resource());
    }
  }();
```
This is the special-casing that I would like to avoid.  If `cudf::reduce()` worked with `COUNT`, there would be less friction here.

CC @harrism (who had advice on this in the past).",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662622192/reactions,0,0,0,0,0,0,0,0,0,13756
2077,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662665575,https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662665575,https://api.github.com/repos/rapidsai/cudf/issues/13756,1662665575,IC_kwDOBWUGps5jGkNn,2023-08-02T17:29:31Z,2023-08-02T17:29:46Z,CONTRIBUTOR,"From my perspective, putting the commonly used feature at the lower level (libcudf) is better than at the application level. Why? Because we can just call libcudf API and avoid reimplementing that same feature multiple times in multiple applications, even such implementation is very simple.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662665575/reactions,1,1,0,0,0,0,0,0,0,13756
2078,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662679183,https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662679183,https://api.github.com/repos/rapidsai/cudf/issues/13756,1662679183,IC_kwDOBWUGps5jGniP,2023-08-02T17:39:45Z,2023-08-02T17:40:40Z,CONTRIBUTOR,"If we were able to eliminate the enum `aggregation::Kind` by moving to a functional interface like `cudf::reduction::any()` then I would support the expectation that users should call `cudf::column::size()` as @davidwendt proposes. We wouldn't need a `cudf::reduction::count()`. I think that this interface is the direction we ought to go, but I haven't scoped any of what that work would require.

However, as it stands with `aggregation::Kind` today, I am not a fan of a design that allows only certain aggregations to be used as a reduction. If the reduction API accepts an enum `aggregation::Kind`, it should support all values of that enum (to the extent possible) even if they are redundant with an existing function, for ""application level"" / ""special casing"" reasons as @ttnghia and @mythrocks pointed out above.

Given the tension between these two potential next steps, I would encourage spending more effort towards the functional API that @davidwendt proposed, but I wouldn't oppose expanding the existing reduction API's `aggregation::Kind` support if we think there is enough justification, particularly potential for reuse in other parts of libcudf's aggregation code paths.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1662679183/reactions,1,1,0,0,0,0,0,0,0,13756
2079,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665967313,https://github.com/rapidsai/cudf/issues/13785#issuecomment-1665967313,https://api.github.com/repos/rapidsai/cudf/issues/13785,1665967313,IC_kwDOBWUGps5jTKTR,2023-08-04T17:40:41Z,2023-08-04T17:40:41Z,CONTRIBUTOR,Thank you @Ploverain for sharing this request. It sounds like the CSV writer is limited by our strings column character limit of 2.1B characters (also see #13733). At a minimum we should provide a better error message that recommends partitioning the dataframe.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665967313/reactions,0,0,0,0,0,0,0,0,0,13785
2080,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665976636,https://github.com/rapidsai/cudf/issues/13785#issuecomment-1665976636,https://api.github.com/repos/rapidsai/cudf/issues/13785,1665976636,IC_kwDOBWUGps5jTMk8,2023-08-04T17:49:31Z,2023-08-04T17:53:19Z,MEMBER,"You can use the `chunksize` parameter to get around this issue. E.g.,

```python
df = cudf.read_csv(""3G.csv"")
df.to_csv(""result.csv"", chunksize=5e6) # assuming five million rows will work -- you may want to try a higher or lower value
```

We could also explore handling this under the hood in the Python layer (via some kind of data introspection or otherwise) (cc @wence- , as this came up in a recent discussion)",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1665976636/reactions,0,0,0,0,0,0,0,0,0,13785
2081,https://api.github.com/repos/rapidsai/cudf/issues/comments/1669834640,https://github.com/rapidsai/cudf/issues/13821#issuecomment-1669834640,https://api.github.com/repos/rapidsai/cudf/issues/13821,1669834640,IC_kwDOBWUGps5jh6eQ,2023-08-08T15:26:00Z,2023-08-08T15:26:00Z,CONTRIBUTOR,"The other thing to think about is what happens if you are not using UVM. Putting hints in is nice, but are they going to slow down the processing when UVM is not being used?  If they do how is the best way to mitigate this?",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1669834640/reactions,0,0,0,0,0,0,0,0,0,13821
2082,https://api.github.com/repos/rapidsai/cudf/issues/comments/1670461231,https://github.com/rapidsai/cudf/issues/13821#issuecomment-1670461231,https://api.github.com/repos/rapidsai/cudf/issues/13821,1670461231,IC_kwDOBWUGps5jkTcv,2023-08-08T23:55:53Z,2023-08-08T23:57:10Z,CONTRIBUTOR,@revans2 I do not expect that this would affect non-managed allocations. My expectation is that cudf will need to determine (or track) if an allocation is managed before attempting prefetching or giving other advice to the driver. That should be very inexpensive to check/track. Non-UVM cases shouldn’t see regressions as a result.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1670461231/reactions,0,0,0,0,0,0,0,0,0,13821
2083,https://api.github.com/repos/rapidsai/cudf/issues/comments/1671062605,https://github.com/rapidsai/cudf/issues/13821#issuecomment-1671062605,https://api.github.com/repos/rapidsai/cudf/issues/13821,1671062605,IC_kwDOBWUGps5jmmRN,2023-08-09T10:23:18Z,2023-08-09T10:23:18Z,CONTRIBUTOR,"It seems like the right object to offer the ability to hint allocations is the memory resource, in which case non-managed memory resources could provide no-op implementations.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1671062605/reactions,0,0,0,0,0,0,0,0,0,13821
2084,https://api.github.com/repos/rapidsai/cudf/issues/comments/1671044201,https://github.com/rapidsai/cudf/issues/13832#issuecomment-1671044201,https://api.github.com/repos/rapidsai/cudf/issues/13832,1671044201,IC_kwDOBWUGps5jmhxp,2023-08-09T10:10:14Z,2023-08-09T10:10:14Z,CONTRIBUTOR,"4. `idxmin/max` must be in `[0, 2**31)` (`cudf::size_type` is a 4 byte signed int). So if the return value is an unsigned type, you can use `(uint32_t)-1` to signal a NaN result, and postprocess. The kernel could return whether or not it needs post-processing if you want to avoid passing over the data many times if it is unnecessary.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1671044201/reactions,0,0,0,0,0,0,0,0,0,13832
2085,https://api.github.com/repos/rapidsai/cudf/issues/comments/1681088845,https://github.com/rapidsai/cudf/issues/13856#issuecomment-1681088845,https://api.github.com/repos/rapidsai/cudf/issues/13856,1681088845,IC_kwDOBWUGps5kM2FN,2023-08-16T18:29:06Z,2023-08-16T18:29:06Z,CONTRIBUTOR,cc: @vuule ,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1681088845/reactions,0,0,0,0,0,0,0,0,0,13856
2086,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141074965,https://github.com/rapidsai/cudf/issues/13878#issuecomment-2141074965,https://api.github.com/repos/rapidsai/cudf/issues/13878,2141074965,IC_kwDOBWUGps5_njYV,2024-05-31T01:16:52Z,2024-05-31T01:16:52Z,CONTRIBUTOR,Note: this is a subset of #14501 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141074965/reactions,0,0,0,0,0,0,0,0,0,13878
2087,https://api.github.com/repos/rapidsai/cudf/issues/comments/1678922013,https://github.com/rapidsai/cudf/issues/13880#issuecomment-1678922013,https://api.github.com/repos/rapidsai/cudf/issues/13880,1678922013,IC_kwDOBWUGps5kElEd,2023-08-15T13:18:03Z,2023-08-15T13:18:03Z,NONE,"Hey @vuule, can I take this up?",,adi-kmt,11575549,MDQ6VXNlcjExNTc1NTQ5,https://avatars.githubusercontent.com/u/11575549?v=4,,https://api.github.com/users/adi-kmt,https://github.com/adi-kmt,https://api.github.com/users/adi-kmt/followers,https://api.github.com/users/adi-kmt/following{/other_user},https://api.github.com/users/adi-kmt/gists{/gist_id},https://api.github.com/users/adi-kmt/starred{/owner}{/repo},https://api.github.com/users/adi-kmt/subscriptions,https://api.github.com/users/adi-kmt/orgs,https://api.github.com/users/adi-kmt/repos,https://api.github.com/users/adi-kmt/events{/privacy},https://api.github.com/users/adi-kmt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1678922013/reactions,0,0,0,0,0,0,0,0,0,13880
2088,https://api.github.com/repos/rapidsai/cudf/issues/comments/1679359254,https://github.com/rapidsai/cudf/issues/13880#issuecomment-1679359254,https://api.github.com/repos/rapidsai/cudf/issues/13880,1679359254,IC_kwDOBWUGps5kGP0W,2023-08-15T17:53:13Z,2023-08-15T17:53:13Z,CONTRIBUTOR,"Please do!
Assigned the issue to you, please let me know if you need any assistance.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1679359254/reactions,0,0,0,0,0,0,0,0,0,13880
2089,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699758554,https://github.com/rapidsai/cudf/issues/13988#issuecomment-1699758554,https://api.github.com/repos/rapidsai/cudf/issues/13988,1699758554,IC_kwDOBWUGps5lUEHa,2023-08-30T20:00:12Z,2023-08-30T20:00:12Z,CONTRIBUTOR,"I'm a little confused because of conflicting pandas behavior in nullable-vs-non-nullable dtypes:
```python

In [8]: cudf.Series([0.1, np.nan], nan_as_null=False).to_pandas(nullable=True)
Out[8]: 
0    0.1
1    NaN
dtype: Float64

In [9]: cudf.Series([0.1, np.nan], nan_as_null=False).to_pandas(nullable=True).nunique()
Out[9]: 2
```

Looks like we are matching `Float64`(nullable float) dtype behavior. Is this behavior incorrect? or is the one with numpy types incorrect?",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699758554/reactions,0,0,0,0,0,0,0,0,0,13988
2090,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699787053,https://github.com/rapidsai/cudf/issues/13988#issuecomment-1699787053,https://api.github.com/repos/rapidsai/cudf/issues/13988,1699787053,IC_kwDOBWUGps5lULEt,2023-08-30T20:23:05Z,2023-08-30T20:23:05Z,CONTRIBUTOR,"I would say the `Float64` (nullable float) behavior might be incorrect. Opened up https://github.com/pandas-dev/pandas/issues/54876 to confirm.

At least on the pandas since since `np.nan` is considered an `NA` value, I would expect nunique to ignore it",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699787053/reactions,0,0,0,0,0,0,0,0,0,13988
2091,https://api.github.com/repos/rapidsai/cudf/issues/comments/1697789452,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1697789452,https://api.github.com/repos/rapidsai/cudf/issues/13995,1697789452,IC_kwDOBWUGps5lMjYM,2023-08-29T16:34:18Z,2023-08-29T16:34:18Z,CONTRIBUTOR,@vuule ,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1697789452/reactions,0,0,0,0,0,0,0,0,0,13995
2092,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705884972,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1705884972,https://api.github.com/repos/rapidsai/cudf/issues/13995,1705884972,IC_kwDOBWUGps5lrb0s,2023-09-05T03:09:30Z,2023-09-05T16:55:56Z,CONTRIBUTOR,"Looking at the files, the BIT_PACKED is a bit of a red herring.
```
    col1 TV=822216 RL=0 DL=1 DS:  102777 DE:PLAIN_DICTIONARY
    ----------------------------------------------------------------------------
    page 0:                        DLE:RLE RLE:BIT_PACKED VLE:PLAIN_DICTIONARY [more]... SZ:7509

```
The file metadata claims the repetition level data is BIT_PACKED, but the max repetition level is 0, so there is no data to encode. I'm surprised to see BIT_PACKED listed since it's been deprecated for at least a decade now. 😉 

Digging deeper, the CPU pages are 7509 bytes for the first 26 pages, and then 10009 bytes for the remaining pages of the column chunk. It seems that the encoder is using a variable bit width for the dictionary encoding. 3 bits for 20000 values would be 7500 bytes, 4 bits for 20000 values is 10000 bytes. (Actually, there are runs of 8 values in the data, so it's really where the dictionary switches from <= 16 bits to >= 17 bits that the bump in page size occurs). libcudf uses a fixed bit width for the entire column chunk based on the number of dictionary keys present. I think it would be a lot of work to use variable bit widths in cudf.

You can try limiting the rowgroup size to 400k rows. That might keep the dictionaries in the ~3~ 16 bit range.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705884972/reactions,0,0,0,0,0,0,0,0,0,13995
2093,https://api.github.com/repos/rapidsai/cudf/issues/comments/1736579009,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1736579009,https://api.github.com/repos/rapidsai/cudf/issues/13995,1736579009,IC_kwDOBWUGps5nghfB,2023-09-27T02:33:17Z,2023-09-27T02:33:17Z,CONTRIBUTOR,"Thank you @abellina for sharing the file size difference you observed, and thank you @etseidl for your triage of this issue. Once we finish the work around DELTA decoding and encoding, we can consider the feasibility of variable bit width dictionary encoding.

I'll close this issue for now. ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1736579009/reactions,0,0,0,0,0,0,0,0,0,13995
2094,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785879607,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1785879607,https://api.github.com/repos/rapidsai/cudf/issues/13995,1785879607,IC_kwDOBWUGps5qclw3,2023-10-30T19:13:41Z,2023-10-30T19:13:41Z,CONTRIBUTOR,"@etseidl thank you for studying this file. 

Would you please help me understand your observations a bit better?

I thought that each column chunk has one dictionary page, and this dictionary is used for all of the pages in the column chunk. How could the pages in a column chunk switch between 16-bit and 17-bit dictionaries? 

> libcudf uses a fixed bit width for the entire column chunk based on the number of dictionary keys present. I think it would be a lot of work to use variable bit widths in cudf.

Would you please share a bit more about this feature idea? How would the encoder choose the bit width for each page?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785879607/reactions,0,0,0,0,0,0,0,0,0,13995
2095,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785992338,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1785992338,https://api.github.com/repos/rapidsai/cudf/issues/13995,1785992338,IC_kwDOBWUGps5qdBSS,2023-10-30T20:33:02Z,2023-10-30T20:33:02Z,CONTRIBUTOR,"@GregoryKimball, it has to do with the size of the dictionary when the page is encoded.  Because parquet-mr is more stream based, it will keep the current dictionary in RAM, and add keys as it goes.  So say that the first page has just under 64k distinct entries; in this case the maximum key size will be 16 bits, and the page will be RLE encoded with that bit width.  Now while encoding the second page, the number of distinct entries exceeds 64k; the RLE encoder will now use 17 bits. cuDF, on the other hand, computes the dictionary up front, and then uses the total number of entries to determine the bit width to use for all pages.

cuDF could modify the dictionary page-encoder (not dictionary-page encoder :smile:)  to first find the largest dictionary key for the given page, and use that value to determine how many bits to use when doing the RLE encoding. I'm not sure what that would do to pre-computed page sizes and how the encoded values are stuffed into the column buffer.  This could get expensive to compute, but some users might prefer the smallest file possible and be willing to make that trade.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785992338/reactions,1,0,0,1,0,0,0,0,0,13995
2096,https://api.github.com/repos/rapidsai/cudf/issues/comments/1786131747,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1786131747,https://api.github.com/repos/rapidsai/cudf/issues/13995,1786131747,IC_kwDOBWUGps5qdjUj,2023-10-30T22:16:48Z,2024-04-02T03:36:21Z,CONTRIBUTOR,"> cuDF could modify the dictionary page-encoder (not dictionary-page encoder 😄) to first find the largest dictionary key for the given page, and use that value to determine how many bits to use when doing the RLE encoding.

Thank you @etseidl, I appreciate the explanation. If we added this dynamic bit width, ~we might see smaller file sizes for cuDF than parquet-mr, because parquet-mr can only go up as it writes more pages, but then cuDF could go up or down as needed~ then cuDF would also be able to change the bit width of data pages based on the largest key value in that page. This also makes me wonder if we could add more tricks with dict key order to yield even smaller files.

>  I'm not sure what that would do to pre-computed page sizes and how the encoded values are stuffed into the column buffer. 

Good points. It seems like it would take more work upfront to re-compute the page sizes depending on the max key.

> This could get expensive to compute, but some users might prefer the smallest file possible and be willing to make that trade.

Certainly some users put a huge premium on file size. This also comes up a lot with the nvCOMP team where there are often runtime/filesize tradeoffs.

",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1786131747/reactions,0,0,0,0,0,0,0,0,0,13995
2097,https://api.github.com/repos/rapidsai/cudf/issues/comments/1786203215,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1786203215,https://api.github.com/repos/rapidsai/cudf/issues/13995,1786203215,IC_kwDOBWUGps5qd0xP,2023-10-30T23:29:58Z,2023-10-30T23:29:58Z,CONTRIBUTOR,I did a quick test and found that each page winds up with a wide range of keys due to the parallel nature of the dictionary construction. This will need more thought.,,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1786203215/reactions,0,0,0,0,0,0,0,0,0,13995
2098,https://api.github.com/repos/rapidsai/cudf/issues/comments/1808909383,https://github.com/rapidsai/cudf/issues/13995#issuecomment-1808909383,https://api.github.com/repos/rapidsai/cudf/issues/13995,1808909383,IC_kwDOBWUGps5r0cRH,2023-11-13T19:38:31Z,2023-11-13T19:38:31Z,CONTRIBUTOR,"> I did a quick test and found that each page winds up with a wide range of keys due to the parallel nature of the dictionary construction. This will need more thought.

Thank you @etseidl for testing this. Do you think we could do better by sorting the keys descending based on the number of occurrences in the column chunk? (and then using dynamic bit width for the pages)

If sorting on number of occurrences doesn't work well, then I suppose we would be stuck with a more difficult optimization such as filling the first 2^16 keys to cover the most number of pages.

Does this sound right to you?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1808909383/reactions,0,0,0,0,0,0,0,0,0,13995
2099,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698236894,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1698236894,https://api.github.com/repos/rapidsai/cudf/issues/14001,1698236894,IC_kwDOBWUGps5lOQne,2023-08-29T22:42:01Z,2023-08-29T22:42:01Z,CONTRIBUTOR,"We should only expect this is a bug when `mode.pandas_compatible` is set to `True`, right?

Otherwise these docs about [no result ordering guarantee](https://docs.rapids.ai/api/cudf/stable/user_guide/pandas-comparison/#result-ordering) applies, from what I can tell.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698236894/reactions,0,0,0,0,0,0,0,0,0,14001
2100,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698239107,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1698239107,https://api.github.com/repos/rapidsai/cudf/issues/14001,1698239107,IC_kwDOBWUGps5lORKD,2023-08-29T22:45:15Z,2023-08-29T22:45:15Z,CONTRIBUTOR,"Ah totally forgot about the ordering guarantee. Yes, this is probably a bug only when `cudf.set_option(""mode.pandas_compatible"", True)` (the OP still reproduces even when setting it)",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698239107/reactions,0,0,0,0,0,0,0,0,0,14001
2101,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698263946,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1698263946,https://api.github.com/repos/rapidsai/cudf/issues/14001,1698263946,IC_kwDOBWUGps5lOXOK,2023-08-29T23:16:36Z,2023-08-29T23:16:36Z,CONTRIBUTOR,"This will likely require some nontrivial changes, like adding a sequential index column before joining, then sorting after the join? Or perhaps some intermediate sorting of the join indices (can't recall the implementation details to know if this is viable at the moment). Either way, preserving order for a hash join is not ideal for performance, which is why this hasn't been done yet. I am not sure if there's any better way -- we did find some clever ways to implement `drop_duplicates` in an order-preserving way, and perhaps the same can be done here. I suspect libcudf changes will be needed to resolve this (at least, in an efficient way). If you'd like me to pursue this, please let me know. Some related issues/PRs:
-  #12236
- #1781
- #11656",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1698263946/reactions,0,0,0,0,0,0,0,0,0,14001
2102,https://api.github.com/repos/rapidsai/cudf/issues/comments/1774888938,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1774888938,https://api.github.com/repos/rapidsai/cudf/issues/14001,1774888938,IC_kwDOBWUGps5pyqfq,2023-10-23T10:24:47Z,2023-10-23T10:24:47Z,CONTRIBUTOR,"> like adding a sequential index column before joining, then sorting after the join

I think we should go ahead and implement this solution for now (when Pandas compatibility is enabled).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1774888938/reactions,0,0,0,0,0,0,0,0,0,14001
2103,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777371396,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1777371396,https://api.github.com/repos/rapidsai/cudf/issues/14001,1777371396,IC_kwDOBWUGps5p8IkE,2023-10-24T14:40:34Z,2023-10-24T14:40:34Z,CONTRIBUTOR,"@mroeschke -- by default, `sort=False` in the `.join()` method.

Is it an implementation detail of Pandas that when `sort=False`, ordering of keys is preserved? Or is it a guarantee? (I couldn't find where in the docs this is defined).

cc: @wence- ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777371396/reactions,0,0,0,0,0,0,0,0,0,14001
2104,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777499604,https://github.com/rapidsai/cudf/issues/14001#issuecomment-1777499604,https://api.github.com/repos/rapidsai/cudf/issues/14001,1777499604,IC_kwDOBWUGps5p8n3U,2023-10-24T15:35:12Z,2023-10-24T15:35:12Z,CONTRIBUTOR,`join` uses `merge` under the hood so the key ordering follow what's described in the `how` section here: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html,,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777499604/reactions,0,0,0,0,0,0,0,0,0,14001
2105,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699890144,https://github.com/rapidsai/cudf/issues/14007#issuecomment-1699890144,https://api.github.com/repos/rapidsai/cudf/issues/14007,1699890144,IC_kwDOBWUGps5lUkPg,2023-08-30T21:44:20Z,2023-08-30T21:44:20Z,CONTRIBUTOR,"@mroeschke I think there is an inconsistency with `pd.MultiIndex.levels`:
```python
In [1]: import pandas as pd

In [2]: mi = pd.MultiIndex.from_tuples([(""e"", ""f""), (""c"", ""d"")])

In [3]: mi
Out[3]: 
MultiIndex([('e', 'f'),
            ('c', 'd')],
           )

In [4]: mi.levels[0]
Out[4]: Index(['c', 'e'], dtype='object')

In [5]: mi.levels[1]
Out[5]: Index(['d', 'f'], dtype='object')

In [6]: new_mi = mi.insert(0, (""a"", ""b""))

In [7]: new_mi
Out[7]: 
MultiIndex([('a', 'b'),
            ('e', 'f'),
            ('c', 'd')],
           )

In [8]: new_mi.levels[0]
Out[8]: Index(['c', 'e', 'a'], dtype='object')

In [9]: mi = pd.MultiIndex.from_tuples([(""a"", ""b""), (""e"", ""f""), (""c"", ""d"")])

In [10]: mi
Out[10]: 
MultiIndex([('a', 'b'),
            ('e', 'f'),
            ('c', 'd')],
           )

In [11]: mi.levels[0]
Out[11]: Index(['a', 'c', 'e'], dtype='object')
```

is `#8` the correct behavior or `#11`? Any idea how the `.levels[0]` are ordered during construction? Clearly, they aren't being ordered by their occurrence order. I think they are being _sorted_?",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699890144/reactions,0,0,0,0,0,0,0,0,0,14007
2106,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699911826,https://github.com/rapidsai/cudf/issues/14007#issuecomment-1699911826,https://api.github.com/repos/rapidsai/cudf/issues/14007,1699911826,IC_kwDOBWUGps5lUpiS,2023-08-30T22:06:36Z,2023-08-30T22:06:36Z,CONTRIBUTOR,"I think in pandas during the initial construction for of a `MultiIndex`, level values are sorted. Then for `insert` specifically, adding a new level value appends to the end of `.levels[n]` so that `.codes[n]` doesn't need to be recomputed if `sorted(.levels[n] + new value)` changed the ordering.

So I don't think `.levels[n]` necessarily has an ordering convention unfortunately",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1699911826/reactions,0,0,0,0,0,0,0,0,0,14007
2107,https://api.github.com/repos/rapidsai/cudf/issues/comments/1700289030,https://github.com/rapidsai/cudf/issues/14012#issuecomment-1700289030,https://api.github.com/repos/rapidsai/cudf/issues/14012,1700289030,IC_kwDOBWUGps5lWFoG,2023-08-31T02:40:44Z,2023-08-31T02:44:54Z,CONTRIBUTOR,"@mroeschke Is the example you provided for a different issue? Or were you referring to this:
```python
In [37]: df = cudf.DataFrame({""a"": [1., 2.]})

In [38]: df
Out[38]: 
     a
0  1.0
1  2.0

In [39]: df.columns.name = ""baz""

In [40]: df
Out[40]: 
     a
0  1.0
1  2.0

In [41]: df.columns
Out[41]: Index(['a'], dtype='object')

.
.
.
```",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1700289030/reactions,0,0,0,0,0,0,0,0,0,14012
2108,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701273750,https://github.com/rapidsai/cudf/issues/14012#issuecomment-1701273750,https://api.github.com/repos/rapidsai/cudf/issues/14012,1701273750,IC_kwDOBWUGps5lZ2CW,2023-08-31T15:34:42Z,2023-08-31T15:34:42Z,CONTRIBUTOR,Ah yes my example in the OP is incorrect. Yeah I think the core issue is that `column.name` cannot be assigned,,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701273750/reactions,0,0,0,0,0,0,0,0,0,14012
2109,https://api.github.com/repos/rapidsai/cudf/issues/comments/1703191498,https://github.com/rapidsai/cudf/issues/14012#issuecomment-1703191498,https://api.github.com/repos/rapidsai/cudf/issues/14012,1703191498,IC_kwDOBWUGps5lhKPK,2023-09-01T18:51:00Z,2023-09-01T18:51:00Z,CONTRIBUTOR,"@galipremsagar is there a reason why `cudf.DataFrame`'s return pandas objects for `df.columns`? I think this might be the limitation why the name cannot be set

```
In [1]: import cudf

In [2]: df = cudf.DataFrame({""a"": [1., 2.]})

In [8]: type(df.columns)
Out[8]: pandas.core.indexes.base.Index

In [9]: type(df.index)
Out[9]: cudf.core.index.RangeIndex
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1703191498/reactions,0,0,0,0,0,0,0,0,0,14012
2110,https://api.github.com/repos/rapidsai/cudf/issues/comments/1707030399,https://github.com/rapidsai/cudf/issues/14012#issuecomment-1707030399,https://api.github.com/repos/rapidsai/cudf/issues/14012,1707030399,IC_kwDOBWUGps5lvzd_,2023-09-05T17:34:49Z,2023-09-05T17:34:49Z,CONTRIBUTOR,"I believe it is because most operations involving column names occur on the host, not on device. Storing the column names in a cudf Index would require constant H2D copies. @shwina may be able to provide more of the history here, but I do agree that this choice can sometimes cause confusion and make certain aspects of implementation harder.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1707030399/reactions,0,0,0,0,0,0,0,0,0,14012
2111,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701717411,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701717411,https://api.github.com/repos/rapidsai/cudf/issues/14024,1701717411,IC_kwDOBWUGps5lbiWj,2023-08-31T20:12:12Z,2023-08-31T20:12:12Z,CONTRIBUTOR,"The `value` in `KeyValue` is an optional field in the spec, so it's correct to write nothing if it isn't set.  In #14000 I've started using `std::optional` for optional fields, to distinguish from merely empty but present fields. Perhaps that could be done throughout the Parquet thrift objects.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701717411/reactions,1,1,0,0,0,0,0,0,0,14024
2112,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701744077,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701744077,https://api.github.com/repos/rapidsai/cudf/issues/14024,1701744077,IC_kwDOBWUGps5lbo3N,2023-08-31T20:34:45Z,2023-08-31T20:34:45Z,CONTRIBUTOR,"@etseidl I assume that the key-value pair is optional, but is it okay to include the key without the value? ",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701744077/reactions,0,0,0,0,0,0,0,0,0,14024
2113,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701750623,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701750623,https://api.github.com/repos/rapidsai/cudf/issues/14024,1701750623,IC_kwDOBWUGps5lbqdf,2023-08-31T20:39:33Z,2023-08-31T20:47:56Z,CONTRIBUTOR,"> @etseidl I assume that the key-value pair is optional, but is it okay to include the key without the value? 

According to the thrift idl, yes.

```thrift
 struct KeyValue {
  1: required string key
  2: optional string value
}
```

Also optional in `FileMetaData`
```thrift
struct FileMetaData {
  ...
  /** Optional key/value metadata **/
  5: optional list<KeyValue> key_value_metadata
}
```",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701750623/reactions,0,0,0,0,0,0,0,0,0,14024
2114,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701884029,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701884029,https://api.github.com/repos/rapidsai/cudf/issues/14024,1701884029,IC_kwDOBWUGps5lcLB9,2023-08-31T22:54:12Z,2023-08-31T22:54:12Z,CONTRIBUTOR,"That's interesting. Then such ""optional"" should mean the user can specify it as an optional, instead of the current behavior (the library ignores writing empty string without the user's knowledge). So #14000 should be the way to go instead.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701884029/reactions,0,0,0,0,0,0,0,0,0,14024
2115,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701916274,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701916274,https://api.github.com/repos/rapidsai/cudf/issues/14024,1701916274,IC_kwDOBWUGps5lcS5y,2023-08-31T23:42:36Z,2023-09-01T00:18:56Z,CONTRIBUTOR,"> That's interesting. Then such ""optional"" should mean the user can specify it as an optional, instead of the current behavior (the library ignores writing empty string without the user's knowledge). So #14000 should be the way to go instead.

Yes, I think making more use of `optional` would make things clearer (although I didn't notice someone beat me to it :sweat_smile:  @PointKernel apparently) https://github.com/rapidsai/cudf/blob/ad9fa501192332ca8ce310ffe967473ec0945a97/cpp/src/io/parquet/compact_protocol_reader.hpp#L265",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1701916274/reactions,0,0,0,0,0,0,0,0,0,14024
2116,https://api.github.com/repos/rapidsai/cudf/issues/comments/1707355201,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1707355201,https://api.github.com/repos/rapidsai/cudf/issues/14024,1707355201,IC_kwDOBWUGps5lxCxB,2023-09-05T21:51:10Z,2023-09-05T21:51:10Z,MEMBER,"Yeah, using `std::optional` to properly handle optional field reading/writing was on my TODO list but then got distracted by other tasks.",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1707355201/reactions,0,0,0,0,0,0,0,0,0,14024
2117,https://api.github.com/repos/rapidsai/cudf/issues/comments/1947540510,https://github.com/rapidsai/cudf/issues/14024#issuecomment-1947540510,https://api.github.com/repos/rapidsai/cudf/issues/14024,1947540510,IC_kwDOBWUGps50FRwe,2024-02-16T00:12:38Z,2024-02-16T00:12:38Z,CONTRIBUTOR,This issue has been at least partially addressed. We need to make another pass over `CompactProtocolReader::read` functions to verify that all optional fields are treated as such.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1947540510/reactions,0,0,0,0,0,0,0,0,0,14024
2118,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702568966,https://github.com/rapidsai/cudf/issues/14027#issuecomment-1702568966,https://api.github.com/repos/rapidsai/cudf/issues/14027,1702568966,IC_kwDOBWUGps5leyQG,2023-09-01T11:00:44Z,2023-09-01T11:00:44Z,CONTRIBUTOR,"Hmmm, this opens a can of worms:
```
import cudf
dt = cudf.CategoricalDtype([""a"", ""b"", ""c""])
hash(dt) # TypeError
hash(dt.categories) # works, dt.categories is a `StringIndex`, so that's immutable, so hashing is ok.
hash(dt.categories._column) # works?! This seems bad, since a column is _not_ immutable
hash(cudf.StringIndex([""a"", ""b"", ""c""])) == hash(cudf.StringIndex([""a"", ""b"", ""c""])) # False, uh-oh
```

What is going on?

Recall that if you define no dunder ops on a class, then you get `__eq__` and `__hash__` from `object`, which uses `id` for equality and a hash of `id` for `__hash__`.

If you define a class that sets `__eq__` but not `__hash__` then the interpreter automatically sets `__hash__ = None`, to indicate that the object is unhashable. Since it can't automatically construct a hash function that satisfies the invariant `x == y => hash(x) == hash(y) and x is y`. See https://docs.python.org/3/reference/datamodel.html#object.__hash__

`Column`s and `Index`s have `__eq__` defined, so why can we hash them? Turns out the `__eq__` method is set programmatically through a mixin class, through `__init_subclass__`, and it appears that this is sufficiently dynamic that the interpreter doesn't spot the `__eq__` method and set `__hash__ = None`.

`CategoricalDtype` explicitly defines `__eq__`, hence we get `__hash__ = None`.

To hash this we need to compute a deterministic hash of the categories, and mix with the ordered flag (as you note). This requires, ideally, a libcudf implementation of a hash of a column of values: right now all of the hashes that are implemented produce a per-row hash.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1702568966/reactions,0,0,0,0,0,0,0,0,0,14027
2119,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705379726,https://github.com/rapidsai/cudf/issues/14029#issuecomment-1705379726,https://api.github.com/repos/rapidsai/cudf/issues/14029,1705379726,IC_kwDOBWUGps5lpgeO,2023-09-04T14:38:52Z,2023-09-04T14:38:52Z,MEMBER,"Agree, this would be very useful but notice we do something like this already when serializing. 
`SpillableBuffer.serialize()` returns a `Buffer` with the *spill lock* as owner:
https://github.com/rapidsai/cudf/blob/branch-23.10/python/cudf/cudf/core/buffer/spillable_buffer.py#L460-L474",,madsbk,1041088,MDQ6VXNlcjEwNDEwODg=,https://avatars.githubusercontent.com/u/1041088?v=4,,https://api.github.com/users/madsbk,https://github.com/madsbk,https://api.github.com/users/madsbk/followers,https://api.github.com/users/madsbk/following{/other_user},https://api.github.com/users/madsbk/gists{/gist_id},https://api.github.com/users/madsbk/starred{/owner}{/repo},https://api.github.com/users/madsbk/subscriptions,https://api.github.com/users/madsbk/orgs,https://api.github.com/users/madsbk/repos,https://api.github.com/users/madsbk/events{/privacy},https://api.github.com/users/madsbk/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705379726/reactions,0,0,0,0,0,0,0,0,0,14029
2120,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705409041,https://github.com/rapidsai/cudf/issues/14029#issuecomment-1705409041,https://api.github.com/repos/rapidsai/cudf/issues/14029,1705409041,IC_kwDOBWUGps5lpnoR,2023-09-04T14:57:56Z,2023-09-04T14:57:56Z,CONTRIBUTOR,"Ah, I think I hadn't spotted that. That also works I think, so things are less bad than I thought",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1705409041/reactions,0,0,0,0,0,0,0,0,0,14029
2121,https://api.github.com/repos/rapidsai/cudf/issues/comments/1808381860,https://github.com/rapidsai/cudf/issues/14066#issuecomment-1808381860,https://api.github.com/repos/rapidsai/cudf/issues/14066,1808381860,IC_kwDOBWUGps5rybek,2023-11-13T15:28:45Z,2023-11-13T15:28:45Z,NONE,"Hi @vuule, if this issue is still open, can i give it a try and post updates?",,ANIKET0956,9587309,MDQ6VXNlcjk1ODczMDk=,https://avatars.githubusercontent.com/u/9587309?v=4,,https://api.github.com/users/ANIKET0956,https://github.com/ANIKET0956,https://api.github.com/users/ANIKET0956/followers,https://api.github.com/users/ANIKET0956/following{/other_user},https://api.github.com/users/ANIKET0956/gists{/gist_id},https://api.github.com/users/ANIKET0956/starred{/owner}{/repo},https://api.github.com/users/ANIKET0956/subscriptions,https://api.github.com/users/ANIKET0956/orgs,https://api.github.com/users/ANIKET0956/repos,https://api.github.com/users/ANIKET0956/events{/privacy},https://api.github.com/users/ANIKET0956/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1808381860/reactions,1,1,0,0,0,0,0,0,0,14066
2122,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724235639,https://github.com/rapidsai/cudf/issues/14087#issuecomment-1724235639,https://api.github.com/repos/rapidsai/cudf/issues/14087,1724235639,IC_kwDOBWUGps5mxb93,2023-09-18T19:23:12Z,2023-09-18T19:23:27Z,CONTRIBUTOR,"Thank you @revans2 for raising this issue. It's true that often the faster regex accelerator is the one that doesn't use regex at all. 
>I would like it in CUDF because I think it would benefit everyone, not just the Spark plugin, but also I think the RAPIDS team could do a better job in many cases of finding these optimizations than we are doing.

We'll have to think more about the design of this. It doesn't seem like a great solution for libcudf to expose an option in the regex engine to try and avoid the regex engine. The best idea I have for now is that Regex transformation to Strings API could happen in a JIT submodule. ",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724235639/reactions,0,0,0,0,0,0,0,0,0,14087
2123,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724281089,https://github.com/rapidsai/cudf/issues/14087#issuecomment-1724281089,https://api.github.com/repos/rapidsai/cudf/issues/14087,1724281089,IC_kwDOBWUGps5mxnEB,2023-09-18T19:57:30Z,2023-09-18T19:57:30Z,CONTRIBUTOR,"> It doesn't seem like a great solution for libcudf to expose an option in the regex engine to try and avoid the regex engine.

I don't see this as an option, I see it as an optimization. Why would an end user ever know or care that when they asked to split a string on the regular expression ""}}"" that CUDF called one kernel vs another and got the answer back much faster. We already do this kind of thing for long strings where we have separate kernels and look at the average length of the string to decide which to call.  How is this any different?",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724281089/reactions,0,0,0,0,0,0,0,0,0,14087
2124,https://api.github.com/repos/rapidsai/cudf/issues/comments/1720133968,https://github.com/rapidsai/cudf/issues/14104#issuecomment-1720133968,https://api.github.com/repos/rapidsai/cudf/issues/14104,1720133968,IC_kwDOBWUGps5mhylQ,2023-09-14T20:49:29Z,2023-09-14T20:49:29Z,CONTRIBUTOR,"These are like puzzles :sweat_smile: So the issue with this file is that the schema says the `flba_field` is required, but the column index indicates there are nulls. Because the schema says the field is required, there is no definition level data either. I suppose this one could be detected by doing a sanity check during page header parsing (make sure the uncompressed size makes sense for how many values should be present), or even after reading the file metadata (schema says required but metadata says nulls are present). The page reader should also exit (but does not...it trusts the value counts and doesn't currently detect buffer overruns) when it reaches the end of the page data, but as with other errors that occur on the device, it's hard to communicate back to the host that some exception occurred. ",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1720133968/reactions,0,0,0,0,0,0,0,0,0,14104
2125,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724226327,https://github.com/rapidsai/cudf/issues/14104#issuecomment-1724226327,https://api.github.com/repos/rapidsai/cudf/issues/14104,1724226327,IC_kwDOBWUGps5mxZsX,2023-09-18T19:16:10Z,2023-09-18T19:16:17Z,CONTRIBUTOR,"Thank you @etseidl for looking into this. Of your proposals I prefer:
> after reading the file metadata (schema says required but metadata says nulls are present)

I don't mind doing more work if we are going to crash anyways. What do you think is the simplest check to implement?
(FYI @PointKernel)",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724226327/reactions,0,0,0,0,0,0,0,0,0,14104
2126,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724297518,https://github.com/rapidsai/cudf/issues/14104#issuecomment-1724297518,https://api.github.com/repos/rapidsai/cudf/issues/14104,1724297518,IC_kwDOBWUGps5mxrEu,2023-09-18T20:10:24Z,2023-09-18T20:10:24Z,CONTRIBUTOR,"@GregoryKimball I think the simplest would be to walk through the schema in some fashion, find the max definition level for each column, and then check the ColumnIndex for for each column chunk for that column and see if the num_nulls field is consistent with the max definition level (i.e, if max_def == 0 and num_nulls > 0 then error). This would be doable on the host without digging into the page data.  But this requires that column indexes are present (which they are for this file).  The next option would be to do the same thing, but instead walk the page headers in the file to get the null counts, but that would require V2 data page headers.

The only surefire way is to detect the buffer overun when decoding the values (which is what parquet-mr and arrow seem to do), but as I've said, erroring out of the kernel when that is detected and communicating the error to the host is an issue.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1724297518/reactions,0,0,0,0,0,0,0,0,0,14104
2127,https://api.github.com/repos/rapidsai/cudf/issues/comments/1728247952,https://github.com/rapidsai/cudf/issues/14104#issuecomment-1728247952,https://api.github.com/repos/rapidsai/cudf/issues/14104,1728247952,IC_kwDOBWUGps5nAviQ,2023-09-20T18:37:15Z,2023-09-20T18:37:15Z,CONTRIBUTOR,"The decode kernel does not detect the error, `page_state_s.error` flag stays at zero when reading the linked file.
If this flag was raised, we could use it to communicate the error to the host. I think the overhead of such solution would be acceptable (4 byte D2H copy, w/o errors; plus `atomicOr` when an error occurs).",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1728247952/reactions,0,0,0,0,0,0,0,0,0,14104
2128,https://api.github.com/repos/rapidsai/cudf/issues/comments/1736588941,https://github.com/rapidsai/cudf/issues/14104#issuecomment-1736588941,https://api.github.com/repos/rapidsai/cudf/issues/14104,1736588941,IC_kwDOBWUGps5ngj6N,2023-09-27T02:45:55Z,2023-09-27T02:45:55Z,CONTRIBUTOR,#14167 is taking the first step to solving this case. We will also need to update the decode kernel to detect this error.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1736588941/reactions,0,0,0,0,0,0,0,0,0,14104
2129,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723193916,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723193916,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723193916,IC_kwDOBWUGps5mtdo8,2023-09-18T11:09:13Z,2023-09-18T11:09:13Z,CONTRIBUTOR,"> `with tf.device(""/GPU:1""):`

Does this leave device-1 as the currently active context?",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723193916/reactions,0,0,0,0,0,0,0,0,0,14117
2130,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723200803,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723200803,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723200803,IC_kwDOBWUGps5mtfUj,2023-09-18T11:14:13Z,2023-09-18T11:14:13Z,CONTRIBUTOR,"It does: https://www.tensorflow.org/guide/gpu#manual_device_placement

> you can use with tf.device to create a device context, and all the operations within that context will run on the same designated device.

Although it doesn't matter which device I choose, the error is repeatable.
",,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723200803/reactions,0,0,0,0,0,0,0,0,0,14117
2131,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723213318,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723213318,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723213318,IC_kwDOBWUGps5mtiYG,2023-09-18T11:23:29Z,2023-09-18T11:23:29Z,CONTRIBUTOR,"FWIW, this WFM in a rapids-compose container (I did `mamba install tensorflow` to get version 2.12.1):
```
In [1]: import cudf
   ...: import tensorflow as tf
   ...: from cuda import cudart
   ...: df = cudf.DataFrame({""a"": [1, 2, 3], ""b"": [4, 5, 6]})
   ...: 
   ...: print(cudart.cudaGetDevice())
   ...: with tf.device(""/GPU:1""):
   ...:     # Perform some operations on the GPU with tf
   ...:     inp = tf.keras.Input(shape=(), name=""inp"", dtype=tf.int64)
   ...:     b = inp[:, tf.newaxis]
   ...:     print(cudart.cudaGetDevice())
   ...: 
   ...: # Copy data to host
   ...: print(cudart.cudaGetDevice())
   ...: pdf = df.to_pandas()

2023-09-18 12:22:32.889821: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2023-09-18 12:22:32.928206: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
(<cudaError_t.cudaSuccess: 0>, 0)
2023-09-18 12:22:36.558988: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 46304 MB memory:  -> device: 0, name: NVIDIA RTX A6000, pci bus id: 0000:17:00.0, compute capability: 8.6
2023-09-18 12:22:36.559648: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 44191 MB memory:  -> device: 1, name: NVIDIA RTX A6000, pci bus id: 0000:b3:00.0, compute capability: 8.6
(<cudaError_t.cudaSuccess: 0>, 1)
(<cudaError_t.cudaSuccess: 0>, 1)
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723213318/reactions,0,0,0,0,0,0,0,0,0,14117
2132,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723220399,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723220399,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723220399,IC_kwDOBWUGps5mtkGv,2023-09-18T11:29:04Z,2023-09-18T11:29:20Z,CONTRIBUTOR,I think I installed tensorflow the same way. It's also the same version (2.12.1). But running on bare metal.,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723220399/reactions,0,0,0,0,0,0,0,0,0,14117
2133,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723224953,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723224953,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723224953,IC_kwDOBWUGps5mtlN5,2023-09-18T11:32:27Z,2023-09-18T11:32:27Z,CONTRIBUTOR,Which cuda version do you use?,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723224953/reactions,0,0,0,0,0,0,0,0,0,14117
2134,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723238987,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1723238987,https://api.github.com/repos/rapidsai/cudf/issues/14117,1723238987,IC_kwDOBWUGps5mtopL,2023-09-18T11:42:46Z,2023-09-18T11:42:46Z,CONTRIBUTOR,"I have `NVIDIA-SMI 525.125.06   Driver Version: 525.125.06   CUDA Version: 12.0` and:
```
$ mamba list | grep cuda
# packages in environment at /home/wence/Documents/src/rapids/compose/etc/conda/cuda_11.8/envs/rapids:
cuda-nvtx                 11.8.86                       0    nvidia
cuda-python               11.8.2          py310h01a121a_0    conda-forge
cuda-sanitizer-api        11.8.86                       0    nvidia
cuda-version              11.8                 h70ddcb2_2    conda-forge
cudatoolkit               11.8.0              h4ba93d1_12    conda-forge
dask-cuda                 23.10.00a       py310_230911_g63ba2cc_12    rapidsai-nightly
libkvikio                 23.10.00a       cuda11_230911_gc85abd5_17    rapidsai-nightly
tensorflow                2.12.1          cuda112py310h457873b_0    conda-forge
tensorflow-base           2.12.1          cuda112py310h622e808_0    conda-forge
tensorflow-estimator      2.12.1          cuda112py310ha5e6de5_0    conda-forge
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1723238987/reactions,0,0,0,0,0,0,0,0,0,14117
2135,https://api.github.com/repos/rapidsai/cudf/issues/comments/1725488649,https://github.com/rapidsai/cudf/issues/14117#issuecomment-1725488649,https://api.github.com/repos/rapidsai/cudf/issues/14117,1725488649,IC_kwDOBWUGps5m2N4J,2023-09-19T13:16:15Z,2023-09-19T13:16:15Z,CONTRIBUTOR,xref: https://github.com/tensorflow/tensorflow/issues/61911,,isVoid,13521008,MDQ6VXNlcjEzNTIxMDA4,https://avatars.githubusercontent.com/u/13521008?v=4,,https://api.github.com/users/isVoid,https://github.com/isVoid,https://api.github.com/users/isVoid/followers,https://api.github.com/users/isVoid/following{/other_user},https://api.github.com/users/isVoid/gists{/gist_id},https://api.github.com/users/isVoid/starred{/owner}{/repo},https://api.github.com/users/isVoid/subscriptions,https://api.github.com/users/isVoid/orgs,https://api.github.com/users/isVoid/repos,https://api.github.com/users/isVoid/events{/privacy},https://api.github.com/users/isVoid/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1725488649/reactions,0,0,0,0,0,0,0,0,0,14117
2136,https://api.github.com/repos/rapidsai/cudf/issues/comments/1728369766,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1728369766,https://api.github.com/repos/rapidsai/cudf/issues/14144,1728369766,IC_kwDOBWUGps5nBNRm,2023-09-20T20:18:55Z,2023-09-20T20:18:55Z,CONTRIBUTOR,"For reference here is a list of the suspect characters: https://www.compart.com/en/unicode/category/Lt
Seems the `cudf::strings::capitalize()` should handle these by default (no special option) if possible.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1728369766/reactions,0,0,0,0,0,0,0,0,0,14144
2137,https://api.github.com/repos/rapidsai/cudf/issues/comments/1729898366,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1729898366,https://api.github.com/repos/rapidsai/cudf/issues/14144,1729898366,IC_kwDOBWUGps5nHCd-,2023-09-21T16:17:59Z,2023-09-21T16:17:59Z,CONTRIBUTOR,"Great to hear that CUDF will do it by default. I ma a little concerned because ß is the one that bit us in our testing, but it does not show up in https://www.compart.com/en/unicode/category/Lt",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1729898366/reactions,0,0,0,0,0,0,0,0,0,14144
2138,https://api.github.com/repos/rapidsai/cudf/issues/comments/1881231810,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1881231810,https://api.github.com/repos/rapidsai/cudf/issues/14144,1881231810,IC_kwDOBWUGps5wIVHC,2024-01-08T15:29:28Z,2024-01-08T15:38:40Z,CONTRIBUTOR,"So the `ß` character looks to be a separate special case. 
The upper-case of `ß` is actually `SS` (two capital S's) which the code already supports:
```
>>> import cudf
>>> s = 'ßeta'
>>> s.upper()
'SSETA'
>>> gs = cudf.Series([s])
>>> gs.str.upper()
0    SSETA
```
But it looks like when capitalizing `ß` the second S is not upper-cased in Python:
```
>>> s.capitalize()
'Sseta'
>>> gs.str.capitalize()
0    SSeta
```
I've not been able to find documentation on this behavior so I would be curious to know what is expected by Spark when capitalizing `ß`
I did a quick test with the `capitalize()` function from [org.apache.commons.lang3.StringUtils](https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html) and got a different result as well. Also, the `upperCase()` and `String.toUpperCase()` functions both return `SSETA`.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1881231810/reactions,0,0,0,0,0,0,0,0,0,14144
2139,https://api.github.com/repos/rapidsai/cudf/issues/comments/1881756501,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1881756501,https://api.github.com/repos/rapidsai/cudf/issues/14144,1881756501,IC_kwDOBWUGps5wKVNV,2024-01-08T20:15:21Z,2024-01-08T20:15:21Z,CONTRIBUTOR,"```
val df = Seq(""ßeta"", ""Sseta"").toDF
df.selectExpr(""value"", ""upper(value)"", ""lower(value)"", ""initcap(value)"", ""lower(upper(value))"").show()
+-----+------------+------------+--------------+-------------------+
|value|upper(value)|lower(value)|initcap(value)|lower(upper(value))|
+-----+------------+------------+--------------+-------------------+
| ßeta|       SSETA|        ßeta|          ßeta|              sseta|
|Sseta|       SSETA|       sseta|         Sseta|              sseta|
+-----+------------+------------+--------------+-------------------+
```

I hope that this helps. Strings in Spark are kind of special as they wrote their own [UTF8String](https://github.com/apache/spark/blob/master/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java) implementation
`upper` is [`UTF8String.toUpperCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L367-L388), 
`lower` is [`UTF8String.toLowerCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L397-L418), and 
`initcap` is [`UTF8String.toLowerCase.toTitleCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L427-L451).",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1881756501/reactions,0,0,0,0,0,0,0,0,0,14144
2140,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885681110,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1885681110,https://api.github.com/repos/rapidsai/cudf/issues/14144,1885681110,IC_kwDOBWUGps5wZTXW,2024-01-10T20:35:31Z,2024-01-10T20:35:31Z,CONTRIBUTOR,"The `initcap()` appears to match results I see with `org.apache.commons.lang3.StringUtils.capitalize()` both of which just pass through the `ß` character unchanged. 

I found a few more characters that are not part of the titlecase Unicode definition and behave like `ß`:

```
ß   (223) -> SS (83,83)     : Ss (83,115)
և  (1415) -> ԵՒ (1333,1362) : Եւ (1333,1410)
ﬀ (64256) -> FF (70,70)     : Ff (70,102)
ﬁ (64257) -> FI (70,73)     : Fi (70,105)
ﬂ (64258) -> FL (70,76)     : Fl (70,108)
ﬃ (64259) -> FFI (70,70,73) : Ffi (70,102,105)
ﬄ (64260) -> FFL (70,70,76) : Ffl (70,102,108)
ﬅ (64261) -> ST (83,84)     : St (83,116)
ﬆ (64262) -> ST (83,84)     : St (83,116)
ﬓ (64275) -> ՄՆ (1348,1350) : Մն (1348,1398)
ﬔ (64276) -> ՄԵ (1348,1333) : Մե (1348,1381)
ﬕ (64277) -> ՄԻ (1348,1339) : Մի (1348,1387)
ﬖ (64278) -> ՎՆ (1358,1350) : Վն (1358,1398)
ﬗ (64279) -> ՄԽ (1348,1341) : Մխ (1348,1389)
```

The Python (and Pandas) output for `capitalize()` (which also matches`title()`) is included above after the `:`. Generally, in the multi-character output for `upper()` the characters after the first character are lower-cased for `capitalize()` (and `title()`).

But all of these pass through unchanged with `org.apache.commons.lang3.StringUtils.capitalize()` so I suspect the same pass through result from `initcap()` for these as well.

Regardless, the libcudf result matches neither and so the inclination is to fix it to match the Python/Pandas result.
I was also able to verify that C++ `Boost Locale` library supports these characters and match the Python results as well.
The [`boost::locale` class](https://www.boost.org/doc/libs/1_82_0/libs/locale/doc/html/group__convert.html#ga0cf65ff4ea4bf502c667823c0137a225) is implemented using the [ICU library](https://icu.unicode.org/) which provides a rich set of globalization functions for software applications.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885681110/reactions,0,0,0,0,0,0,0,0,0,14144
2141,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904802469,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1904802469,https://api.github.com/repos/rapidsai/cudf/issues/14144,1904802469,IC_kwDOBWUGps5xiPql,2024-01-22T20:56:22Z,2024-01-22T20:56:22Z,CONTRIBUTOR,"Sorry I have not been following this as closely as I should.

@davidwendt so the proposal is to make the CUDF code match python/pandas, but not Spark?

@sameerz if that is true then we will need to write a custom kernel for initcap for Spark.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904802469/reactions,0,0,0,0,0,0,0,0,0,14144
2142,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904833984,https://github.com/rapidsai/cudf/issues/14144#issuecomment-1904833984,https://api.github.com/repos/rapidsai/cudf/issues/14144,1904833984,IC_kwDOBWUGps5xiXXA,2024-01-22T21:17:39Z,2024-01-22T21:17:39Z,CONTRIBUTOR,"Just FYI: From a Spark perspective I found 265 characters that produce different values between the CPU implementation and the GPU one.  Their code points are.

(223, 304, 329, 452, 454, 455, 457, 458, 460, 496, 497, 499, 604, 609, 618, 620, 642, 647, 669, 670, 912, 944, 1011, 1012, 1321, 1323, 1325, 1327, 1415, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4349, 4350, 4351, 5112, 5113, 5114, 5115, 5116, 5117, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7566, 7830, 7831, 7832, 7833, 7834, 7838, 8016, 8018, 8020, 8022, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8114, 8115, 8116, 8118, 8119, 8130, 8131, 8132, 8134, 8135, 8146, 8147, 8150, 8151, 8162, 8163, 8164, 8166, 8167, 8178, 8179, 8180, 8182, 8183, 8486, 8490, 8491, 42649, 42651, 42900, 42903, 42905, 42907, 42909, 42911, 42933, 42935, 42937, 42939, 42941, 42943, 42947, 43859, 43888, 43889, 43890, 43891, 43892, 43893, 43894, 43895, 43896, 43897, 43898, 43899, 43900, 43901, 43902, 43903, 43904, 43905, 43906, 43907, 43908, 43909, 43910, 43911, 43912, 43913, 43914, 43915, 43916, 43917, 43918, 43919, 43920, 43921, 43922, 43923, 43924, 43925, 43926, 43927, 43928, 43929, 43930, 43931, 43932, 43933, 43934, 43935, 43936, 43937, 43938, 43939, 43940, 43941, 43942, 43943, 43944, 43945, 43946, 43947, 43948, 43949, 43950, 43951, 43952, 43953, 43954, 43955, 43956, 43957, 43958, 43959, 43960, 43961, 43962, 43963, 43964, 43965, 43966, 43967, 64256, 64257, 64258, 64259, 64260, 64261, 64262, 64265, 64266, 64267, 64268, 64269, 64275, 64276, 64277, 64278, 64279)",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1904833984/reactions,2,1,0,1,0,0,0,0,0,14144
2143,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777548603,https://github.com/rapidsai/cudf/issues/14169#issuecomment-1777548603,https://api.github.com/repos/rapidsai/cudf/issues/14169,1777548603,IC_kwDOBWUGps5p8z07,2023-10-24T15:59:56Z,2023-10-24T15:59:56Z,CONTRIBUTOR,"@bdice I found the PR that was responsible for resolving this issue in the arrow project: https://github.com/apache/arrow/pull/35997

Would you be able to take a look at this in `libcudf`? ",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1777548603/reactions,0,0,0,0,0,0,0,0,0,14169
2144,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828711601,https://github.com/rapidsai/cudf/issues/14169#issuecomment-1828711601,https://api.github.com/repos/rapidsai/cudf/issues/14169,1828711601,IC_kwDOBWUGps5s_-yx,2023-11-27T22:15:44Z,2023-11-27T22:15:44Z,CONTRIBUTOR,I'm hoping to work on this in 24.02 but not sure if I'll have time in this release. It's on my list of tasks.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828711601/reactions,0,0,0,0,0,0,0,0,0,14169
2145,https://api.github.com/repos/rapidsai/cudf/issues/comments/1942635942,https://github.com/rapidsai/cudf/issues/14169#issuecomment-1942635942,https://api.github.com/repos/rapidsai/cudf/issues/14169,1942635942,IC_kwDOBWUGps5zykWm,2024-02-13T21:33:39Z,2024-02-13T21:33:39Z,CONTRIBUTOR,"I'm working on a set of changes to try to address this. 
",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1942635942/reactions,1,0,0,0,0,0,1,0,0,14169
2146,https://api.github.com/repos/rapidsai/cudf/issues/comments/2140945805,https://github.com/rapidsai/cudf/issues/14169#issuecomment-2140945805,https://api.github.com/repos/rapidsai/cudf/issues/14169,2140945805,IC_kwDOBWUGps5_nD2N,2024-05-30T22:20:47Z,2024-05-30T22:20:47Z,CONTRIBUTOR,"Update: This work has been broken into many separate PRs, 4 of which have been merged so far: 

[Explicit conversion PR](https://github.com/rapidsai/cudf/pull/15438)
[Benchmarking PR](https://github.com/rapidsai/cudf/pull/15334)
[Powers-of-10 PR](https://github.com/rapidsai/cudf/pull/15353)
[Utilities PR](https://github.com/rapidsai/cudf/pull/15359)

The primary PR will be submitted very soon.  I'm putting some finishing touches on it based off of conversations with @ttnghia on handling some of the edge cases. 
 ",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2140945805/reactions,0,0,0,0,0,0,0,0,0,14169
2147,https://api.github.com/repos/rapidsai/cudf/issues/comments/1735932639,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1735932639,https://api.github.com/repos/rapidsai/cudf/issues/14192,1735932639,IC_kwDOBWUGps5neDrf,2023-09-26T16:54:42Z,2023-09-26T16:54:42Z,CONTRIBUTOR,"I'm not able to reproduce the error on my local libcudf build.
```
$ /usr/local/cuda/bin/compute-sanitizer --version
NVIDIA (R) Compute Sanitizer
Copyright (c) 2020-2023 NVIDIA Corporation
Version 2022.4.1
```
```
$ nvcc --version
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2022 NVIDIA Corporation
Built on Mon_Oct_24_19:12:58_PDT_2022
Cuda compilation tools, release 12.0, V12.0.76
Build cuda_12.0.r12.0/compiler.31968024_0
```",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1735932639/reactions,0,0,0,0,0,0,0,0,0,14192
2148,https://api.github.com/repos/rapidsai/cudf/issues/comments/1735941711,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1735941711,https://api.github.com/repos/rapidsai/cudf/issues/14192,1735941711,IC_kwDOBWUGps5neF5P,2023-09-26T17:00:44Z,2023-09-26T17:36:12Z,CONTRIBUTOR,"We have a few reductions tests in libcudf that use min-aggregation followed by a call to max-aggregation. Here is one that executes with `int16` types:
https://github.com/rapidsai/cudf/blob/3196f6c36140962818aa8d12fe4fbd0dc522e31e/cpp/tests/reductions/reduction_tests.cpp#L152-L157
All of the tests are run with compute-sanitizer in our nightly builds
Curious if these tests also fail for you in your environment as well.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1735941711/reactions,0,0,0,0,0,0,0,0,0,14192
2149,https://api.github.com/repos/rapidsai/cudf/issues/comments/1737442729,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1737442729,https://api.github.com/repos/rapidsai/cudf/issues/14192,1737442729,IC_kwDOBWUGps5nj0Wp,2023-09-27T13:50:21Z,2023-09-27T13:50:21Z,CONTRIBUTOR,I suspect that this is the same as my previous reported issue: https://github.com/rapidsai/cudf/issues/13685,,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1737442729/reactions,0,0,0,0,0,0,0,0,0,14192
2150,https://api.github.com/repos/rapidsai/cudf/issues/comments/1737453350,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1737453350,https://api.github.com/repos/rapidsai/cudf/issues/14192,1737453350,IC_kwDOBWUGps5nj28m,2023-09-27T13:55:56Z,2023-09-27T13:55:56Z,CONTRIBUTOR,"> Curious if these tests also fail for you in your environment as well.

Yes, they also fail.
I copied the `reduction_tests.cpp` file to [spark-rapids-jni](https://github.com/NVIDIA/spark-rapids-jni/tree/branch-23.10/src/main/cpp/tests), and compiled to an executable.
Tried to directly compile against the cuDF code, but the compile failed. So I copied the `reduction_tests.cpp` to spark-rapids-jni project and compile.",,res-life,8166419,MDQ6VXNlcjgxNjY0MTk=,https://avatars.githubusercontent.com/u/8166419?v=4,,https://api.github.com/users/res-life,https://github.com/res-life,https://api.github.com/users/res-life/followers,https://api.github.com/users/res-life/following{/other_user},https://api.github.com/users/res-life/gists{/gist_id},https://api.github.com/users/res-life/starred{/owner}{/repo},https://api.github.com/users/res-life/subscriptions,https://api.github.com/users/res-life/orgs,https://api.github.com/users/res-life/repos,https://api.github.com/users/res-life/events{/privacy},https://api.github.com/users/res-life/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1737453350/reactions,0,0,0,0,0,0,0,0,0,14192
2151,https://api.github.com/repos/rapidsai/cudf/issues/comments/1740109101,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1740109101,https://api.github.com/repos/rapidsai/cudf/issues/14192,1740109101,IC_kwDOBWUGps5nt_Ut,2023-09-28T23:08:58Z,2023-09-28T23:08:58Z,CONTRIBUTOR,"This seems specific to your test environment since our nightly compute-sanitizer does not fail running `reduction_tests.cpp` and I cannot reproduce the error locally either.

Perhaps you can provide some details on the environment. 
Is libcudf.so being built from source or downloaded from conda, etc?
Is there a way to duplicate an environment where we could debug libcudf (e.g. compile and link specific modules)?

I see mention of a docker image in the description. Does the error occur only on centos7?
This kind of error would not be silent and so should be occurring always. Does it show up in your normal testing?
In other words, does the error occur without running compute-sanitizer? 
If not, perhaps this could be a compute-sanitizer bug on CUDA-12 on centos7 instead.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1740109101/reactions,0,0,0,0,0,0,0,0,0,14192
2152,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743119623,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1743119623,https://api.github.com/repos/rapidsai/cudf/issues/14192,1743119623,IC_kwDOBWUGps5n5eUH,2023-10-02T14:24:57Z,2023-10-02T14:24:57Z,MEMBER,"> Is libcudf.so being built from source or downloaded from conda, etc? 

This is a custom build of libcudf for the RAPIDS Accelerator, where we are compiling libcudf as a PIC static library that is ultimately linked into a shared library and used by the JVM.

> Is there a way to duplicate an environment where we could debug libcudf (e.g. compile and link specific modules)?
> I see mention of a docker image in the description. Does the error occur only on centos7?

The Docker image is used to produce this build, see https://github.com/NVIDIA/spark-rapids-jni/blob/branch-23.10/CONTRIBUTING.md#building-in-the-docker-container.  After pulling the spark-rapids-jni and executing the build-in-docker script, the libcudf install will be in spark-rapids-jni/target/libcudf-install/.  You can use the run-in-docker script to get an interactive shell within the same environment as the build env if desired.

The result of the build can be run on any supported OS (e.g.: Ubuntu).  I don't know if the error has been reproduced in different OS's.

> This kind of error would not be silent and so should be occurring always. Does it show up in your normal testing?

No, it only occurs when running under the compute-sanitizer, and specifically when compiling with CUDA12.  I agree that at this point it appears to be a compute-sanitizer bug specific to CUDA 12.

",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743119623/reactions,0,0,0,0,0,0,0,0,0,14192
2153,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804284370,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1804284370,https://api.github.com/repos/rapidsai/cudf/issues/14192,1804284370,IC_kwDOBWUGps5rizHS,2023-11-09T17:46:55Z,2023-11-09T17:46:55Z,CONTRIBUTOR,"> I agree that at this point it appears to be a compute-sanitizer bug specific to CUDA 12.
If true, then the action here will be to file an nvbug with the compute-sanitizer team.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804284370/reactions,0,0,0,0,0,0,0,0,0,14192
2154,https://api.github.com/repos/rapidsai/cudf/issues/comments/1941133642,https://github.com/rapidsai/cudf/issues/14192#issuecomment-1941133642,https://api.github.com/repos/rapidsai/cudf/issues/14192,1941133642,IC_kwDOBWUGps5zs1lK,2024-02-13T10:38:05Z,2024-02-13T10:38:05Z,CONTRIBUTOR,Curious if this is perhaps resolved with the fixes for this issue https://github.com/NVIDIA/spark-rapids-jni/issues/1567 ,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1941133642/reactions,0,0,0,0,0,0,0,0,0,14192
2155,https://api.github.com/repos/rapidsai/cudf/issues/comments/1740546487,https://github.com/rapidsai/cudf/issues/14229#issuecomment-1740546487,https://api.github.com/repos/rapidsai/cudf/issues/14229,1740546487,IC_kwDOBWUGps5nvqG3,2023-09-29T08:57:35Z,2023-09-29T08:57:35Z,CONTRIBUTOR,"After some (long) discussions, my current position is:

1. cudf Python should explicitly pass memory resources to all calls to libcudf that require them.
2. It was a mistake to provide defaulted `mr = rmm::mr::get_current_device_resource()` in all functions in libcudf that allocate data, since in the presence of a third-party library that is also using RMM we have no control of the provenance of this pointer and therefore cannot guarantee the lifetime of the memory resource it points to.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1740546487/reactions,0,0,0,0,0,0,0,0,0,14229
2156,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743784296,https://github.com/rapidsai/cudf/issues/14239#issuecomment-1743784296,https://api.github.com/repos/rapidsai/cudf/issues/14239,1743784296,IC_kwDOBWUGps5n8Alo,2023-10-02T21:20:47Z,2023-10-02T21:20:47Z,CONTRIBUTOR,"We have some code that @ttnghia wrote. It will convert a range of tokens to a normalized string that matches what Spark wants. We did this for some Spark specific functionality with JSON parsing related to returning a Map instead of a Struct.

https://github.com/NVIDIA/spark-rapids-jni/blob/54ef9991f46fa873d580315212aeae345da7152a/src/main/cpp/src/map_utils.cu#L63-L112

I am not sure if this is really something that CUDF wants, but it is at least a starting point. ",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1743784296/reactions,1,1,0,0,0,0,0,0,0,14239
2157,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845680168,https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845680168,https://api.github.com/repos/rapidsai/cudf/issues/14239,1845680168,IC_kwDOBWUGps5uAtgo,2023-12-07T16:43:47Z,2023-12-07T16:43:47Z,CONTRIBUTOR,"Here are some examples, showing input and expected output.

```
# Example 1: Mixed primitive types in struct

INPUT:

{ ""a"": ""123"" }
{ ""a"": 123 }

EXPECTED:

+-----------+
|    my_json|
+-----------+
|{""a"":""123""}|
|{""a"":""123""}|
+-----------+

# Example 2: Mixed structs and lists in struct

INPUT:

{ ""a"": [1,2,3] }
{ ""a"": { ""b"": 1 } }

EXPECTED:

+-----------------+
|          my_json|
+-----------------+
|  {""a"":""[1,2,3]""}|
|{""a"":""{\""b\"":1}""}|
+-----------------+

# Example 3: Mixed structs and primitives in struct

INPUT:

{ ""a"": ""fox"" }
{ ""a"": { ""b"": 1 } }

EXPECTED:

+-----------------+
|my_json          |
+-----------------+
|{""a"":""fox""}      |
|{""a"":""{\""b\"":1}""}|
+-----------------+

# Example 4: Mixed lists and primitives in struct

INPUT:

{ ""a"": [1,2,3] }
{ ""a"": ""fox"" }

EXPECTED:

+---------------+
|my_json        |
+---------------+
|{""a"":""[1,2,3]""}|
|{""a"":""fox""}    |
+---------------+
```",,andygrove,934084,MDQ6VXNlcjkzNDA4NA==,https://avatars.githubusercontent.com/u/934084?v=4,,https://api.github.com/users/andygrove,https://github.com/andygrove,https://api.github.com/users/andygrove/followers,https://api.github.com/users/andygrove/following{/other_user},https://api.github.com/users/andygrove/gists{/gist_id},https://api.github.com/users/andygrove/starred{/owner}{/repo},https://api.github.com/users/andygrove/subscriptions,https://api.github.com/users/andygrove/orgs,https://api.github.com/users/andygrove/repos,https://api.github.com/users/andygrove/events{/privacy},https://api.github.com/users/andygrove/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845680168/reactions,0,0,0,0,0,0,0,0,0,14239
2158,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845685377,https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845685377,https://api.github.com/repos/rapidsai/cudf/issues/14239,1845685377,IC_kwDOBWUGps5uAuyB,2023-12-07T16:46:51Z,2023-12-07T16:46:51Z,CONTRIBUTOR,"There is a separate use case for arrays where the array element type differs between records. Spark infers the type as `Array<String>` in this case.

This is not necessarily a high priority and could be split out into a separate issue, but I'd like to point it out here for visibility.

```
# Example: Mixed primitive arrays in struct

INPUT:

{ ""a"": [1,2,3] }
{ ""a"": [true,false,true] }
{ ""a"": [""a"", ""b"", ""c""] }

EXPECTED:

+-----------------------------+
|my_json                      |
+-----------------------------+
|{""a"":[""1"",""2"",""3""]}          |
|{""a"":[""true"",""false"",""true""]}|
|{""a"":[""a"",""b"",""c""]}          |
+-----------------------------+
```",,andygrove,934084,MDQ6VXNlcjkzNDA4NA==,https://avatars.githubusercontent.com/u/934084?v=4,,https://api.github.com/users/andygrove,https://github.com/andygrove,https://api.github.com/users/andygrove/followers,https://api.github.com/users/andygrove/following{/other_user},https://api.github.com/users/andygrove/gists{/gist_id},https://api.github.com/users/andygrove/starred{/owner}{/repo},https://api.github.com/users/andygrove/subscriptions,https://api.github.com/users/andygrove/orgs,https://api.github.com/users/andygrove/repos,https://api.github.com/users/andygrove/events{/privacy},https://api.github.com/users/andygrove/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845685377/reactions,0,0,0,0,0,0,0,0,0,14239
2159,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949393497,https://github.com/rapidsai/cudf/issues/14239#issuecomment-1949393497,https://api.github.com/repos/rapidsai/cudf/issues/14239,1949393497,IC_kwDOBWUGps50MWJZ,2024-02-16T21:58:25Z,2024-02-16T21:58:25Z,CONTRIBUTOR,"We made significant progress on this issue with #14572, and I believe we will be able to close it after #14936. @andygrove would you please let us know if there are other cases to consider?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1949393497/reactions,0,0,0,0,0,0,0,0,0,14239
2160,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960409097,https://github.com/rapidsai/cudf/issues/14239#issuecomment-1960409097,https://api.github.com/repos/rapidsai/cudf/issues/14239,1960409097,IC_kwDOBWUGps502XgJ,2024-02-22T22:17:14Z,2024-02-22T22:17:31Z,CONTRIBUTOR,"For all the examples in https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845680168, I see the correct results with https://github.com/rapidsai/cudf/pull/14936.

For the mixed array example in https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845685377 I still do not see the correct results, so I filed a separate issue for this one (https://github.com/rapidsai/cudf/issues/15120).

",,andygrove,934084,MDQ6VXNlcjkzNDA4NA==,https://avatars.githubusercontent.com/u/934084?v=4,,https://api.github.com/users/andygrove,https://github.com/andygrove,https://api.github.com/users/andygrove/followers,https://api.github.com/users/andygrove/following{/other_user},https://api.github.com/users/andygrove/gists{/gist_id},https://api.github.com/users/andygrove/starred{/owner}{/repo},https://api.github.com/users/andygrove/subscriptions,https://api.github.com/users/andygrove/orgs,https://api.github.com/users/andygrove/repos,https://api.github.com/users/andygrove/events{/privacy},https://api.github.com/users/andygrove/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960409097/reactions,0,0,0,0,0,0,0,0,0,14239
2161,https://api.github.com/repos/rapidsai/cudf/issues/comments/1751813070,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1751813070,https://api.github.com/repos/rapidsai/cudf/issues/14258,1751813070,IC_kwDOBWUGps5oaovO,2023-10-07T20:37:35Z,2023-10-08T00:52:24Z,CONTRIBUTOR,"Looking at a hex dump of the file, it seems the page data is padded with an extra 8 bytes of zero valued bytes. The string length calculation is likely just using the data length minus `4*num_values` to calculate the string buffer length, so the pad bytes are being included in the final string. This is unfortunate because it means the quick short cut to getting the string lengths can't be used and we'll instead always have to do an expensive traversal of the plain encoded string data. :( 

TBH I'd consider this a bug on the write side...I'll have to check the spec to see if these padding bytes are forbidden or this is just a gray area.

Looking at fastparquet, it seems the padding was added to get some tests to pass.  See [this](https://github.com/dask/fastparquet/commit/8f62b0efa195099228b6201afd64cc8981df0f52) commit (writer.py, lines 452 and 484). I wonder if it's worth bringing up with the fastparquet devs, adding garbage padding to byte array columns should not be necessary.

The relevant line in the current fastparquet is [here](https://github.com/dask/fastparquet/blame/58cdab6adc72c377e2460f90b05e90b9140ddf29/fastparquet/writer.py#L622)",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1751813070/reactions,2,1,0,0,0,0,0,0,1,14258
2162,https://api.github.com/repos/rapidsai/cudf/issues/comments/1753558860,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1753558860,https://api.github.com/repos/rapidsai/cudf/issues/14258,1753558860,IC_kwDOBWUGps5ohS9M,2023-10-09T19:20:44Z,2023-10-09T19:20:44Z,CONTRIBUTOR,"Just FYI, here's a profile showing the impact of having to do the string size calculation the hard way. The profile shows reading 50M lines from a large parquet file containing plain encoded strings. The top profile is traversing the encoded string data, summing string lengths as it goes. Due to the structure of the data, this cannot be parallelized so a single thread per page is doing this operation. The bottom profile uses the page data size from the header to calculate string sizes. The call to `gpuComputeStringSizes` in the former takes 848ms, nearly doubling the read time. Overall read time for the entire file (200M rows, 8.6GB) goes from 3.5s to 6.9s.

![Screenshot from 2023-10-09 11-53-07](https://github.com/rapidsai/cudf/assets/25541553/7e5e02b1-9ee2-4fce-8861-c1fae7701b54)

",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1753558860/reactions,0,0,0,0,0,0,0,0,0,14258
2163,https://api.github.com/repos/rapidsai/cudf/issues/comments/1754410825,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1754410825,https://api.github.com/repos/rapidsai/cudf/issues/14258,1754410825,IC_kwDOBWUGps5oki9J,2023-10-10T05:22:59Z,2023-10-10T05:22:59Z,CONTRIBUTOR,"> I'll have to check the spec to see if these padding bytes are forbidden or this is just a gray area.

Thank you for the analysis, @etseidl. This has me curious.

The main reason I considered this might be something we should address is that the Spark Parquet reader, and the parquet tools seem to read the file correctly. ",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1754410825/reactions,0,0,0,0,0,0,0,0,0,14258
2164,https://api.github.com/repos/rapidsai/cudf/issues/comments/1754432002,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1754432002,https://api.github.com/repos/rapidsai/cudf/issues/14258,1754432002,IC_kwDOBWUGps5okoIC,2023-10-10T05:47:39Z,2023-10-12T20:57:51Z,CONTRIBUTOR,"> The main reason I considered this might be something we should address is that the Spark Parquet reader, and the parquet tools seem to read the file correctly.

Yep, because they're reading a page at a time in batches, so they don't need to worry about exact total sizes, they just read the length of each string as they consume it. Even libcudf as of last year would have read that file ok because the string reads were done in two passes.  Now that we have the single pass read, we need to rely on accurate metadata to get the string data copied into the correct places in the column buffer.

As usual, the Parquet spec is silent on this. The closest I could find to an answer is in the section on data pages, where it is stated that the `uncompressed_page_size` field is the sum of rep level data, def level data, and encoded values. I personally think adding the 8 bytes of padding is kind of hacky, and it's just a happy accident that other readers are ok with that.

Edit: Actually, I missed [this](https://github.com/apache/parquet-format#data-pages) ""For data pages, the 3 pieces of information are encoded back to back, after the page header. No padding is allowed in the data page."" 

Anyway, so as to not kill performance for all, would it be acceptable to add an option to do the more expensive string size calculation when necessary?",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1754432002/reactions,1,1,0,0,0,0,0,0,0,14258
2165,https://api.github.com/repos/rapidsai/cudf/issues/comments/1760145934,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1760145934,https://api.github.com/repos/rapidsai/cudf/issues/14258,1760145934,IC_kwDOBWUGps5o6bIO,2023-10-12T18:24:25Z,2023-10-12T18:24:25Z,CONTRIBUTOR,"Thank you @etseidl and @mythrocks for studying this anomaly. If we did have a reader option to pre-compute sizes, would Spark-RAPIDS have to always set this option to make sure we are correctly avoiding this behavior in the fastparquet writer? 

Do you think there could be any sensible postprocessing options to trim the null characters? TBH I didn't even know null characters could exist.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1760145934/reactions,0,0,0,0,0,0,0,0,0,14258
2166,https://api.github.com/repos/rapidsai/cudf/issues/comments/1760182379,https://github.com/rapidsai/cudf/issues/14258#issuecomment-1760182379,https://api.github.com/repos/rapidsai/cudf/issues/14258,1760182379,IC_kwDOBWUGps5o6kBr,2023-10-12T18:39:21Z,2023-10-12T18:39:21Z,CONTRIBUTOR,"> If we did have a reader option to pre-compute sizes, would Spark-RAPIDS have to always set this option to make sure we are correctly avoiding this behavior in the fastparquet writer?

Yes...or we could turn it around and make the slow pre-compute the default, and enable the faster version on demand. But if fastparquet fixes their writer (I don't see why they wouldn't, they did not do the padding for V2 pages, for instance), then the cudf reader would be slower by default for no reason. A brittle option would be to check the `created_by` tag in the metadata and enable the slow reader if fastparquet is detected there.

> Do you think there could be any sensible postprocessing options to trim the null characters?

Well, you'd wind up with a column buffer with holes in it.  `CCCC00CCCCCCC00CCCCCCC`. You would have to shift chunks of char data left and update the offsets array to match.

> TBH I didn't even know null characters could exist.

They're just byte arrays, with an annotation to interpret as UTF8 strings, so null chars are just fine.  The trouble here is fastparquet is adding this padding and counting it in the data size, even though it's not strictly data.
",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1760182379/reactions,2,1,0,1,0,0,0,0,0,14258
2167,https://api.github.com/repos/rapidsai/cudf/issues/comments/1822957951,https://github.com/rapidsai/cudf/issues/14267#issuecomment-1822957951,https://api.github.com/repos/rapidsai/cudf/issues/14267,1822957951,IC_kwDOBWUGps5sqCF_,2023-11-22T15:11:34Z,2023-11-22T15:11:34Z,CONTRIBUTOR,Cross-referencing #14472,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1822957951/reactions,0,0,0,0,0,0,0,0,0,14267
2168,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804290563,https://github.com/rapidsai/cudf/issues/14268#issuecomment-1804290563,https://api.github.com/repos/rapidsai/cudf/issues/14268,1804290563,IC_kwDOBWUGps5ri0oD,2023-11-09T17:51:28Z,2023-11-09T17:51:28Z,CONTRIBUTOR,"Thank you @ayushdg for reporting this. Would you please help us create a minimum repro for these files? The issue is probably in the way the files are being concatenated, and the files must have some property that we didn't expect.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804290563/reactions,0,0,0,0,0,0,0,0,0,14268
2169,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810479902,https://github.com/rapidsai/cudf/issues/14268#issuecomment-1810479902,https://api.github.com/repos/rapidsai/cudf/issues/14268,1810479902,IC_kwDOBWUGps5r6bse,2023-11-14T15:40:11Z,2023-11-14T15:40:11Z,CONTRIBUTOR,"@ayushdg what is the failure error?
Please share the files to reproduce this error.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810479902/reactions,0,0,0,0,0,0,0,0,0,14268
2170,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810625339,https://github.com/rapidsai/cudf/issues/14268#issuecomment-1810625339,https://api.github.com/repos/rapidsai/cudf/issues/14268,1810625339,IC_kwDOBWUGps5r6_M7,2023-11-14T16:30:40Z,2023-11-14T16:30:40Z,MEMBER,"Thanks for following up. On further inspection it looks like it was happening because some of the jsonl files were empty which ended up tripping/confusing the parser when reading multiple files simultaneously. 

For the time being we explicitly check for empty files in the curator codebase, but I wonder if there's scope for better error messages here instead of the json parser error at location xyz. ",,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810625339/reactions,0,0,0,0,0,0,0,0,0,14268
2171,https://api.github.com/repos/rapidsai/cudf/issues/comments/1822892252,https://github.com/rapidsai/cudf/issues/14268#issuecomment-1822892252,https://api.github.com/repos/rapidsai/cudf/issues/14268,1822892252,IC_kwDOBWUGps5spyDc,2023-11-22T14:36:47Z,2023-11-22T14:36:47Z,CONTRIBUTOR,"FWIW, I can't reproduce a failure with a minimal set of files with two non-empty and one empty one.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1822892252/reactions,0,0,0,0,0,0,0,0,0,14268
2172,https://api.github.com/repos/rapidsai/cudf/issues/comments/1816959958,https://github.com/rapidsai/cudf/issues/14294#issuecomment-1816959958,https://api.github.com/repos/rapidsai/cudf/issues/14294,1816959958,IC_kwDOBWUGps5sTJvW,2023-11-17T19:20:08Z,2023-11-17T19:20:08Z,CONTRIBUTOR,"Besides accepting the vocab file directly instead of the hashed input, specifically want to ask about the parameters and return values for this function: https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.core.subword_tokenizer.subwordtokenizer.__call__/#cudf.core.subword_tokenizer.SubwordTokenizer.__call__
I believe some of these pre-date the lists-column support in cuDF and so I'm wondering if that could used as be a better result than returning the three individual arrays.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1816959958/reactions,0,0,0,0,0,0,0,0,0,14294
2173,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778446650,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1778446650,https://api.github.com/repos/rapidsai/cudf/issues/14314,1778446650,IC_kwDOBWUGps5qAPE6,2023-10-25T03:26:43Z,2023-10-25T03:26:43Z,CONTRIBUTOR,"The new design for `cuda::mr::memory_resource`, which expands support in RMM to include pinned host memory pools, is tracked in this branch https://github.com/rapidsai/rmm/pull/1095.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778446650/reactions,0,0,0,0,0,0,0,0,0,14314
2174,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778523262,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1778523262,https://api.github.com/repos/rapidsai/cudf/issues/14314,1778523262,IC_kwDOBWUGps5qAhx-,2023-10-25T05:09:44Z,2023-10-25T05:09:44Z,MEMBER,"Note that cuda::mr::memory_resource doesn't directly expand support to include pinned host memory pools, it just enables us to more easily reuse the implementation of stream-ordered device memory pools for other kinds of device-accessible memory.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778523262/reactions,0,0,0,0,0,0,0,0,0,14314
2175,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778524077,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1778524077,https://api.github.com/repos/rapidsai/cudf/issues/14314,1778524077,IC_kwDOBWUGps5qAh-t,2023-10-25T05:10:39Z,2023-10-25T05:10:39Z,MEMBER,@abellina It's really hard to tell in the image how much time is saved by this change. Can you provide comparable benchmark results?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1778524077/reactions,0,0,0,0,0,0,0,0,0,14314
2176,https://api.github.com/repos/rapidsai/cudf/issues/comments/1780156704,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1780156704,https://api.github.com/repos/rapidsai/cudf/issues/14314,1780156704,IC_kwDOBWUGps5qGwkg,2023-10-25T22:42:12Z,2023-10-25T22:42:12Z,CONTRIBUTOR,"Sure, this is for NDS @ 3TB in our performance cluster, the benchmark was executed 3 times for baseline vs test. We see around 6% improvement. I need to look at query95 more because it found a regression there, but overall this was a win:

```
--------------------------------------------------------------------
Name = query2
Means = 3088.3333333333335, 2494.6666666666665
Time diff = 593.666666666667
Speedup = 1.2379743452699092
T-Test (test statistic, p value, df) = 7.8686774190832445, 0.0014098464938042464, 4.0
T-Test Confidence Interval = 384.1927204113131, 803.1406129220209
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query9
Means = 11011.666666666666, 8408.0
Time diff = 2603.666666666666
Speedup = 1.3096653980336188
T-Test (test statistic, p value, df) = 8.329919755519573, 0.0011349387959612939, 4.0
T-Test Confidence Interval = 1735.8386701912746, 3471.4946631420576
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query23_part2
Means = 23309.0, 22541.666666666668
Time diff = 767.3333333333321
Speedup = 1.0340406654343808
T-Test (test statistic, p value, df) = 3.5857045809141983, 0.023049979254582895, 4.0
T-Test Confidence Interval = 173.17984709011603, 1361.4868195765482
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query28
Means = 8749.666666666666, 7877.0
Time diff = 872.6666666666661
Speedup = 1.1107866785155092
T-Test (test statistic, p value, df) = 3.675737490963056, 0.021283509364083526, 4.0
T-Test Confidence Interval = 213.50341001605773, 1531.8299233172743
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query31
Means = 3846.3333333333335, 3217.6666666666665
Time diff = 628.666666666667
Speedup = 1.1953796747125247
T-Test (test statistic, p value, df) = 3.476522797723856, 0.02543224663133342, 4.0
T-Test Confidence Interval = 126.59646864855881, 1130.7368646847751
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query74
Means = 5813.333333333333, 5295.0
Time diff = 518.333333333333
Speedup = 1.0978910922253697
T-Test (test statistic, p value, df) = 4.145944413928419, 0.014307288000811205, 4.0
T-Test Confidence Interval = 171.21723564533386, 865.4494310213322
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query75
Means = 8002.0, 7139.0
Time diff = 863.0
Speedup = 1.120885278050147
T-Test (test statistic, p value, df) = 6.9462130566740035, 0.0022563913623439248, 4.0
T-Test Confidence Interval = 518.0534649259677, 1207.9465350740325
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query83
Means = 11889.0, 10728.333333333334
Time diff = 1160.666666666666
Speedup = 1.1081870436538759
T-Test (test statistic, p value, df) = 7.983215413800722, 0.0013345137828189723, 4.0
T-Test Confidence Interval = 757.0038418026304, 1564.3294915307017
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query88
Means = 8288.333333333334, 6815.666666666667
Time diff = 1472.666666666667
Speedup = 1.2160708172348023
T-Test (test statistic, p value, df) = 14.785515131088996, 0.00012180808800452909, 4.0
T-Test Confidence Interval = 1196.1272209995159, 1749.206112333818
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
--------------------------------------------------------------------
Name = query95
Means = 8023.0, 9527.333333333334
Time diff = -1504.333333333334
Speedup = 0.8421034217339584
T-Test (test statistic, p value, df) = -5.098045536832821, 0.006992118575497059, 4.0
T-Test Confidence Interval = -2323.6078748695036, -685.0587917971645
ALERT: significant change has been detected (p-value < 0.05)
ALERT: regression in performance has been observed
--------------------------------------------------------------------
Name = benchmark
Means = 418333.3333333333, 394333.3333333333
Time diff = 24000.0
Speedup = 1.0608622147083686
T-Test (test statistic, p value, df) = 5.622255427989818, 0.004920931820960854, 4.0
T-Test Confidence Interval = 12148.051368670785, 35851.948631329215
ALERT: significant change has been detected (p-value < 0.05)
ALERT: improvement in performance has been observed
```",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1780156704/reactions,0,0,0,0,0,0,0,0,0,14314
2177,https://api.github.com/repos/rapidsai/cudf/issues/comments/1780250618,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1780250618,https://api.github.com/repos/rapidsai/cudf/issues/14314,1780250618,IC_kwDOBWUGps5qHHf6,2023-10-26T00:50:41Z,2023-10-26T00:50:41Z,MEMBER,"So what are the other ones with speedups of 21%, 19%, etc.?",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1780250618/reactions,0,0,0,0,0,0,0,0,0,14314
2178,https://api.github.com/repos/rapidsai/cudf/issues/comments/1781078268,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1781078268,https://api.github.com/repos/rapidsai/cudf/issues/14314,1781078268,IC_kwDOBWUGps5qKRj8,2023-10-26T13:01:14Z,2023-10-26T13:03:00Z,CONTRIBUTOR,"> So what are the other ones with speedups of 21%, 19%, etc.?

Sorry I should describe the benchmark better. This is NDS https://github.com/NVIDIA/spark-rapids-benchmarks/tree/dev/nds where we are running it in ""power run"" mode. In this case we are running queries in series one after the other in a cluster running spark rapids and 8xA100 GPUs. The results above show when one of the queries has significant regressions or speedups, and it also has a ""benchmark"" section at the end for the overall (sum of all query times compared between baseline and test). I ran these sets of tests three times, so the comparison tool is looking at the means and the variance and figuring out what is noise and what isn't.

From the queries that have significant speedup, query9 and query88 are two queries we know are parquet/scan bound. Looking at traces for these, you'll mostly fine unsnap and parquet decode kernels. We see a lot of benefit here.

Is this helping with your question @harrism, or am I missing it?",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1781078268/reactions,0,0,0,0,0,0,0,0,0,14314
2179,https://api.github.com/repos/rapidsai/cudf/issues/comments/1781790788,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1781790788,https://api.github.com/repos/rapidsai/cudf/issues/14314,1781790788,IC_kwDOBWUGps5qM_hE,2023-10-26T19:41:52Z,2023-10-26T19:41:52Z,MEMBER,Yes. So the 6% is overall average benefit. Good to know.,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1781790788/reactions,1,1,0,0,0,0,0,0,0,14314
2180,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909248568,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1909248568,https://api.github.com/repos/rapidsai/cudf/issues/14314,1909248568,IC_kwDOBWUGps5xzNI4,2024-01-25T02:37:49Z,2024-01-25T02:37:49Z,MEMBER,"As of 24.02 you can create a `pool_memory_resource<pinned_host_memory_resource>`. I suggest that libcudf / cuIO adds a `cudf::get/set_current_pinned_host_memory_resource` to use for this.  This could also be added to RMM, but 

a) The static resource RMM currently stores for `get/set_current_device_memory_resource` is one of the reasons RMM is not Windows compatible, so I'm averse to adding a second instance of that. Whereas libcudf has a binary library component so it can maintain that state without affecting platform compatibility.
b) I think it's good to try out this feature in libcudf and then move it lower in the stack later if it would be useful to other clients.

There is some design work around how and where to put this, and how to wire up configuration knobs for the initial / maximum pool size. Also how to expose that to Python and Spark.

There are other places where this pool could be useful but let's start here.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909248568/reactions,0,0,0,0,0,0,0,0,0,14314
2181,https://api.github.com/repos/rapidsai/cudf/issues/comments/1918350066,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1918350066,https://api.github.com/repos/rapidsai/cudf/issues/14314,1918350066,IC_kwDOBWUGps5yV7Ly,2024-01-31T04:15:27Z,2024-01-31T04:15:27Z,CONTRIBUTOR,"Thank you @harrism for kicking off the design discussion. 
a) would you please clarify the Windows compatibility issue? Is it the presence of a static object with certain properties in a header, or some other issue?
b) If libcudf added `cudf::get/set_current_pinned_host_memory_resource`, would you please share a bit more about the components in RMM this would be modeled after? I'm not familiar enough with RMM to understand the scope of this suggestion.

Thank you for your help",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1918350066/reactions,0,0,0,0,0,0,0,0,0,14314
2182,https://api.github.com/repos/rapidsai/cudf/issues/comments/1918604939,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1918604939,https://api.github.com/repos/rapidsai/cudf/issues/14314,1918604939,IC_kwDOBWUGps5yW5aL,2024-01-31T08:19:42Z,2024-01-31T08:19:42Z,MEMBER,"This issue describes a): https://github.com/rapidsai/rmm/issues/826

Basically the function local static works on Linux but not on windows because each binary gets a it's own instance and so they won't be the same across DLLs.

Although I suppose adding a duplicate of the incompatibility reason doesn't make it more incompatible, it's just more of the same.

I still think it should be tested in libcudf first.

For b) the answer is to model it after get/set_current_device_resource(), which is the function with the function local static.

But mostly I was suggesting that libcudf should implement it the way libcudf wants it to be for libcudf.

Thank you too!",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1918604939/reactions,0,0,0,0,0,0,0,0,0,14314
2183,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920196868,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1920196868,https://api.github.com/repos/rapidsai/cudf/issues/14314,1920196868,IC_kwDOBWUGps5yc-EE,2024-01-31T23:52:47Z,2024-01-31T23:52:47Z,CONTRIBUTOR,"I just discussed this idea a bit more with @abellina, @mattahrens, @GregoryKimball, and @vuule.

We're leaning towards adding a parameter for `host_mr` to the Parquet reading APIs. We're leaning away from using a global/static host allocator because we want this behavior to be friendly/simple if dealing with multiple threads like Spark does. Also callers may want to use different host allocators.

The `host_mr` would be optional, and would use a non-pooled allocator by default. This avoids some of the concerns about determining a default host pool size, and how that would be handled by Python cudf and other consumers of the library. The `host_mr` should allow any of: a pinned host allocator (which is effectively the current behavior), a pooling pinned host allocator, or possibly even an adapter that implements an ""opportunistically pinned pool"" (Spark's desired use case; this would attempt allocating pinned memory, and fall back to allocating paged memory rather than failing to allocate).

@abellina is going to investigate a bit further and pursue an implementation for review.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920196868/reactions,0,0,0,0,0,0,0,0,0,14314
2184,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920272771,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1920272771,https://api.github.com/repos/rapidsai/cudf/issues/14314,1920272771,IC_kwDOBWUGps5ydQmD,2024-02-01T00:54:26Z,2024-02-01T00:54:26Z,MEMBER,"Sounds good. Because `rmm::mr::pinned_host_memory_resource` is not a `device_memory_resource`, you will need to use the new `rmm::device_async_resource_ref` for the `host_mr` parameter in the Parquet reading APIs. We will be transitioning to that in all of RAPIDS, and in the interim, this will make the parameter compatible with both legacy `device_memory_resource`/`host_memory_resource` MRs AND the newer MRs like `pinned_host_memory_resource` that just implement the `cuda::async_memory_resource` policy.

For an example, see #14873 ",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920272771/reactions,1,1,0,0,0,0,0,0,0,14314
2185,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920451364,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1920451364,https://api.github.com/repos/rapidsai/cudf/issues/14314,1920451364,IC_kwDOBWUGps5yd8Mk,2024-02-01T03:46:52Z,2024-02-01T03:46:52Z,MEMBER,"One thing to be aware of for deciding your initial pool size is that if you make it too small, you will get unnecessary fragmentation. The reason is that the RMM pool MR grows by just allocating a new chunk. This isn't TOO bad because it uses a geometric growth strategy, but allocations that don't fit will cause new allocations that can't be merged with the previous pool chunks, hence fragmentation.

See https://github.com/harrism/rmm/blob/6bb0ef2973821c2a1b8f952298046e7b406dc9d2/include/rmm/mr/device/pool_memory_resource.hpp#L352",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920451364/reactions,0,0,0,0,0,0,0,0,0,14314
2186,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920539226,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1920539226,https://api.github.com/repos/rapidsai/cudf/issues/14314,1920539226,IC_kwDOBWUGps5yeRpa,2024-02-01T05:24:30Z,2024-02-01T05:25:19Z,CONTRIBUTOR,"Thank you for the meeting today and thank you @bdice for sharing this summary. 

* Adding a `host_mr` parameter to the Parquet reading APIs would be consistent with the way we use the `mr` parameter today. For this approach I would love to sketch out the design changes to `hostdevice_vector` and `pinned_host_vector` that would be required to make use of an input `host_mr`. 
* Using a static memory resource in `pinned_host_vector` as in the [prototype](https://github.com/abellina/cudf/commit/a73fbd8a56901f7bb5d6f75ffdcb37f2fd37bdec) by @abellina seems to have the advantage of not adding additional plumbing to the IO modules that use the `hostdevice_vector` utility. 

I'm curious also to hear from @vuule. Plus @nvdbaranec and @etseidl if you would like to weigh in.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1920539226/reactions,0,0,0,0,0,0,0,0,0,14314
2187,https://api.github.com/repos/rapidsai/cudf/issues/comments/1921943710,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1921943710,https://api.github.com/repos/rapidsai/cudf/issues/14314,1921943710,IC_kwDOBWUGps5yjoie,2024-02-01T18:19:36Z,2024-02-01T18:19:36Z,CONTRIBUTOR,"The introduction of the `host_mr` option would require substantial code changes to pass it to all places where the `hostdevice_vector`s are created. And this would still be limited the PQ reader, until we do the same for other components. 
I don't think we know at this point if this would bring additional benefit compared to a global API to set the resource. My proposal is to start with a global resource (that keeps the default behavior) and consider modifying the APIs once we see the effect of the global resource in production. Development would be pretty similar to the stream support (AFAICT), with a global default, and recently included stream parameters in most APIs.

I have a separate concern about having a `host_mr` parameter that is not an equivalent to the existing mr param. The pinned mem allocator does not change the output for the user, it's purely an internal optimization. But this is maybe just a naming issue, very secondary at this point.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1921943710/reactions,1,1,0,0,0,0,0,0,0,14314
2188,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922051402,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1922051402,https://api.github.com/repos/rapidsai/cudf/issues/14314,1922051402,IC_kwDOBWUGps5ykC1K,2024-02-01T19:17:06Z,2024-02-01T19:17:06Z,CONTRIBUTOR,"I am more of a fan of having a global function that sets an rmm allocator to be used for pinned allocations.  For now we could limit it to cuIO only (which would really mean just `hostdevice_vector`).  Something similar to the way we initialize rmm (`rmm::mr::set_current_device_resource(resource.get());`)

Maybe `cudf::io::set_current_pinned_memory_resource`",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922051402/reactions,0,0,0,0,0,0,0,0,0,14314
2189,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922554669,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1922554669,https://api.github.com/repos/rapidsai/cudf/issues/14314,1922554669,IC_kwDOBWUGps5yl9st,2024-02-02T00:23:07Z,2024-02-02T00:23:51Z,CONTRIBUTOR,"> The pinned mem allocator does not change the output for the user, it's purely an internal optimization

This is a good observation. My primary concern was about ensuring thread safety for the global/static approach (what happens if that allocator is changed while in use / before its previous allocations are freed?). If that's not a problem, then I'm okay with using a global/static pinned (pool) host memory resource. I thought the `host_mr` argument might give us more flexibility for our potential long term needs, but I don't want to overengineer for that case given how little we rely on pinned memory today.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922554669/reactions,1,0,0,0,0,0,1,0,0,14314
2190,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922731103,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1922731103,https://api.github.com/repos/rapidsai/cudf/issues/14314,1922731103,IC_kwDOBWUGps5ymoxf,2024-02-02T03:13:52Z,2024-02-02T03:13:52Z,CONTRIBUTOR,"Just measured the pinned memory peak use in the Parquet reader. In the benchmarks, which create tables with 512MB of data, the largest peak pinned memory use I saw was about 3.8MB, with integer columns. Many cases use around 1MB. So we should be able to make great use of a <1GB pool even with many threads.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922731103/reactions,0,0,0,0,0,0,0,0,0,14314
2191,https://api.github.com/repos/rapidsai/cudf/issues/comments/1923311093,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1923311093,https://api.github.com/repos/rapidsai/cudf/issues/14314,1923311093,IC_kwDOBWUGps5yo2X1,2024-02-02T08:26:13Z,2024-02-02T08:26:13Z,MEMBER,But isn't 512MB much smaller than real world use cases?,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1923311093/reactions,0,0,0,0,0,0,0,0,0,14314
2192,https://api.github.com/repos/rapidsai/cudf/issues/comments/1923315840,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1923315840,https://api.github.com/repos/rapidsai/cudf/issues/14314,1923315840,IC_kwDOBWUGps5yo3iA,2024-02-02T08:28:32Z,2024-02-02T08:28:32Z,MEMBER,BTW after @vuule and @nvdbaranec pointed it out I also think starting with a global config for an allocator that should be used internally in cuIO is a much better place to start than plumbing it in everywhere for flexibility. ,,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1923315840/reactions,0,0,0,0,0,0,0,0,0,14314
2193,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924151232,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1924151232,https://api.github.com/repos/rapidsai/cudf/issues/14314,1924151232,IC_kwDOBWUGps5ysDfA,2024-02-02T15:52:43Z,2024-02-02T15:53:11Z,CONTRIBUTOR,"> The introduction of the `host_mr` option would require substantial code changes to pass it to all places where the `hostdevice_vector`s are created. And this would still be limited the PQ reader, until we do the same for other components. I don't think we know at this point if this would bring additional benefit compared to a global API to set the resource. My proposal is to start with a global resource (that keeps the default behavior) and consider modifying the APIs once we see the effect of the global resource in production. Development would be pretty similar to the stream support (AFAICT), with a global default, and recently included stream parameters in most APIs.
> 
> I have a separate concern about having a `host_mr` parameter that is not an equivalent to the existing mr param. The pinned mem allocator does not change the output for the user, it's purely an internal optimization. But this is maybe just a naming issue, very secondary at this point.

@vuule could spark-rapids still provide its own memory pool for this? We wouldn't want a default pinned allocator to initialize, then uninitialized because it is going to be replaced by our own allocator.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924151232/reactions,0,0,0,0,0,0,0,0,0,14314
2194,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924472356,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1924472356,https://api.github.com/repos/rapidsai/cudf/issues/14314,1924472356,IC_kwDOBWUGps5ytR4k,2024-02-02T18:40:54Z,2024-02-02T18:40:54Z,CONTRIBUTOR,"> But isn't 512MB much smaller than real world use cases?

Sure, but the measurements show that pinned memory requirement are less than 1% of the device memory required to read a PQ file. Even when fully using a 50GB GPU we won't fill a 1GB pinned pool. ",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924472356/reactions,0,0,0,0,0,0,0,0,0,14314
2195,https://api.github.com/repos/rapidsai/cudf/issues/comments/1928677801,https://github.com/rapidsai/cudf/issues/14314#issuecomment-1928677801,https://api.github.com/repos/rapidsai/cudf/issues/14314,1928677801,IC_kwDOBWUGps5y9Ump,2024-02-06T02:40:20Z,2024-02-06T02:40:20Z,MEMBER,"Oh, I guess I don't know how parquet reading works. :)",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1928677801/reactions,0,0,0,0,0,0,0,0,0,14314
2196,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804297153,https://github.com/rapidsai/cudf/issues/14324#issuecomment-1804297153,https://api.github.com/repos/rapidsai/cudf/issues/14324,1804297153,IC_kwDOBWUGps5ri2PB,2023-11-09T17:56:13Z,2023-11-09T17:56:23Z,CONTRIBUTOR,Thank you @aocsa for raising this issue. We will investigate the next time we crack open some expressions work,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804297153/reactions,0,0,0,0,0,0,0,0,0,14324
2197,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804299246,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1804299246,https://api.github.com/repos/rapidsai/cudf/issues/14333,1804299246,IC_kwDOBWUGps5ri2vu,2023-11-09T17:57:46Z,2023-11-09T17:57:46Z,CONTRIBUTOR,I believe https://github.com/rapidsai/cudf/pull/14354 will address this,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804299246/reactions,0,0,0,0,0,0,0,0,0,14333
2198,https://api.github.com/repos/rapidsai/cudf/issues/comments/1809929545,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1809929545,https://api.github.com/repos/rapidsai/cudf/issues/14333,1809929545,IC_kwDOBWUGps5r4VVJ,2023-11-14T10:23:04Z,2023-11-14T10:23:04Z,CONTRIBUTOR,"#14354 replaces all such occurences but it does not remove the default argument.
Removing default value for stream in scalars, is good suggestion. `column` also has similar copy constructor with defaulted `stream` argument. should similar removal be done for it too?",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1809929545/reactions,0,0,0,0,0,0,0,0,0,14333
2199,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810142557,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1810142557,https://api.github.com/repos/rapidsai/cudf/issues/14333,1810142557,IC_kwDOBWUGps5r5JVd,2023-11-14T12:48:11Z,2023-11-14T12:48:11Z,CONTRIBUTOR,"These are public interfaces and all public APIs currently have defaulted stream parameters. 
Wouldn't removing the default break many upstream callers? 
Specifically, the cuDF Cython and Python layers would be required to manufacture a stream to create a scalar?
I don't think we should remove the default from any specific public interfaces unless we consider removing them from all perhaps.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810142557/reactions,1,1,0,0,0,0,0,0,0,14333
2200,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810324587,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1810324587,https://api.github.com/repos/rapidsai/cudf/issues/14333,1810324587,IC_kwDOBWUGps5r51xr,2023-11-14T14:26:28Z,2023-11-14T14:40:56Z,CONTRIBUTOR,"> Specifically, the cuDF Cython and Python layers would be required to manufacture a stream to create a scalar?

Right. We can't remove stream from scalar methods or any other public interfaces. 

cudf data types does not store streams (scalar, column, table, groupby). https://docs.rapids.ai/api/libcudf/nightly/developer_guide (libcudf API and Implementation → Streams). streams are passed to libcudf APIs. So, storing them inside data structure doesn't align well, and also execution should use stream (including memory allocation), IMO, data structures should not hold streams (although rmm differs from this). The constructors are called with streams because memory allocation and copy will execute on streams.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810324587/reactions,0,0,0,0,0,0,0,0,0,14333
2201,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810449753,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1810449753,https://api.github.com/repos/rapidsai/cudf/issues/14333,1810449753,IC_kwDOBWUGps5r6UVZ,2023-11-14T15:24:57Z,2023-11-14T15:24:57Z,CONTRIBUTOR,"It's made clear than the default arguments on public APIs can't be removed without a breaking change.
Clarification on the issue title:
>Stream-preserving constructors for scalar class and its derived classes 

Does this mean to propose storing streams inside scalar class?",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1810449753/reactions,0,0,0,0,0,0,0,0,0,14333
2202,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813233608,https://github.com/rapidsai/cudf/issues/14333#issuecomment-1813233608,https://api.github.com/repos/rapidsai/cudf/issues/14333,1813233608,IC_kwDOBWUGps5sE7_I,2023-11-15T20:42:27Z,2023-11-15T20:43:08Z,CONTRIBUTOR,"Could we take a step back here and ask why

> When the class constructor is implicitly called (when the object is passed-by-value, for instance)

is happening at all? cudf APIs are generally designed so that APIs should accept views rather than values. We don't have a `scalar_view` type (for [reasons](https://github.com/rapidsai/cudf/issues/6558)) but we typically handle this by instead passing references to scalar objects. Are there places where we really should be passing scalars by value? If so, why? Perhaps I'm missing something obvious, but this seems like potentially a design smell to me. If a scalar is passed by value and a copy constructor is called that implies the construction of a new scalar and a new device allocation, which isn't usually desirable.

IOW I don't know if there's a good reason for the copy constructor to not be explicit in the long run. [I made the same point in a comment on the corresponding PR as well](https://github.com/rapidsai/cudf/pull/14354#issuecomment-1813162939).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1813233608/reactions,0,0,0,0,0,0,0,0,0,14333
2203,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785989150,https://github.com/rapidsai/cudf/issues/14334#issuecomment-1785989150,https://api.github.com/repos/rapidsai/cudf/issues/14334,1785989150,IC_kwDOBWUGps5qdAge,2023-10-30T20:30:53Z,2023-10-30T20:30:53Z,CONTRIBUTOR,Thanks for this feature request! I'm not familiar with the behavior of `center=True`. Can you help identify what formulas might be needed to center a window? Would you be interested in collaborating on a PR for adding this feature in cudf?,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1785989150/reactions,0,0,0,0,0,0,0,0,0,14334
2204,https://api.github.com/repos/rapidsai/cudf/issues/comments/1789002317,https://github.com/rapidsai/cudf/issues/14334#issuecomment-1789002317,https://api.github.com/repos/rapidsai/cudf/issues/14334,1789002317,IC_kwDOBWUGps5qogJN,2023-11-01T13:56:42Z,2023-11-01T13:57:04Z,NONE,"Thanks for the reply @bdice.
Tbh, I am not familiar with how it is efficiently implemented, and I just started using GPU accelerated data preprocessing and I am at no point contributing well-written code here (basically I am exploring the rapids stack right now). 
I just know that in pandas the `center`,  it is forwarded to the [Window Class](https://github.com/pandas-dev/pandas/blob/main/pandas/core/window/rolling.py#L882).  
Usually, `center` helps when working with timeseries data, that is indexed by a timestamp and there might be missing values. If the indexing is consistent, you can just shift the generated value by the `window_size / 2` and end up with a centered value (in my example, if there would be no missing value, and my `delta_t` between the timestamps is 1 second, this should hold: 

`df['feature'].rolling(f'{120}s', center=True, min_periods=1).sum() == df['feature'].rolling(f'{120}s',  min_periods=1).sum().shift(60)`

Did this help you? ",,marcimarc1,24301948,MDQ6VXNlcjI0MzAxOTQ4,https://avatars.githubusercontent.com/u/24301948?v=4,,https://api.github.com/users/marcimarc1,https://github.com/marcimarc1,https://api.github.com/users/marcimarc1/followers,https://api.github.com/users/marcimarc1/following{/other_user},https://api.github.com/users/marcimarc1/gists{/gist_id},https://api.github.com/users/marcimarc1/starred{/owner}{/repo},https://api.github.com/users/marcimarc1/subscriptions,https://api.github.com/users/marcimarc1/orgs,https://api.github.com/users/marcimarc1/repos,https://api.github.com/users/marcimarc1/events{/privacy},https://api.github.com/users/marcimarc1/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1789002317/reactions,0,0,0,0,0,0,0,0,0,14334
2205,https://api.github.com/repos/rapidsai/cudf/issues/comments/1791298221,https://github.com/rapidsai/cudf/issues/14334#issuecomment-1791298221,https://api.github.com/repos/rapidsai/cudf/issues/14334,1791298221,IC_kwDOBWUGps5qxQqt,2023-11-02T18:21:15Z,2023-11-02T18:21:15Z,CONTRIBUTOR,"In pandas, `center` just shifts the start/end bounds before performing the rolling aggregation. For reference:

For fixed windows e.g. `window=2`

https://github.com/pandas-dev/pandas/blob/4e5576d13ab1929aaab9bcc45689939f6d82e178/pandas/core/indexers/objects.py#L105

For variable windows e.g. `window=""2s""`

https://github.com/pandas-dev/pandas/blob/4e5576d13ab1929aaab9bcc45689939f6d82e178/pandas/_libs/window/indexers.pyx#L92",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1791298221/reactions,1,1,0,0,0,0,0,0,0,14334
2206,https://api.github.com/repos/rapidsai/cudf/issues/comments/1793322153,https://github.com/rapidsai/cudf/issues/14361#issuecomment-1793322153,https://api.github.com/repos/rapidsai/cudf/issues/14361,1793322153,IC_kwDOBWUGps5q4-yp,2023-11-04T03:22:49Z,2023-11-04T03:22:49Z,COLLABORATOR,If we wanted to match Pandas behavior here it looks like it should be using `NULL_LOGICAL_OR` and `NULL_LOGICAL_AND` instead of `LOGICAL_OR` and `LOGICAL_AND`,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1793322153/reactions,1,1,0,0,0,0,0,0,0,14361
2207,https://api.github.com/repos/rapidsai/cudf/issues/comments/1819214957,https://github.com/rapidsai/cudf/issues/14361#issuecomment-1819214957,https://api.github.com/repos/rapidsai/cudf/issues/14361,1819214957,IC_kwDOBWUGps5sbwRt,2023-11-20T14:52:33Z,2023-11-20T14:52:33Z,CONTRIBUTOR,"There are two issues here:

1. `cudf.from_pandas` maps nans to nulls by default: if you run `gdf = cudf.from_pandas(df, nan_as_null=False)` then you get the same results as pandas.
2. NULL handling differences between cudf and pandas

(1) is a footgun that I don't really know how best to square.

Note that if you use pandas _nullable_ dtypes, the value_counts result is `[4, 1]` (not `[4, 2]`) since the first row is neither true nor false.

For (2), the operators `or`, `and`, and `~` are _bitwise_, not logical (so both the existing code and @kkraus14's suggestion would produce the wrong answer):
```
In [89]: df = pd.DataFrame({""s"": [5, 6, 7], ""y"": [12, 12, 12]})

In [90]: df.eval(""s or y"")
Out[90]: 
0    13
1    14
2    15
dtype: int64
```

Supposing we fixed that, we need to special-case bitwise ops between two boolean columns :( when they contain nulls. Specifically (and this translates to the series case):

```
l = pd.Series([False, True], dtype=""bool"")
r = pd.Series([pd.NA, pd.NA], dtype=""boolean"") # nullable bool column
l | r
# 0    <NA>
# 1    True
# dtype: boolean

# Whereas
l.astype(""Int32"") | r
0    <NA>
1    <NA>
dtype: boolean

# Or
l | r.astype(""Int32"")
0    <NA>
1    <NA>
dtype: boolean
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1819214957/reactions,0,0,0,0,0,0,0,0,0,14361
2208,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856311813,https://github.com/rapidsai/cudf/issues/14361#issuecomment-1856311813,https://api.github.com/repos/rapidsai/cudf/issues/14361,1856311813,IC_kwDOBWUGps5upRIF,2023-12-14T17:43:54Z,2023-12-14T17:44:10Z,CONTRIBUTOR,"Thank you @wence- for analyzing this. 

1) for Nan/null handling in pandas, do you think pandas 2.0 (or beyond) will improve the user experience with cudf?

2) Do you think the operators `or`, `and`, and `~` should be logical instead of bitwise in cudf?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856311813/reactions,0,0,0,0,0,0,0,0,0,14361
2209,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856320663,https://github.com/rapidsai/cudf/issues/14361#issuecomment-1856320663,https://api.github.com/repos/rapidsai/cudf/issues/14361,1856320663,IC_kwDOBWUGps5upTSX,2023-12-14T17:50:17Z,2023-12-14T17:53:53Z,CONTRIBUTOR,"wrt 1, I am not sure what the putative future default handling of nan/null is in pandas

wrt 2: currently cudf (for reasonable reasons) dispatches `and`/`or` to logical and/or and `~`/`&` to bitwise and/or. This differs from the pandas semantics which _always_ dispatch to bitwise and/or. I think the way to fix this is to run a type-inference pass on the parsed AST expression and then we can figure out what to dispatch to on the backend. This can be done walking over the Python AST but it is a bit messy. The reason currently cudf handles and/or separately from ~/& is because in the backend libcudf AST code we need to emit different operators for those cases. Without type inference we don't know what to do.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856320663/reactions,0,0,0,0,0,0,0,0,0,14361
2210,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856317487,https://github.com/rapidsai/cudf/issues/14375#issuecomment-1856317487,https://api.github.com/repos/rapidsai/cudf/issues/14375,1856317487,IC_kwDOBWUGps5upSgv,2023-12-14T17:47:54Z,2023-12-14T17:47:54Z,CONTRIBUTOR,@vuule Would you please take a peek at this issue?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856317487/reactions,1,0,0,0,0,0,0,0,1,14375
2211,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804048203,https://github.com/rapidsai/cudf/issues/14383#issuecomment-1804048203,https://api.github.com/repos/rapidsai/cudf/issues/14383,1804048203,IC_kwDOBWUGps5rh5dL,2023-11-09T15:28:26Z,2023-11-09T15:28:26Z,CONTRIBUTOR,Related: #13744. cc: @vuule @shrshi,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1804048203/reactions,0,0,0,0,0,0,0,0,0,14383
2212,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113327230,https://github.com/rapidsai/cudf/issues/14404#issuecomment-2113327230,https://api.github.com/repos/rapidsai/cudf/issues/14404,2113327230,IC_kwDOBWUGps599tB-,2024-05-15T19:39:58Z,2024-05-15T19:39:58Z,CONTRIBUTOR,The reporting piece of this was addressed in https://github.com/rapidsai/cudf/pull/15369 and follow-ups. @galipremsagar do we want to do the other part and add a failure condition as well?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113327230/reactions,0,0,0,0,0,0,0,0,0,14404
2213,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113450617,https://github.com/rapidsai/cudf/issues/14404#issuecomment-2113450617,https://api.github.com/repos/rapidsai/cudf/issues/14404,2113450617,IC_kwDOBWUGps59-LJ5,2024-05-15T21:02:22Z,2024-05-15T21:02:22Z,CONTRIBUTOR,"We currently use nightly reports as baseline, so we can't have a failure condition based on a threshold as it can swing widely based on the number of PRs being merged on a given day. We can revisit the second part when we have a more accurate(upto-date) branch based baselines.",,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113450617/reactions,0,0,0,0,0,0,0,0,0,14404
2214,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113602720,https://github.com/rapidsai/cudf/issues/14404#issuecomment-2113602720,https://api.github.com/repos/rapidsai/cudf/issues/14404,2113602720,IC_kwDOBWUGps59-wSg,2024-05-15T22:44:32Z,2024-05-15T22:44:32Z,CONTRIBUTOR,"Agreed, I don't think we can do this quite yet.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113602720/reactions,0,0,0,0,0,0,0,0,0,14404
2215,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811115963,https://github.com/rapidsai/cudf/issues/14412#issuecomment-1811115963,https://api.github.com/repos/rapidsai/cudf/issues/14412,1811115963,IC_kwDOBWUGps5r82-7,2023-11-14T19:50:43Z,2023-11-14T19:50:43Z,CONTRIBUTOR,"This code block is the piece in question:

https://github.com/rapidsai/cudf/blob/b446a6f187241e765c925da1053ece2679313a06/cpp/src/groupby/hash/groupby.cu#L654-L656

@ttnghia, you added this in #13676. Do you know if this fallback is still required, or why?

We discussed this a bit here: https://github.com/rapidsai/cudf/pull/13676#discussion_r1260196703

Side note, I'm punching my past self -- I asked this question on that PR, and never submitted my review: 
![image](https://github.com/rapidsai/cudf/assets/3943761/01e9d6f3-f021-44b0-91cf-235fe57d340e)
",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811115963/reactions,1,0,0,1,0,0,0,0,0,14412
2216,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811161299,https://github.com/rapidsai/cudf/issues/14412#issuecomment-1811161299,https://api.github.com/repos/rapidsai/cudf/issues/14412,1811161299,IC_kwDOBWUGps5r9CDT,2023-11-14T20:11:15Z,2023-11-14T20:11:57Z,CONTRIBUTOR,"> @ttnghia, you added this in #13676. Do you know if this fallback is still required, or why?

Because hash-based aggregations are implemented for plain type only, using the operator such as `<` instead of user-provided comparator. See `struct update_target_element` in `cpp/include/cudf/detail/aggregation/aggregation.cuh`.

If we want to support hash-based aggregates for nested types, we need to rewrite such `struct update_target_element` such that we can compare rows using a row comparator instead.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811161299/reactions,0,0,0,0,0,0,0,0,0,14412
2217,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811205582,https://github.com/rapidsai/cudf/issues/14412#issuecomment-1811205582,https://api.github.com/repos/rapidsai/cudf/issues/14412,1811205582,IC_kwDOBWUGps5r9M3O,2023-11-14T20:32:37Z,2023-11-14T20:32:37Z,CONTRIBUTOR,"Great, that was helpful. I think we can do this. I think the rough plan would be to preprocess the table so we have device comparators that can be used, pass the preprocessed table info through all the aggregation machinery, and use the device comparator where needed in `update_target_element`. Does that sound right to you?
",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811205582/reactions,0,0,0,0,0,0,0,0,0,14412
2218,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811231902,https://github.com/rapidsai/cudf/issues/14412#issuecomment-1811231902,https://api.github.com/repos/rapidsai/cudf/issues/14412,1811231902,IC_kwDOBWUGps5r9TSe,2023-11-14T20:38:21Z,2023-11-14T20:38:56Z,CONTRIBUTOR,"Yes that sounds good. Note that we only need to rework for `ARGMIN` and `ARGMAX` (other aggregations are `SUM`, `PRODUCT` etc that can't support nested types), not for everything thus the amount of work should not be very heavy.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1811231902/reactions,1,1,0,0,0,0,0,0,0,14412
2219,https://api.github.com/repos/rapidsai/cudf/issues/comments/1814817327,https://github.com/rapidsai/cudf/issues/14419#issuecomment-1814817327,https://api.github.com/repos/rapidsai/cudf/issues/14419,1814817327,IC_kwDOBWUGps5sK-ov,2023-11-16T16:38:00Z,2023-11-16T16:38:00Z,CONTRIBUTOR,"This is just for auto-completion, right? `pd.RangeIndex(2).str` is a property that exists and raises a ""custom"" `AttributeError` (since `RangeIndex` does inherit from `Index`).

This happens because although we devolve to the slow type for `dir`, to avoid copies, we cache `dir(slow_type)` rather than doing `dir(slow_instance)`, and `""str"" in dir(pd.RangeIndex)` is _true_.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1814817327/reactions,0,0,0,0,0,0,0,0,0,14419
2220,https://api.github.com/repos/rapidsai/cudf/issues/comments/1814863439,https://github.com/rapidsai/cudf/issues/14419#issuecomment-1814863439,https://api.github.com/repos/rapidsai/cudf/issues/14419,1814863439,IC_kwDOBWUGps5sLJ5P,2023-11-16T17:04:27Z,2023-11-16T17:04:27Z,CONTRIBUTOR,"> This is just for auto-completion, right?

Mostly yes (also because there's a pandas unit test that validate that accessors like `str` are not in `dir(index subclass)`)",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1814863439/reactions,0,0,0,0,0,0,0,0,0,14419
2221,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832802459,https://github.com/rapidsai/cudf/issues/14484#issuecomment-1832802459,https://api.github.com/repos/rapidsai/cudf/issues/14484,1832802459,IC_kwDOBWUGps5tPlib,2023-11-29T22:29:42Z,2023-11-29T22:29:42Z,CONTRIBUTOR,"For item 1 I don't see any issues. You can always implement `__hash__` on Index objects such that it calls some other helper API `_hash` on the underlying Columns. For option 2, does dask rely on the actual `__hash__` method anywhere, or is it sufficient for there to be some hash function that can be called in `__dask_tokenize__`? I wouldn't want to define `__hash__` in a way that violates the Python data model; to clarify one of your parentheticals, `__hash__` indeed should not be implemented for mutable objects [according to the docs](https://docs.python.org/3/reference/datamodel.html#object.__hash__):
> If a class defines mutable objects and implements an [__eq__()](https://docs.python.org/3/reference/datamodel.html#object.__eq__) method, it should not implement [__hash__()](https://docs.python.org/3/reference/datamodel.html#object.__hash__), since the implementation of [hashable](https://docs.python.org/3/glossary.html#term-hashable) collections requires that a key’s hash value is immutable (if the object’s hash value changes, it will be in the wrong hash bucket).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832802459/reactions,0,0,0,0,0,0,0,0,0,14484
2222,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833547605,https://github.com/rapidsai/cudf/issues/14484#issuecomment-1833547605,https://api.github.com/repos/rapidsai/cudf/issues/14484,1833547605,IC_kwDOBWUGps5tSbdV,2023-11-30T11:08:39Z,2023-11-30T11:08:39Z,CONTRIBUTOR,"Thanks, I think perhaps my motivating paragraph was not clear. I agree that implementing `__hash__` specifically is independent of whether or not you can somehow compute a ""hash"" of a column, and it should only be implemented where it doesn't break the data model. Dask doesn't rely on `hash` (hence the existence of `__dask_tokenize__`).

But, _right now_ the way we implement `__dask_tokenize__` is ""copy-to-host and do something there"", I'd like to just be able to compute a hash on-device.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833547605/reactions,0,0,0,0,0,0,0,0,0,14484
2223,https://api.github.com/repos/rapidsai/cudf/issues/comments/1852679325,https://github.com/rapidsai/cudf/issues/14484#issuecomment-1852679325,https://api.github.com/repos/rapidsai/cudf/issues/14484,1852679325,IC_kwDOBWUGps5ubaSd,2023-12-12T19:31:53Z,2023-12-12T19:31:53Z,CONTRIBUTOR,OK yeah that seems totally reasonable to add.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1852679325/reactions,0,0,0,0,0,0,0,0,0,14484
2224,https://api.github.com/repos/rapidsai/cudf/issues/comments/1824685786,https://github.com/rapidsai/cudf/issues/14485#issuecomment-1824685786,https://api.github.com/repos/rapidsai/cudf/issues/14485,1824685786,IC_kwDOBWUGps5swn7a,2023-11-23T16:20:52Z,2023-11-23T16:20:52Z,CONTRIBUTOR,cross-ref #6724,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1824685786/reactions,0,0,0,0,0,0,0,0,0,14485
2225,https://api.github.com/repos/rapidsai/cudf/issues/comments/1935425331,https://github.com/rapidsai/cudf/issues/14492#issuecomment-1935425331,https://api.github.com/repos/rapidsai/cudf/issues/14492,1935425331,IC_kwDOBWUGps5zXD8z,2024-02-09T07:00:18Z,2024-02-09T07:00:18Z,NONE,"If this issue is still open and relevant, I would like to give it a try @wence- 
Thank you!",,MananDoshi1301,65040749,MDQ6VXNlcjY1MDQwNzQ5,https://avatars.githubusercontent.com/u/65040749?v=4,,https://api.github.com/users/MananDoshi1301,https://github.com/MananDoshi1301,https://api.github.com/users/MananDoshi1301/followers,https://api.github.com/users/MananDoshi1301/following{/other_user},https://api.github.com/users/MananDoshi1301/gists{/gist_id},https://api.github.com/users/MananDoshi1301/starred{/owner}{/repo},https://api.github.com/users/MananDoshi1301/subscriptions,https://api.github.com/users/MananDoshi1301/orgs,https://api.github.com/users/MananDoshi1301/repos,https://api.github.com/users/MananDoshi1301/events{/privacy},https://api.github.com/users/MananDoshi1301/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1935425331/reactions,0,0,0,0,0,0,0,0,0,14492
2226,https://api.github.com/repos/rapidsai/cudf/issues/comments/1941222765,https://github.com/rapidsai/cudf/issues/14492#issuecomment-1941222765,https://api.github.com/repos/rapidsai/cudf/issues/14492,1941222765,IC_kwDOBWUGps5ztLVt,2024-02-13T11:02:35Z,2024-02-13T11:02:35Z,CONTRIBUTOR,"Hi @MananDoshi1301 - we are in the process of refactoring our Cython internals. This effort is described here:

https://github.com/rapidsai/cudf/issues/13921

So while you're touching `sort.pyx`, I wonder if it's worth also just refactoring it out into the new `pylibcudf` package. Is that something you would be interested in taking on?

Happy to answer any questions you might have here, or on the RAPIDS Slack!",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1941222765/reactions,0,0,0,0,0,0,0,0,0,14492
2227,https://api.github.com/repos/rapidsai/cudf/issues/comments/1943143425,https://github.com/rapidsai/cudf/issues/14492#issuecomment-1943143425,https://api.github.com/repos/rapidsai/cudf/issues/14492,1943143425,IC_kwDOBWUGps5z0gQB,2024-02-14T06:11:53Z,2024-02-14T06:11:53Z,NONE,"Yes absolutely, I'd love to do it. Thanks for the heads up @shwina!",,MananDoshi1301,65040749,MDQ6VXNlcjY1MDQwNzQ5,https://avatars.githubusercontent.com/u/65040749?v=4,,https://api.github.com/users/MananDoshi1301,https://github.com/MananDoshi1301,https://api.github.com/users/MananDoshi1301/followers,https://api.github.com/users/MananDoshi1301/following{/other_user},https://api.github.com/users/MananDoshi1301/gists{/gist_id},https://api.github.com/users/MananDoshi1301/starred{/owner}{/repo},https://api.github.com/users/MananDoshi1301/subscriptions,https://api.github.com/users/MananDoshi1301/orgs,https://api.github.com/users/MananDoshi1301/repos,https://api.github.com/users/MananDoshi1301/events{/privacy},https://api.github.com/users/MananDoshi1301/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1943143425/reactions,0,0,0,0,0,0,0,0,0,14492
2228,https://api.github.com/repos/rapidsai/cudf/issues/comments/1946275605,https://github.com/rapidsai/cudf/issues/14492#issuecomment-1946275605,https://api.github.com/repos/rapidsai/cudf/issues/14492,1946275605,IC_kwDOBWUGps50Ac8V,2024-02-15T15:03:01Z,2024-02-15T15:03:01Z,CONTRIBUTOR,"Apologies - it looks like `sort` was ported over to pylibcudf as part of https://github.com/rapidsai/cudf/pull/15011.

If you're interested in contributing, many of the open Python issues should be quite approachable:

https://github.com/rapidsai/cudf/issues?q=is%3Aopen+is%3Aissue+label%3A%22cuDF+%28Python%29%22

If anything piques your interest, please let us know!",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1946275605/reactions,0,0,0,0,0,0,0,0,0,14492
2229,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828379998,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828379998,https://api.github.com/repos/rapidsai/cudf/issues/14500,1828379998,IC_kwDOBWUGps5s-t1e,2023-11-27T18:20:23Z,2023-11-27T18:20:23Z,CONTRIBUTOR,"I suspect this is hitting an out-of-memory error on the GPU and falling back to the CPU. What GPU are you using?

If your columns are int64/float64 types, (284 million rows * 9 columns * 8 bytes per element) gives about 20 GB of memory consumption for the data alone, before the intermediate storage needed for the groupby computation and results.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828379998/reactions,0,0,0,0,0,0,0,0,0,14500
2230,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828698855,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828698855,https://api.github.com/repos/rapidsai/cudf/issues/14500,1828698855,IC_kwDOBWUGps5s_7rn,2023-11-27T22:05:59Z,2023-11-27T22:05:59Z,NONE,"```
CODE                int64
ORDER_CODE          int64
VERSION_CODE        int64
ID_WARE           float64
QTY_ORDERED         int64
CATALOG_PRICE     float64
PRICE             float64
TO_PAY            float64
DISCOUNT_TOTAL    float64
```
I played with the size, at some point it starts falling `DataFrame.groupby` back  the CPU and then `SeriesGroupBy.sum` too.
But the point it starts falling is around 110.000.000 that corresponds to ~7.4Gb.
My GPU is **Tesla V100-PCIE-32GB**

                                                                                                                  
```                                                                                                    
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
┃ Function                     ┃ GPU ncalls ┃ GPU cumtime ┃ GPU percall ┃ CPU ncalls ┃ CPU cumtime ┃ CPU percall ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
│ DataFrame.groupby            │ 1          │ 0.000       │ 0.000       │ 0          │ 0.000       │ 0.000       │
│ DataFrameGroupBy.__getitem__ │ 1          │ 0.001       │ 0.001       │ 0          │ 0.000       │ 0.000       │
│ SeriesGroupBy.sum            │ 0          │ 0.000       │ 0.000       │ 1          │ 20.493      │ 20.493      │
└──────────────────────────────┴────────────┴─────────────┴─────────────┴────────────┴─────────────┴─────────────┘
```
```
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
┃ Function                     ┃ GPU ncalls ┃ GPU cumtime ┃ GPU percall ┃ CPU ncalls ┃ CPU cumtime ┃ CPU percall ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
│ DataFrame.groupby            │ 0          │ 0.000       │ 0.000       │ 1          │ 0.681       │ 0.681       │
│ DataFrameGroupBy.__getitem__ │ 0          │ 0.000       │ 0.000       │ 1          │ 0.677       │ 0.677       │
│ SeriesGroupBy.sum            │ 0          │ 0.000       │ 0.000       │ 1          │ 7.586       │ 7.586       │
└──────────────────────────────┴────────────┴─────────────┴─────────────┴────────────┴─────────────┴─────────────┘
```
",,kolfild26,12990695,MDQ6VXNlcjEyOTkwNjk1,https://avatars.githubusercontent.com/u/12990695?v=4,,https://api.github.com/users/kolfild26,https://github.com/kolfild26,https://api.github.com/users/kolfild26/followers,https://api.github.com/users/kolfild26/following{/other_user},https://api.github.com/users/kolfild26/gists{/gist_id},https://api.github.com/users/kolfild26/starred{/owner}{/repo},https://api.github.com/users/kolfild26/subscriptions,https://api.github.com/users/kolfild26/orgs,https://api.github.com/users/kolfild26/repos,https://api.github.com/users/kolfild26/events{/privacy},https://api.github.com/users/kolfild26/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828698855/reactions,0,0,0,0,0,0,0,0,0,14500
2231,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828714460,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1828714460,https://api.github.com/repos/rapidsai/cudf/issues/14500,1828714460,IC_kwDOBWUGps5s__fc,2023-11-27T22:17:35Z,2023-11-27T22:17:35Z,CONTRIBUTOR,"Thanks for exploring!

Just curious, does it help to filter out just the `ID` and `PRICE` columns _before_ the groupby? If so, we might be missing out on some optimizations internally and that would be a bug:

```python
df = df[[""ID"", ""TOTAL""]]
result = df.groupby(""ID"").sum()
```

At the same time, you can try turning cuDF's spilling on to spill unused data:

```
CUDF_SPILL=1 python -m cudf.pandas ...
```
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1828714460/reactions,0,0,0,0,0,0,0,0,0,14500
2232,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830755123,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830755123,https://api.github.com/repos/rapidsai/cudf/issues/14500,1830755123,IC_kwDOBWUGps5tHxsz,2023-11-28T21:11:59Z,2023-11-28T21:11:59Z,NONE,"@shwina
Thanks fro your updates. My answers are below.

1️⃣ 
> Just curious, does it help to filter out just the ID and PRICE columns before the groupby? If so, we might be missing out on some optimizations internally and that would be a bug:
> 
> > df = df[[""ID"", ""TOTAL""]]
> > result = df.groupby(""ID"").sum()

Yes, that's what I see now. Filtering out two columns before the groupby fixes all. The groupby is again on the GPU.

```
%%cudf.pandas.profile
df=COM_ORDER_LINE.groupby(['ID_WARE'])['PRICE'].sum()
                                                                                                                  
                                            Total time elapsed: 27.720 seconds                                    
                                          0 GPU function calls in 0.000 seconds                                   
                                          3 CPU function calls in 20.844 seconds                                  
                                                                                                                                                                                                                                        
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
┃ Function                     ┃ GPU ncalls ┃ GPU cumtime ┃ GPU percall ┃ CPU ncalls ┃ CPU cumtime ┃ CPU percall ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
│ DataFrame.groupby            │ 0          │ 0.000       │ 0.000       │ 1          │ 2.359       │ 2.359       │
│ DataFrameGroupBy.__getitem__ │ 0          │ 0.000       │ 0.000       │ 1          │ 2.334       │ 2.334       │
│ SeriesGroupBy.sum            │ 0          │ 0.000       │ 0.000       │ 1          │ 16.152      │ 16.152      │
└──────────────────────────────┴────────────┴─────────────┴─────────────┴────────────┴─────────────┴─────────────┘
```
```
COM_ORDER_LINE_tmp=COM_ORDER_LINE[['ID_WARE', 'PRICE']]
```
```
%%cudf.pandas.profile
df=COM_ORDER_LINE_tmp.groupby(['ID_WARE'])['PRICE'].sum()
                                            Total time elapsed: 0.358 seconds                                     
                                          3 GPU function calls in 0.329 seconds                                   
                                          0 CPU function calls in 0.000 seconds                                   
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
┃ Function                     ┃ GPU ncalls ┃ GPU cumtime ┃ GPU percall ┃ CPU ncalls ┃ CPU cumtime ┃ CPU percall ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━━┩
│ DataFrame.groupby            │ 1          │ 0.001       │ 0.001       │ 0          │ 0.000       │ 0.000       │
│ DataFrameGroupBy.__getitem__ │ 1          │ 0.001       │ 0.001       │ 0          │ 0.000       │ 0.000       │
│ SeriesGroupBy.sum            │ 1          │ 0.327       │ 0.327       │ 0          │ 0.000       │ 0.000       │
└──────────────────────────────┴────────────┴─────────────┴─────────────┴────────────┴─────────────┴─────────────┘
```

2️⃣ 
```
At the same time, you can try turning cuDF's spilling on to spill unused data:
```

I also noticed that when I restart the machine, the first try after the restart is successfully being calculated on the GPU. Only once. Next run is falling back to the CPU again.
So, it looks like that the gpu memory really needs to be cleaned from unused data.

```
CUDF_SPILL=1 python -m cudf.pandas ...
```
Is there any way to switch on this option in the jupyter notebook? ",,kolfild26,12990695,MDQ6VXNlcjEyOTkwNjk1,https://avatars.githubusercontent.com/u/12990695?v=4,,https://api.github.com/users/kolfild26,https://github.com/kolfild26,https://api.github.com/users/kolfild26/followers,https://api.github.com/users/kolfild26/following{/other_user},https://api.github.com/users/kolfild26/gists{/gist_id},https://api.github.com/users/kolfild26/starred{/owner}{/repo},https://api.github.com/users/kolfild26/subscriptions,https://api.github.com/users/kolfild26/orgs,https://api.github.com/users/kolfild26/repos,https://api.github.com/users/kolfild26/events{/privacy},https://api.github.com/users/kolfild26/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830755123/reactions,0,0,0,0,0,0,0,0,0,14500
2233,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830795476,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830795476,https://api.github.com/repos/rapidsai/cudf/issues/14500,1830795476,IC_kwDOBWUGps5tH7jU,2023-11-28T21:42:51Z,2023-11-28T21:42:51Z,CONTRIBUTOR,"> Filtering out two columns before the groupby fixes all.

Thanks! We'll investigate whether we can optimize things so that you don't have to do this filter, and report back here.

> I also noticed that when I restart the machine, the first try after the restart is successfully being calculated on the GPU. Only once. Next run is falling back to the CPU again.

Ah, interesting. There are a few possibilities then:

- We have a memory leak (this would be bad)
- Some Python objects are caught in reference cycles and haven't been cleared. You can try running `gc.collect()` to release the memory associated with those objects and see if that helps with memory usage.

Can you try the following:

```Python
import gc

# run groupby-sum for the first time
gc.collect()
# run groupby-sum for the second time
```

and let us know if that works?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830795476/reactions,0,0,0,0,0,0,0,0,0,14500
2234,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830815731,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1830815731,https://api.github.com/repos/rapidsai/cudf/issues/14500,1830815731,IC_kwDOBWUGps5tIAfz,2023-11-28T21:54:00Z,2023-11-28T21:54:00Z,CONTRIBUTOR,"> Is there any way to switch on this option in the jupyter notebook?

Yes -- you can run jupyter notebook with:

```
CUDF_SPILL=1 jupyter notebook ...
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1830815731/reactions,0,0,0,0,0,0,0,0,0,14500
2235,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832936983,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832936983,https://api.github.com/repos/rapidsai/cudf/issues/14500,1832936983,IC_kwDOBWUGps5tQGYX,2023-11-30T00:58:51Z,2023-11-30T00:58:51Z,NONE,"`gc.collect()` doesn't change anything. 
No need to fully restart(as I mentioned above) but just to recreate the conda env with rapids and cuda like:
`conda create -n rapids-23.10 -c rapidsai -c conda-forge -c nvidia rapids=23.10 python=3.10 cuda-version=12.0`
and the groupby() works out several times and then starts falling back to the CPU. The exact number of times before the falling is unpredictable, it might be 1 (as I said earlier) or 2-3, around.
I've also tried the `sort_values()` and the `join() `operations. The same picture in there. There is a limit of the df size below which it's all on the GPU and above which it's  going to the CPU. The only thing that varies is the size. Each of that three operations has its own limit in my case. For the groupby and sort_values it's around ~100kk. For the join (_inner_ for instance) is to be ~10kk.

> CUDF_SPILL=1

I tried this and **periodically** I catch the warning:
```
[WARNING] RMM allocation of 2.12GiB bytes failed, spill-on-demand couldn't find any device memory to spill:
<SpillManager spill_on_demand=True device_memory_limit=N/A | 7.38GiB spilled | 22.28GiB (100%) unspilled (unspillable)>
traceback
```
And, unfortunatelly _spilling_ doesn't help here too, no matter with or w/o this warning.",,kolfild26,12990695,MDQ6VXNlcjEyOTkwNjk1,https://avatars.githubusercontent.com/u/12990695?v=4,,https://api.github.com/users/kolfild26,https://github.com/kolfild26,https://api.github.com/users/kolfild26/followers,https://api.github.com/users/kolfild26/following{/other_user},https://api.github.com/users/kolfild26/gists{/gist_id},https://api.github.com/users/kolfild26/starred{/owner}{/repo},https://api.github.com/users/kolfild26/subscriptions,https://api.github.com/users/kolfild26/orgs,https://api.github.com/users/kolfild26/repos,https://api.github.com/users/kolfild26/events{/privacy},https://api.github.com/users/kolfild26/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832936983/reactions,0,0,0,0,0,0,0,0,0,14500
2236,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832940500,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832940500,https://api.github.com/repos/rapidsai/cudf/issues/14500,1832940500,IC_kwDOBWUGps5tQHPU,2023-11-30T01:03:31Z,2023-11-30T01:03:31Z,NONE,"`7.38GiB spilled | 22.28GiB (100%) unspilled (unspillable)`
🤔  might this be the cause? Looks like it says that only 7,4Gb from 32Gb were available for that operation.",,kolfild26,12990695,MDQ6VXNlcjEyOTkwNjk1,https://avatars.githubusercontent.com/u/12990695?v=4,,https://api.github.com/users/kolfild26,https://github.com/kolfild26,https://api.github.com/users/kolfild26/followers,https://api.github.com/users/kolfild26/following{/other_user},https://api.github.com/users/kolfild26/gists{/gist_id},https://api.github.com/users/kolfild26/starred{/owner}{/repo},https://api.github.com/users/kolfild26/subscriptions,https://api.github.com/users/kolfild26/orgs,https://api.github.com/users/kolfild26/repos,https://api.github.com/users/kolfild26/events{/privacy},https://api.github.com/users/kolfild26/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832940500/reactions,0,0,0,0,0,0,0,0,0,14500
2237,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832955842,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1832955842,https://api.github.com/repos/rapidsai/cudf/issues/14500,1832955842,IC_kwDOBWUGps5tQK_C,2023-11-30T01:22:45Z,2023-11-30T01:22:45Z,CONTRIBUTOR,"Thanks for looking into it!

> There is a limit of the df size below which it's all on the GPU and above which it's going to the CPU. The only thing that varies is the size. Each of that three operations has its own limit in my case. For the groupby and sort_values it's around ~100kk. For the join (inner for instance) is to be ~10kk.

Yeah this variability makes sense. The amount of intermediate memory required by a `join` operation can be very different from that required by `groupby` or `sort`.

On the `groupby` front, it does sound like we can optimize things so that you don't have to do a filter of the columns before `groupby`. 

I think you're essentially running up to the limitation that operations on larger data require more than the available GPU memory. While spilling can _sometimes_ help with that, it doesn't seem to in this particular situation. So the operations end up executing on CPU.

--- 

Taking a step back, are you able to share what your workflow looks like? Perhaps we can provide more useful/specific suggestions if we can see the whole code. ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832955842/reactions,0,0,0,0,0,0,0,0,0,14500
2238,https://api.github.com/repos/rapidsai/cudf/issues/comments/1836634637,https://github.com/rapidsai/cudf/issues/14500#issuecomment-1836634637,https://api.github.com/repos/rapidsai/cudf/issues/14500,1836634637,IC_kwDOBWUGps5teNIN,2023-12-01T19:08:53Z,2023-12-01T19:08:53Z,NONE,"> are you able to share what your workflow looks like? Perhaps we can provide more useful/specific suggestions if we can see the whole code.

I just started learning the cudf from exploring its boundaries. So, didn't apply it for the actual pipeline yet. But will definitely do this!
Will raise an issue if I have any questions. Or I will update this one if it's relevant.
Thanks for your help.
",,kolfild26,12990695,MDQ6VXNlcjEyOTkwNjk1,https://avatars.githubusercontent.com/u/12990695?v=4,,https://api.github.com/users/kolfild26,https://github.com/kolfild26,https://api.github.com/users/kolfild26/followers,https://api.github.com/users/kolfild26/following{/other_user},https://api.github.com/users/kolfild26/gists{/gist_id},https://api.github.com/users/kolfild26/starred{/owner}{/repo},https://api.github.com/users/kolfild26/subscriptions,https://api.github.com/users/kolfild26/orgs,https://api.github.com/users/kolfild26/repos,https://api.github.com/users/kolfild26/events{/privacy},https://api.github.com/users/kolfild26/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1836634637/reactions,1,0,0,0,0,0,1,0,0,14500
2239,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832774311,https://github.com/rapidsai/cudf/issues/14517#issuecomment-1832774311,https://api.github.com/repos/rapidsai/cudf/issues/14517,1832774311,IC_kwDOBWUGps5tPeqn,2023-11-29T22:04:25Z,2023-11-29T22:04:25Z,CONTRIBUTOR,"Clarifying this statement:
> There's a final wrinkle that (like spark) for bools only, masked values are treated as False.

this refers to the output of boolean column operations:
```
>>> pd.DataFrame({'a': [10], 'b': [True]}).eval('a and a')
0    10
Name: a, dtype: int64
>>> pd.DataFrame({'a': [10], 'b': [True]}).eval('a & a')
0    10
Name: a, dtype: int64
>>> pd.DataFrame({'a': [10], 'b': [True]}).eval('b and b')
0    True
Name: b, dtype: bool
>>> pd.DataFrame({'a': [10], 'b': [True]}).eval('b & b')
0    True
Name: b, dtype: bool
```

IOW the statement being true relies on bitwise operators between bools being defined as returning bools.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832774311/reactions,0,0,0,0,0,0,0,0,0,14517
2240,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832824820,https://github.com/rapidsai/cudf/issues/14517#issuecomment-1832824820,https://api.github.com/repos/rapidsai/cudf/issues/14517,1832824820,IC_kwDOBWUGps5tPq_0,2023-11-29T22:50:53Z,2023-11-29T22:50:53Z,CONTRIBUTOR,"No, replace your a column with a null value. the behaviour is different if it is a masked bool column to when it is a masked any other kind of column",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832824820/reactions,0,0,0,0,0,0,0,0,0,14517
2241,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832864625,https://github.com/rapidsai/cudf/issues/14517#issuecomment-1832864625,https://api.github.com/repos/rapidsai/cudf/issues/14517,1832864625,IC_kwDOBWUGps5tP0tx,2023-11-29T23:32:19Z,2023-11-29T23:32:19Z,CONTRIBUTOR,Ah OK. In that case my comment is more relevant as a separate statement about what behavior we need to see.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832864625/reactions,0,0,0,0,0,0,0,0,0,14517
2242,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834017660,https://github.com/rapidsai/cudf/issues/14520#issuecomment-1834017660,https://api.github.com/repos/rapidsai/cudf/issues/14520,1834017660,IC_kwDOBWUGps5tUON8,2023-11-30T15:37:49Z,2023-11-30T15:37:49Z,CONTRIBUTOR,"This will never work since culling things from sys.modules does not `dlclose` the compiled extension modules that were loaded, so any state that is maintained in these shared libraries will persist.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834017660/reactions,0,0,0,0,0,0,0,0,0,14520
2243,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834025865,https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834025865,https://api.github.com/repos/rapidsai/cudf/issues/14521,1834025865,IC_kwDOBWUGps5tUQOJ,2023-11-30T15:42:19Z,2023-11-30T15:42:19Z,CONTRIBUTOR,"Plausibly, at the cost of making the `to_arrow` functions in cudf aware of things, we could do this by unwrapping the wrapped result of `to_arrow().to_pandas()` (replacing it with `to_arrow().to_pandas()._fsproxy_slow`).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834025865/reactions,0,0,0,0,0,0,0,0,0,14521
2244,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834049803,https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834049803,https://api.github.com/repos/rapidsai/cudf/issues/14521,1834049803,IC_kwDOBWUGps5tUWEL,2023-11-30T15:55:39Z,2023-11-30T15:55:39Z,CONTRIBUTOR,"> Plausibly, at the cost of making the to_arrow functions in cudf aware of things

If this means making `cudf` aware of `cudf.pandas` proxy types, I'm strongly -1 to this. I'd really like to keep the separation of concerns here.

> Rather than letting module attribute lookup be context dependent, always deliver wrapped types such that the constructor context-dependently decides whether or not to deliver a real or wrapped type.

This would likely break a bunch of things, but specifically it would break the following:

```python
# somewhere inside pandas code:
isinstance(df, pd.DataFrame)  # returns false
```

---

> Something else?

Maybe https://github.com/apache/arrow/issues/38325?",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834049803/reactions,0,0,0,0,0,0,0,0,0,14521
2245,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834074612,https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834074612,https://api.github.com/repos/rapidsai/cudf/issues/14521,1834074612,IC_kwDOBWUGps5tUcH0,2023-11-30T16:09:25Z,2023-11-30T16:09:25Z,CONTRIBUTOR,"> > Plausibly, at the cost of making the to_arrow functions in cudf aware of things
> 
> If this means making `cudf` aware of `cudf.pandas` proxy types, I'm strongly -1 to this. I'd really like to keep the separation of concerns here.

Yeah, I don't want that either.

> > Rather than letting module attribute lookup be context dependent, always deliver wrapped types such that the constructor context-dependently decides whether or not to deliver a real or wrapped type.
> 
> This would likely break a bunch of things, but specifically it would break the following:
> 
> ```python
> # somewhere inside pandas code:
> isinstance(df, pd.DataFrame)  # returns false
> ```

You could dodge that bullet by continuing to _also_ maintain the module getattr handling, perhaps allowlisted inside the pandas codebase, I _think_.

> > Something else?
> 
> Maybe [apache/arrow#38325](https://github.com/apache/arrow/issues/38325)?

Does that help? That seems to be an interface for objects consuming arrow-like things and delivering ""something"". I guess that if, as a result, rather than doing `arrow_table.to_pandas()` we instead do `pandas.from_arrow(arrow_table)` (like `cudf.from_arrow`) then we're in business because we can just call `pandas.from_arrow(...)` inside cudf, and that also becomes the blessed way to get from arrow to pandas _externally_. Then we need no change because our existing denylisting on module attribute lookup would do the right thing.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834074612/reactions,0,0,0,0,0,0,0,0,0,14521
2246,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834093116,https://github.com/rapidsai/cudf/issues/14521#issuecomment-1834093116,https://api.github.com/repos/rapidsai/cudf/issues/14521,1834093116,IC_kwDOBWUGps5tUgo8,2023-11-30T16:18:51Z,2023-11-30T16:18:51Z,CONTRIBUTOR,"> You could dodge that bullet by continuing to also maintain the module getattr handling, perhaps allowlisted inside the pandas codebase, I think.

Yeah that might do it...",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834093116/reactions,0,0,0,0,0,0,0,0,0,14521
2247,https://api.github.com/repos/rapidsai/cudf/issues/comments/1843045989,https://github.com/rapidsai/cudf/issues/14521#issuecomment-1843045989,https://api.github.com/repos/rapidsai/cudf/issues/14521,1843045989,IC_kwDOBWUGps5t2qZl,2023-12-06T14:50:45Z,2023-12-06T14:51:04Z,MEMBER,"While discussing some current dask + cudf.pandas problems with @shwina, he pointed me to this issue. Thanks for pushing on this!

Unfortunately, I cannot suggest any new ideas here, but I do want to add a bit more Dask-related motivation:

Both `dask.dataframe` and `dask_expr` are currently using `pa.Table.to_pandas()` in several critical places. The most important places are `read_parquet` and “p2p” shuffling. This essentially means that `cudf.pandas` will run into problems for any Parquet based Dask workflow. It also means that any “p2p”-based shuffle (used by default for sorting and merging when a distributed client is active) will produce “real” pd.DataFrame objects.

I know that Ashwin is already aware of these problems, but I wanted to make sure others had the same context.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1843045989/reactions,0,0,0,0,0,0,0,0,0,14521
2248,https://api.github.com/repos/rapidsai/cudf/issues/comments/1831841054,https://github.com/rapidsai/cudf/issues/14524#issuecomment-1831841054,https://api.github.com/repos/rapidsai/cudf/issues/14524,1831841054,IC_kwDOBWUGps5tL60e,2023-11-29T12:52:34Z,2023-11-29T12:52:34Z,CONTRIBUTOR,"This is, approximately, because `df2` has a column that is not representable as a fast object. Simpler example:

```
s = pd.Series([object()])
s.index.name = ""what""
print(s.index.name) # => None
```

I think what happens is that `s.index` provokes a fast->slow conversion (so that `s._fsproxy_state` is slow). But then we have a ""final"" object at this point, so we then do `index.name = ""what""` and that pushes the index to cudf, sets the name there. But now this destroyed the link between `s.index` and the name we set.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1831841054/reactions,0,0,0,0,0,0,0,0,0,14524
2249,https://api.github.com/repos/rapidsai/cudf/issues/comments/1831995048,https://github.com/rapidsai/cudf/issues/14524#issuecomment-1831995048,https://api.github.com/repos/rapidsai/cudf/issues/14524,1831995048,IC_kwDOBWUGps5tMgao,2023-11-29T14:24:24Z,2023-11-29T14:24:24Z,CONTRIBUTOR,"Yeah we might need a custom `name` setter and getter for our proxy index type, given how common this operation is and we need to support it correctly.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1831995048/reactions,0,0,0,0,0,0,0,0,0,14524
2250,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832781257,https://github.com/rapidsai/cudf/issues/14524#issuecomment-1832781257,https://api.github.com/repos/rapidsai/cudf/issues/14524,1832781257,IC_kwDOBWUGps5tPgXJ,2023-11-29T22:10:08Z,2023-11-29T22:10:08Z,CONTRIBUTOR,"> I think what happens is that s.index provokes a fast->slow conversion (so that s._fsproxy_state is slow).

I'm confused, shouldn't the original object in this case already be a slow object? In which case `s.index` should also be a slow object. And then what triggers the final slow->fast conversion when doing `s.index.name = ""what""`?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832781257/reactions,0,0,0,0,0,0,0,0,0,14524
2251,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833745159,https://github.com/rapidsai/cudf/issues/14524#issuecomment-1833745159,https://api.github.com/repos/rapidsai/cudf/issues/14524,1833745159,IC_kwDOBWUGps5tTLsH,2023-11-30T13:01:19Z,2023-11-30T13:01:19Z,CONTRIBUTOR,"There are two things at work:

1. The series is not representable as a fast object
2. The index is representable as a fast object

A method call on the series will first attempt to copy slow-to-fast, fail, and then call the slow method and wrap up the result. The return value is in the slow state. But, the index can be fast, so when we call a method on the index that attempts a slow-to-fast copy, succeeds, and calls the fast method. The index object is now in the fast state.

Now, the problem is that we modified the internal state of the return value of `s.index`. But, `s.index` is a property, so the next time we call it, we'll attempt a slow-to-fast copy of `s`, fail, call the slow method, and wrap it up. With the consequence that `id(s.index) != id(s.index)`. Since at any one time a proxy object _either_ holds a fast object _or_ a slow object, any modifications we perform on the index we get back from `s.index` are not ""in-place"" in this scenario, and so don't propagate to the index that underlies `s`.
```
In [72]: s = pd.Series([object()])

In [73]: i = s.index

In [74]: id(i._fsproxy_slow)
Out[74]: 140540061935904

In [75]: i._fsproxy_state
Out[75]: <_State.SLOW: 0>

In [76]: i.name = ""bar""

In [77]: i._fsproxy_state
Out[77]: <_State.FAST: 1>

In [78]: id(i._fsproxy_fast)
Out[78]: 140540060927552

In [79]: id(s.index._fsproxy_slow)
Out[79]: 140540061935904

In [80]: id(i)
Out[80]: 140543720616288

In [81]: id(s.index)
Out[81]: 140540061939936

In [82]: id(i._fsproxy_slow)
Out[82]: 140540061938064
```",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833745159/reactions,0,0,0,0,0,0,0,0,0,14524
2252,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832798860,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1832798860,https://api.github.com/repos/rapidsai/cudf/issues/14528,1832798860,IC_kwDOBWUGps5tPkqM,2023-11-29T22:26:20Z,2023-11-29T22:26:20Z,CONTRIBUTOR,"Looking at the implementation of our rounding code (specifically [half_up_positive](https://github.com/rapidsai/cudf/blob/e15290a373ff0c84c85c2c0e940e69377a66cf96/cpp/src/round/round.cu#L103-L112)), I am concerned that it's not just a matter of `float` becoming `double`. I suspect `double` values could see the same type of problem, if the number of decimal places is large enough. I think we may need to use an algorithm that is more numerically stable and has less precision loss due to truncation. See also #14169, which is a separate problem with rounding algorithms in libcudf affecting float-to-decimal conversions.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832798860/reactions,0,0,0,0,0,0,0,0,0,14528
2253,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832823111,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1832823111,https://api.github.com/repos/rapidsai/cudf/issues/14528,1832823111,IC_kwDOBWUGps5tPqlH,2023-11-29T22:49:15Z,2023-11-29T22:49:15Z,MEMBER,"Yes, totally agree that double will have similar issues with larger decimal place rounding.  As such I don't see this so much as ""solving"" all the rounding issues as significantly improving the results for FLOAT32 with minimal effort.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1832823111/reactions,0,0,0,0,0,0,0,0,0,14528
2254,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833514817,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1833514817,https://api.github.com/repos/rapidsai/cudf/issues/14528,1833514817,IC_kwDOBWUGps5tSTdB,2023-11-30T10:46:38Z,2023-11-30T14:09:37Z,CONTRIBUTOR,"I think this might be possible to handle by using appropriately selected CUDA intrinsics for the division step. If we're rounding half-up we should use division with round to positive infinity, rather than round to nearest ties to even (which is the default):

Edit: I misunderstood the definition of half_up rounding, which only breaks ties. Though one might still be able to get away with _something_ like this
```
#include <cstdio>
#include <cuda_runtime_api.h>
__global__ void test(float val, float *out) {
  float decimals = std::pow(10, 10);
  float ipart;
  float remainder = modff(val, &ipart);
  float scaled = roundf(remainder * decimals);
  out[0] = ipart + __fdiv_ru(scaled, decimals);
  out[1] = ipart + __fdiv_rn(scaled, decimals);
}

int main(void) {
  float input = 6.121944898040965e-05f;
  float *val;
  cudaMalloc(&val, 2 * sizeof(float));
  test<<<1, 1, 1>>>(input, val);
  float h_val[2];
  cudaMemcpy(&h_val, val, 2*sizeof(float), cudaMemcpyDeviceToHost);
  printf(""in:      %.20f\n"", input);
  printf(""out(ru): %.20f\n"", h_val[0]);
  printf(""out(rn): %.20f\n"", h_val[1]);
  cudaFree(val);
}
```
Produces:
```
in:      0.00006121944898040965
out(ru): 0.00006121950718807057
out(rn): 0.00006121949991211295
```

But I haven't thought through all the consequences of this change.

",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833514817/reactions,0,0,0,0,0,0,0,0,0,14528
2255,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833886506,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1833886506,https://api.github.com/repos/rapidsai/cudf/issues/14528,1833886506,IC_kwDOBWUGps5tTuMq,2023-11-30T14:29:47Z,2023-11-30T14:29:47Z,CONTRIBUTOR,"That said, I claim that `half_up` rounding doesn't make much sense as tiebreaking scheme for binary floating point values since the only fractional floating point values that exactly end in 5 are those of the form $2^{-n}$ for $n \ge 1$.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1833886506/reactions,0,0,0,0,0,0,0,0,0,14528
2256,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919587984,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1919587984,https://api.github.com/repos/rapidsai/cudf/issues/14528,1919587984,IC_kwDOBWUGps5yapaQ,2024-01-31T17:35:59Z,2024-01-31T17:35:59Z,CONTRIBUTOR,"I started looking into this, and noticed a problem with our current implementation: HALF_UP rounding is bugged for negative numbers: 

if you round (e.g.) **-0.5f** to zero decimal places, it should round **up** to zero, but instead results in **-1** because it calls roundf(), which rounds **away** from zero. 

Do we want to change the rounding code to round up, or change the name/comment to ROUND_AWAY?",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919587984/reactions,0,0,0,0,0,0,0,0,0,14528
2257,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919726061,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1919726061,https://api.github.com/repos/rapidsai/cudf/issues/14528,1919726061,IC_kwDOBWUGps5ybLHt,2024-01-31T18:48:39Z,2024-01-31T18:48:39Z,MEMBER,"I think the ""UP"" here refers to higher magnitude rather than higher value.  FWIW Java's `HALF_UP` rounding has same round-away-from-zero semantics (see Javadocs [here](https://docs.oracle.com/javase/8/docs/api/java/math/RoundingMode.html#HALF_UP)), so the HALF_UP semantics match what we want from the Spark perspective.",,jlowe,1360766,MDQ6VXNlcjEzNjA3NjY=,https://avatars.githubusercontent.com/u/1360766?v=4,,https://api.github.com/users/jlowe,https://github.com/jlowe,https://api.github.com/users/jlowe/followers,https://api.github.com/users/jlowe/following{/other_user},https://api.github.com/users/jlowe/gists{/gist_id},https://api.github.com/users/jlowe/starred{/owner}{/repo},https://api.github.com/users/jlowe/subscriptions,https://api.github.com/users/jlowe/orgs,https://api.github.com/users/jlowe/repos,https://api.github.com/users/jlowe/events{/privacy},https://api.github.com/users/jlowe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919726061/reactions,0,0,0,0,0,0,0,0,0,14528
2258,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919730934,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1919730934,https://api.github.com/repos/rapidsai/cudf/issues/14528,1919730934,IC_kwDOBWUGps5ybMT2,2024-01-31T18:52:08Z,2024-01-31T18:52:08Z,CONTRIBUTOR,"That's fine with me, I'll fix the code comment then in round.hpp (which should instead point to wikipedia's rounding half away from zero).  ",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919730934/reactions,0,0,0,0,0,0,0,0,0,14528
2259,https://api.github.com/repos/rapidsai/cudf/issues/comments/1928171044,https://github.com/rapidsai/cudf/issues/14528#issuecomment-1928171044,https://api.github.com/repos/rapidsai/cudf/issues/14528,1928171044,IC_kwDOBWUGps5y7Y4k,2024-02-05T21:59:56Z,2024-02-05T21:59:56Z,MEMBER,"> When rounding single-precision floats to a specified number of decimal places

The above is a nonsense statement, in my book. By now you should know my opinion on this: libcudf should not support `round` to decimal places on binary floating-point types.

https://github.com/rapidsai/cudf/issues/406
https://github.com/rapidsai/cudf/issues/1270
https://github.com/rapidsai/cudf/issues/1340
https://github.com/rapidsai/cudf/issues/7195

I'm sure there are more.
",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1928171044/reactions,0,0,0,0,0,0,0,0,0,14528
2260,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834639423,https://github.com/rapidsai/cudf/issues/14539#issuecomment-1834639423,https://api.github.com/repos/rapidsai/cudf/issues/14539,1834639423,IC_kwDOBWUGps5tWmA_,2023-11-30T22:08:20Z,2023-11-30T22:08:20Z,CONTRIBUTOR,"Actually, upon further review, this mystery ""list"" element is in the parquet file itself (it's one of the odd ways in which the spec allows you to specify list columns).  A question here though would be what would a user expect to be the correct way to do it.  For Pandas or Spark, would you expect to have to put ""list"" in there when selecting a subset of columns?  @jlowe  @shwina ",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834639423/reactions,0,0,0,0,0,0,0,0,0,14539
2261,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834643395,https://github.com/rapidsai/cudf/issues/14539#issuecomment-1834643395,https://api.github.com/repos/rapidsai/cudf/issues/14539,1834643395,IC_kwDOBWUGps5tWm_D,2023-11-30T22:11:48Z,2023-11-30T22:12:28Z,CONTRIBUTOR,"The schema for this part of the file is 
```
  optional group field_id=-1 func_params (List) {
    repeated group field_id=-1 list {
      optional group field_id=-1 item {
        optional int32 field_id=-1 order;
        optional int32 field_id=-1 size;
        optional binary field_id=-1 type (String);
      }
    }
  }
```",,hyperbolic2346,3506308,MDQ6VXNlcjM1MDYzMDg=,https://avatars.githubusercontent.com/u/3506308?v=4,,https://api.github.com/users/hyperbolic2346,https://github.com/hyperbolic2346,https://api.github.com/users/hyperbolic2346/followers,https://api.github.com/users/hyperbolic2346/following{/other_user},https://api.github.com/users/hyperbolic2346/gists{/gist_id},https://api.github.com/users/hyperbolic2346/starred{/owner}{/repo},https://api.github.com/users/hyperbolic2346/subscriptions,https://api.github.com/users/hyperbolic2346/orgs,https://api.github.com/users/hyperbolic2346/repos,https://api.github.com/users/hyperbolic2346/events{/privacy},https://api.github.com/users/hyperbolic2346/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834643395/reactions,0,0,0,0,0,0,0,0,0,14539
2262,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834644529,https://github.com/rapidsai/cudf/issues/14539#issuecomment-1834644529,https://api.github.com/repos/rapidsai/cudf/issues/14539,1834644529,IC_kwDOBWUGps5tWnQx,2023-11-30T22:12:53Z,2023-11-30T22:12:53Z,CONTRIBUTOR,"Unfortunately unless you can normalize the schema it is not clear because there are multiple ways to encode the schema and it is not ""required""

https://github.com/apache/parquet-format/blob/master/LogicalTypes.md#lists

Ideally the repeated group is called ""list"" but 

https://github.com/apache/parquet-format/blob/master/LogicalTypes.md#backward-compatibility-rules

gives a lot of other options",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834644529/reactions,0,0,0,0,0,0,0,0,0,14539
2263,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834652851,https://github.com/rapidsai/cudf/issues/14539#issuecomment-1834652851,https://api.github.com/repos/rapidsai/cudf/issues/14539,1834652851,IC_kwDOBWUGps5tWpSz,2023-11-30T22:21:02Z,2023-11-30T22:21:02Z,CONTRIBUTOR,"Right, that's the question:  are these details something you'd expect the end user to know or care about, or would they just expect ""A.B.C""?  Maybe this is a what-would-Pandas-do question.",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1834652851/reactions,0,0,0,0,0,0,0,0,0,14539
2264,https://api.github.com/repos/rapidsai/cudf/issues/comments/1839805994,https://github.com/rapidsai/cudf/issues/14539#issuecomment-1839805994,https://api.github.com/repos/rapidsai/cudf/issues/14539,1839805994,IC_kwDOBWUGps5tqTYq,2023-12-05T00:42:06Z,2023-12-05T00:42:06Z,CONTRIBUTOR,"@nvdbaranec It's been a few years, but I believe the way to query in the above situation is to use `explode` to convert the list to separate rows.  If there were another column at the top of the hierarchy ('X'), then the value for 'X' would be repeated for each new row that the list 'A' was exploded into. Here's a pyspark query I did years ago against the data @hyperbolic2346 quoted above:
```python
df.createOrReplaceTempView(""asm"")

sql = """"""
select func_name, func_addr_start, blk_addr_start, blk_id, flatten(sources.asm) as asm from (
  select func_name, func_addr_start, bb.blk_addr_start, bb.blk_id, filter(bb.sources,x->x.asm_scrub_type = 'no_scrub') as sources
    from (select func_name, func_addr_start, explode(basic_blocks) as bb from asm))
where func_name='introduce'
"""""" 
```",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1839805994/reactions,0,0,0,0,0,0,0,0,0,14539
2265,https://api.github.com/repos/rapidsai/cudf/issues/comments/1906512489,https://github.com/rapidsai/cudf/issues/14574#issuecomment-1906512489,https://api.github.com/repos/rapidsai/cudf/issues/14574,1906512489,IC_kwDOBWUGps5xoxJp,2024-01-23T16:58:40Z,2024-01-23T16:58:52Z,CONTRIBUTOR,Update: we received a request to prioritize Avro support because it is the format used in the OSCAR dataset (https://oscar-project.github.io/documentation/versions/oscar-2301/). If additional NLP datasets and LLM applications find need of Avro we may choose to prioritize Avro development.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1906512489/reactions,0,0,0,0,0,0,0,0,0,14574
2266,https://api.github.com/repos/rapidsai/cudf/issues/comments/1978713903,https://github.com/rapidsai/cudf/issues/14589#issuecomment-1978713903,https://api.github.com/repos/rapidsai/cudf/issues/14589,1978713903,IC_kwDOBWUGps518Mcv,2024-03-05T12:52:41Z,2024-03-05T12:52:41Z,CONTRIBUTOR,"Apologies for the slowness of this response.

Do you definitely want to go through cudf, or is it just a (semi) convenient route to loading parquet data into device memory? And, as a follow up, do you always start with parquet data, or is that again a ""convenient"" starting point?

We could plausibly support this new type, now that it is standardised in C++ arrow (rather than just pyarrow). However we probably wouldn't have any algorithms attached to it in the first instance.

I'm also a little confused as to where you want zero-copy to occur. For example you rule out zarr+kvikio because:

> [....] don't think zero copy between cpu and gpu is supported https://xarray.dev/blog/xarray-kvikio

However, if you had a pyarrow table in CPU memory, converting it to a cudf dataframe would also not be zero-copy: the data must be copied from host to device memory (I brush under the table for now unified, or managed, cuda memory since that has some non-trivial performance implications).

",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1978713903/reactions,0,0,0,0,0,0,0,0,0,14589
2267,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845946142,https://github.com/rapidsai/cudf/issues/14594#issuecomment-1845946142,https://api.github.com/repos/rapidsai/cudf/issues/14594,1845946142,IC_kwDOBWUGps5uBuce,2023-12-07T19:06:30Z,2023-12-07T19:06:30Z,CONTRIBUTOR,Another question that comes to mind is whether these _same_ rules should be applied to binops (there's a different set of rules in pandas for merges compared to binops AFAICT).,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1845946142/reactions,0,0,0,0,0,0,0,0,0,14594
2268,https://api.github.com/repos/rapidsai/cudf/issues/comments/1846967116,https://github.com/rapidsai/cudf/issues/14594#issuecomment-1846967116,https://api.github.com/repos/rapidsai/cudf/issues/14594,1846967116,IC_kwDOBWUGps5uFntM,2023-12-08T11:01:47Z,2023-12-08T11:01:47Z,CONTRIBUTOR,"Here's what I concretely propose for integer promotions:

```
      +----+    +-----+    +-----+    +-----+
      | i8 |--->| i16 |--->| i32 |--->| i64 |
      +----+    +--^--+    +--^--+    +--^--+
                  /          /          /
              /---'      /---'      /---'
          /---'      /---'      /---'        
      +--+-+    +---+-+    +---+-+    +-----+
      | u8 |--->| u16 |--->| u32 |--->| u64 |
      +----+    +-----+    +-----+    +-----+
```

For floating point (noting that we don't have float 16 right now):

```
      +-----+    +-----+    +-----+
      | f16 |--->| f32 |--->| f64 |
      +-----+    +-----+    +-----+
```

The thorny one is unifying these two. If you send (for example), the pair `(i16, f32)` to `f32`, and the pair `(u16, f32)` to `f32`, which is safe since you lose no data, then that breaks the lattice property of the promotion scheme with the consequence that type promotion is no longer associative. `((i16, u16),  f32) -> (i32, f32) -> f64`, but `(i16, (u16, f32)) -> (i16, f32) -> f32`.

Jax solves this problem by letting arbitrary width float win over arbitrary width integer, so that `(i64, f16) -> f16`. But I don't think that's a reasonable solution for cudf.

We can remove the lattice property and have integer to float conversions where they are lossless. The issue is that a sequence of merges might or might not raise depending on their order (and join reordering is a common optimisation).

Consequently, having thought harder, I am inclined to raise for joins between integral and float keys, and promote safely using the lattices above for same-kind keys.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1846967116/reactions,0,0,0,0,0,0,0,0,0,14594
2269,https://api.github.com/repos/rapidsai/cudf/issues/comments/1847794906,https://github.com/rapidsai/cudf/issues/14594#issuecomment-1847794906,https://api.github.com/repos/rapidsai/cudf/issues/14594,1847794906,IC_kwDOBWUGps5uIxza,2023-12-08T20:20:55Z,2023-12-08T20:23:54Z,CONTRIBUTOR,"Just for comparison, pandas essentially dispatches to `np.result_type` to determine promotion. This logic generally does not apply when an element is trying to be set into an existing typed column.

```python
In [1]: import numpy as np

In [2]: types = [np.int8, np.int16, np.int32, np.int64, np.uint8, np.uint16, np.uint32, np.uint64, np.float32, np.float64]

In [3]: np.__version__
Out[3]: '1.26.0'

In [4]: import itertools

In [5]: for typ1, typ2 in itertools.combinations(types, 2):
    ...:     print(f""{np.dtype(typ1)} + {np.dtype(typ2)} -> {np.result_type(typ1, typ2)}"")
    ...: 
int8 + int16 -> int16
int8 + int32 -> int32
int8 + int64 -> int64
int8 + uint8 -> int16
int8 + uint16 -> int32
int8 + uint32 -> int64
int8 + uint64 -> float64
int8 + float32 -> float32
int8 + float64 -> float64
int16 + int32 -> int32
int16 + int64 -> int64
int16 + uint8 -> int16
int16 + uint16 -> int32
int16 + uint32 -> int64
int16 + uint64 -> float64
int16 + float32 -> float32
int16 + float64 -> float64
int32 + int64 -> int64
int32 + uint8 -> int32
int32 + uint16 -> int32
int32 + uint32 -> int64
int32 + uint64 -> float64
int32 + float32 -> float64
int32 + float64 -> float64
int64 + uint8 -> int64
int64 + uint16 -> int64
int64 + uint32 -> int64
int64 + uint64 -> float64
int64 + float32 -> float64
int64 + float64 -> float64
uint8 + uint16 -> uint16
uint8 + uint32 -> uint32
uint8 + uint64 -> uint64
uint8 + float32 -> float32
uint8 + float64 -> float64
uint16 + uint32 -> uint32
uint16 + uint64 -> uint64
uint16 + float32 -> float32
uint16 + float64 -> float64
uint32 + uint64 -> uint64
uint32 + float32 -> float64
uint32 + float64 -> float64
uint64 + float32 -> float64
uint64 + float64 -> float64
float32 + float64 -> float64
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1847794906/reactions,0,0,0,0,0,0,0,0,0,14594
2270,https://api.github.com/repos/rapidsai/cudf/issues/comments/1858788529,https://github.com/rapidsai/cudf/issues/14618#issuecomment-1858788529,https://api.github.com/repos/rapidsai/cudf/issues/14618,1858788529,IC_kwDOBWUGps5uytyx,2023-12-16T10:53:02Z,2023-12-16T10:53:02Z,CONTRIBUTOR,Hi @lidavidm - thanks for reporting! I agree that this is a bug and that we should likely align with whatever behavior Arrow has here. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1858788529/reactions,1,1,0,0,0,0,0,0,0,14618
2271,https://api.github.com/repos/rapidsai/cudf/issues/comments/1860924941,https://github.com/rapidsai/cudf/issues/14618#issuecomment-1860924941,https://api.github.com/repos/rapidsai/cudf/issues/14618,1860924941,IC_kwDOBWUGps5u63YN,2023-12-18T16:10:40Z,2023-12-18T16:10:40Z,NONE,"Cool!

I tested DuckDB (which gives double as the result of diving two decimals :slightly_frowning_face:). 

Arrow calculates the output type here: https://github.com/apache/arrow/blob/740889f413af9b1ae1d81eb1e5a4a9fb4ce9cf97/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc#L529-L538

Arrow figures out how to scale the operands here: https://github.com/apache/arrow/blob/apache-arrow-14.0.2/cpp/src/arrow/compute/kernels/codegen_internal.cc#L435-L438",,lidavidm,327919,MDQ6VXNlcjMyNzkxOQ==,https://avatars.githubusercontent.com/u/327919?v=4,,https://api.github.com/users/lidavidm,https://github.com/lidavidm,https://api.github.com/users/lidavidm/followers,https://api.github.com/users/lidavidm/following{/other_user},https://api.github.com/users/lidavidm/gists{/gist_id},https://api.github.com/users/lidavidm/starred{/owner}{/repo},https://api.github.com/users/lidavidm/subscriptions,https://api.github.com/users/lidavidm/orgs,https://api.github.com/users/lidavidm/repos,https://api.github.com/users/lidavidm/events{/privacy},https://api.github.com/users/lidavidm/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1860924941/reactions,0,0,0,0,0,0,0,0,0,14618
2272,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855717186,https://github.com/rapidsai/cudf/issues/14627#issuecomment-1855717186,https://api.github.com/repos/rapidsai/cudf/issues/14627,1855717186,IC_kwDOBWUGps5um_9C,2023-12-14T11:58:42Z,2023-12-14T11:58:42Z,CONTRIBUTOR,"This is because scalar values get handled through:
```
from_arrow(pa.array(pd.Series([data]), from_pandas=True))
```

Whereas a list is handled by
```
from_arrow(pa.array([data]))
```

And pyarrow infers a different resolution for the timestamp compared to pandas.

This appears to be a bug in pyarrow, which does not pick up the correct nanosecond resolution of pandas timestamp objects, treating them like builtin datetime objects which have microsecond resolution.

How do we want to treat this case?

",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855717186/reactions,0,0,0,0,0,0,0,0,0,14627
2273,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855983741,https://github.com/rapidsai/cudf/issues/14627#issuecomment-1855983741,https://api.github.com/repos/rapidsai/cudf/issues/14627,1855983741,IC_kwDOBWUGps5uoBB9,2023-12-14T14:46:24Z,2023-12-14T14:46:24Z,CONTRIBUTOR,Can we supply an explicit data type to the `pa.array()` call in the latter case?,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855983741/reactions,0,0,0,0,0,0,0,0,0,14627
2274,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856174965,https://github.com/rapidsai/cudf/issues/14627#issuecomment-1856174965,https://api.github.com/repos/rapidsai/cudf/issues/14627,1856174965,IC_kwDOBWUGps5uovt1,2023-12-14T16:36:33Z,2023-12-14T16:36:33Z,CONTRIBUTOR,"That requires another round of introspection. I do not know the history of `as_column`. In the case that we don't hit an ""easily handled"" path (arrow/numpy/pandas/cudf/cupy), is there a reason we don't just always go via pandas.Series?",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856174965/reactions,0,0,0,0,0,0,0,0,0,14627
2275,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855996669,https://github.com/rapidsai/cudf/issues/14628#issuecomment-1855996669,https://api.github.com/repos/rapidsai/cudf/issues/14628,1855996669,IC_kwDOBWUGps5uoEL9,2023-12-14T14:53:31Z,2023-12-14T14:53:31Z,CONTRIBUTOR,"The `apply` functionality of the cudf Python package is implemented using Numba. You can read more about UDF (user-defined function) support here: https://docs.rapids.ai/api/cudf/stable/user_guide/guide-to-udfs/

Because this requires JIT compilation with Numba, we don't have a way to expose this in libcudf C++ code. There are two features that are pretty close, however.

[`cudf::transform`](https://docs.rapids.ai/api/libcudf/nightly/group__transformation__transform.html#gaf79991ded097d2cf7db62edf38181022) achieves a similar kind of thing as `DataFrame.apply`. I haven't used this feature so I can't speak very much to its limitations, but there are tests here that demonstrate using a device function passed as a string, or a precompiled PTX input: https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/tests/transform/integration/unary_transform_test.cpp

There is also [`cudf::compute_column`](https://docs.rapids.ai/api/libcudf/nightly/group__transformation__transform#gad01393294fc6de61ca4b323a873520a5) which takes an [AST expression](https://docs.rapids.ai/api/libcudf/nightly/group__expressions). The general idea is that you can take column references within a table (or literal inputs like ""3"") and create expressions, like `col_0 + col_1 * col_2 + 3`. Then you can execute that AST expression over a table to make a new column. You can see examples in the tests here: https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/tests/ast/transform_tests.cpp

If you can give us more information about the kinds of user-defined functions you want to execute, that would be very helpful for future library design.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1855996669/reactions,1,1,0,0,0,0,0,0,0,14628
2276,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856019814,https://github.com/rapidsai/cudf/issues/14628#issuecomment-1856019814,https://api.github.com/repos/rapidsai/cudf/issues/14628,1856019814,IC_kwDOBWUGps5uoJ1m,2023-12-14T15:06:09Z,2023-12-14T15:06:09Z,CONTRIBUTOR,"To add a bit more to @bdice's comment:

Can you explain your use case in a bit more detail? Would you like to use `cudf.DataFrame.apply` on a libcudf `table_view` because you aren't sure how to replicate the behaviour just using libcudf operations? Or do you have some other reason to want to do this? In almost all cases, the high-level cudf API calls (like `DataFrame.apply`) translate into a (sequence of) calls to libcudf primitives. If you're already in C++ you would, generally speaking, be better off calling those primitives directly. For example `cudf::transform`.

We have not put effort into making cudf interoperate bidirectionally with libcudf at the level of API calls: only the data structure level. So to date there is no way to turn a `table_view` into a `DataFrame` from C++. Indeed, the `DataFrame` contains a significant amount of extra metadata that you would need to construct (for example, libcudf doesn't have the concept of row and column indexes).

So it _might_ be possible to go bidirectionally between libcudf and cudf, _but_ there are many caveats because the translation from cudf to libcudf objects is a lossy one at the metadata level. We are currently making an effort to have a closer mapping between libcudf types/algorithms and cython-wrapped types/functions in the `pylibcudf` wrapping functions (you can see progress here https://github.com/rapidsai/cudf/issues/13921).",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1856019814/reactions,0,0,0,0,0,0,0,0,0,14628
2277,https://api.github.com/repos/rapidsai/cudf/issues/comments/1865000257,https://github.com/rapidsai/cudf/issues/14659#issuecomment-1865000257,https://api.github.com/repos/rapidsai/cudf/issues/14659,1865000257,IC_kwDOBWUGps5vKaVB,2023-12-20T19:10:32Z,2023-12-20T19:10:32Z,CONTRIBUTOR,"Hi @henryzhangpku - thanks for reporting!

This looks familiar and I _believe_ it was fixed recently: https://github.com/rapidsai/cudf/issues/14471
 
Are you able to test using a nightly version of cuDF? Here's the command to install nightly:

```
pip install -i https://pypi.anaconda.org/rapidsai-wheels-nightly/simple cudf-cu11  # or cu-12
```

If you're using `conda`, the install command is a bit different:

```
conda create --solver=libmamba -n rapids-24.02 -c rapidsai-nightly -c conda-forge -c nvidia  \
    cudf=24.02 python=3.10 cuda-version=11.8  # or 12.0
```
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1865000257/reactions,0,0,0,0,0,0,0,0,0,14659
2278,https://api.github.com/repos/rapidsai/cudf/issues/comments/1865003559,https://github.com/rapidsai/cudf/issues/14659#issuecomment-1865003559,https://api.github.com/repos/rapidsai/cudf/issues/14659,1865003559,IC_kwDOBWUGps5vKbIn,2023-12-20T19:13:26Z,2023-12-20T19:13:26Z,CONTRIBUTOR,"> I have a multi-thread pandas process to divide large dataset by date ranges then combine them,

Hmm, this sounds like it could benefit from a groupby operation. If you're able, could you share a snippet demonstrating what operations you're trying to do? We'd be happy to take a look to see how best you could take advantage of cuDF.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1865003559/reactions,0,0,0,0,0,0,0,0,0,14659
2279,https://api.github.com/repos/rapidsai/cudf/issues/comments/1870486692,https://github.com/rapidsai/cudf/issues/14661#issuecomment-1870486692,https://api.github.com/repos/rapidsai/cudf/issues/14661,1870486692,IC_kwDOBWUGps5vfVyk,2023-12-27T17:14:32Z,2023-12-27T17:14:32Z,CONTRIBUTOR,Can I take this,,ZelboK,122740063,U_kgDOB1DdXw,https://avatars.githubusercontent.com/u/122740063?v=4,,https://api.github.com/users/ZelboK,https://github.com/ZelboK,https://api.github.com/users/ZelboK/followers,https://api.github.com/users/ZelboK/following{/other_user},https://api.github.com/users/ZelboK/gists{/gist_id},https://api.github.com/users/ZelboK/starred{/owner}{/repo},https://api.github.com/users/ZelboK/subscriptions,https://api.github.com/users/ZelboK/orgs,https://api.github.com/users/ZelboK/repos,https://api.github.com/users/ZelboK/events{/privacy},https://api.github.com/users/ZelboK/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1870486692/reactions,1,1,0,0,0,0,0,0,0,14661
2280,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113332394,https://github.com/rapidsai/cudf/issues/14661#issuecomment-2113332394,https://api.github.com/repos/rapidsai/cudf/issues/14661,2113332394,IC_kwDOBWUGps599uSq,2024-05-15T19:43:40Z,2024-05-15T19:43:40Z,CONTRIBUTOR,Related to #15193 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113332394/reactions,0,0,0,0,0,0,0,0,0,14661
2281,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909360622,https://github.com/rapidsai/cudf/issues/14669#issuecomment-1909360622,https://api.github.com/repos/rapidsai/cudf/issues/14669,1909360622,IC_kwDOBWUGps5xzofu,2024-01-25T05:03:35Z,2024-01-25T05:03:35Z,CONTRIBUTOR,"Thank you @tx2002 for raising this issue. I believe the root cause is that `cudf` only supports GPU-accelerated JSON reading with `orient=""records""` when also `lines=True`. 

If you share a bit more about the contents of your string `json_data` I would be happy to help troubleshoot.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909360622/reactions,0,0,0,0,0,0,0,0,0,14669
2282,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909383209,https://github.com/rapidsai/cudf/issues/14669#issuecomment-1909383209,https://api.github.com/repos/rapidsai/cudf/issues/14669,1909383209,IC_kwDOBWUGps5xzuAp,2024-01-25T05:29:44Z,2024-01-25T05:29:44Z,NONE,"Thank you for your reply. Actually, I run the same code based on the same json_data. The only difference is the way to import cudf.
My `json_data` is like this:
```
[{

""id"":""1"",

""Col_01"":""test"",

""Col_02"":""77""

},

{

""id"":""2"",

""Col_01"":""test"",

""Col_02"":""13552652142""

},

{

""id"":""3"",

""Col_01"":""test"",

""Col_02"":""""

},

{

""id"":""4"",

""Col_01"":""test"",

""Col_02"":""""

},

{

""id"":""5"",

""Col_01"":""test"",

""Col_02"":""test""

}]
```",,tx2002,76741680,MDQ6VXNlcjc2NzQxNjgw,https://avatars.githubusercontent.com/u/76741680?v=4,,https://api.github.com/users/tx2002,https://github.com/tx2002,https://api.github.com/users/tx2002/followers,https://api.github.com/users/tx2002/following{/other_user},https://api.github.com/users/tx2002/gists{/gist_id},https://api.github.com/users/tx2002/starred{/owner}{/repo},https://api.github.com/users/tx2002/subscriptions,https://api.github.com/users/tx2002/orgs,https://api.github.com/users/tx2002/repos,https://api.github.com/users/tx2002/events{/privacy},https://api.github.com/users/tx2002/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1909383209/reactions,0,0,0,0,0,0,0,0,0,14669
2283,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930125762,https://github.com/rapidsai/cudf/issues/14669#issuecomment-1930125762,https://api.github.com/repos/rapidsai/cudf/issues/14669,1930125762,IC_kwDOBWUGps5zC2HC,2024-02-06T16:01:42Z,2024-02-06T16:01:42Z,CONTRIBUTOR,"This is readable with `orient=""records"",  lines=False`. Following code works.
```python
In [4]: df = cudf.read_json(StringIO(json_data), orient=""records"",  lines=False, engine=""cudf"")
In [5]: df
Out[5]: 
  id Col_01       Col_02
0  1   test           77
1  2   test  13552652142
2  3   test             
3  4   test             
4  5   test         test

In [6]: df.info()
<class 'cudf.core.dataframe.DataFrame'>
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   id      5 non-null      object
 1   Col_01  5 non-null      object
 2   Col_02  5 non-null      object
dtypes: object(3)
memory usage: 114.0+ bytes
```",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930125762/reactions,0,0,0,0,0,0,0,0,0,14669
2284,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930223616,https://github.com/rapidsai/cudf/issues/14669#issuecomment-1930223616,https://api.github.com/repos/rapidsai/cudf/issues/14669,1930223616,IC_kwDOBWUGps5zDOAA,2024-02-06T16:22:37Z,2024-02-06T16:22:37Z,CONTRIBUTOR,"_cudf.read_json_ uses `cudf` engine for JSON Lines only. it doesn’t use cudf engine automatically for other cases.
https://github.com/rapidsai/cudf/blob/20ed009003944be776e28c26301354be287726f9/python/cudf/cudf/io/json.py#L60-L61

Right now, libcudf Nested JSON reader will support `orient=""records""` and `orient=""values""` with `lines=False/True` (all 4 combinations should work).
Could we enable it automatically for other supported formats as well?",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930223616/reactions,0,0,0,0,0,0,0,0,0,14669
2285,https://api.github.com/repos/rapidsai/cudf/issues/comments/1933452772,https://github.com/rapidsai/cudf/issues/14670#issuecomment-1933452772,https://api.github.com/repos/rapidsai/cudf/issues/14670,1933452772,IC_kwDOBWUGps5zPiXk,2024-02-08T06:48:38Z,2024-02-08T06:48:38Z,CONTRIBUTOR,"Thank you for reporting the issue.
Which cudf version has this issue?

I tried locally, but I could not replicate the issue.
Just `orient = ""records""` with `lines=False` (default) will invoke pandas.read_json internally. It should show a warning
`UserWarning: Using CPU via Pandas to read JSON dataset, this may be GPU accelerated in the future`

With cudf GPU engine too, `df3 = cudf.read_json(data, orient = ""records"", engine=""cudf"")`, it works.",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1933452772/reactions,0,0,0,0,0,0,0,0,0,14670
2286,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871041745,https://github.com/rapidsai/cudf/issues/14674#issuecomment-1871041745,https://api.github.com/repos/rapidsai/cudf/issues/14674,1871041745,IC_kwDOBWUGps5vhdTR,2023-12-28T10:37:56Z,2023-12-28T10:37:56Z,CONTRIBUTOR,"Thanks for reporting @paulsbrookes!

The `isinstance` checks against `np.ndarray` failing is a significant, but known limitation currently. Ideally, more code would accept ""array-like"" objects rather than do hard instancechecks against `np.ndarray`. This can be done by e.g., checking for the `__array_interface__` attribute, or using `try-except` with a call to `np.asarray`. But, I know a lot of third-party code is not written this way. We hope to have a resolution for this soon.

The other `isinstance` check against `BaseOffset` seems a bug. I'll investigate and report back.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871041745/reactions,0,0,0,0,0,0,0,0,0,14674
2287,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871322086,https://github.com/rapidsai/cudf/issues/14674#issuecomment-1871322086,https://api.github.com/repos/rapidsai/cudf/issues/14674,1871322086,IC_kwDOBWUGps5vihvm,2023-12-28T16:28:49Z,2023-12-28T16:28:49Z,NONE,"Thanks @shwina!

One workaround I've found for dealing with situations where third-party libraries do not know how to deal with a cuDF pandas DataFrame is to recreate the dataframe as follows:

```
import cudf.pandas
import numpy as np
cudf.pandas.install()
import pandas as pd
from cudf.pandas.module_accelerator import disable_module_accelerator

df = pd.DataFrame([0, 1, 2])

with disable_module_accelerator():
    column_types = {col: dtype for col, dtype in df.dtypes.items()}
    df = pd.DataFrame(df, columns=df.columns, index=df.index)
    df = df.astype(column_types)

assert isinstance(df.to_numpy(), np.ndarray)
```

The code block above passes without an assertion error. If I understand correctly this creates a regular pandas dataframe from the cudf pandas dataframe which can then be used by third party libraries as normal.

@shwina do you know of any alternatives to this?",,paulsbrookes,15247443,MDQ6VXNlcjE1MjQ3NDQz,https://avatars.githubusercontent.com/u/15247443?v=4,,https://api.github.com/users/paulsbrookes,https://github.com/paulsbrookes,https://api.github.com/users/paulsbrookes/followers,https://api.github.com/users/paulsbrookes/following{/other_user},https://api.github.com/users/paulsbrookes/gists{/gist_id},https://api.github.com/users/paulsbrookes/starred{/owner}{/repo},https://api.github.com/users/paulsbrookes/subscriptions,https://api.github.com/users/paulsbrookes/orgs,https://api.github.com/users/paulsbrookes/repos,https://api.github.com/users/paulsbrookes/events{/privacy},https://api.github.com/users/paulsbrookes/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871322086/reactions,0,0,0,0,0,0,0,0,0,14674
2288,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871367944,https://github.com/rapidsai/cudf/issues/14674#issuecomment-1871367944,https://api.github.com/repos/rapidsai/cudf/issues/14674,1871367944,IC_kwDOBWUGps5vis8I,2023-12-28T17:33:51Z,2023-12-28T17:33:51Z,CONTRIBUTOR,">  If I understand correctly this creates a regular pandas dataframe from the cudf pandas dataframe which can then be used by third party libraries as normal.

Correct - it also means that third-party libraries won't be able to leverage the GPU in any way.

> @shwina do you know of any alternatives to this?

No - that's right. The `disable_module_accelerator` is how you can temporarily make it so that `pd` is in fact the ""real"" `pandas`. We don't document this just quite yet, and in an ideal world you wouldn't have to use it at all, but it's fine as a workaround for now.
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871367944/reactions,1,1,0,0,0,0,0,0,0,14674
2289,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871368873,https://github.com/rapidsai/cudf/issues/14674#issuecomment-1871368873,https://api.github.com/repos/rapidsai/cudf/issues/14674,1871368873,IC_kwDOBWUGps5vitKp,2023-12-28T17:35:17Z,2023-12-28T17:35:17Z,CONTRIBUTOR,"I opened https://github.com/rapidsai/cudf/pull/14678, which addresses the first issue you raised (instancechecks against `pd.tseries.offsets.BaseOffset`).",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871368873/reactions,1,1,0,0,0,0,0,0,0,14674
2290,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871896302,https://github.com/rapidsai/cudf/issues/14674#issuecomment-1871896302,https://api.github.com/repos/rapidsai/cudf/issues/14674,1871896302,IC_kwDOBWUGps5vkt7u,2023-12-29T10:01:57Z,2023-12-29T10:01:57Z,NONE,Thanks @shwina!,,paulsbrookes,15247443,MDQ6VXNlcjE1MjQ3NDQz,https://avatars.githubusercontent.com/u/15247443?v=4,,https://api.github.com/users/paulsbrookes,https://github.com/paulsbrookes,https://api.github.com/users/paulsbrookes/followers,https://api.github.com/users/paulsbrookes/following{/other_user},https://api.github.com/users/paulsbrookes/gists{/gist_id},https://api.github.com/users/paulsbrookes/starred{/owner}{/repo},https://api.github.com/users/paulsbrookes/subscriptions,https://api.github.com/users/paulsbrookes/orgs,https://api.github.com/users/paulsbrookes/repos,https://api.github.com/users/paulsbrookes/events{/privacy},https://api.github.com/users/paulsbrookes/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871896302/reactions,0,0,0,0,0,0,0,0,0,14674
2291,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871938232,https://github.com/rapidsai/cudf/issues/14684#issuecomment-1871938232,https://api.github.com/repos/rapidsai/cudf/issues/14684,1871938232,IC_kwDOBWUGps5vk4K4,2023-12-29T10:40:13Z,2023-12-29T10:40:13Z,NONE,This PR should fix the above issue.,,Vortexx2,68988130,MDQ6VXNlcjY4OTg4MTMw,https://avatars.githubusercontent.com/u/68988130?v=4,,https://api.github.com/users/Vortexx2,https://github.com/Vortexx2,https://api.github.com/users/Vortexx2/followers,https://api.github.com/users/Vortexx2/following{/other_user},https://api.github.com/users/Vortexx2/gists{/gist_id},https://api.github.com/users/Vortexx2/starred{/owner}{/repo},https://api.github.com/users/Vortexx2/subscriptions,https://api.github.com/users/Vortexx2/orgs,https://api.github.com/users/Vortexx2/repos,https://api.github.com/users/Vortexx2/events{/privacy},https://api.github.com/users/Vortexx2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1871938232/reactions,0,0,0,0,0,0,0,0,0,14684
2292,https://api.github.com/repos/rapidsai/cudf/issues/comments/1886155976,https://github.com/rapidsai/cudf/issues/14684#issuecomment-1886155976,https://api.github.com/repos/rapidsai/cudf/issues/14684,1886155976,IC_kwDOBWUGps5wbHTI,2024-01-11T03:17:37Z,2024-01-11T03:17:37Z,CONTRIBUTOR,Thanks for the report and the fix!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1886155976/reactions,0,0,0,0,0,0,0,0,0,14684
2293,https://api.github.com/repos/rapidsai/cudf/issues/comments/1886139547,https://github.com/rapidsai/cudf/issues/14736#issuecomment-1886139547,https://api.github.com/repos/rapidsai/cudf/issues/14736,1886139547,IC_kwDOBWUGps5wbDSb,2024-01-11T02:58:07Z,2024-01-11T02:58:07Z,CONTRIBUTOR,"Hmm I'm not seeing the pandas feature you're referring to. The last example on the page that you linked is this one:
```
>>> df7 = pd.DataFrame({'a': 1, 'b': 2}, index=[0])
>>> df7
    a   b
0   1   2
>>> new_row = pd.Series({'a': 3, 'b': 4})
>>> new_row
a    3
b    4
dtype: int64
>>> pd.concat([df7, new_row.to_frame().T], ignore_index=True)
    a   b
0   1   2
1   3   4
```

This functionality works for me in cudf too:
```
In [7]: df7 = cudf.DataFrame({'a': 1, 'b': 2}, index=[0])

In [8]: new_row = cudf.Series({'a': 3, 'b': 4})

In [9]: cudf.concat([df7, new_row.to_frame().T], ignore_index=True)
Out[9]: 
   a  b
0  1  2
1  3  4
```

Raw concatenation of a dict like you suggested fails in pandas:
```
In [10]: pd.concat({'a': 1.1, 'b': 2.2}, axis=1)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[10], line 1
----> 1 pd.concat({'a': 1.1, 'b': 2.2}, axis=1)
...
TypeError: cannot concatenate object of type '<class 'float'>'; only Series and DataFrame objs are valid
```

However, if I'm understanding correctly you get basically what you want by just calling the Series constructor:
```
In [14]: pd.Series({'a': 1.1, 'b': 2.2})
Out[14]: 
a    1.1
b    2.2
dtype: float64
```

Does that help, or am I misunderstanding what you'd like to see?",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1886139547/reactions,0,0,0,0,0,0,0,0,0,14736
2294,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977324352,https://github.com/rapidsai/cudf/issues/14736#issuecomment-1977324352,https://api.github.com/repos/rapidsai/cudf/issues/14736,1977324352,IC_kwDOBWUGps5125NA,2024-03-04T19:38:27Z,2024-03-04T19:38:27Z,CONTRIBUTOR,"Closing this as stale -- I came to the same conclusions as @vyasr above. @loewenm, feel free to reopen if you can clarify your question.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977324352/reactions,0,0,0,0,0,0,0,0,0,14736
2295,https://api.github.com/repos/rapidsai/cudf/issues/comments/2032618823,https://github.com/rapidsai/cudf/issues/14736#issuecomment-2032618823,https://api.github.com/repos/rapidsai/cudf/issues/14736,2032618823,IC_kwDOBWUGps55J01H,2024-04-02T17:19:06Z,2024-04-02T17:19:06Z,NONE,"@vyasr @bdice 

Re-opening this issue as I don't believe it is solved.

With pandas, you are able to concatenate a dictionary of pd.Series or pd.DataFrames and many other data structures.

However, if you attempt to do this with cudf using your method above, you must unpack the dictionary first for the method to work properly.

Example:

`concatenated_pd = pd.concat(dict)  <<< this works`

`concatenated_cudf = cudf.concat(dict)  <<< does not work`

What will work for cudf is the following:

`concatenated_cudf = cudf.concat( [ v for k,v in dict.items() ] ) <<< this works`

The difference between the pandas version and the cudf version is the requirement to unpack the values of the dictionary explicitly. It's a minor issue, but it is not consistent with Pandas and created a few hours of head-stratching.

BTW: I think cudf/RAPIDs is great.",,loewenm,19495222,MDQ6VXNlcjE5NDk1MjIy,https://avatars.githubusercontent.com/u/19495222?v=4,,https://api.github.com/users/loewenm,https://github.com/loewenm,https://api.github.com/users/loewenm/followers,https://api.github.com/users/loewenm/following{/other_user},https://api.github.com/users/loewenm/gists{/gist_id},https://api.github.com/users/loewenm/starred{/owner}{/repo},https://api.github.com/users/loewenm/subscriptions,https://api.github.com/users/loewenm/orgs,https://api.github.com/users/loewenm/repos,https://api.github.com/users/loewenm/events{/privacy},https://api.github.com/users/loewenm/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2032618823/reactions,0,0,0,0,0,0,0,0,0,14736
2296,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035726883,https://github.com/rapidsai/cudf/issues/14736#issuecomment-2035726883,https://api.github.com/repos/rapidsai/cudf/issues/14736,2035726883,IC_kwDOBWUGps55Vroj,2024-04-03T22:39:06Z,2024-04-03T22:39:06Z,CONTRIBUTOR,"Thanks for the additional feedback @loewenm. This is what I understand you're seeking:

```python
>>> import pandas as pd
>>> pd.concat({""a"": pd.Series([1, 2, 3]), ""b"": pd.Series([4, 5, 6])})
a  0    1
   1    2
   2    3
b  0    4
   1    5
   2    6
```

This seems like a valid feature request. I'll leave this issue open. If you'd like to contribute a PR, we are happy to assist you!",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035726883/reactions,0,0,0,0,0,0,0,0,0,14736
2297,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035731187,https://github.com/rapidsai/cudf/issues/14736#issuecomment-2035731187,https://api.github.com/repos/rapidsai/cudf/issues/14736,2035731187,IC_kwDOBWUGps55Vsrz,2024-04-03T22:43:25Z,2024-04-03T22:43:25Z,NONE,Thanks @bdice. I'll take a look and see what I can do!,,loewenm,19495222,MDQ6VXNlcjE5NDk1MjIy,https://avatars.githubusercontent.com/u/19495222?v=4,,https://api.github.com/users/loewenm,https://github.com/loewenm,https://api.github.com/users/loewenm/followers,https://api.github.com/users/loewenm/following{/other_user},https://api.github.com/users/loewenm/gists{/gist_id},https://api.github.com/users/loewenm/starred{/owner}{/repo},https://api.github.com/users/loewenm/subscriptions,https://api.github.com/users/loewenm/orgs,https://api.github.com/users/loewenm/repos,https://api.github.com/users/loewenm/events{/privacy},https://api.github.com/users/loewenm/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035731187/reactions,1,0,0,0,1,0,0,0,0,14736
2298,https://api.github.com/repos/rapidsai/cudf/issues/comments/2038040561,https://github.com/rapidsai/cudf/issues/14736#issuecomment-2038040561,https://api.github.com/repos/rapidsai/cudf/issues/14736,2038040561,IC_kwDOBWUGps55egfx,2024-04-04T19:21:29Z,2024-04-04T19:21:29Z,CONTRIBUTOR,Thanks for clarifying @loewenm !,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2038040561/reactions,0,0,0,0,0,0,0,0,0,14736
2299,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885635027,https://github.com/rapidsai/cudf/issues/14737#issuecomment-1885635027,https://api.github.com/repos/rapidsai/cudf/issues/14737,1885635027,IC_kwDOBWUGps5wZIHT,2024-01-10T20:04:15Z,2024-01-10T20:04:15Z,CONTRIBUTOR,"public symbols that use thrust types:

```

cudf::dictionary::detail::merge(cudf::dictionary_column_view const&, cudf::dictionary_column_view const&, rmm::device_uvector<thrust::pair<cudf::detail::side, int> > const&, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)

cudf::make_strings_column(cudf::device_span<thrust::pair<char const*, int> const, 18446744073709551615ul>, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)

cudf::io::avro::gpu::DecodeAvroColumnData(cudf::device_span<cudf::io::avro::block_desc_s const, 18446744073709551615ul>, cudf::io::avro::gpu::schemadesc_s*, cudf::device_span<thrust::pair<char const*, int> const, 18446744073709551615ul>, unsigned char const*, unsigned int, unsigned int, rmm::cuda_stream_view)

cudf::io::json::detail::parse_data(char const*, thrust::zip_iterator<thrust::tuple<int const*, int const*, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type> >, int, cudf::data_type, rmm::device_buffer&&, int, cudf::io::parse_options_view const&, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)

cudf::io::json::detail::legacy::get_data_types(cudf::io::json_reader_options const&, cudf::io::parse_options_view const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, concurrent_unordered_map<unsigned int, int, cudf::hashing::detail::MurmurHash3_x86_32<unsigned int>, equal_to<unsigned int>, default_allocator<thrust::pair<unsigned int, int> > >*, cudf::device_span<unsigned long const, 18446744073709551615ul>, cudf::device_span<char const, 18446744073709551615ul>, rmm::cuda_stream_view)

cudf::io::json::detail::legacy::collect_keys_info(cudf::io::parse_options_view const&, cudf::device_span<char const, 18446744073709551615ul>, cudf::device_span<unsigned long const, 18446744073709551615ul>, unsigned long long*, thrust::optional<cudf::mutable_table_device_view>, rmm::cuda_stream_view)

cudf::io::json::detail::legacy::detect_data_types(cudf::io::parse_options_view const&, cudf::device_span<char const, 18446744073709551615ul>, cudf::device_span<unsigned long const, 18446744073709551615ul>, bool, int, concurrent_unordered_map<unsigned int, int, cudf::hashing::detail::MurmurHash3_x86_32<unsigned int>, equal_to<unsigned int>, default_allocator<thrust::pair<unsigned int, int> > >*, rmm::cuda_stream_view)

cudf::io::json::detail::legacy::convert_data_to_table(cudf::io::parse_options_view const&, std::vector<cudf::data_type, std::allocator<cudf::data_type> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&&, concurrent_unordered_map<unsigned int, int, cudf::hashing::detail::MurmurHash3_x86_32<unsigned int>, equal_to<unsigned int>, default_allocator<thrust::pair<unsigned int, int> > >*, cudf::device_span<unsigned long const, 18446744073709551615ul>, cudf::device_span<char const, 18446744073709551615ul>, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)

cudf::io::json::detail::legacy::convert_json_to_columns(cudf::io::parse_options_view const&, cudf::device_span<char const, 18446744073709551615ul>, cudf::device_span<unsigned long const, 18446744073709551615ul>, cudf::device_span<cudf::data_type const, 18446744073709551615ul>, concurrent_unordered_map<unsigned int, int, cudf::hashing::detail::MurmurHash3_x86_32<unsigned int>, equal_to<unsigned int>, default_allocator<thrust::pair<unsigned int, int> > >*, cudf::device_span<void* const, 18446744073709551615ul>, cudf::device_span<unsigned int* const, 18446744073709551615ul>, cudf::device_span<int, 18446744073709551615ul>, rmm::cuda_stream_view)

cudf::io::detail::infer_data_type(cudf::io::json_inference_options_view const&, cudf::device_span<char const, 18446744073709551615ul>, thrust::zip_iterator<thrust::tuple<int const*, int const*, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type, thrust::null_type> >, unsigned long, rmm::cuda_stream_view)

cudf::io::detail::avro::decode_data(cudf::io::detail::avro::metadata&, rmm::device_buffer const&, std::vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int> > > const&, cudf::device_span<thrust::pair<char const*, int> const, 18446744073709551615ul>, unsigned long, std::vector<std::pair<int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, std::vector<cudf::data_type, std::allocator<cudf::data_type> > const&, rmm::cuda_stream_view, rmm::mr::device_memory_resource*)
```

",,robertmaynard,215756,MDQ6VXNlcjIxNTc1Ng==,https://avatars.githubusercontent.com/u/215756?v=4,,https://api.github.com/users/robertmaynard,https://github.com/robertmaynard,https://api.github.com/users/robertmaynard/followers,https://api.github.com/users/robertmaynard/following{/other_user},https://api.github.com/users/robertmaynard/gists{/gist_id},https://api.github.com/users/robertmaynard/starred{/owner}{/repo},https://api.github.com/users/robertmaynard/subscriptions,https://api.github.com/users/robertmaynard/orgs,https://api.github.com/users/robertmaynard/repos,https://api.github.com/users/robertmaynard/events{/privacy},https://api.github.com/users/robertmaynard/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885635027/reactions,2,0,0,0,0,0,2,0,0,14737
2300,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885657787,https://github.com/rapidsai/cudf/issues/14737#issuecomment-1885657787,https://api.github.com/repos/rapidsai/cudf/issues/14737,1885657787,IC_kwDOBWUGps5wZNq7,2024-01-10T20:21:17Z,2024-01-10T20:21:17Z,CONTRIBUTOR,That is an incomplete list of symbols since the restriction of no ABI support between C++ and CUDA also means we can't pass internally Thrust types between C++ and CUDA sources. This means that components within our `detail::` namespace also have to not have thrust types if we expect internal uses of that function across C++ and CUDA sources ( which we should ),,robertmaynard,215756,MDQ6VXNlcjIxNTc1Ng==,https://avatars.githubusercontent.com/u/215756?v=4,,https://api.github.com/users/robertmaynard,https://github.com/robertmaynard,https://api.github.com/users/robertmaynard/followers,https://api.github.com/users/robertmaynard/following{/other_user},https://api.github.com/users/robertmaynard/gists{/gist_id},https://api.github.com/users/robertmaynard/starred{/owner}{/repo},https://api.github.com/users/robertmaynard/subscriptions,https://api.github.com/users/robertmaynard/orgs,https://api.github.com/users/robertmaynard/repos,https://api.github.com/users/robertmaynard/events{/privacy},https://api.github.com/users/robertmaynard/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1885657787/reactions,0,0,0,0,0,0,0,0,0,14737
2301,https://api.github.com/repos/rapidsai/cudf/issues/comments/1897622733,https://github.com/rapidsai/cudf/issues/14777#issuecomment-1897622733,https://api.github.com/repos/rapidsai/cudf/issues/14777,1897622733,IC_kwDOBWUGps5xG2zN,2024-01-18T01:39:33Z,2024-01-18T01:39:33Z,CONTRIBUTOR,Looking into this 👍 ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1897622733/reactions,0,0,0,0,0,0,0,0,0,14777
2302,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901110696,https://github.com/rapidsai/cudf/issues/14793#issuecomment-1901110696,https://api.github.com/repos/rapidsai/cudf/issues/14793,1901110696,IC_kwDOBWUGps5xUKWo,2024-01-19T21:02:22Z,2024-01-19T21:02:22Z,NONE,"I found if I convert the date column that is in date.datetime datatype to pandas datetime format, it works:
Here's the original dataframe:
```
            date        NVDA
0     1999-01-22    0.376356
1     1999-01-25    0.415730
2     1999-01-26    0.383428
3     1999-01-27    0.382281
4     1999-01-28    0.381134
...          ...         ...
6277  2024-01-03  475.690000
6278  2024-01-04  479.980000
6279  2024-01-05  490.970000
6280  2024-01-08  522.530000
6281  2024-01-09  531.400000
```

I ran the following to convert the date column to pandas datetime datatype:
```
df['date'] = pd.to_datetime(df['date'])
```

Ran datatype check again and got the following:
```
{
    'NVDA': set([<class 'float'>]),
    'date': set([<class 'pandas._libs.tslibs.timestamps.Timestamp'>]),
}

date    datetime64[ns]
NVDA           float64
dtype: object
```
And now when I run `cudf.from_pandas(df)`, I no longer get the error:

```
print(cudf.from_pandas(df))
           date        NVDA
0    1999-01-22    0.376356
1    1999-01-25    0.415730
2    1999-01-26    0.383428
3    1999-01-27    0.382281
4    1999-01-28    0.381134
...         ...         ...
6277 2024-01-03  475.690000
6278 2024-01-04  479.980000
6279 2024-01-05  490.970000
6280 2024-01-08  522.530000
6281 2024-01-09  531.400000

[6282 rows x 2 columns]
```


",,notwopr,21273266,MDQ6VXNlcjIxMjczMjY2,https://avatars.githubusercontent.com/u/21273266?v=4,,https://api.github.com/users/notwopr,https://github.com/notwopr,https://api.github.com/users/notwopr/followers,https://api.github.com/users/notwopr/following{/other_user},https://api.github.com/users/notwopr/gists{/gist_id},https://api.github.com/users/notwopr/starred{/owner}{/repo},https://api.github.com/users/notwopr/subscriptions,https://api.github.com/users/notwopr/orgs,https://api.github.com/users/notwopr/repos,https://api.github.com/users/notwopr/events{/privacy},https://api.github.com/users/notwopr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901110696/reactions,0,0,0,0,0,0,0,0,0,14793
2303,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901112547,https://github.com/rapidsai/cudf/issues/14793#issuecomment-1901112547,https://api.github.com/repos/rapidsai/cudf/issues/14793,1901112547,IC_kwDOBWUGps5xUKzj,2024-01-19T21:04:10Z,2024-01-19T21:04:10Z,NONE,"It seems even if a column is all just one datatype of date.datetime, it will throw the mixedtype error.  converting it to pandas datetime datetype cures it.   It'd be nice if cudf could accept date.datetime columns as is without the conversion.",,notwopr,21273266,MDQ6VXNlcjIxMjczMjY2,https://avatars.githubusercontent.com/u/21273266?v=4,,https://api.github.com/users/notwopr,https://github.com/notwopr,https://api.github.com/users/notwopr/followers,https://api.github.com/users/notwopr/following{/other_user},https://api.github.com/users/notwopr/gists{/gist_id},https://api.github.com/users/notwopr/starred{/owner}{/repo},https://api.github.com/users/notwopr/subscriptions,https://api.github.com/users/notwopr/orgs,https://api.github.com/users/notwopr/repos,https://api.github.com/users/notwopr/events{/privacy},https://api.github.com/users/notwopr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1901112547/reactions,0,0,0,0,0,0,0,0,0,14793
2304,https://api.github.com/repos/rapidsai/cudf/issues/comments/1903925121,https://github.com/rapidsai/cudf/issues/14793#issuecomment-1903925121,https://api.github.com/repos/rapidsai/cudf/issues/14793,1903925121,IC_kwDOBWUGps5xe5eB,2024-01-22T12:41:48Z,2024-01-22T12:41:48Z,CONTRIBUTOR,"Thanks for reporting and for the thorough analysis! This issue stems from the fact that pandas uses the `object` datatype for storing `datetime.date` values:

```python
In [1]: import pandas as pd

In [2]: import datetime

In [3]: s = pd.Series([datetime.date.fromisoformat(""2001-01-01""), datetime.date.fromisoformat(""2001-01-02"")])

In [4]: s
Out[4]:
0    2001-01-01
1    2001-01-02
```

Now, a pandas `Series` of `object` data type represents a collections of arbitrary python objects (possibly of differing types). When `cudf` sees such a `Series`, it tries to interpret the values either as strings, lists or dictionaries (data types that we support). If none of those work, we throw this error.

I think it would be less confusing if we threw a `ValueError` here rather than a `MixedTypeError`, with a more general error message like `""couldn't not convert values in column to a supported data type""`.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1903925121/reactions,0,0,0,0,0,0,0,0,0,14793
2305,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910349935,https://github.com/rapidsai/cudf/issues/14863#issuecomment-1910349935,https://api.github.com/repos/rapidsai/cudf/issues/14863,1910349935,IC_kwDOBWUGps5x3aBv,2024-01-25T14:43:04Z,2024-01-25T14:46:06Z,CONTRIBUTOR,"@mroeschke in investigating this, I noticed an inconsistency in pandas behaviour. Could you verify if my expectations are correct?

Let's start with this input:

```python
In [16]: df
Out[16]:
2001-01-01    1
2009-01-01    2
2004-01-01    3
dtype: int64
```

The following should work, and it does ✅ 


```python
In [17]: df.loc[pd.to_datetime(""2001""):pd.to_datetime(""2009"")]
Out[17]:
2001-01-01    1
2009-01-01    2
dtype: int64
```

The following should work, and it does ✅ 

```python
In [19]: df.loc[""2001"":]
Out[19]:
2001-01-01    1
2009-01-01    2
2004-01-01    3
dtype: int64
```

The following should raise with the new error in pandas 2, and it does ✅ 

```python
In [20]: df.loc[""2001"":""2006""]
KeyError: 'Value based partial slicing on non-monotonic DatetimeIndexes with non-existing keys is not allowed.'
```

The following should work, but it doesn't ❌ 

```python
In [20]: df.loc[""2001"":""2009""]
KeyError: 'Value based partial slicing on non-monotonic DatetimeIndexes with non-existing keys is not allowed.'
```
",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910349935/reactions,0,0,0,0,0,0,0,0,0,14863
2306,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910705720,https://github.com/rapidsai/cudf/issues/14863#issuecomment-1910705720,https://api.github.com/repos/rapidsai/cudf/issues/14863,1910705720,IC_kwDOBWUGps5x4w44,2024-01-25T17:50:32Z,2024-01-25T17:50:32Z,CONTRIBUTOR,"The last example is correct I believe albeit a bit confusing. 

When partial string indexing a `DatetimeIndex`, the `stop` slice is translated to a `Timestamp` at the end of the range that includes that date component so for the example `.loc[""2001"":""2009""]`:

`""2001""` -> `pd.Timestamp(""2001-01-01 00:00:00.0000"")`
`""2009""` -> `pd.Timestamp(""2009-12-31 11:59:59.9999"")`

That behavior is described in https://pandas.pydata.org/docs/user_guide/timeseries.html#partial-string-indexing",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910705720/reactions,0,0,0,0,0,0,0,0,0,14863
2307,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910843843,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1910843843,https://api.github.com/repos/rapidsai/cudf/issues/14882,1910843843,IC_kwDOBWUGps5x5SnD,2024-01-25T19:26:44Z,2024-01-25T19:26:44Z,CONTRIBUTOR,+1 pandas recently transitioned black (but not isort) to `ruff format` and didn't have issues.,,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910843843/reactions,0,0,0,0,0,0,0,0,0,14882
2308,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910887340,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1910887340,https://api.github.com/repos/rapidsai/cudf/issues/14882,1910887340,IC_kwDOBWUGps5x5dOs,2024-01-25T19:49:24Z,2024-01-25T19:49:24Z,CONTRIBUTOR,"@bdice and I were just talking about wanting to do this.

The main concern on the isort front is that [ruff does not support Cython yet](https://github.com/astral-sh/ruff/issues/1079), whereas isort does. We'd have to be willing to give that up, or alternatively migrate to ruff over isort only for Cython files (which seems a bit convoluted).

ruff has supported sectioning for quite a while in its isort functionality. I'm fairly certain it was available even at the time that I first enabled ruff. We just need to remember that we also use different sectioning for the different subprojects, so we would need to do something like this:

```
# pyproject.toml
[tool.ruff]
# standard ruff configuration

# python/cudf/pyproject.toml
[tool.ruff]
extend = ""../../pyproject.toml""
sections = ...
```

I think that should work but have not tested it",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1910887340/reactions,0,0,0,0,0,0,0,0,0,14882
2309,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911210032,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1911210032,https://api.github.com/repos/rapidsai/cudf/issues/14882,1911210032,IC_kwDOBWUGps5x6sAw,2024-01-26T00:20:06Z,2024-01-26T00:20:26Z,CONTRIBUTOR,"We should definitely remove pydocstyle in favor of ruff. Its [README](https://github.com/PyCQA/pydocstyle) says that the project is formally deprecated, and proposes ruff (with rules for `""D""`) as an alternative. pydocstyle is one of the longer-running checks today.

> Ruff offers full parity with pydocstyle along with advanced features, better support for the latest Python versions, and ongoing development to ensure a top-notch linting experience. We highly recommend pydocstyle users to switch over to ruff for a seamless transition.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911210032/reactions,0,0,0,0,0,0,0,0,0,14882
2310,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911704050,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1911704050,https://api.github.com/repos/rapidsai/cudf/issues/14882,1911704050,IC_kwDOBWUGps5x8kny,2024-01-26T09:03:42Z,2024-01-26T09:03:42Z,CONTRIBUTOR,"> The main concern on the isort front is that [ruff does not support Cython yet](https://github.com/astral-sh/ruff/issues/1079), whereas isort does. We'd have to be willing to give that up, or alternatively migrate to ruff over isort only for Cython files (which seems a bit convoluted).

TBH, and this is perhaps a minority view, at the moment the cython file formatting is not as uniform any (there's no auto-formatting). So I am perhaps less concerned about dropping isort just for those.

> I think that should work but have not tested it

it does (I tried)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1911704050/reactions,0,0,0,0,0,0,0,0,0,14882
2311,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925554330,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1925554330,https://api.github.com/repos/rapidsai/cudf/issues/14882,1925554330,IC_kwDOBWUGps5yxaCa,2024-02-04T02:21:14Z,2024-02-04T02:21:14Z,CONTRIBUTOR,"Correct, there isn't much available for Cython formatting last I had looked. I do like that we at _least_ have isort for Cython, though. I would just keep that hook in place and transition everything else (besides isort) to ruff.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925554330/reactions,0,0,0,0,0,0,0,0,0,14882
2312,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925920780,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1925920780,https://api.github.com/repos/rapidsai/cudf/issues/14882,1925920780,IC_kwDOBWUGps5yyzgM,2024-02-04T21:22:54Z,2024-02-04T21:22:54Z,CONTRIBUTOR,"Personally I don't think isort does a good enough job on Cython files to be worth keeping around. Consider [copying.pyx](https://github.com/rapidsai/cudf/blob/branch-24.04/python/cudf/cudf/_lib/copying.pyx). There are 6 different groupings of cudf, with a libcpp cimport in the middle. AFAICT any cimport confuses isort and makes it restart grouping. If you manually edit this file and group all the imports together and group all the cimports separately (and move the extraneous libcpp cimport up to the top) then isort will properly sort within the groups, but you have to know to do that. Is the partial sort we get better than nothing? I'm sure that's debatable, but IMHO it gives a false sense of security that our imports are sorted better than they really are. I'd rather just use ruff for everything and wait until ruff adds Cython support or cython-lint starts sorting imports.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925920780/reactions,0,0,0,0,0,0,0,0,0,14882
2313,https://api.github.com/repos/rapidsai/cudf/issues/comments/1926201818,https://github.com/rapidsai/cudf/issues/14882#issuecomment-1926201818,https://api.github.com/repos/rapidsai/cudf/issues/14882,1926201818,IC_kwDOBWUGps5yz4Ha,2024-02-05T04:15:54Z,2024-02-05T04:15:54Z,CONTRIBUTOR,"Interesting, I didn’t realize it was like that. I have not assessed this in a while. I trust your judgement on that, and am fine with removing isort.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1926201818/reactions,0,0,0,0,0,0,0,0,0,14882
2314,https://api.github.com/repos/rapidsai/cudf/issues/comments/1915709965,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1915709965,https://api.github.com/repos/rapidsai/cudf/issues/14926,1915709965,IC_kwDOBWUGps5yL2oN,2024-01-29T22:48:25Z,2024-01-29T22:48:25Z,CONTRIBUTOR,"I don't think this requires new APIs to libcudf.

The `cudf::column` and `cudf::table` are [data-owning structs](https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/doxygen/developer_guide/DEVELOPER_GUIDE.md#cudfcolumn) in libcudf.
For zero-copy you should be able wrap the arrow data in device memory with a `cudf::column_view` (and `cudf::table_view`) which are [non-owning data structures](https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/doxygen/developer_guide/DEVELOPER_GUIDE.md#cudfcolumn_view).

All of the libcudf APIs accept `cudf::column_view` objects and so do not require an owning object so there should be no need to copy the arrow data in order to call a libcudf function.

Generally, libcudf APIs will return new `cudf::column` object since they are modifying or creating new column/table data. You can take ownership of this data (which should be in arrow format in device memory) using the `cudf::column::release()` method and then place the data in an appropriate arrow structure.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1915709965/reactions,0,0,0,0,0,0,0,0,0,14926
2315,https://api.github.com/repos/rapidsai/cudf/issues/comments/1915791701,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1915791701,https://api.github.com/repos/rapidsai/cudf/issues/14926,1915791701,IC_kwDOBWUGps5yMKlV,2024-01-30T00:00:35Z,2024-01-30T00:00:35Z,CONTRIBUTOR,"> For zero-copy you should be able wrap the arrow data in device memory with a cudf::column_view (and cudf::table_view) which are [non-owning data structures](https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/doxygen/developer_guide/DEVELOPER_GUIDE.md#cudfcolumn_view).

The issue is that it's not clear-cut how to perform that wrapping since `libcudf`'s memory representation still differs from Arrow in some cases, in addition to differences in how the buffers are handled (such as with string columns using children for their offsets/data and Arrow string the offsets and data buffers as plain buffers, not children). There's a significant amount of code required to correctly wrap `cudf::column_view`s around Arrow data in device memory (note the significant amount of code in https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/src/interop/from_arrow.cu and https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/src/interop/to_arrow.cu), which makes it worthwhile to have functions in libcudf itself to encapsulate this logic. Rather than have consumers replicate the logic in their own libraries.

> You can take ownership of this data (which should be in arrow format in device memory) using the cudf::column::release() method and then place the data in an appropriate arrow structure.

Sure, but like I mentioned above it's not necessarily as simple as placing it in the appropriate arrow structure. It requires a significant amount of code to do it correctly and properly, and it makes sense for that to exist within libcudf. Particularly because it can then remain updated as libcudf adds support for more Arrow data types.",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1915791701/reactions,0,0,0,0,0,0,0,0,0,14926
2316,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917196968,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917196968,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917196968,IC_kwDOBWUGps5yRhqo,2024-01-30T15:25:31Z,2024-01-30T15:25:31Z,CONTRIBUTOR,Ok. That makes sense. This appears to be just a wrapper around the `cudf::column_view` [constructor](https://github.com/rapidsai/cudf/blob/57bbe94e995b9a0365276e4cb26853dce219e22a/cpp/include/cudf/column/column_view.hpp#L371-L377). But resolving the data-type and the other components needed for the parameters would involve significant code. And the reverse as well.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917196968/reactions,0,0,0,0,0,0,0,0,0,14926
2317,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917221229,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917221229,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917221229,IC_kwDOBWUGps5yRnlt,2024-01-30T15:30:12Z,2024-01-30T15:30:12Z,CONTRIBUTOR,"Before I go further working on it, could you take a look at my partial implementation in https://github.com/zeroshade/cudf-flight-ucx/blob/main/to_arrow.cc and let me know if you think that's a good direction to go in as opposed to a different approach? 

If it's a good approach then i'll work on creating a PR for this",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917221229/reactions,0,0,0,0,0,0,0,0,0,14926
2318,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917339935,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917339935,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917339935,IC_kwDOBWUGps5ySEkf,2024-01-30T15:58:39Z,2024-01-30T16:00:45Z,CONTRIBUTOR,"Who owns the data after this call?

I expected that this signature
```
arrow::Status to_arrow_device_arr(std::shared_ptr<cudf::table> input,
                                  struct ArrowDeviceArray* out,
                                  rmm::cuda_stream_view stream)
```
would be more like
```
std::unique_ptr<struct struct ArrowDeviceArray> to_arrow_device_array(cudf::table_view const& input,
                                                                      rmm::cuda_stream_view stream)
```
And throw an exception with an error message instead of returning a status.

Also, I don't understand what the `cudaEventRecord` objects are for and why they should be created here.
It seems a fragile piece of logic subject to fleeting changes in your arrow struct implementation.
I wonder if Arrow could have an API to build an `ArrowDeviceArray` from simple native elements like pointers and integers similar to the parameters for `cudf::column_view` and `cudf::table_view` constructors.


",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917339935/reactions,0,0,0,0,0,0,0,0,0,14926
2319,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917490522,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917490522,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917490522,IC_kwDOBWUGps5ySpVa,2024-01-30T16:59:41Z,2024-01-30T16:59:41Z,CONTRIBUTOR,"> Who owns the data after this call?

Technically the data has shared ownership. The `ArrowDeviceArray` maintains a reference to the passed in `std::shared_ptr<cudf::table>` to keep it alive until the release callback in the struct is called. Because the `ArrowDeviceArray` is intended to be a C ABI, it uses a release callback to control the lifetime of the underlying data.

The problem with this

```
std::unique_ptr<struct ArrowDeviceArray> to_arrow_device_array(cudf::table_view const& input,
                                                                      rmm::cuda_stream_view stream)
```

Is that because you're only passing in a `cudf::table_view` which doesn't own its data, there's no way to guarantee that the data stays alive until the release callback on the `ArrowDeviceArray` is called. We need to ensure that the underlying data stays valid and alive until the release callback is used. 

If we don't like the idea of the shared ownership, then the interface could take a `cudf::table` and give the ownership to the `ArrowDeviceArray` entirely rather than sharing ownership.

> Also, I don't understand what the cudaEventRecord objects are for and why they should be created here.
It seems a fragile piece of logic subject to fleeting changes in your arrow struct implementation.

We don't manually synchronize on the stream during the creation of the `ArrowDeviceArray`, instead we create an event and record it on the stream provided. The event is then part of the `ArrowDeviceArray` struct, so that a consumer can have their own stream wait on that event to synchronize before attempting to access the data. This lets the consumer of the struct choose when they synchronize, and on whatever stream they want to synchronize on. This allows the struct to be passed across C boundaries to different libraries and/or runtimes (such as python or Go or Rust etc.) and allow the consumer to synchronize the GPU however they want. @kkraus14 might be better able to explain the reasoning for the event in the struct than I.

That said, the `ArrowDeviceArray` struct is intended to be ABI stable and will not change. You can find the full definition, documentation and reasoning behind the structure of the `ArrowDeviceArray` here: https://arrow.apache.org/docs/format/CDeviceDataInterface.html

> I wonder if Arrow could have an API to build an ArrowDeviceArray from simple native elements like pointers and integers similar to the parameters for cudf::column_view and cudf::table_view constructors.

That's exactly what the `ArrowDeviceArray` struct is. It's the collection of ""simple native elements like pointers and integers"" that describe the array and its children. Arrow provides APIs which take the struct and construct Arrow Arrays or RecordBatches from the struct (https://github.com/apache/arrow/blob/main/cpp/src/arrow/c/bridge.h#L232)

In this scenario: `arrow::Array` and `arrow::RecordBatch` are equivalent to `cudf::column` and `cudf::table`. `ArrowDeviceArray` is a struct used to encapsulate all of the pointers/length/null counts/etc. to zero-copy send the data across a C ABI boundary.",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917490522/reactions,0,0,0,0,0,0,0,0,0,14926
2320,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917611359,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917611359,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917611359,IC_kwDOBWUGps5yTG1f,2024-01-30T18:07:09Z,2024-01-30T18:07:09Z,COLLABORATOR,"Hey @davidwendt 😃

The CUDA event in the struct that @zeroshade mentioned is the responsibility of the producer of the struct. It should have all relevant work related to allocating and populating the memory that is being handed / shared to the struct captured so that a downstream user of the struct can wait on the event to guarantee that whatever stream they're working on doesn't cause a race condition with the relevant allocations / kernels that produced the memory.

The reason behind using a CUDA event as opposed to a CUDA stream is that often frameworks don't have a mechanism to share or extend the lifetime of their streams outside of their framework.

As far as the lifetime management of the actual memory, the struct's release callback is designed to be flexible to allow accommodating both owning and non-owning situations. I.E. if someone had a `cudf::column_view`, we could basically just have an empty release callback to have it function as a view as opposed to having any form of ownership. In the case of cudf having unique ownership in something like a `std::unique_ptr<cudf::column>`, then it would likely make sense to transfer ownership to the struct.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917611359/reactions,1,1,0,0,0,0,0,0,0,14926
2321,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917653999,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917653999,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917653999,IC_kwDOBWUGps5yTRPv,2024-01-30T18:32:12Z,2024-01-30T18:32:12Z,CONTRIBUTOR,"Hey Keith. Thanks but it seems this kind of Arrow-specific logic for an Arrow-specific struct does not belong in libcudf. It seems a bit fragile in that changing how Arrow manages objects would require changes in a non-Arrow repo (like cudf). For example, if in the future Arrow decided the `cudaEventCreate` was not sufficient and now relied on `cudaEventCreateWithFlags` instead, a new cudf PR would be required to make this compliant again.

I was picturing more of a `arrow::ArrowArray::Make()` factory function that would handle these kinds of details. 
Something like this perhaps (likely needs tweaking):
```
std::unique_ptr<ArrowArray> Make( int length, int null_count, int offset, void* buffer, std::vector<ArrowArray> children);
```
(And similar one for `ArrowDeviceArray`)
And this function would handle all the Arrow-specific things including the release mechanism and whatever CUDA objects it needs. It also allows the Arrow code complete control on how it is created and destroyed.

Then the libcudf function could simply call this with the appropriate counts and device pointers.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917653999/reactions,0,0,0,0,0,0,0,0,0,14926
2322,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917661090,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917661090,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917661090,IC_kwDOBWUGps5yTS-i,2024-01-30T18:36:32Z,2024-01-30T18:36:32Z,CONTRIBUTOR,"> Is that because you're only passing in a `cudf::table_view` which doesn't own its data, there's no way to guarantee that the data stays alive until the release callback on the `ArrowDeviceArray` is called. We need to ensure that the underlying data stays valid and alive until the release callback is used.

Generally, libcudf is based on accepting views that are non-owning as per our developer guidelines.
https://github.com/rapidsai/cudf/blob/branch-24.04/cpp/doxygen/developer_guide/DEVELOPER_GUIDE.md#views-and-ownership
The caller must ensure proper ownership scope and lifetime.  This also provides a great deal of flexibility since there is no guarantee the original data is owned by a `cudf::table` in the first place.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917661090/reactions,0,0,0,0,0,0,0,0,0,14926
2323,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917739048,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917739048,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917739048,IC_kwDOBWUGps5yTmAo,2024-01-30T19:27:23Z,2024-01-30T19:27:23Z,COLLABORATOR,"> Thanks but it seems this kind of Arrow-specific logic for an Arrow-specific struct does not belong in libcudf. It seems a bit fragile in that changing how Arrow manages objects would require changes in a non-Arrow repo (like cudf).

This is Arrow format specific, but not Arrow library specific. Libcudf already has `to_arrow` and `from_arrow` functions to go from device memory in libcudf containers to host memory in arrow containers, so it's already been exposed to fragility in Arrow for years, but the memory layout and ABI has been stable for years.

What is proposed here doesn't use Arrow containers and is designed to be a vendorable single header with a stable ABI so there really isn't additional exposure to Arrow that isn't already there.

> I was picturing more of a `arrow::ArrowArray::Make()` factory function that would handle these kinds of details. Something like this perhaps (likely needs tweaking):
> 
> ```
> std::unique_ptr<ArrowArray> Make( int length, int null_count, int offset, void* buffer, std::vector<ArrowArray> children);
> ```
> 
> (And similar one for `ArrowDeviceArray`) And this function would handle all the Arrow-specific things including the release mechanism and whatever CUDA objects it needs. It also allows the Arrow code complete control on how it is created and destroyed.
> 
> Then the libcudf function could simply call this with the appropriate counts and device pointers.

In theory something like this could be added as a free function in the vendorable header, but you'd need to handle all the nesting structure that columns can have where you'd ultimately end up likely recreating a healthy chunk of what this struct describes in itself. No matter what there's some translation that needs to happen from how libcudf organizes its device pointers into some type of interface, and that's basically what this struct is.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917739048/reactions,0,0,0,0,0,0,0,0,0,14926
2324,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917763029,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917763029,https://api.github.com/repos/rapidsai/cudf/issues/14926,1917763029,IC_kwDOBWUGps5yTr3V,2024-01-30T19:41:03Z,2024-01-30T19:41:03Z,COLLABORATOR,"Also, supporting this interface could be used to replace the existing `to_arrow` and `from_arrow` functions and remove the need to actually depend on the arrow library for supporting this functionality in the future. You could return host memory via this interface and there would be functions in the arrow library that could be called against the returned struct to get arrow containers similar to what the current `to_arrow` / `from_arrow` functions do.",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1917763029/reactions,0,0,0,0,0,0,0,0,0,14926
2325,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919154103,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1919154103,https://api.github.com/repos/rapidsai/cudf/issues/14926,1919154103,IC_kwDOBWUGps5yY_e3,2024-01-31T13:57:58Z,2024-01-31T13:58:37Z,CONTRIBUTOR,"> In theory something like this could be added as a free function in the vendorable header, but you'd need to handle all the nesting structure that columns can have where you'd ultimately end up likely recreating a healthy chunk of what this struct describes in itself. No matter what there's some translation that needs to happen from how libcudf organizes its device pointers into some type of interface, and that's basically what this struct is.

No, I would not expect Arrow to unwind libcudf data structures. My suggestion leaves most of the proposed logic intact (type-dispatch, etc) but just replaces the pieces that create the [ArrowArray](https://github.com/zeroshade/cudf-flight-ucx/blob/07e8c30bb3c49e0011c991e124cc9dc750ffd0f8/to_arrow.cc#L512-L529) and [ArrowDeviceArray](https://github.com/zeroshade/cudf-flight-ucx/blob/07e8c30bb3c49e0011c991e124cc9dc750ffd0f8/to_arrow.cc#L560-L600) with factory functions implemented in the Arrow source.

I will work on a counter-proposal.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919154103/reactions,0,0,0,0,0,0,0,0,0,14926
2326,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919155400,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1919155400,https://api.github.com/repos/rapidsai/cudf/issues/14926,1919155400,IC_kwDOBWUGps5yY_zI,2024-01-31T13:58:41Z,2024-01-31T13:58:41Z,COLLABORATOR,"> I will work on a counter-proposal.

Thank you! We'll more than happily review and iterate on it with you! 😃",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1919155400/reactions,0,0,0,0,0,0,0,0,0,14926
2327,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922458305,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1922458305,https://api.github.com/repos/rapidsai/cudf/issues/14926,1922458305,IC_kwDOBWUGps5ylmLB,2024-02-01T23:15:52Z,2024-02-01T23:15:52Z,CONTRIBUTOR,"Ok, this is what I'm proposing for the 2 `Make` functions to go in the Arrow source.
We can name that whatever makes sense. And we can change the return type to be a `std::shared_ptr` if that helps too.

```
namespace arrow {

/// raw pointer and a function to free it
using OwningBuffer = std::pair<const void*, std::function<void()>>;

namespace {
// generic object deleter functor for ArrowArray instances
struct DeleterFn {
  std::vector<ArrowArray*> children;
  std::vector<OwningBuffer> owners;
  ~DeleterFn()
  {
    for (auto& c : children)
      ArrowArrayRelease(c);
    for (auto& o : owners)
      std::invoke(o.second);
  }
};
}  // namespace

std::unique_ptr<ArrowArray> MakeArrowArray(int64_t length,
                                           int64_t null_count,
                                           int64_t offset,
                                           std::vector<OwningBuffer>&& data    = {},
                                           std::vector<ArrowArray*>&& children = {},
                                           ArrowArray&& dictionary             = {0})
{
  auto result = new ArrowArray{};
  std::memset(result, 0, sizeof(ArrowArray));

  const void** buffers = (const void**)(malloc(sizeof(void*) * data.size()));
  std::transform(data.begin(), data.end(), buffers, [](auto& buffer) { return buffer.first; });

  result->length     = length;
  result->null_count = null_count;
  result->offset     = offset;
  result->n_buffers  = 2;
  result->n_children = static_cast<int64_t>(children.size());
  result->buffers    = buffers;
  result->children   = children.data();
  result->dictionary = dictionary.length == 0 ? nullptr : new ArrowArray(std::move(dictionary));
  result->release    = [](struct ArrowArray* arr) {
    free(arr->buffers);
    auto d = static_cast<DeleterFn*>(arr->private_data);
    delete d;
    if (arr->dictionary) ArrowArrayRelease(arr->dictionary);
    ArrowArrayMarkReleased(arr);
  };
  result->private_data = new DeleterFn{std::move(children), std::move(data)};
  return std::unique_ptr<ArrowArray>(result);
}

std::unique_ptr<ArrowDeviceArray> MakeDeviceArray(ArrowArray&& array)
{
  auto result = new ArrowDeviceArray{std::move(array)};
  cudaEventCreate(reinterpret_cast<cudaEvent_t*>(&(result->sync_event)));
  int dev_id = 0;
  cudaGetDevice(&dev_id);
  result->device_id   = dev_id;
  result->device_type = ARROW_DEVICE_CUDA;
  return std::unique_ptr<ArrowDeviceArray>(result);
}
}  // namespace arrow

```

The `DeleterFn` can certainly go in a .cpp file along with the 2 function definitions. 
No need for these to be declared and be defined in a header file.
I believe this should work and all the appropriate objects are managed correctly but I've not tested it.

",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922458305/reactions,0,0,0,0,0,0,0,0,0,14926
2328,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922469714,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1922469714,https://api.github.com/repos/rapidsai/cudf/issues/14926,1922469714,IC_kwDOBWUGps5ylo9S,2024-02-01T23:28:12Z,2024-02-01T23:30:36Z,CONTRIBUTOR,"I spent some time recoded each of the dispatch functions to use these `Make` factories.
Here are few of them for reference.
```
  // handles most of the fixed-width types
  std::unique_ptr<ArrowArray> operator()(cudf::column_view input, rmm::cuda_stream_view)
  {
    std::vector<arrow::OwningBuffer> data{{input.null_mask(), empty_fn}, {input.head(), empty_fn}};
    return arrow::MakeArrowArray(input.size(), input.null_count(), input.offset(), std::move(data));
  }

```
```
// the bool specialization shows passing in a custom 'delete' function for freeing the device_buffer
template <>
std::unique_ptr<ArrowArray> dispatch_to_arrow::operator()<bool>(cudf::column_view input,
                                                                rmm::cuda_stream_view stream)
{
  cudf::column_view view_without_offset =
    input.offset() == 0 ? input
                        : view_without_offset = cudf::column_view{input.type(), input.size() + input.offset(),
                                                                  input.head(), input.null_mask(),  input.null_count()};
  auto bitmask = std::get<0>(cudf::detail::bools_to_mask(
    view_without_offset, stream, rmm::mr::get_current_device_resource()));

  std::vector<arrow::OwningBuffer> data{{input.null_mask(), empty_fn}};
  data.emplace_back(device_buffer_to_arrow(std::move(*bitmask.release())));
  return arrow::MakeArrowArray(input.size(), input.null_count(), input.offset(), std::move(data));
}
...
which uses this utility (to be included in the libcudf source along with these dispatch functions):
...
// utility to transfer a device_buffer to an OwningBuffer
arrow::OwningBuffer device_buffer_to_arrow(rmm::device_buffer&& buffer)
{
  auto dbuf    = new rmm::device_buffer(std::move(buffer));
  auto deleter = [dbuf]() { delete dbuf; };
  return arrow::OwningBuffer{dbuf->data(), deleter};
}

```
```
// the main public function that returns the new ArrowDeviceArray
std::unique_ptr<arrow::ArrowDeviceArray> to_arrow_device_array(table_view input_view,
                                                               rmm::cuda_stream_view stream)
{
  std::vector<ArrowArray*> children;
  for (auto& c : input_view) {
    auto col = c.type().id() != cudf::type_id::EMPTY
                 ? cudf::type_dispatcher(c.type(), detail::dispatch_to_arrow{}, c, stream)
                 : detail::create_null_array(c.size());
    children.emplace_back(col.release());
  }
  std::vector<arrow::OwningBuffer> data{{nullptr, detail::empty_fn}};
  auto array =  arrow::MakeArrowArray(input_view.num_rows(), 0, 0, std::move(data), std::move(children));
  return arrow::MakeDeviceArray(std::move(*array.release()));
}
...
The create_null_array() was copied from original the get_null_arr()
...
std::unique_ptr<ArrowArray> create_null_array(int size)
{
  auto arr = std::make_shared<arrow::NullArray>(size);
  auto out = new ArrowArray{};
  ARROW_UNUSED(arrow::ExportArray(*arr, out));
  return std::unique_ptr<ArrowArray>(out);
}
```
Let me know if you want to see any of the other ones.
I didn't realize how different each type is built into an `ArrowArray` but the `Make` function seems to handle them all.
I was a bit surprised the type-id is not included in the structure.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922469714/reactions,0,0,0,0,0,0,0,0,0,14926
2329,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924742136,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1924742136,https://api.github.com/repos/rapidsai/cudf/issues/14926,1924742136,IC_kwDOBWUGps5yuTv4,2024-02-02T21:44:25Z,2024-02-02T21:44:25Z,CONTRIBUTOR,I think we'd also want to look into [nanoarrow](https://github.com/apache/arrow-nanoarrow) (#13678) before we design any new structs ourselves. If I'm reading this discussion right it seems like there should be significant overlap given that nanoarrow has a [device-side extension](https://github.com/apache/arrow-nanoarrow/tree/main/extensions/nanoarrow_device#readme).,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924742136/reactions,0,0,0,0,0,0,0,0,0,14926
2330,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925563632,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1925563632,https://api.github.com/repos/rapidsai/cudf/issues/14926,1925563632,IC_kwDOBWUGps5yxcTw,2024-02-04T03:14:17Z,2024-02-04T03:14:17Z,COLLABORATOR,"> The `DeleterFn` can certainly go in a .cpp file along with the 2 function definitions.
> No need for these to be declared and be defined in a header file.
> I believe this should work and all the appropriate objects are managed correctly but I've not tested it.

This is unfortunately a C API as opposed to a CPP API. I imagine we could make this work regardless, but the bigger question is where would we expect this to live? If this lived in the main Arrow library then it eliminates the goal of being dependency free and requires linking libarrow which has a somewhat non-trivial dependency tree on its own. One of the goals of the interfaces is explicitly to avoid an explicit dependency on Arrow: https://arrow.apache.org/docs/format/CDeviceDataInterface.html#goals.

We could potentially implement something like this in nanoarrow as @vyasr mentioned above, but we'd probably need to take in the cuda event somewhere as opposed to having the make function create and record the event since the buffers coming in could potentially be on different streams or something of the like and I don't think there's a nice general way for something like nanoarrow to introspect and handle things properly. Additionally, the device and subsequent CUDA device extension in nanoarrow is quite new where there isn't interfaces for doing things like stream ordered memory management, stream ordered copying, etc. yet where I'm not sure how helpful it would be in the actual implementation here outside of providing the relevant definitions in headers for the Arrow C Device Data Interface.

",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925563632/reactions,0,0,0,0,0,0,0,0,0,14926
2331,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930040859,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930040859,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930040859,IC_kwDOBWUGps5zChYb,2024-02-06T15:23:50Z,2024-02-06T15:23:59Z,CONTRIBUTOR,"Ok. The link was helpful background.

> If this lived in the main Arrow library then it eliminates the goal of being dependency free and requires linking libarrow which has a somewhat non-trivial dependency tree on its own.

Since `libcudf` is already linking to `libarrow.so`, I'd like to consider Arrow providing these functions as an alternative to hand building the struct elements as illustrated in the original proposal.

",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930040859/reactions,0,0,0,0,0,0,0,0,0,14926
2332,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930095870,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930095870,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930095870,IC_kwDOBWUGps5zCuz-,2024-02-06T15:50:11Z,2024-02-06T15:50:11Z,COLLABORATOR,"> Since `libcudf` is already linking to `libarrow.so`

My understanding is that there is a desire for libcudf to no longer link against `libarrow.so`, where this proposal would enable a path to removing one of the key places it's used, in `to_arrow` and `from_arrow` as well as enabling handing GPU memory to other libraries that don't link to libcudf.

I believe from some conversations with @beckernick that he's expressed that Arrow increasing major versions ~quarterly and libcudf being tied to a specific major version has caused some compatibility pain in working with other packages across the ecosystem.

> I'd like to consider Arrow providing these functions as an alternative to hand building the struct elements as illustrated in the original proposal.

I don't think this is particularly feasible. There's different ownership models / semantics that Arrow would need to capture / support here. I.E. shared ownership where someone would want to more or less stuff some shared_ptrs into the `private_data` struct member and handle them appropriately in the `release` callback.

Additionally, in your proposal above you'd still need to organize your buffers and child columns into a flattened structure, pass the device type, and create + record the CUDA event for synchronization yourself. It seems like the main difference would be moving handling the ownership semantics into Arrow as opposed to handling it in libcudf?",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930095870/reactions,0,0,0,0,0,0,0,0,0,14926
2333,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930166680,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930166680,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930166680,IC_kwDOBWUGps5zDAGY,2024-02-06T16:08:54Z,2024-02-06T16:08:54Z,NONE,"> I'd like to consider Arrow providing these functions as an alternative to hand building the struct elements as illustrated in the original proposal.

I'm not sure what the functions would look like if they lived in libarrow, since libarrow can't use definitions of libcudf classes like table_view. Could you sketch the signatures you were thinking of?",,bkietz,1299904,MDQ6VXNlcjEyOTk5MDQ=,https://avatars.githubusercontent.com/u/1299904?v=4,,https://api.github.com/users/bkietz,https://github.com/bkietz,https://api.github.com/users/bkietz/followers,https://api.github.com/users/bkietz/following{/other_user},https://api.github.com/users/bkietz/gists{/gist_id},https://api.github.com/users/bkietz/starred{/owner}{/repo},https://api.github.com/users/bkietz/subscriptions,https://api.github.com/users/bkietz/orgs,https://api.github.com/users/bkietz/repos,https://api.github.com/users/bkietz/events{/privacy},https://api.github.com/users/bkietz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930166680/reactions,0,0,0,0,0,0,0,0,0,14926
2334,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930174843,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930174843,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930174843,IC_kwDOBWUGps5zDCF7,2024-02-06T16:10:29Z,2024-02-06T16:10:29Z,CONTRIBUTOR,"> > I'd like to consider Arrow providing these functions as an alternative to hand building the struct elements as illustrated in the original proposal.
> 
> I'm not sure what the functions would look like if they lived in libarrow, since libarrow can't use definitions of libcudf classes like table_view. Could you sketch the signatures you were thinking of?

https://github.com/rapidsai/cudf/issues/14926#issuecomment-1922458305",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930174843/reactions,0,0,0,0,0,0,0,0,0,14926
2335,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930814845,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930814845,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930814845,IC_kwDOBWUGps5zFeV9,2024-02-06T21:54:26Z,2024-02-06T21:54:26Z,CONTRIBUTOR,"What version of Arrow includes `ArrowDeviceArray`? I don't see it in the version used by libcudf so upgrading may be a prerequisite for this work.

I'm still puzzled by the lack of a type-id in these structures.
What is your proposal for `from_arrow_device_array`? I believe it should be possible to build a `cudf::table_view/cudf::column_views` but only if the type-ids are available.
Building a `cudf::table` does not look possible since `cudf::column` objects expect to own their data and for it to be stored in an `rmm::device_buffer` which is managed by RMM. [There is no mechanism for RMM to manage device memory that it has not allocated](https://github.com/rapidsai/rmm/issues/874).",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930814845/reactions,0,0,0,0,0,0,0,0,0,14926
2336,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930951332,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930951332,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930951332,IC_kwDOBWUGps5zF_qk,2024-02-06T23:38:57Z,2024-02-06T23:41:03Z,CONTRIBUTOR,"> My understanding is that there is a desire for libcudf to no longer link against libarrow.so

@kkraus14 you're right that we would eventually like to stop linking against libarrow if possible. 

> We could potentially implement something like this in nanoarrow as @vyasr mentioned above

My understanding is that nanoarrow was intended to provide essentially what we would need to decouple the existing Arrow interop functionality in libcudf from linkage to libarrow itself: a small, easily vendored library that provides an implementation of readers/writers of the Arrow C data interface so that various libraries could produce ABI-equivalent versions of Arrow data structures without linking. Do I have that right?

> but [...] I don't think there's a nice general way for something like nanoarrow to introspect and handle things properly.

Assuming my understanding of the goals of nanoarrow above is correct, is the main concern here leaking too much CUDA-specific information into the nanoarrow implementation, which would be a long-term issue? Or are you mostly concerned with the more short-term issue that 

> the device and subsequent CUDA device extension in nanoarrow is quite new where there isn't interfaces for doing things like stream ordered memory management, stream ordered copying, etc. yet 

If it's the latter, then could it make sense to implement this kind of functionality in libcudf (or a separate but associated library) for now but eventually upstream it to nanoarrow?

If it's the former, then I'd like to better understand the inherent limitations you see in nanoarrow and see if we can find a path to upstream this. At a high level I think I understand your concerns but I would like to dig into the details a bit since IMHO something like this really ought to be within the long-term scope of nanoarrow if I've understood its intent properly. I think I agree that we'll always need _some_ functionality in cudf, but in an ideal world I would hope that we'd have something close to as simple as (very rough, not trying to be precise with types etc since I imagine all that could change in nanoarrow):
```
ArrowDeviceArrayView to_arrow(column_view col) {
    // Note that I'm constructing an ArrowDeviceArrayView, not an ArrowDeviceArray,
    // because I assumed those were the intended semantics of that object.
    // Since it's a view and not a copy stream-ordering concerns seem like they'd be obviated.
    return ArrowDeviceArrayViewInit(col.data(), col.size());
}
```
but I really haven't looked into nanoarrow enough yet to understand where/why this would be problematic.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930951332/reactions,0,0,0,0,0,0,0,0,0,14926
2337,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930966969,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1930966969,https://api.github.com/repos/rapidsai/cudf/issues/14926,1930966969,IC_kwDOBWUGps5zGDe5,2024-02-06T23:51:51Z,2024-02-06T23:51:51Z,CONTRIBUTOR,"The `ArrowDeviceArray` was introduced with arrow v13 or v14. You'll find it in the header file `<arrow/c/abi.h>` 

> I'm still puzzled by the lack of a type-id in these structures.

The type IDs are managed by a corresponding `ArrowSchema` object, also in the same header. They are separate to allow for a stream of batches of data with the same schema to not have to duplicate the type information for every batch of records. So libcudf would need two methods: one to fill in an `ArrowSchema` and it's children based on the type of a column/column_view or a table/table_view (a table is treated as a struct column whose fields are the columns of the table so everything is seamless).

The other issue I see with pushing this upstream is that the `ArrowDeviceArray` on the arrow side is supposed to be device agnostic. Any init function we provide would also need to have the device type passed in (we can't assume CUDA) which would also require the caller to pass in any synchronization event (if required). 

Essentially the only thing a helper function like what you are asking could do is be a wrapper around populating a C struct, which seems a little redundant and unnecessary. At least to me.

Nanoarrow could certainly be used to simplify the creating of the `ArrowArray` and `ArrowStruct` objects though. @paleolimbot could comment further on nanoarrow for this",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930966969/reactions,0,0,0,0,0,0,0,0,0,14926
2338,https://api.github.com/repos/rapidsai/cudf/issues/comments/1931096756,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1931096756,https://api.github.com/repos/rapidsai/cudf/issues/14926,1931096756,IC_kwDOBWUGps5zGjK0,2024-02-07T01:41:31Z,2024-02-07T01:41:31Z,NONE,"Very interesting read! No pressure to use nanoarrow's implementation for any of this...if it can't help, its source might be useful to review and/or it might give you another endpoint to test against.

The nanoarrow C library (without any CUDA integration) can definitely populate the `ArrowSchema` for you. It might look like:

```c
#include nanoarrow.hpp

int export_column_schema(const cudf::column& col, ArrowSchema* out) {
  nanoarrow::UniqueSchema tmp;
  ArrowSchemInit(tmp.get());
  // I imagine there is already a mapping to an Arrow type id somewhere in cudf, but for example...
  NANOARROW_RETURN_NOT_OK(ArrowSchemaSetType(tmp.get(), NANOARROW_TYPE_INT32);
  
  ArrowSchemaMove(tmp.get(), out);
  return NANOARROW_OK;
}
```

The nanoarrow C library (also without any CUDA integration) can also populate an `ArrowArray` for you. If you want export an `ArrowArray` that's actually non-owning (just pretending to be owning), you could do:

```c
int export_column_view_array(const cudf::column_view& col, ArrowArray* out) {
  nanoarrow::UniqueArray tmp;
  NANOARROW_RETURN_NOT_OK(ArrowArrayInitFromType(tmp.get(), NANOARROW_TYPE_INT32);
  tmp->length = col.length;
  // offset, null_count
  tmp->buffers[1] = col.data_buffer_start_addr;
  // If validity bitmaps are a thing in cudf: tmp->buffers[0] = col.validity_buffer;
  
  ArrowArrayMove(tmp.get(), out);
  return NANOARROW_OK;
}
```

If you want to export an `ArrowArray` that fully conforms to the spec (i.e., it is safe to access buffer content until the consumer calls the release callback), you could also use nanoarrow but you would have to explode ownership to the buffer level, which it sounds like might involve some shared pointers or reference counting of some kind. Hypothetically:

```c
static void finalize_buffer(ArrowBufferAllocator* allocator, uint8_t* ptr, int64_t size) {
  auto* shared_col = reinterpret_cast<std::shared_ptr<cuda::column>>(allocator->private_data);
  delete shared_col;
}

int export_column_view_array(const std::shared_ptr<cuda::column> col, ArrowArray* out) {
  nanoarrow::UniqueArray tmp;
  NANOARROW_RETURN_NOT_OK(ArrowArrayInitFromType(tmp.get(), NANOARROW_TYPE_INT32);
  tmp->length = col->length;
  
  ArrowBuffer* data_buffer = ArrowArrayBuffer(tmp.get(), 1);
  ArrowBufferSetAllocator(
    data_buffer, 
    ArrowBufferDeallocator(&finalize_buffer, new std::shared_ptr<cuda::column>(col));
  data_buffer->data = col->data_buffer_start_addr;
  
  NANOARROW_RETURN_NOT_OK(ArrowArrayFinishBuilding(tmp.get(), nullptr. NANOARROW_VALIDATION_LEVEL_MINIMAL);
  ArrowArrayMove(tmp.get(), out);
  return NANOARROW_OK;
}
```

The only CUDA-specific part would be ensuring that the `cudaEvent_t` pointer in the `ArrowDeviceArray` struct is cleaned up when the outermost `ArrowArray`'s release callback is called.

@vyasr is correct that there is an `ArrowArrayView` (and, in the work-in-progress device helpers, an `ArrowDeviceArrayView`). It sounds like this is the equivalent of your `cudf::column_view`; however, it's not ABI stable and so I'm not sure it will be all that useful to use as an interface.",,paleolimbot,10995762,MDQ6VXNlcjEwOTk1NzYy,https://avatars.githubusercontent.com/u/10995762?v=4,,https://api.github.com/users/paleolimbot,https://github.com/paleolimbot,https://api.github.com/users/paleolimbot/followers,https://api.github.com/users/paleolimbot/following{/other_user},https://api.github.com/users/paleolimbot/gists{/gist_id},https://api.github.com/users/paleolimbot/starred{/owner}{/repo},https://api.github.com/users/paleolimbot/subscriptions,https://api.github.com/users/paleolimbot/orgs,https://api.github.com/users/paleolimbot/repos,https://api.github.com/users/paleolimbot/events{/privacy},https://api.github.com/users/paleolimbot/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1931096756/reactions,0,0,0,0,0,0,0,0,0,14926
2339,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936408885,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1936408885,https://api.github.com/repos/rapidsai/cudf/issues/14926,1936408885,IC_kwDOBWUGps5za0E1,2024-02-09T18:26:27Z,2024-02-09T18:26:27Z,CONTRIBUTOR,"I haven't read the full thread in detail, but here's my $0.02.

As far as I'm concerned, the whole reason for Arrow's existence and why RAPIDS built on it in the first place was to enable zero-copy data sharing with a common vocabulary for in-memory, columnar data. 

My memory is hazy, but I believe the only reason the original `cudf::to/from_arrow` perform deep copies is because there wasn't yet a way to describe GPU memory with the Arrow data structures, so we had to always assume we had to make copies to/from host memory.

Now it seems we have a zero-copy way to describe GPU memory with Arrow, so libcudf should _definitely_ enable that. 

In my mind, this is equivalent to if you're a C++ library that has your own custom string type, you better provide a `std::string_view` conversion operator. ",,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936408885/reactions,5,5,0,0,0,0,0,0,0,14926
2340,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936486920,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1936486920,https://api.github.com/repos/rapidsai/cudf/issues/14926,1936486920,IC_kwDOBWUGps5zbHII,2024-02-09T19:29:25Z,2024-02-09T19:29:25Z,CONTRIBUTOR,"I agree with that, I just want to make sure that we're leveraging newer Arrow tools and concepts (the C Data Interface, nanoarrow, etc) to the maximum extent possible, which also means making sure that we understand exactly what those tools have to offer and whether there is missing functionality that we should be helping to implement. The questions I'm asking are focused on filling the gaps in my understanding. 

### Ownership

The questions around proper ownership are ultimately quite similar to, for instance, how cuDF Python works. All objects allocated by libcudf algorithms are immediately forced to relinquish their ownership to Python objects that maintain their lifetime, and downstream algorithms then operate on views anyway so it doesn't matter that libcudf no longer owns the memory. It seems to me then that the proper signature would be `ArrowDeviceArray to_arrow_device_array(unique_ptr<column> column)` in this context because an ownership transfer would indeed be the only way to get proper interop with other Arrow consumers that are expecting [a shared ownership model like Matt indicated above](https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917490522). On the flip side, for consuming arrow objects it seems like we'd want `cudf::column_view from_arrow_device_array(ArrowDeviceArray)` because we can only ever make a view since we cannot claim sole ownership of the data. 

Am I missing anything here? It seems like these are the only ways to provide semantics that are consistent with the goal of minimizing data copies while also producing objects that are consistent with the Arrow spec. There is a fundamental difference between the existing implementations in libcudf and the new ones we're proposing here because the host versions always require copies whereas we want the device ones to never(? or maybe sometimes, in which we'd need different versions of the APIs.) make copies.

### Object Creation

This is where I was hoping that nanoarrow could help, and thanks to @paleolimbot we have [some good examples](https://github.com/rapidsai/cudf/issues/14926#issuecomment-1931096756). The example @zeroshade [linked above](https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917221229) looks like it's on the right track, and it seems like it could be written to use nanoarrow instead of arrow APIs based on the examples @paleolimbot showed above. If not, is there missing functionality that we should be helping to add? Creating those structures with nanoarrow seems like exactly what it's intended for and would allow the resulting library to have no direct dependency on libarrow, which would be nice and probably be a template for something we'd try to do with our existing Arrow host-data interop APIs eventually.

### Where does the code live

Based on the above I certainly think it makes sense for libcudf to own the logic for mapping our internal representation of Arrow data into Arrow's structs. What I would hope is that it would be possible to use nanoarrow to allocate the necessary Arrow structs and then ideally to use nanoarrow APIs to populate those structs within a libcudf-specific function that knows how to translate between our types and our groupings of (Arrow-compliant) data buffers into Arrow's types and Arrows structs. But Matt brings up a few points regarding that:

> The other issue I see with pushing this upstream is that the ArrowDeviceArray on the arrow side is supposed to be device agnostic. Any init function we provide would also need to have the device type passed in (we can't assume CUDA) which would also require the caller to pass in any synchronization event (if required).

I seem to recall discussions around Arrow device data also discussing this and designing for the need to pass around synchronization (CUDA) events. @kkraus14 can probably say more, but isn't Arrow already designing for this in some places? Are you thinking that it's just overkill in this context?

> Essentially the only thing a helper function like what you are asking could do is be a wrapper around populating a C struct, which seems a little redundant and unnecessary. At least to me.
> Nanoarrow could certainly be used to simplify the creating of the ArrowArray and ArrowStruct objects though. @paleolimbot could comment further on nanoarrow for this

It seems like using nanoarrow here would at least be helpful and not redundant as a way to protect against future non-ABI-breaking changes in the spec, e.g. if arrow arrays added fields at the end of the struct (that didn't change the alignment). And that also isn't all that different from what's outline in the example above. Maybe I'm exaggerating the likelihood of meaningful changes like this though and reaching for an external tool rather than adding this code to libcudf is unnecessarily complex.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936486920/reactions,0,0,0,0,0,0,0,0,0,14926
2341,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936537018,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1936537018,https://api.github.com/repos/rapidsai/cudf/issues/14926,1936537018,IC_kwDOBWUGps5zbTW6,2024-02-09T20:09:03Z,2024-02-09T20:09:03Z,NONE,"> If not, is there missing functionality that we should be helping to add?

If you do end up using nanoarrow and find that there is some missing functionality, feel free to open an issue! I'm happy to implement or coordinate implementing anything that helps, or to add anything that cudf had to implement themselves that would be useful to a wider audience.

>  if arrow arrays added fields at the end of the struct

I'm almost positive that we've stated that we won't do that...the main thing that I think nanoarrow can help you with is populating `ArrowSchema` and `ArrowArray` structs for nested things like structs and lists in a way that makes sure they're cleaned up. It's not hard to implement that, necessarily, but the details are fiddly.",,paleolimbot,10995762,MDQ6VXNlcjEwOTk1NzYy,https://avatars.githubusercontent.com/u/10995762?v=4,,https://api.github.com/users/paleolimbot,https://github.com/paleolimbot,https://api.github.com/users/paleolimbot/followers,https://api.github.com/users/paleolimbot/following{/other_user},https://api.github.com/users/paleolimbot/gists{/gist_id},https://api.github.com/users/paleolimbot/starred{/owner}{/repo},https://api.github.com/users/paleolimbot/subscriptions,https://api.github.com/users/paleolimbot/orgs,https://api.github.com/users/paleolimbot/repos,https://api.github.com/users/paleolimbot/events{/privacy},https://api.github.com/users/paleolimbot/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936537018/reactions,0,0,0,0,0,0,0,0,0,14926
2342,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936545464,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1936545464,https://api.github.com/repos/rapidsai/cudf/issues/14926,1936545464,IC_kwDOBWUGps5zbVa4,2024-02-09T20:16:02Z,2024-02-09T20:16:02Z,CONTRIBUTOR,"> `ArrowDeviceArray to_arrow_device_array(unique_ptr<column> column)` in this context because an ownership transfer would indeed be the only way to get proper interop with other Arrow consumers that are expecting [a shared ownership model like Matt indicated above](https://github.com/rapidsai/cudf/issues/14926#issuecomment-1917490522.)

That signature should work fine. libcudf tends to use exceptions rather than explicit status returns right? As far as handling the shared ownership model, it's also possible for the `ArrowDeviceArray` that is constructed to have a no-op for its release callback meaning that no guarantee is provided that the returned `ArrowDeviceArray` keeps anything alive. So you could have two options, one that takes a `unique_ptr<column>` and guarantees it maintains the shared ownership and one that takes a `column_view` and leaves the responsibility on the consumer to maintain the lifetime as long as is necessary.

> On the flip side, for consuming arrow objects it seems like we'd want `cudf::column_view from_arrow_device_array(ArrowDeviceArray)` because we can only ever make a view since we cannot claim sole ownership of the data.

Well, not exactly. When you import from an `ArrowDeviceArray` you can claim sole ownership of the arrow data in terms of ensuring the release callback inside of the `ArrowArray` structs gets called upon destruction of the corresponding columns. Currently I don't think that `cudf::column_view` provides any way to provide anything custom in the destruction, but you could return an `unique_ptr<cudf::column>` with a custom deleter that calls the release callback?

> There is a fundamental difference between the existing implementations in libcudf and the new ones we're proposing here because the host versions always require copies whereas we want the device ones to never(? or maybe sometimes, in which we'd need different versions of the APIs.) make copies.

You've got it exactly correct here.

> It seems like using nanoarrow here would at least be helpful and not redundant as a way to protect against future non-ABI-breaking changes in the spec, e.g. if arrow arrays added fields at the end of the struct (that didn't change the alignment). And that also isn't all that different from what's outline in the example above. 

Using nanoarrow should definitely be at least helpful for constructing the C structs. I can put together an example code sample if you'd like or I can just start working on a PR for libcudf using nanoarrow (remember that nanoarrow is intended to be vendored/embedded so that would be part of the PR)",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936545464/reactions,0,0,0,0,0,0,0,0,0,14926
2343,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936616021,https://github.com/rapidsai/cudf/issues/14926#issuecomment-1936616021,https://api.github.com/repos/rapidsai/cudf/issues/14926,1936616021,IC_kwDOBWUGps5zbmpV,2024-02-09T21:17:50Z,2024-02-09T21:17:50Z,CONTRIBUTOR,"Thank you everyone for this discussion. It seems like we are directionally aligned with a few open questions. At this point I would encourage @zeroshade to prepare a draft PR. RAPIDS is interested in adding zero-copy interop via arrow, and the Awkward Array team is interested in testing the feature (see #14959).

I see two areas where perhaps we should agree before @zeroshade kicks off a PR. Please share your thoughts if there are other areas.
* Agree on including `nanoarrow` and using its interop utilities. I'm in favor of refactoring our interop module to use nanoarrow, especially if it gets us closer to dropping the libarrow dependency. Please share any concerns you may have about including nanoarrow.
* Agree on the design for data lifetime and ownership. Since this is ultimately a performance project, would it be more valuable to build the `from` or the `to` first? In general, I would prefer to let the application layer manage data lifetime as much as possible. I'm used to reasoning about libcudf functions which almost always make a copy - so shared ownership is unfamiliar to me.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936616021/reactions,0,0,0,0,0,0,0,0,0,14926
2344,https://api.github.com/repos/rapidsai/cudf/issues/comments/1934390026,https://github.com/rapidsai/cudf/issues/14935#issuecomment-1934390026,https://api.github.com/repos/rapidsai/cudf/issues/14935,1934390026,IC_kwDOBWUGps5zTHMK,2024-02-08T15:37:43Z,2024-02-08T15:37:43Z,MEMBER,"Hi @pvnick , thanks for the report. We'll investigate and follow up on this issue.",,beckernick,8457388,MDQ6VXNlcjg0NTczODg=,https://avatars.githubusercontent.com/u/8457388?v=4,,https://api.github.com/users/beckernick,https://github.com/beckernick,https://api.github.com/users/beckernick/followers,https://api.github.com/users/beckernick/following{/other_user},https://api.github.com/users/beckernick/gists{/gist_id},https://api.github.com/users/beckernick/starred{/owner}{/repo},https://api.github.com/users/beckernick/subscriptions,https://api.github.com/users/beckernick/orgs,https://api.github.com/users/beckernick/repos,https://api.github.com/users/beckernick/events{/privacy},https://api.github.com/users/beckernick/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1934390026/reactions,0,0,0,0,0,0,0,0,0,14935
2345,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977297916,https://github.com/rapidsai/cudf/issues/14935#issuecomment-1977297916,https://api.github.com/repos/rapidsai/cudf/issues/14935,1977297916,IC_kwDOBWUGps512yv8,2024-03-04T19:23:43Z,2024-03-04T19:23:43Z,CONTRIBUTOR,Related: https://github.com/rapidsai/cudf/issues/15179,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977297916/reactions,0,0,0,0,0,0,0,0,0,14935
2346,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977301611,https://github.com/rapidsai/cudf/issues/14935#issuecomment-1977301611,https://api.github.com/repos/rapidsai/cudf/issues/14935,1977301611,IC_kwDOBWUGps512zpr,2024-03-04T19:25:58Z,2024-03-04T19:25:58Z,CONTRIBUTOR,"For context, the decision to disallow iteration over GPU objects is intentional -- it keeps users from accidentally triggering many host-device transfers (e.g. in a `for` loop) that are highly inefficient. This is problematic in some cases when column names are part of an object on the GPU that needs to be iterated over. The solution to this will likely require some code change in dask-cudf to convert the `StringIndex` into a type that is supported on the host.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977301611/reactions,0,0,0,0,0,0,0,0,0,14935
2347,https://api.github.com/repos/rapidsai/cudf/issues/comments/1979169119,https://github.com/rapidsai/cudf/issues/14935#issuecomment-1979169119,https://api.github.com/repos/rapidsai/cudf/issues/14935,1979169119,IC_kwDOBWUGps5197lf,2024-03-05T16:30:39Z,2024-03-05T16:30:39Z,CONTRIBUTOR,"While it is inefficient to iterate row-wise over the dataframe, it's pretty difficult to adapt all of dask-dataframe to do something different based on cudf/pandas. Note we can't really do this in dask-cudf without monkey-patching and/or reimplementing `dask.dataframe.pivot_table`.

I'm not sure the iteration is that inefficient, if we implemented it as (for a stringindex)
```
def __iter__(self):
    return iter(self.to_pandas())
```
There's only one device-to-host copy",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1979169119/reactions,0,0,0,0,0,0,0,0,0,14935
2348,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118348506,https://github.com/rapidsai/cudf/issues/14935#issuecomment-2118348506,https://api.github.com/repos/rapidsai/cudf/issues/14935,2118348506,IC_kwDOBWUGps5-Q27a,2024-05-17T20:33:50Z,2024-05-17T20:33:50Z,CONTRIBUTOR,"I am leaning towards the same view as Lawrence here. We've had these disabled code paths for a long time, and while I understand the rationale I think at this point I'm OK with relaxing this behavior. Especially in light of cudf.pandas or dask integration, disabling a code path in a way that breaks those weights seems less favorable than it may once have.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118348506/reactions,1,1,0,0,0,0,0,0,0,14935
2349,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118624040,https://github.com/rapidsai/cudf/issues/14935#issuecomment-2118624040,https://api.github.com/repos/rapidsai/cudf/issues/14935,2118624040,IC_kwDOBWUGps5-R6Mo,2024-05-18T03:41:48Z,2024-05-18T03:41:48Z,CONTRIBUTOR,I’m okay with that proposal. My comments above were primarily to establish historical context — I am alright with changing the behavior to solve compatibility issues.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118624040/reactions,0,0,0,0,0,0,0,0,0,14935
2350,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922305122,https://github.com/rapidsai/cudf/issues/14950#issuecomment-1922305122,https://api.github.com/repos/rapidsai/cudf/issues/14950,1922305122,IC_kwDOBWUGps5ylAxi,2024-02-01T21:48:03Z,2024-02-01T21:48:03Z,CONTRIBUTOR,"It would be interesting to compare the `rle_stream` approach to dictionary decoding to the approach in [totalDictEntriesSize](https://github.com/rapidsai/cudf/blob/2b0d9876ed02c1e4ea50907ac0d917669d51348c/cpp/src/io/parquet/page_string_decode.cu#L318). The latter makes use of all warps for decoding work, and doesn't suffer from load balancing problems between warps, but it might be harder to save state and pick up again in a batch processing application.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922305122/reactions,0,0,0,0,0,0,0,0,0,14950
2351,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922039171,https://github.com/rapidsai/cudf/issues/14953#issuecomment-1922039171,https://api.github.com/repos/rapidsai/cudf/issues/14953,1922039171,IC_kwDOBWUGps5yj_2D,2024-02-01T19:10:06Z,2024-02-01T19:10:06Z,CONTRIBUTOR,@mattahrens @abellina ,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922039171/reactions,0,0,0,0,0,0,0,0,0,14953
2352,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922070737,https://github.com/rapidsai/cudf/issues/14953#issuecomment-1922070737,https://api.github.com/repos/rapidsai/cudf/issues/14953,1922070737,IC_kwDOBWUGps5ykHjR,2024-02-01T19:26:19Z,2024-02-01T19:26:19Z,CONTRIBUTOR,@etseidl ,,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1922070737/reactions,0,0,0,0,0,0,0,0,0,14953
2353,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930753081,https://github.com/rapidsai/cudf/issues/14953#issuecomment-1930753081,https://api.github.com/repos/rapidsai/cudf/issues/14953,1930753081,IC_kwDOBWUGps5zFPQ5,2024-02-06T21:08:04Z,2024-02-06T21:08:04Z,CONTRIBUTOR,"This makes sense to me. Sounds beneficial even if we don't apply the pattern to all kernels.
Could you help me understand the following? 
> The rle_stream class uses shared memory, so it is a big advantage to be able to have kernels that don't need a given feature (say, list decoding) to be able to use less.

Is this explaining the benefit over `rle_stream`?",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1930753081/reactions,0,0,0,0,0,0,0,0,0,14953
2354,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924733659,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1924733659,https://api.github.com/repos/rapidsai/cudf/issues/14959,1924733659,IC_kwDOBWUGps5yuRrb,2024-02-02T21:36:01Z,2024-02-02T21:36:01Z,CONTRIBUTOR,I think #14926 is pretty relevant here.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924733659/reactions,0,0,0,0,0,0,0,0,0,14959
2355,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924747813,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1924747813,https://api.github.com/repos/rapidsai/cudf/issues/14959,1924747813,IC_kwDOBWUGps5yuVIl,2024-02-02T21:49:25Z,2024-02-02T21:49:25Z,COLLABORATOR,I agree that this is kinda the exact use case that #14926 is designed for. Along with something like a PyCapsule based protocol.,,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1924747813/reactions,0,0,0,0,0,0,0,0,0,14959
2356,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925466303,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1925466303,https://api.github.com/repos/rapidsai/cudf/issues/14959,1925466303,IC_kwDOBWUGps5yxEi_,2024-02-03T22:01:36Z,2024-02-03T22:01:36Z,NONE,"I should add here that, from the Awkward Array side, any format that preserves all of the information is equally good. If given CuPy arrays (option 2), we might internally convert them to a format that follows a pyarrow array's Buffers so that we can reuse code that makes the adjustments between Arrow and Awkward, but that's our business.

I suggested option 1, making a pyarrow array that would segfault if you touch it, because this works for us (we'll be careful to not dereference the GPU pointers) and if pyarrow ever does add the infrastructure to interpret it correctly, the same interface on cuDF will work for both Awkward and Arrow.",,jpivarski,1852447,MDQ6VXNlcjE4NTI0NDc=,https://avatars.githubusercontent.com/u/1852447?v=4,,https://api.github.com/users/jpivarski,https://github.com/jpivarski,https://api.github.com/users/jpivarski/followers,https://api.github.com/users/jpivarski/following{/other_user},https://api.github.com/users/jpivarski/gists{/gist_id},https://api.github.com/users/jpivarski/starred{/owner}{/repo},https://api.github.com/users/jpivarski/subscriptions,https://api.github.com/users/jpivarski/orgs,https://api.github.com/users/jpivarski/repos,https://api.github.com/users/jpivarski/events{/privacy},https://api.github.com/users/jpivarski/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1925466303/reactions,0,0,0,0,0,0,0,0,0,14959
2357,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936182962,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936182962,https://api.github.com/repos/rapidsai/cudf/issues/14959,1936182962,IC_kwDOBWUGps5zZ86y,2024-02-09T16:00:00Z,2024-02-09T16:00:00Z,NONE,"Ping on this, @shwina ; I gather work is ongoing in the linked issue, but I would appreciate a brief summary here of status and what we can expect for awkward integration. ",,martindurant,6042212,MDQ6VXNlcjYwNDIyMTI=,https://avatars.githubusercontent.com/u/6042212?v=4,,https://api.github.com/users/martindurant,https://github.com/martindurant,https://api.github.com/users/martindurant/followers,https://api.github.com/users/martindurant/following{/other_user},https://api.github.com/users/martindurant/gists{/gist_id},https://api.github.com/users/martindurant/starred{/owner}{/repo},https://api.github.com/users/martindurant/subscriptions,https://api.github.com/users/martindurant/orgs,https://api.github.com/users/martindurant/repos,https://api.github.com/users/martindurant/events{/privacy},https://api.github.com/users/martindurant/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936182962/reactions,1,0,0,0,0,0,0,0,1,14959
2358,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936573796,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936573796,https://api.github.com/repos/rapidsai/cudf/issues/14959,1936573796,IC_kwDOBWUGps5zbcVk,2024-02-09T20:40:05Z,2024-02-09T20:40:05Z,CONTRIBUTOR,"Thanks, @martindurant - I believe we should see a PR up for #14926 soon. At that point, we would be very grateful if you could provide feedback or perhaps do some early testing!",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936573796/reactions,0,0,0,0,0,0,0,0,0,14959
2359,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936575954,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936575954,https://api.github.com/repos/rapidsai/cudf/issues/14959,1936575954,IC_kwDOBWUGps5zbc3S,2024-02-09T20:42:08Z,2024-02-09T20:42:08Z,NONE,"Certainly, just let us know",,martindurant,6042212,MDQ6VXNlcjYwNDIyMTI=,https://avatars.githubusercontent.com/u/6042212?v=4,,https://api.github.com/users/martindurant,https://github.com/martindurant,https://api.github.com/users/martindurant/followers,https://api.github.com/users/martindurant/following{/other_user},https://api.github.com/users/martindurant/gists{/gist_id},https://api.github.com/users/martindurant/starred{/owner}{/repo},https://api.github.com/users/martindurant/subscriptions,https://api.github.com/users/martindurant/orgs,https://api.github.com/users/martindurant/repos,https://api.github.com/users/martindurant/events{/privacy},https://api.github.com/users/martindurant/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936575954/reactions,0,0,0,0,0,0,0,0,0,14959
2360,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936618208,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936618208,https://api.github.com/repos/rapidsai/cudf/issues/14959,1936618208,IC_kwDOBWUGps5zbnLg,2024-02-09T21:19:49Z,2024-02-09T21:19:49Z,COLLABORATOR,"Just a note that #14926 will first yield the C++ level functions and C structs, and there would likely need to be a follow up in implementing the Python protocol around it. The issue tracking that work in Arrow is here: https://github.com/apache/arrow/issues/38325",,kkraus14,3665167,MDQ6VXNlcjM2NjUxNjc=,https://avatars.githubusercontent.com/u/3665167?v=4,,https://api.github.com/users/kkraus14,https://github.com/kkraus14,https://api.github.com/users/kkraus14/followers,https://api.github.com/users/kkraus14/following{/other_user},https://api.github.com/users/kkraus14/gists{/gist_id},https://api.github.com/users/kkraus14/starred{/owner}{/repo},https://api.github.com/users/kkraus14/subscriptions,https://api.github.com/users/kkraus14/orgs,https://api.github.com/users/kkraus14/repos,https://api.github.com/users/kkraus14/events{/privacy},https://api.github.com/users/kkraus14/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936618208/reactions,0,0,0,0,0,0,0,0,0,14959
2361,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936778791,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936778791,https://api.github.com/repos/rapidsai/cudf/issues/14959,1936778791,IC_kwDOBWUGps5zcOYn,2024-02-10T00:48:29Z,2024-02-10T00:48:29Z,CONTRIBUTOR,Wouldn't `nanoarrow` provide a way to access the `DeviceArray` from Cython? ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1936778791/reactions,0,0,0,0,0,0,0,0,0,14959
2362,https://api.github.com/repos/rapidsai/cudf/issues/comments/1948177550,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1948177550,https://api.github.com/repos/rapidsai/cudf/issues/14959,1948177550,IC_kwDOBWUGps50HtSO,2024-02-16T10:57:15Z,2024-02-16T10:57:15Z,CONTRIBUTOR,"> Wouldn't nanoarrow provide a way to access the DeviceArray from Cython?

Would be very grateful if @paleolimbot could advise here!",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1948177550/reactions,0,0,0,0,0,0,0,0,0,14959
2363,https://api.github.com/repos/rapidsai/cudf/issues/comments/1948518903,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1948518903,https://api.github.com/repos/rapidsai/cudf/issues/14959,1948518903,IC_kwDOBWUGps50JAn3,2024-02-16T14:47:09Z,2024-02-16T14:47:09Z,NONE,"It's been touched on here, but I think the intention is ( https://github.com/apache/arrow/issues/38325 ) to add a protocol `__arrow_c_device_array__()` to mirror how `__arrow_c_array__()` works but with explicit non-CPU support ( https://arrow.apache.org/docs/format/CDataInterface/PyCapsuleInterface.html ).

When nanoarrow for Python has matured a bit it might be able to help export (and test), but the Cython needed to make the required Capsule is pretty compact and any library doing exporting should probably just copy it (or translate it to pybind11 or nanobind): https://github.com/apache/arrow-nanoarrow/blob/main/python/src/nanoarrow/_lib.pyx#L112-L127 .",,paleolimbot,10995762,MDQ6VXNlcjEwOTk1NzYy,https://avatars.githubusercontent.com/u/10995762?v=4,,https://api.github.com/users/paleolimbot,https://github.com/paleolimbot,https://api.github.com/users/paleolimbot/followers,https://api.github.com/users/paleolimbot/following{/other_user},https://api.github.com/users/paleolimbot/gists{/gist_id},https://api.github.com/users/paleolimbot/starred{/owner}{/repo},https://api.github.com/users/paleolimbot/subscriptions,https://api.github.com/users/paleolimbot/orgs,https://api.github.com/users/paleolimbot/repos,https://api.github.com/users/paleolimbot/events{/privacy},https://api.github.com/users/paleolimbot/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1948518903/reactions,1,1,0,0,0,0,0,0,0,14959
2364,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965179987,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965179987,https://api.github.com/repos/rapidsai/cudf/issues/14959,1965179987,IC_kwDOBWUGps51IkRT,2024-02-26T20:20:31Z,2024-02-26T20:20:31Z,CONTRIBUTOR,@martindurant just an update here that I'm waiting for #15047 to take some shape before I try and kick the tires with accessing from Python.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965179987/reactions,0,0,0,0,0,0,0,0,0,14959
2365,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965193549,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965193549,https://api.github.com/repos/rapidsai/cudf/issues/14959,1965193549,IC_kwDOBWUGps51InlN,2024-02-26T20:25:04Z,2024-02-26T20:25:04Z,NONE,"@jpivarski , can you please link the experimental conversions code you wrote in awkward?",,martindurant,6042212,MDQ6VXNlcjYwNDIyMTI=,https://avatars.githubusercontent.com/u/6042212?v=4,,https://api.github.com/users/martindurant,https://github.com/martindurant,https://api.github.com/users/martindurant/followers,https://api.github.com/users/martindurant/following{/other_user},https://api.github.com/users/martindurant/gists{/gist_id},https://api.github.com/users/martindurant/starred{/owner}{/repo},https://api.github.com/users/martindurant/subscriptions,https://api.github.com/users/martindurant/orgs,https://api.github.com/users/martindurant/repos,https://api.github.com/users/martindurant/events{/privacy},https://api.github.com/users/martindurant/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965193549/reactions,0,0,0,0,0,0,0,0,0,14959
2366,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965203289,https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965203289,https://api.github.com/repos/rapidsai/cudf/issues/14959,1965203289,IC_kwDOBWUGps51Ip9Z,2024-02-26T20:27:51Z,2024-02-26T20:27:51Z,NONE,"This is the script that I used to test conversion of CuDF's Arrow data into Awkward. (The other direction should be even easier.)

https://github.com/scikit-hep/awkward/blob/main/studies/cudf-to-awkward.py",,jpivarski,1852447,MDQ6VXNlcjE4NTI0NDc=,https://avatars.githubusercontent.com/u/1852447?v=4,,https://api.github.com/users/jpivarski,https://github.com/jpivarski,https://api.github.com/users/jpivarski/followers,https://api.github.com/users/jpivarski/following{/other_user},https://api.github.com/users/jpivarski/gists{/gist_id},https://api.github.com/users/jpivarski/starred{/owner}{/repo},https://api.github.com/users/jpivarski/subscriptions,https://api.github.com/users/jpivarski/orgs,https://api.github.com/users/jpivarski/repos,https://api.github.com/users/jpivarski/events{/privacy},https://api.github.com/users/jpivarski/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1965203289/reactions,1,0,0,0,0,0,1,0,0,14959
2367,https://api.github.com/repos/rapidsai/cudf/issues/comments/2014035399,https://github.com/rapidsai/cudf/issues/14959#issuecomment-2014035399,https://api.github.com/repos/rapidsai/cudf/issues/14959,2014035399,IC_kwDOBWUGps54C73H,2024-03-21T23:23:38Z,2024-03-21T23:23:38Z,CONTRIBUTOR,"Just wanted to provide a quick status update here. I've put together a prototype of the device data capsule protocols in #15370. It's not usable yet for a number of reasons, largely boiling down to the need for a D2D copy at the moment (although that may still be enough of an improvement over the current D2H2D that our existing to/from_arrow methods do that you'd still find it useful for testing), but we should be able to make some progress on that soon. I've started the discussion on how best to proceed [here](https://github.com/rapidsai/cudf/issues/14926#issuecomment-2014027647).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2014035399/reactions,0,0,0,0,0,0,0,0,0,14959
2368,https://api.github.com/repos/rapidsai/cudf/issues/comments/1931340733,https://github.com/rapidsai/cudf/issues/14975#issuecomment-1931340733,https://api.github.com/repos/rapidsai/cudf/issues/14975,1931340733,IC_kwDOBWUGps5zHeu9,2024-02-07T05:55:55Z,2024-02-07T05:55:55Z,NONE,"A python `Warning` object so we can do managed handling would make sense 

Note we are not `cudf.pandas` users but `cudf`, so our interest would be seeing the same thing there",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1931340733/reactions,0,0,0,0,0,0,0,0,0,14975
2369,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932593639,https://github.com/rapidsai/cudf/issues/14975#issuecomment-1932593639,https://api.github.com/repos/rapidsai/cudf/issues/14975,1932593639,IC_kwDOBWUGps5zMQnn,2024-02-07T18:02:15Z,2024-02-07T18:02:15Z,CONTRIBUTOR,@lmeyerov `cudf` doesn't fall back to CPU so you'd never see this with normal `cudf` usage. Only `cudf.pandas` has CPU fallback behavior. Can you clarify what you mean?,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932593639/reactions,0,0,0,0,0,0,0,0,0,14975
2370,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932932157,https://github.com/rapidsai/cudf/issues/14975#issuecomment-1932932157,https://api.github.com/repos/rapidsai/cudf/issues/14975,1932932157,IC_kwDOBWUGps5zNjQ9,2024-02-07T21:16:19Z,2024-02-07T21:16:19Z,NONE,"Re:cudf, Some reason I thought a few cudf methods will fall back to CPU, like in parsing or others, rather than throwing NotImpl or a warning

Seperately / more broadly, there are some perf gotchas in cudf like where it makes copies or sorts that good code would avoid. A perf tips flag/mode that warns in these cases would be helpful for us, not just for the CPU fallback case. But that is a bigger story.
",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932932157/reactions,1,1,0,0,0,0,0,0,0,14975
2371,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932994115,https://github.com/rapidsai/cudf/issues/14975#issuecomment-1932994115,https://api.github.com/repos/rapidsai/cudf/issues/14975,1932994115,IC_kwDOBWUGps5zNyZD,2024-02-07T21:48:20Z,2024-02-07T21:49:27Z,CONTRIBUTOR,"Good feedback! There are a few cases in I/O where cudf does not offer a GPU-accelerated reader/writer for every format. That's the only exception I can think of right now where cudf executes CPU-only code (it copies to device and returns a GPU dataframe at the end). Those are documented in the notes on this page: https://docs.rapids.ai/api/cudf/stable/user_guide/io/io/

I can think of a few algorithms where cudf has cut down on extraneous copies/sorting over the last few releases (like `drop_duplicates`). If any specific cases come to mind, please file issues for those! We're aiming to reduce intermediate memory usage in cudf and these would likely align with that goal (in addition to improving performance).",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1932994115/reactions,1,0,0,0,0,0,1,0,0,14975
2372,https://api.github.com/repos/rapidsai/cudf/issues/comments/1933056817,https://github.com/rapidsai/cudf/issues/14975#issuecomment-1933056817,https://api.github.com/repos/rapidsai/cudf/issues/14975,1933056817,IC_kwDOBWUGps5zOBsx,2024-02-07T22:42:36Z,2024-02-07T22:42:36Z,NONE,"Yes, my meta is perf warnings mode, like when defaults are slow for conformance reasons and a special calling pattern would make faster, would be very helpful :)",,lmeyerov,4249447,MDQ6VXNlcjQyNDk0NDc=,https://avatars.githubusercontent.com/u/4249447?v=4,,https://api.github.com/users/lmeyerov,https://github.com/lmeyerov,https://api.github.com/users/lmeyerov/followers,https://api.github.com/users/lmeyerov/following{/other_user},https://api.github.com/users/lmeyerov/gists{/gist_id},https://api.github.com/users/lmeyerov/starred{/owner}{/repo},https://api.github.com/users/lmeyerov/subscriptions,https://api.github.com/users/lmeyerov/orgs,https://api.github.com/users/lmeyerov/repos,https://api.github.com/users/lmeyerov/events{/privacy},https://api.github.com/users/lmeyerov/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1933056817/reactions,0,0,0,0,0,0,0,0,0,14975
2373,https://api.github.com/repos/rapidsai/cudf/issues/comments/2125442711,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2125442711,https://api.github.com/repos/rapidsai/cudf/issues/14975,2125442711,IC_kwDOBWUGps5-r66X,2024-05-22T18:04:47Z,2024-05-22T18:04:47Z,CONTRIBUTOR,"> * Error when cudf and pandas produce different outputs. This would be an extra branch within the fast path where the slow path is run even if the fast path succeeds, and then the fast and slow paths are compared for equivalence.

If it's okay with you @mroeschke, can I still work on this component since it covers the [issue](https://github.com/rapidsai/cudf/issues/15817) I opened?",,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2125442711/reactions,0,0,0,0,0,0,0,0,0,14975
2374,https://api.github.com/repos/rapidsai/cudf/issues/comments/2125447431,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2125447431,https://api.github.com/repos/rapidsai/cudf/issues/14975,2125447431,IC_kwDOBWUGps5-r8EH,2024-05-22T18:07:27Z,2024-05-22T18:07:27Z,CONTRIBUTOR,"> If it's okay with you @mroeschke, can I still work on this component since it covers the https://github.com/rapidsai/cudf/issues/15817 I opened?

Yes go for it @Matt711! ",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2125447431/reactions,1,1,0,0,0,0,0,0,0,14975
2375,https://api.github.com/repos/rapidsai/cudf/issues/comments/2137951133,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2137951133,https://api.github.com/repos/rapidsai/cudf/issues/14975,2137951133,IC_kwDOBWUGps5_boud,2024-05-29T17:45:56Z,2024-05-29T17:45:56Z,CONTRIBUTOR,"We could have two debugging mode options (note: we can use different names):
1. `mode.pandas_debugging` 
2. `mode.fallback_debugging` 

(1.) is for when fallback does not occur. It checks that the results from cudf and pandas agree and returns a warning if they do not. I'm working on that option in this PR #15837 .

(2.) is for when fallback does occur. It could return errors on the specific types of fallback mentioned:
> - Out of memory errors, for the sake of planning No OOM related work
> - AttributeErrors for missing functionality
> - TypeErrors for differing function signatures

What do we think about these two options?

cc. @bdice @vyasr @wence- ",,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2137951133/reactions,0,0,0,0,0,0,0,0,0,14975
2376,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138504904,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2138504904,https://api.github.com/repos/rapidsai/cudf/issues/14975,2138504904,IC_kwDOBWUGps5_dv7I,2024-05-30T01:25:30Z,2024-05-30T01:25:30Z,CONTRIBUTOR,"Making these modes independently configurable is definitely what we want, yes. [As I commented on this in #15837, though](https://github.com/rapidsai/cudf/pull/15837#discussion_r1619623069), I don't think options are the right way to expose this. options are user-facing, whereas what we're trying to accomplish here is something for developers. Some environment variables documented in the developer guide are probably closer to what I would envision, especially for the first one (pandas_debugging). I don't see a reason for a user to ever need that one. I could envision exposing some internal APIs to control the second case (fallback_debugging) because in that scenario it could be useful to have the profiler hook into these so that users could collect information on why fallback occurred.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138504904/reactions,0,0,0,0,0,0,0,0,0,14975
2377,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139586354,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2139586354,https://api.github.com/repos/rapidsai/cudf/issues/14975,2139586354,IC_kwDOBWUGps5_h38y,2024-05-30T13:41:59Z,2024-05-30T13:41:59Z,CONTRIBUTOR,Using an environment variable instead of an option is fine with me. I am curious if you have a more specific place in mind in the [Developer Guide](https://docs.rapids.ai/api/cudf/stable/developer_guide/) for documenting the environment variable? ,,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139586354/reactions,0,0,0,0,0,0,0,0,0,14975
2378,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139706355,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2139706355,https://api.github.com/repos/rapidsai/cudf/issues/14975,2139706355,IC_kwDOBWUGps5_iVPz,2024-05-30T14:30:39Z,2024-05-30T14:30:39Z,CONTRIBUTOR,Maybe we can add a new section on the fast-slow-proxy wrapping scheme. It can be mostly stubbed out and we can add info.,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139706355/reactions,0,0,0,0,0,0,0,0,0,14975
2379,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139710391,https://github.com/rapidsai/cudf/issues/14975#issuecomment-2139710391,https://api.github.com/repos/rapidsai/cudf/issues/14975,2139710391,IC_kwDOBWUGps5_iWO3,2024-05-30T14:31:41Z,2024-05-30T14:31:41Z,CONTRIBUTOR,"> Maybe we can add a new section on the fast-slow-proxy wrapping scheme. It can be mostly stubbed out and we can add info.

Yes, and I could add that in a new cudf.pandas section in the Developer Guide?",,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2139710391/reactions,3,3,0,0,0,0,0,0,0,14975
2380,https://api.github.com/repos/rapidsai/cudf/issues/comments/1937872878,https://github.com/rapidsai/cudf/issues/14977#issuecomment-1937872878,https://api.github.com/repos/rapidsai/cudf/issues/14977,1937872878,IC_kwDOBWUGps5zgZfu,2024-02-11T21:18:13Z,2024-02-11T21:18:13Z,NONE,"Looks like this bug is intentional to avoid redundancy. groupby.apply documentation has a similar example of this behavior. 

https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.core.groupby.groupby.groupby.apply/#cudf.core.groupby.groupby.GroupBy.apply 

So I am not sure if it's a bug or a design choice for better performance or any other reason??
",,imusa007,25432842,MDQ6VXNlcjI1NDMyODQy,https://avatars.githubusercontent.com/u/25432842?v=4,,https://api.github.com/users/imusa007,https://github.com/imusa007,https://api.github.com/users/imusa007/followers,https://api.github.com/users/imusa007/following{/other_user},https://api.github.com/users/imusa007/gists{/gist_id},https://api.github.com/users/imusa007/starred{/owner}{/repo},https://api.github.com/users/imusa007/subscriptions,https://api.github.com/users/imusa007/orgs,https://api.github.com/users/imusa007/repos,https://api.github.com/users/imusa007/events{/privacy},https://api.github.com/users/imusa007/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1937872878/reactions,0,0,0,0,0,0,0,0,0,14977
2381,https://api.github.com/repos/rapidsai/cudf/issues/comments/1938791841,https://github.com/rapidsai/cudf/issues/14977#issuecomment-1938791841,https://api.github.com/repos/rapidsai/cudf/issues/14977,1938791841,IC_kwDOBWUGps5zj52h,2024-02-12T14:33:02Z,2024-02-12T14:33:02Z,MEMBER,"Thanks for linking that @imusa007! I did see a few notes in the code about this after raising the issue.

It seems okay to close this issue and mark it as ""wontfix"" for now. Especially if the ""fix"" requires significant time from anyone (I haven't really looked into it yet). With that said, this divergence will require us to implement/maintain a separate code path in dask-cudf for `nunique`. So, we will need to add code either way.",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1938791841/reactions,0,0,0,0,0,0,0,0,0,14977
2382,https://api.github.com/repos/rapidsai/cudf/issues/comments/1939290039,https://github.com/rapidsai/cudf/issues/14977#issuecomment-1939290039,https://api.github.com/repos/rapidsai/cudf/issues/14977,1939290039,IC_kwDOBWUGps5zlze3,2024-02-12T18:18:57Z,2024-02-12T18:18:57Z,CONTRIBUTOR,"> So I am not sure if it's a bug or a design choice for better performance or any other reason??

@imusa007 I believe the reason was that we couldn't figure out the rules pandas uses to decide whether or not to return the index. If we can pin down exactly when to return the index versus not, we can/should match pandas behaviour.

FYI: @mroeschke just in case you happen to know where to look in the pandas code base/documentation.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1939290039/reactions,0,0,0,0,0,0,0,0,0,14977
2383,https://api.github.com/repos/rapidsai/cudf/issues/comments/1939510604,https://github.com/rapidsai/cudf/issues/14977#issuecomment-1939510604,https://api.github.com/repos/rapidsai/cudf/issues/14977,1939510604,IC_kwDOBWUGps5zmpVM,2024-02-12T20:21:39Z,2024-02-12T20:21:39Z,CONTRIBUTOR,"Yeah unfortunately pandas doesn't have a clear rule for `groupby.apply` what type of index is returned when. Some factor that determine the resulting index is the use of `as_index` & whether the UDF returns scalars/same shape as input/mutates input.

A user tried to bravely document the various scenarios but I am not sure how up to date this is: https://github.com/pandas-dev/pandas/issues/22545#issue-355718906",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1939510604/reactions,0,0,0,0,0,0,0,0,0,14977
2384,https://api.github.com/repos/rapidsai/cudf/issues/comments/1955016485,https://github.com/rapidsai/cudf/issues/15086#issuecomment-1955016485,https://api.github.com/repos/rapidsai/cudf/issues/15086,1955016485,IC_kwDOBWUGps50hy8l,2024-02-20T20:27:08Z,2024-02-20T20:27:08Z,CONTRIBUTOR,Thanks for reporting. I'm currently working on a refactor of our `rolling` Python implementation and I'll see if I can include this there! ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1955016485/reactions,0,0,0,0,0,0,0,0,0,15086
2385,https://api.github.com/repos/rapidsai/cudf/issues/comments/1959313497,https://github.com/rapidsai/cudf/issues/15116#issuecomment-1959313497,https://api.github.com/repos/rapidsai/cudf/issues/15116,1959313497,IC_kwDOBWUGps50yMBZ,2024-02-22T12:05:32Z,2024-02-22T12:05:32Z,CONTRIBUTOR,I think this is a legitimate bug. Thanks for reporting!,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1959313497/reactions,0,0,0,0,0,0,0,0,0,15116
2386,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967356362,https://github.com/rapidsai/cudf/issues/15116#issuecomment-1967356362,https://api.github.com/repos/rapidsai/cudf/issues/15116,1967356362,IC_kwDOBWUGps51Q3nK,2024-02-27T18:30:20Z,2024-02-27T18:30:20Z,CONTRIBUTOR,Also https://github.com/rapidsai/cudf/issues/12133,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967356362/reactions,0,0,0,0,0,0,0,0,0,15116
2387,https://api.github.com/repos/rapidsai/cudf/issues/comments/1959604182,https://github.com/rapidsai/cudf/issues/15118#issuecomment-1959604182,https://api.github.com/repos/rapidsai/cudf/issues/15118,1959604182,IC_kwDOBWUGps50zS_W,2024-02-22T14:46:00Z,2024-02-22T14:46:00Z,CONTRIBUTOR,"Thanks, Marco! It's unlikely the team will be able to take on this soon; but until someone does, hopefully the below is a satisfactory workaround for your needs:


```python
In [133]: df = cudf.DataFrame({'a': [1, 1, 1, 2, 2], 'b': [1, 2, 3, 4, 5], 'c': [1, 2, 3, 4, 5]})

In [134]: result = df.groupby('a').agg({'b': ['min', 'max'], 'c': ['sum']})

In [135]: result.columns = [""_"".join(names) for names in result.columns.tolist()]

In [136]: result
Out[136]:
   b_min  b_max  c_sum
a
1      1      3      6
2      4      5      9
```",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1959604182/reactions,1,1,0,0,0,0,0,0,0,15118
2388,https://api.github.com/repos/rapidsai/cudf/issues/comments/2003832378,https://github.com/rapidsai/cudf/issues/15118#issuecomment-2003832378,https://api.github.com/repos/rapidsai/cudf/issues/15118,2003832378,IC_kwDOBWUGps53cA46,2024-03-18T12:53:33Z,2024-03-18T12:53:33Z,NONE,"thanks for your reply

this is fine if I want the output names to be
```
[""_"".join(names) for names in result.columns.tolist()]
```
but how much can I trust the order in other cases? say if I wanted

```
df.groupby(""A"").agg(
    foo=cudf.NamedAgg(column=""B"", aggfunc=""min""),
    bar=cudf.NamedAgg(column=""C"", aggfunc=""sum"")
)
```",,MarcoGorelli,33491632,MDQ6VXNlcjMzNDkxNjMy,https://avatars.githubusercontent.com/u/33491632?v=4,,https://api.github.com/users/MarcoGorelli,https://github.com/MarcoGorelli,https://api.github.com/users/MarcoGorelli/followers,https://api.github.com/users/MarcoGorelli/following{/other_user},https://api.github.com/users/MarcoGorelli/gists{/gist_id},https://api.github.com/users/MarcoGorelli/starred{/owner}{/repo},https://api.github.com/users/MarcoGorelli/subscriptions,https://api.github.com/users/MarcoGorelli/orgs,https://api.github.com/users/MarcoGorelli/repos,https://api.github.com/users/MarcoGorelli/events{/privacy},https://api.github.com/users/MarcoGorelli/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2003832378/reactions,0,0,0,0,0,0,0,0,0,15118
2389,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960276320,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1960276320,https://api.github.com/repos/rapidsai/cudf/issues/15119,1960276320,IC_kwDOBWUGps5013Fg,2024-02-22T20:38:37Z,2024-02-22T20:38:37Z,CONTRIBUTOR,"For 1, here's pandas implementation for finding the window bounds (defined in terms of start/end indices instead of the end - start difference (?)) https://github.com/pandas-dev/pandas/blob/4ed67ac9ef3d9fde6fb8441bc9ea33c0d786649e/pandas/_libs/window/indexers.pyx#L107. pandas uses a sliding window algorithm for this case

For 2, I suppose you could defined the non-grouped case as the 1 large group so that `group_range_rolling_window` could be used",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960276320/reactions,0,0,0,0,0,0,0,0,0,15119
2390,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960324724,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1960324724,https://api.github.com/repos/rapidsai/cudf/issues/15119,1960324724,IC_kwDOBWUGps502C50,2024-02-22T21:14:30Z,2024-02-22T21:14:30Z,CONTRIBUTOR,"> For 2, I suppose you could defined the non-grouped case as the 1 large group so that group_range_rolling_window could be used

I did experiment with this and it is still somewhat slow. Perhaps libcudf is serializing within groups.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1960324724/reactions,0,0,0,0,0,0,0,0,0,15119
2391,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967334636,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1967334636,https://api.github.com/repos/rapidsai/cudf/issues/15119,1967334636,IC_kwDOBWUGps51QyTs,2024-02-27T18:17:44Z,2024-02-27T18:17:44Z,CONTRIBUTOR,"This is not due to the computation of the rolling window sizes, but rather that the libcudf rolling window computation is slow, I think. Here's an example to show that:

```
import cudf
import cudf._lib as libcudf
import numpy as np
dt = cudf.date_range(""2001-01-01"", ""2002-01-01"", freq=""1s"")
df = cudf.DataFrame({""x"": np.random.rand(len(dt))}, index=dt)
max_window_size = 86400
pre_window = cudf.core.column.as_column(
    np.concatenate([np.arange(1, max_window_size, dtype=""int32""), np.full(len(df) - (max_window_size - 1), max_window_size, dtype=""int32"")])
)
source_column = df[""x""]._column
follow_window = cudf.core.column.full(len(df), 0, dtype=""int32"")
window = None
min_periods = 1
center = False
op = ""sum""
agg_params = {}

result = libcudf.rolling.rolling(source_column, pre_window, follow_window, window, min_periods, center, op, agg_params)
```

The call to `rolling` takes 10 seconds for me. It's, in this example, linear in the size of the windows (change `max_window_size`).

I think that scaling kind of makes sense in that irrespective of the window size, one produces the same output windows, but each window is O(window_size) large, and the window-by-window approach implemented then scales in the same way.

I was wondering if there's some kind of fourier-space approach that one might use, but the potential for non-equispaced samples complicates things (there are non-uniform FFT methods but they are non-exact). And my brain is not sufficiently in gear.

In any case, it feels like this should be able to run faster than it does, and I wonder if it can do so by a combination of change in parallelisation strategy and/or clever algorithmic changes.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967334636/reactions,0,0,0,0,0,0,0,0,0,15119
2392,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967359446,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1967359446,https://api.github.com/repos/rapidsai/cudf/issues/15119,1967359446,IC_kwDOBWUGps51Q4XW,2024-02-27T18:32:36Z,2024-02-27T18:32:36Z,CONTRIBUTOR,cc @mythrocks ,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1967359446/reactions,0,0,0,0,0,0,0,0,0,15119
2393,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971085652,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971085652,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971085652,IC_kwDOBWUGps51fGFU,2024-02-29T12:57:48Z,2024-02-29T13:04:26Z,CONTRIBUTOR,"> I was wondering if there's some kind of fourier-space approach that one might use, but the potential for non-equispaced samples complicates things (there are non-uniform FFT methods but they are non-exact). And my brain is not sufficiently in gear.

No FFTs needed I think, this should be solvable in $\mathcal{O}(n)$ time for an $n$-row column via a summed-area table approach (AKA, in 1D, a prefix scan) for rolling operations whose aggregation op has an inverse.

This would be a two-pass algorithm I think, let's take `sum` as the example op.

Pass 1: compute `scan(+, column) -> scan_column`
Pass 2: For each row `i`, the result is `scan_column[i + forward_size[i]] - scan_column[i - backward_size[i]]`

For things like variance and covariance, one needs to use some suitable adaptation of Welford's online approach. Some relevant recent papers:

- E. Schubert and M. Gertz, _Numerically stable parallel computation of (co-)variance_ (2018), https://doi.org/10.1145/3221269.3223036
- A. Chmielowiec, _Algorithm for error-free determination of the variance of all contiguous subsequences and fixed-length contiguous subsequences for a sequence of industrial measurement data_ (2021), https://doi.org/10.1007/s00180-021-01096-1

Edit: one would have to worry (more) about overflow than with the naive approach.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971085652/reactions,0,0,0,0,0,0,0,0,0,15119
2394,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971114360,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971114360,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971114360,IC_kwDOBWUGps51fNF4,2024-02-29T13:14:27Z,2024-02-29T13:14:27Z,CONTRIBUTOR,"There's almost definitely two inefficiencies at play here then, computing the window sizes given an offset is slower than we'd like, _and_ the rolling window aggregation implementation is slower than we'd like.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971114360/reactions,0,0,0,0,0,0,0,0,0,15119
2395,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971122104,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971122104,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971122104,IC_kwDOBWUGps51fO-4,2024-02-29T13:19:01Z,2024-02-29T13:19:01Z,CONTRIBUTOR,"> computing the window sizes given an offset is slower than we'd like

I didn't really manage to measure that part as a noticeable problem, but maybe I was doing something different.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971122104/reactions,0,0,0,0,0,0,0,0,0,15119
2396,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971230361,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971230361,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971230361,IC_kwDOBWUGps51fpaZ,2024-02-29T14:12:58Z,2024-02-29T14:12:58Z,CONTRIBUTOR,In your benchmark you're constructing the inputs to the libcudf `rolling` function by hand. But going through the public API takes you down a code path that uses a numba kernel to do that. ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971230361/reactions,0,0,0,0,0,0,0,0,0,15119
2397,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971379502,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971379502,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971379502,IC_kwDOBWUGps51gN0u,2024-02-29T15:25:51Z,2024-02-29T15:25:51Z,CONTRIBUTOR,"> In your benchmark you're constructing the inputs to the libcudf `rolling` function by hand. But going through the public API takes you down a code path that uses a numba kernel to do that.

Ah sorry, yes, now I see it. I was tricked by the lack of synchronisation in the numba kernel launch.

Yes, that kernel has exactly the same problem the rolling window kernel does. Each row linearly searches backwards in the column until the difference between the preceding entry and the current one is larger than the requested offset.

I think you can do this by doing a reverse prefix scan of the differences between the entries in the to-be-windowed column, and then ... (brain out of gear again)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971379502/reactions,1,0,0,1,0,0,0,0,0,15119
2398,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971649735,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1971649735,https://api.github.com/repos/rapidsai/cudf/issues/15119,1971649735,IC_kwDOBWUGps51hPzH,2024-02-29T17:47:02Z,2024-02-29T17:47:02Z,CONTRIBUTOR,cc @harrism as local scan expert.,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971649735/reactions,0,0,0,0,0,0,0,0,0,15119
2399,https://api.github.com/repos/rapidsai/cudf/issues/comments/1972894701,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1972894701,https://api.github.com/repos/rapidsai/cudf/issues/15119,1972894701,IC_kwDOBWUGps51l_vt,2024-03-01T10:07:30Z,2024-03-01T10:07:30Z,CONTRIBUTOR,"Just to note one further thing while it is in my thoughts, the (potential) downside to doing a full-column scan to implement this is, in addition to overflow, numerical roundoff if using floating point types[^1].


[^1]: The Chiemlowiec paper linked above provides bounds on the number of bits required to compute mean and variance if data are represented in fixed point. If the data are normally distributed with small(ish) variance, these bounds are not too bad, but if they are heavy-tailed they overflow 64bit.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1972894701/reactions,0,0,0,0,0,0,0,0,0,15119
2400,https://api.github.com/repos/rapidsai/cudf/issues/comments/1973339265,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1973339265,https://api.github.com/repos/rapidsai/cudf/issues/15119,1973339265,IC_kwDOBWUGps51nsSB,2024-03-01T14:53:14Z,2024-03-04T22:12:40Z,CONTRIBUTOR,"The general term of art here is range queries. If the binary operator induces a group structure on the data then these can be done as suggested above (via prefix scans). If it only induces a semigroup structure (no inverse), for example rolling-min, then one needs to build more sophisticated data structures (A.C. Yao, _Space-time tradeoff for answering range queries_ (1982), https://doi.org/10.1145/800070.802185), but can be done in at worse $\Theta{(c n)}$ space and $\mathcal{O}(\alpha_c(n))$ time, where $\alpha_c$ is the inverse Ackermann function (so effectively constant time for any feasible $n$)).

Since range minimum queries pop up a lot in geospatial analysis, I wonder if the cuspatial team implemented them.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1973339265/reactions,0,0,0,0,0,0,0,0,0,15119
2401,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974052731,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1974052731,https://api.github.com/repos/rapidsai/cudf/issues/15119,1974052731,IC_kwDOBWUGps51qad7,2024-03-01T23:08:00Z,2024-03-01T23:08:00Z,MEMBER,"> Note that running the code through a profiler will show execution time being spent in the next CUDA kernel (column.full) - but that's a red herring I think, because there's no synchronization after the numba kernel call.

I don't think this should be true. I think Nsight systems can distinguish the execution time of kernels even without synchronisation. If you time manually in host code then you need to synchronize to time accurately.",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974052731/reactions,0,0,0,0,0,0,0,0,0,15119
2402,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974064821,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1974064821,https://api.github.com/repos/rapidsai/cudf/issues/15119,1974064821,IC_kwDOBWUGps51qda1,2024-03-01T23:24:09Z,2024-03-01T23:24:09Z,CONTRIBUTOR,"Oh sorry, I meant a host profiler (in this case the Python profiler `cprofile`)",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974064821/reactions,1,1,0,0,0,0,0,0,0,15119
2403,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977523006,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1977523006,https://api.github.com/repos/rapidsai/cudf/issues/15119,1977523006,IC_kwDOBWUGps513ps-,2024-03-04T21:50:32Z,2024-03-04T21:50:32Z,MEMBER,"Regarding the [numba kernel to find the windows](https://github.com/rapidsai/cudf/blob/6f6e521257dce5732eea7b6b9d56243f8b0a69cc/python/cudf/cudf/utils/cudautils.py#L17), a first step is usually to move this to C++. When I search the codebase for this it only finds the definition, no calls. However the non-numba version is called, here: https://github.com/rapidsai/cudf/blob/d158ccdbe651952bd649cb0f17c41467c5209824/python/cudf/cudf/core/window/rolling.py#L483

So is this numba kernel actually being used?

Next question, is the `arr` data passed to it random, or does it happen to be ordered? If the latter, then this could be replaced by a call to `thrust::lower_bound` in C++ (with fancy iterators).
",,harrism,783069,MDQ6VXNlcjc4MzA2OQ==,https://avatars.githubusercontent.com/u/783069?v=4,,https://api.github.com/users/harrism,https://github.com/harrism,https://api.github.com/users/harrism/followers,https://api.github.com/users/harrism/following{/other_user},https://api.github.com/users/harrism/gists{/gist_id},https://api.github.com/users/harrism/starred{/owner}{/repo},https://api.github.com/users/harrism/subscriptions,https://api.github.com/users/harrism/orgs,https://api.github.com/users/harrism/repos,https://api.github.com/users/harrism/events{/privacy},https://api.github.com/users/harrism/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977523006/reactions,0,0,0,0,0,0,0,0,0,15119
2404,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977565540,https://github.com/rapidsai/cudf/issues/15119#issuecomment-1977565540,https://api.github.com/repos/rapidsai/cudf/issues/15119,1977565540,IC_kwDOBWUGps5130Fk,2024-03-04T22:18:19Z,2024-03-04T22:18:19Z,CONTRIBUTOR,"> Regarding the [numba kernel to find the windows](https://github.com/rapidsai/cudf/blob/6f6e521257dce5732eea7b6b9d56243f8b0a69cc/python/cudf/cudf/utils/cudautils.py#L17), a first step is usually to move this to C++. When I search the codebase for this it only finds the definition, no calls. However the non-numba version is called, here:
> 
> https://github.com/rapidsai/cudf/blob/d158ccdbe651952bd649cb0f17c41467c5209824/python/cudf/cudf/core/window/rolling.py#L483
> 
> So is this numba kernel actually being used?
> 
> Next question, is the `arr` data passed to it random, or does it happen to be ordered? If the latter, then this could be replaced by a call to `thrust::lower_bound` in C++ (with fancy iterators).

The non-numba version calls the numba version: https://github.com/rapidsai/cudf/blob/6f6e521257dce5732eea7b6b9d56243f8b0a69cc/python/cudf/cudf/utils/cudautils.py#L32


I am not sure if the rolling window API allows non-sorted arrays but I would have thought not, so arr is _probably_ (someone else to confirm) required to be sorted in ascending order.
",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977565540/reactions,0,0,0,0,0,0,0,0,0,15119
2405,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964582756,https://github.com/rapidsai/cudf/issues/15127#issuecomment-1964582756,https://api.github.com/repos/rapidsai/cudf/issues/15127,1964582756,IC_kwDOBWUGps51GSdk,2024-02-26T16:30:38Z,2024-02-26T16:30:38Z,CONTRIBUTOR,"Thanks - I think this should be somewhat easy to implement. Here's the part of our CSV reader implementation that handles the `index_col` argument:

https://github.com/rapidsai/cudf/blob/7d2da0e5bd9bc178ab394506e58207667c59eedb/python/cudf/cudf/_lib/csv.pyx#L458-L470

It looks like we should handle lists-of-int here in addition to just ints.",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964582756/reactions,0,0,0,0,0,0,0,0,0,15127
2406,https://api.github.com/repos/rapidsai/cudf/issues/comments/1973847402,https://github.com/rapidsai/cudf/issues/15127#issuecomment-1973847402,https://api.github.com/repos/rapidsai/cudf/issues/15127,1973847402,IC_kwDOBWUGps51poVq,2024-03-01T20:14:36Z,2024-03-01T20:14:36Z,NONE,I can take this. I can't find where to put the test cases though. Where are the `read_*` functions tested? I found python/cudf/cudf/tests/input_output/test_csv.py but it's empty at the moment.,,amanlai,70603274,MDQ6VXNlcjcwNjAzMjc0,https://avatars.githubusercontent.com/u/70603274?v=4,,https://api.github.com/users/amanlai,https://github.com/amanlai,https://api.github.com/users/amanlai/followers,https://api.github.com/users/amanlai/following{/other_user},https://api.github.com/users/amanlai/gists{/gist_id},https://api.github.com/users/amanlai/starred{/owner}{/repo},https://api.github.com/users/amanlai/subscriptions,https://api.github.com/users/amanlai/orgs,https://api.github.com/users/amanlai/repos,https://api.github.com/users/amanlai/events{/privacy},https://api.github.com/users/amanlai/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1973847402/reactions,0,0,0,0,0,0,0,0,0,15127
2407,https://api.github.com/repos/rapidsai/cudf/issues/comments/1975521043,https://github.com/rapidsai/cudf/issues/15127#issuecomment-1975521043,https://api.github.com/repos/rapidsai/cudf/issues/15127,1975521043,IC_kwDOBWUGps51wA8T,2024-03-04T01:57:44Z,2024-03-04T01:57:44Z,CONTRIBUTOR,Go ahead and add your tests to that file. Over time we want to migrate the CSV tests to that module anyway.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1975521043/reactions,0,0,0,0,0,0,0,0,0,15127
2408,https://api.github.com/repos/rapidsai/cudf/issues/comments/2084475495,https://github.com/rapidsai/cudf/issues/15127#issuecomment-2084475495,https://api.github.com/repos/rapidsai/cudf/issues/15127,2084475495,IC_kwDOBWUGps58PpJn,2024-04-30T06:29:19Z,2024-04-30T06:29:19Z,CONTRIBUTOR,"@amanlai, still working on this?",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2084475495/reactions,0,0,0,0,0,0,0,0,0,15127
2409,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094056830,https://github.com/rapidsai/cudf/issues/15127#issuecomment-2094056830,https://api.github.com/repos/rapidsai/cudf/issues/15127,2094056830,IC_kwDOBWUGps580MV-,2024-05-04T07:02:05Z,2024-05-04T07:02:05Z,NONE,"Hi @er-eis @shwina ,
If no one is following up on this issue, I'd love to give it a try!",,MananDoshi1301,65040749,MDQ6VXNlcjY1MDQwNzQ5,https://avatars.githubusercontent.com/u/65040749?v=4,,https://api.github.com/users/MananDoshi1301,https://github.com/MananDoshi1301,https://api.github.com/users/MananDoshi1301/followers,https://api.github.com/users/MananDoshi1301/following{/other_user},https://api.github.com/users/MananDoshi1301/gists{/gist_id},https://api.github.com/users/MananDoshi1301/starred{/owner}{/repo},https://api.github.com/users/MananDoshi1301/subscriptions,https://api.github.com/users/MananDoshi1301/orgs,https://api.github.com/users/MananDoshi1301/repos,https://api.github.com/users/MananDoshi1301/events{/privacy},https://api.github.com/users/MananDoshi1301/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094056830/reactions,0,0,0,0,0,0,0,0,0,15127
2410,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094258831,https://github.com/rapidsai/cudf/issues/15127#issuecomment-2094258831,https://api.github.com/repos/rapidsai/cudf/issues/15127,2094258831,IC_kwDOBWUGps5809qP,2024-05-04T15:28:38Z,2024-05-04T15:28:38Z,CONTRIBUTOR,i'm working on other things atm,,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094258831/reactions,0,0,0,0,0,0,0,0,0,15127
2411,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094939611,https://github.com/rapidsai/cudf/issues/15127#issuecomment-2094939611,https://api.github.com/repos/rapidsai/cudf/issues/15127,2094939611,IC_kwDOBWUGps583j3b,2024-05-05T20:34:13Z,2024-05-05T20:34:13Z,NONE,"Great! 
Then I am giving it a try",,MananDoshi1301,65040749,MDQ6VXNlcjY1MDQwNzQ5,https://avatars.githubusercontent.com/u/65040749?v=4,,https://api.github.com/users/MananDoshi1301,https://github.com/MananDoshi1301,https://api.github.com/users/MananDoshi1301/followers,https://api.github.com/users/MananDoshi1301/following{/other_user},https://api.github.com/users/MananDoshi1301/gists{/gist_id},https://api.github.com/users/MananDoshi1301/starred{/owner}{/repo},https://api.github.com/users/MananDoshi1301/subscriptions,https://api.github.com/users/MananDoshi1301/orgs,https://api.github.com/users/MananDoshi1301/repos,https://api.github.com/users/MananDoshi1301/events{/privacy},https://api.github.com/users/MananDoshi1301/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094939611/reactions,0,0,0,0,0,0,0,0,0,15127
2412,https://api.github.com/repos/rapidsai/cudf/issues/comments/1962193908,https://github.com/rapidsai/cudf/issues/15136#issuecomment-1962193908,https://api.github.com/repos/rapidsai/cudf/issues/15136,1962193908,IC_kwDOBWUGps509LP0,2024-02-24T01:09:01Z,2024-02-24T01:09:01Z,CONTRIBUTOR,CC @wence- ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1962193908/reactions,0,0,0,0,0,0,0,0,0,15136
2413,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964058384,https://github.com/rapidsai/cudf/issues/15136#issuecomment-1964058384,https://api.github.com/repos/rapidsai/cudf/issues/15136,1964058384,IC_kwDOBWUGps51EScQ,2024-02-26T12:41:07Z,2024-02-26T12:41:07Z,CONTRIBUTOR,"I think we should probably:

1. Continue the current practice of just spelling out the different variants in the `cpdef` layer
2. Provide `def`-only functions that expose the (no-default) kwarg setup.

If we are doing (2), then I think we could also think if we want to provide a slightly more python API to the `Table` and `Column` algorithms (perhaps as namespaced methods on the objects)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1964058384/reactions,0,0,0,0,0,0,0,0,0,15136
2414,https://api.github.com/repos/rapidsai/cudf/issues/comments/1988098067,https://github.com/rapidsai/cudf/issues/15183#issuecomment-1988098067,https://api.github.com/repos/rapidsai/cudf/issues/15183,1988098067,IC_kwDOBWUGps52f_gT,2024-03-11T10:31:05Z,2024-03-11T10:31:15Z,CONTRIBUTOR,"wrt binops on columns, adding some sugar in the python wrappers is probably not a big deal. However, usage would likely be quite noisy, since I would not want to add dtype casting to the magic, so users would probably have to do `a = plc.unary.cast(a) + b` anyway ",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1988098067/reactions,0,0,0,0,0,0,0,0,0,15183
2415,https://api.github.com/repos/rapidsai/cudf/issues/comments/1995990215,https://github.com/rapidsai/cudf/issues/15183#issuecomment-1995990215,https://api.github.com/repos/rapidsai/cudf/issues/15183,1995990215,IC_kwDOBWUGps52-GTH,2024-03-13T22:19:45Z,2024-03-13T22:19:45Z,CONTRIBUTOR,"Agreed, pylibcudf should have no hidden performance traps.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1995990215/reactions,0,0,0,0,0,0,0,0,0,15183
2416,https://api.github.com/repos/rapidsai/cudf/issues/comments/1970280058,https://github.com/rapidsai/cudf/issues/15185#issuecomment-1970280058,https://api.github.com/repos/rapidsai/cudf/issues/15185,1970280058,IC_kwDOBWUGps51cBZ6,2024-02-29T02:23:33Z,2024-02-29T02:23:33Z,CONTRIBUTOR,An interesting interaction with https://github.com/rapidsai/cudf/issues/15186: datasource can prevent full reading of the next byte range by limiting the returned data to the mapped range. This means that fixing https://github.com/rapidsai/cudf/issues/15186 would increase the IO overhead in this issue.,,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1970280058/reactions,0,0,0,0,0,0,0,0,0,15185
2417,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971352438,https://github.com/rapidsai/cudf/issues/15192#issuecomment-1971352438,https://api.github.com/repos/rapidsai/cudf/issues/15192,1971352438,IC_kwDOBWUGps51gHN2,2024-02-29T15:12:39Z,2024-02-29T15:12:39Z,CONTRIBUTOR,Note that we support passing a pandas [BaseIndexer](https://pandas.pydata.org/docs/reference/api/pandas.api.indexers.BaseIndexer.html) object as the input to `rolling()`. Likely we could just reuse that to implement `closed=`.,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1971352438/reactions,0,0,0,0,0,0,0,0,0,15192
2418,https://api.github.com/repos/rapidsai/cudf/issues/comments/1972056156,https://github.com/rapidsai/cudf/issues/15193#issuecomment-1972056156,https://api.github.com/repos/rapidsai/cudf/issues/15193,1972056156,IC_kwDOBWUGps51izBc,2024-02-29T22:10:42Z,2024-02-29T22:10:42Z,CONTRIBUTOR,"Other relevant issues:
- #5097 
- #13678 ",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1972056156/reactions,0,0,0,0,0,0,0,0,0,15193
2419,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974197271,https://github.com/rapidsai/cudf/issues/15193#issuecomment-1974197271,https://api.github.com/repos/rapidsai/cudf/issues/15193,1974197271,IC_kwDOBWUGps51q9wX,2024-03-02T02:11:49Z,2024-03-02T02:11:49Z,CONTRIBUTOR,"One important correction to the table above, nanoarrow does not support scalars and neither does the Arrow C data interface, which focuses only on arrays. Previously this was a significant concern due to concerns with Python interoperability, but it looks like pyarrow 13 patched in some critical support for scalar->array conversion that ought to make this concern moot for us now. See #15213",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974197271/reactions,0,0,0,0,0,0,0,0,0,15193
2420,https://api.github.com/repos/rapidsai/cudf/issues/comments/1984848558,https://github.com/rapidsai/cudf/issues/15193#issuecomment-1984848558,https://api.github.com/repos/rapidsai/cudf/issues/15193,1984848558,IC_kwDOBWUGps52TmKu,2024-03-08T00:42:09Z,2024-03-08T00:42:09Z,CONTRIBUTOR,"I've substantially updated this issue with a more holistic discussion of how we can stage the removal of Arrow at different layers of our library (C++, Cython, Python).",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1984848558/reactions,1,0,0,0,0,0,1,0,0,15193
2421,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992332674,https://github.com/rapidsai/cudf/issues/15193#issuecomment-1992332674,https://api.github.com/repos/rapidsai/cudf/issues/15193,1992332674,IC_kwDOBWUGps52wJWC,2024-03-12T18:52:26Z,2024-03-12T18:53:04Z,CONTRIBUTOR,"Just wanted to point out that a big step towards this is the work started in https://github.com/rapidsai/cudf/pull/15047 and discussed in https://github.com/rapidsai/cudf/issues/14926. Once the `to_arrow_device` and `from_arrow_device` functionality is crafted, it should be pretty simple to re-implement several of the interoperability areas in terms of the Arrow C Data and Device interfaces, making strides towards eliminating the need for libarrow as a dependency in favor of nanoarrow

EDIT: Just re-read and saw this was already mentioned in the OP.... oops :smile: ",,zeroshade,555095,MDQ6VXNlcjU1NTA5NQ==,https://avatars.githubusercontent.com/u/555095?v=4,,https://api.github.com/users/zeroshade,https://github.com/zeroshade,https://api.github.com/users/zeroshade/followers,https://api.github.com/users/zeroshade/following{/other_user},https://api.github.com/users/zeroshade/gists{/gist_id},https://api.github.com/users/zeroshade/starred{/owner}{/repo},https://api.github.com/users/zeroshade/subscriptions,https://api.github.com/users/zeroshade/orgs,https://api.github.com/users/zeroshade/repos,https://api.github.com/users/zeroshade/events{/privacy},https://api.github.com/users/zeroshade/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992332674/reactions,2,2,0,0,0,0,0,0,0,15193
2422,https://api.github.com/repos/rapidsai/cudf/issues/comments/1995979860,https://github.com/rapidsai/cudf/issues/15193#issuecomment-1995979860,https://api.github.com/repos/rapidsai/cudf/issues/15193,1995979860,IC_kwDOBWUGps52-DxU,2024-03-13T22:11:24Z,2024-03-13T22:11:24Z,CONTRIBUTOR,Yup! Your PR was top of mind while writing up this issue!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1995979860/reactions,0,0,0,0,0,0,0,0,0,15193
2423,https://api.github.com/repos/rapidsai/cudf/issues/comments/1976255700,https://github.com/rapidsai/cudf/issues/15198#issuecomment-1976255700,https://api.github.com/repos/rapidsai/cudf/issues/15198,1976255700,IC_kwDOBWUGps51y0TU,2024-03-04T10:26:50Z,2024-03-04T10:26:50Z,CONTRIBUTOR,"I think there should be no default parameters, to force the python-side caller to be fully explicit about stream and memory management.

My rationale is that since RMM objects are (deliberately) not smart pointers, there is no way to safely take ownership of an `rmm::device_buffer` from Python. Specifically, if I am passed a `device_buffer` whose memory resource is of a provenance I do not control, I cannot guarantee that I keep the memory resource alive for the lifetime of the buffer.

Indeed, in RMM, we _don't even try_! 

https://github.com/rapidsai/rmm/blob/f132d4b0daa976e1ec6cbcef24f5454fe510a394/python/rmm/_lib/device_buffer.pyx#L160-L171

We just do:
```cython
        buf.c_obj = move(ptr)
        buf.mr = get_current_device_resource()
```

and fingers crossed, `ptr.mr` is the same as `get_current_device_resource()`.

There's no way to work around this, so really the only safe way is to document in RMM that if taking ownership of a `device_buffer` from Python, one _must_ only do so when the buffer has been allocated via a memory resource that the python process controls. In libcudf, we can always pass a memory resource in to any allocating routines, so if we do that from the python side with a memory resource whose lifetime we control, we can match the required contract and ensure that we do things safely.

Right now, everything works through happenstance.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1976255700/reactions,0,0,0,0,0,0,0,0,0,15198
2424,https://api.github.com/repos/rapidsai/cudf/issues/comments/1976349972,https://github.com/rapidsai/cudf/issues/15198#issuecomment-1976349972,https://api.github.com/repos/rapidsai/cudf/issues/15198,1976349972,IC_kwDOBWUGps51zLUU,2024-03-04T11:17:08Z,2024-03-04T11:17:08Z,CONTRIBUTOR,I've opened https://github.com/rapidsai/rmm/issues/1492 to clarify the requirements in docs on the RMM side.,,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1976349972/reactions,0,0,0,0,0,0,0,0,0,15198
2425,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977153884,https://github.com/rapidsai/cudf/issues/15198#issuecomment-1977153884,https://api.github.com/repos/rapidsai/cudf/issues/15198,1977153884,IC_kwDOBWUGps512Plc,2024-03-04T17:56:43Z,2024-03-04T17:56:43Z,CONTRIBUTOR,"Right, the mr discussion is in #14229.

Playing devil's advocate: while the pitfalls of default mrs are clear, that also makes the overall API very cumbersome when you have a libcudf API with 7 parameters (including stream/mr) of which 5 are defaulted because there are sensible choices. This would force users to also provide the other 3 in addition to stream/mr.

If we restrict the ""no defaults"" choice to only APIs then it would still allow us to make some improvements like those suggested in #15130, but if we disallowed defaults everywhere it could have additional impacts on how much syntactic sugar we can add to the pylibcudf API in a performant manner.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1977153884/reactions,0,0,0,0,0,0,0,0,0,15198
2426,https://api.github.com/repos/rapidsai/cudf/issues/comments/1979113843,https://github.com/rapidsai/cudf/issues/15198#issuecomment-1979113843,https://api.github.com/repos/rapidsai/cudf/issues/15198,1979113843,IC_kwDOBWUGps519uFz,2024-03-05T16:04:21Z,2024-03-05T16:04:21Z,CONTRIBUTOR,"I think I am advocating only that the wrapping of the libcudf API provides no defaults. I would alternately be happy if the `cpdef` functions took keyword defaulted arguments for stream and mr (so that one can provide, say, the mr but not the stream if one wants)",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1979113843/reactions,0,0,0,0,0,0,0,0,0,15198
2427,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148389008,https://github.com/rapidsai/cudf/issues/15199#issuecomment-2148389008,https://api.github.com/repos/rapidsai/cudf/issues/15199,2148389008,IC_kwDOBWUGps6ADdCQ,2024-06-04T20:46:34Z,2024-06-04T20:46:34Z,CONTRIBUTOR,"I have worries about the run-end encoding.  On the one hand, it is compatible with what pyArrow is doing.  So that's good.  And **run-end** *is* easier to use than **run-length** because you can search through it more quickly.  So there's upside there, too.

The downside with run-end encoding, for parquet files, is that they don't compress as well as run-length encoding.  (Because lengths are fewer bits than ends.)  So, it makes sense that the Apache developers of the parquet format selected run-length and not run-end.

So the question is, are we still getting a good performance improvement with this plan?  I worry that we won't because the transcoding will be slow, because it is dominated by the memory bandwidth.

---

Currently, without any RLE support, a normal database query runs like this:

1. Decompress parquet file. (gzip/zstd/etc)
2. Decode RLE columns.
3. Process query on decoded data.

In the image below, we can see step 2, where we decode RLE columns (3 of them in this case).  It takes 43.2ms.  And then we perform a group-by operation, which is taking 4.4ms. 
![image](https://github.com/rapidsai/cudf/assets/69258779/6c072df4-c95a-48a5-9462-93f749d5fc2e)

With RLE processing support, it can run like this:

1. Decompress parquet file into RLE-encoded data. (gzip/zstd/etc)
2. Process query on RLE-encoded data.
3. Decode RLE columns.

The decompression step is the same in both.  The RLE decoding takes roughly the same amount of time in both cases.  However, the processing gets faster.  The decode operations are still taking around the same time, only slightly faster, 40.9ms.  However, the group-by operation itself has gotten much faster, down to 1.48ms.

![image](https://github.com/rapidsai/cudf/assets/69258779/7c34abab-e7ab-4858-af0d-0da19a267865)

With RLE transcoding to REE, I think that it will look like this:

1. Decompress parquet file into RLE-encoded data. (gzip/zstd/etc)
2. Transcode columns from RLE to REE.
3. Process REE data.
4. Decode REE data.

I think that the transcoding from RLE to REE will take a similar amount of time as decoding RLE data to regular data would take.  Probably a little faster because there is less memory to write.  I think that the subsequent processing of the REE data, because it's no longer dictionary encoded, will be slower than processing RLE-data but still faster than processing decoded data.  And finally, the decoding of REE data, will be dominated by the memory bandwidth.

The extra round-trip on memory will cause the whole thing to be overall slower in my estimation.  I already have code that does all of these steps so I can measure a prototype and see what we get.
",,esoha-nvidia,69258779,MDQ6VXNlcjY5MjU4Nzc5,https://avatars.githubusercontent.com/u/69258779?v=4,,https://api.github.com/users/esoha-nvidia,https://github.com/esoha-nvidia,https://api.github.com/users/esoha-nvidia/followers,https://api.github.com/users/esoha-nvidia/following{/other_user},https://api.github.com/users/esoha-nvidia/gists{/gist_id},https://api.github.com/users/esoha-nvidia/starred{/owner}{/repo},https://api.github.com/users/esoha-nvidia/subscriptions,https://api.github.com/users/esoha-nvidia/orgs,https://api.github.com/users/esoha-nvidia/repos,https://api.github.com/users/esoha-nvidia/events{/privacy},https://api.github.com/users/esoha-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148389008/reactions,0,0,0,0,0,0,0,0,0,15199
2428,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974062717,https://github.com/rapidsai/cudf/issues/15211#issuecomment-1974062717,https://api.github.com/repos/rapidsai/cudf/issues/15211,1974062717,IC_kwDOBWUGps51qc59,2024-03-01T23:21:22Z,2024-03-01T23:21:22Z,MEMBER,"Adding to this, testing functions like `to_csv` seem to preserve the unicode encoding as-is while `to_json` converts utf-8 chars to the ascii representation before writing. So I'm guessing libcuDF does support directly writing utf-8 (maybe just not within to_json). ",,ayushdg,19949207,MDQ6VXNlcjE5OTQ5MjA3,https://avatars.githubusercontent.com/u/19949207?v=4,,https://api.github.com/users/ayushdg,https://github.com/ayushdg,https://api.github.com/users/ayushdg/followers,https://api.github.com/users/ayushdg/following{/other_user},https://api.github.com/users/ayushdg/gists{/gist_id},https://api.github.com/users/ayushdg/starred{/owner}{/repo},https://api.github.com/users/ayushdg/subscriptions,https://api.github.com/users/ayushdg/orgs,https://api.github.com/users/ayushdg/repos,https://api.github.com/users/ayushdg/events{/privacy},https://api.github.com/users/ayushdg/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1974062717/reactions,0,0,0,0,0,0,0,0,0,15211
2429,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118334909,https://github.com/rapidsai/cudf/issues/15216#issuecomment-2118334909,https://api.github.com/repos/rapidsai/cudf/issues/15216,2118334909,IC_kwDOBWUGps5-Qzm9,2024-05-17T20:25:54Z,2024-05-17T20:25:54Z,CONTRIBUTOR,I can't reproduce the memcheck error right now. I do see the same racecheck issues though.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118334909/reactions,0,0,0,0,0,0,0,0,0,15216
2430,https://api.github.com/repos/rapidsai/cudf/issues/comments/1997790657,https://github.com/rapidsai/cudf/issues/15222#issuecomment-1997790657,https://api.github.com/repos/rapidsai/cudf/issues/15222,1997790657,IC_kwDOBWUGps53E93B,2024-03-14T15:58:17Z,2024-03-14T15:58:17Z,CONTRIBUTOR,"I should add that I have a bit more information about backslash escaping 

https://github.com/rapidsai/cudf/issues/15303

Specifically if we enable allowing single quotes escaping single quotes also works `\'` in addition to `\""`, or if we allow escaping any character. If we have both of these disabled, then `\'` is invalid no matter what string it appears in.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1997790657/reactions,0,0,0,0,0,0,0,0,0,15222
2431,https://api.github.com/repos/rapidsai/cudf/issues/comments/1980396043,https://github.com/rapidsai/cudf/issues/15233#issuecomment-1980396043,https://api.github.com/repos/rapidsai/cudf/issues/15233,1980396043,IC_kwDOBWUGps52CnIL,2024-03-06T09:05:58Z,2024-03-06T09:05:58Z,CONTRIBUTOR,"Related #11944 and #13291. I think the workaround I posted in https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286971706 should work, but I don't like it",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1980396043/reactions,0,0,0,0,0,0,0,0,0,15233
2432,https://api.github.com/repos/rapidsai/cudf/issues/comments/1985996743,https://github.com/rapidsai/cudf/issues/15233#issuecomment-1985996743,https://api.github.com/repos/rapidsai/cudf/issues/15233,1985996743,IC_kwDOBWUGps52X-fH,2024-03-08T16:24:05Z,2024-03-08T16:24:05Z,CONTRIBUTOR,"@wence- Thanks, the work-around in #11944 works for me. Feel free to close this issue as a duplicate.",,dagardner-nv,96306125,U_kgDOBb2DzQ,https://avatars.githubusercontent.com/u/96306125?v=4,,https://api.github.com/users/dagardner-nv,https://github.com/dagardner-nv,https://api.github.com/users/dagardner-nv/followers,https://api.github.com/users/dagardner-nv/following{/other_user},https://api.github.com/users/dagardner-nv/gists{/gist_id},https://api.github.com/users/dagardner-nv/starred{/owner}{/repo},https://api.github.com/users/dagardner-nv/subscriptions,https://api.github.com/users/dagardner-nv/orgs,https://api.github.com/users/dagardner-nv/repos,https://api.github.com/users/dagardner-nv/events{/privacy},https://api.github.com/users/dagardner-nv/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1985996743/reactions,0,0,0,0,0,0,0,0,0,15233
2433,https://api.github.com/repos/rapidsai/cudf/issues/comments/1981547317,https://github.com/rapidsai/cudf/issues/15240#issuecomment-1981547317,https://api.github.com/repos/rapidsai/cudf/issues/15240,1981547317,IC_kwDOBWUGps52HAM1,2024-03-06T18:39:32Z,2024-03-06T18:39:32Z,CONTRIBUTOR,"Almost everything from `_lib` (which also means ""almost everything using cudf Cython via `cimport`"") will have a mirror image in `pylibcudf`. In the short term I would focus efforts on the uses of `cudf.core`, and let `cudf._lib` be resolved at a later time as pylibcudf matures.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1981547317/reactions,0,0,0,0,0,0,0,0,0,15240
2434,https://api.github.com/repos/rapidsai/cudf/issues/comments/1984047414,https://github.com/rapidsai/cudf/issues/15240#issuecomment-1984047414,https://api.github.com/repos/rapidsai/cudf/issues/15240,1984047414,IC_kwDOBWUGps52Qik2,2024-03-07T17:21:20Z,2024-03-07T17:21:20Z,CONTRIBUTOR,"Organizing non-`_lib` usage by ""theme"":

**Column APIs**

`cudf.core.column.build_column`
`cudf.core.column.column_empty`
`cudf.core.column.as_column`
`cudf.core.column.build_categorical_column`
`cudf.core.column.ListColumn`

**Buffer APIs**

`cudf.core.buffer.as_buffer`
`cudf.core.buffer.acquire_spill_lock`
`cudf.core.buffer.Buffer`

**Other APis**

`cudf.core.frame.Frame`
`cudf.core.index._index_from_data`
`cudf.core.subword_tokenizer.SubwordTokenizer`
`cudf.utils.dtypes.min_signed_type`
`cudf.tests.utils.assert_eq`",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1984047414/reactions,0,0,0,0,0,0,0,0,0,15240
2435,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118329149,https://github.com/rapidsai/cudf/issues/15258#issuecomment-2118329149,https://api.github.com/repos/rapidsai/cudf/issues/15258,2118329149,IC_kwDOBWUGps5-QyM9,2024-05-17T20:22:28Z,2024-05-17T20:22:28Z,CONTRIBUTOR,"We are skipping the problematic test to avoid CI failures as of #15259, but we don't have a fix for the underlying issue yet.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118329149/reactions,0,0,0,0,0,0,0,0,0,15258
2436,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992021042,https://github.com/rapidsai/cudf/issues/15260#issuecomment-1992021042,https://api.github.com/repos/rapidsai/cudf/issues/15260,1992021042,IC_kwDOBWUGps52u9Qy,2024-03-12T16:07:55Z,2024-03-12T16:07:55Z,CONTRIBUTOR,"Just to be clear this also happens for schemas that have a STRUCT with strings in them, not just LISTS.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992021042/reactions,0,0,0,0,0,0,0,0,0,15260
2437,https://api.github.com/repos/rapidsai/cudf/issues/comments/1986675588,https://github.com/rapidsai/cudf/issues/15262#issuecomment-1986675588,https://api.github.com/repos/rapidsai/cudf/issues/15262,1986675588,IC_kwDOBWUGps52akOE,2024-03-09T01:22:34Z,2024-03-09T01:22:34Z,CONTRIBUTOR,Related issue https://github.com/NVIDIA/spark-rapids/issues/7529,,sameerz,7036315,MDQ6VXNlcjcwMzYzMTU=,https://avatars.githubusercontent.com/u/7036315?v=4,,https://api.github.com/users/sameerz,https://github.com/sameerz,https://api.github.com/users/sameerz/followers,https://api.github.com/users/sameerz/following{/other_user},https://api.github.com/users/sameerz/gists{/gist_id},https://api.github.com/users/sameerz/starred{/owner}{/repo},https://api.github.com/users/sameerz/subscriptions,https://api.github.com/users/sameerz/orgs,https://api.github.com/users/sameerz/repos,https://api.github.com/users/sameerz/events{/privacy},https://api.github.com/users/sameerz/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1986675588/reactions,0,0,0,0,0,0,0,0,0,15262
2438,https://api.github.com/repos/rapidsai/cudf/issues/comments/1988053351,https://github.com/rapidsai/cudf/issues/15262#issuecomment-1988053351,https://api.github.com/repos/rapidsai/cudf/issues/15262,1988053351,IC_kwDOBWUGps52f0ln,2024-03-11T10:14:10Z,2024-03-11T10:14:10Z,CONTRIBUTOR,"Is the low throughput specifically only for low cardinality data, or also for skewed cardinality data? That is, suppose I have many distinct group keys, but most of the weight of the data is only in a few. In that scenario, as you describe the implementation, I think we will still run slowly. However, dispatching based on absolute cardinality will not be that useful since it is not a true representation of the data distribution.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1988053351/reactions,0,0,0,0,0,0,0,0,0,15262
2439,https://api.github.com/repos/rapidsai/cudf/issues/comments/1999742161,https://github.com/rapidsai/cudf/issues/15262#issuecomment-1999742161,https://api.github.com/repos/rapidsai/cudf/issues/15262,1999742161,IC_kwDOBWUGps53MaTR,2024-03-15T14:05:10Z,2024-03-15T14:08:44Z,NONE,"> What is the throughput difference between hyperloglog and count distinct? We expect the memory footprint of hyperloglog to be much lower, but I don't believe throughput has had controlled measurements.

Here are the newest benchmark numbers for HLL: https://github.com/NVIDIA/cuCollections/pull/429#issuecomment-1999730719
tl;dr Depending on the parameter, we achieve between 72-89% of the SOL memory bandwidth of an H100.

The memory footprint is only a few KB or 1MB max and depends on the precision value. More precisely it is `4 * 2^precision` bytes, where the precision is typically in range [10, 18]. So yes, it should be much smaller compared to a fully fledged exact distinct count algorithm.",,sleeepyjack,2955913,MDQ6VXNlcjI5NTU5MTM=,https://avatars.githubusercontent.com/u/2955913?v=4,,https://api.github.com/users/sleeepyjack,https://github.com/sleeepyjack,https://api.github.com/users/sleeepyjack/followers,https://api.github.com/users/sleeepyjack/following{/other_user},https://api.github.com/users/sleeepyjack/gists{/gist_id},https://api.github.com/users/sleeepyjack/starred{/owner}{/repo},https://api.github.com/users/sleeepyjack/subscriptions,https://api.github.com/users/sleeepyjack/orgs,https://api.github.com/users/sleeepyjack/repos,https://api.github.com/users/sleeepyjack/events{/privacy},https://api.github.com/users/sleeepyjack/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1999742161/reactions,0,0,0,0,0,0,0,0,0,15262
2440,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138373830,https://github.com/rapidsai/cudf/issues/15262#issuecomment-2138373830,https://api.github.com/repos/rapidsai/cudf/issues/15262,2138373830,IC_kwDOBWUGps5_dP7G,2024-05-29T22:42:17Z,2024-05-29T22:42:17Z,MEMBER,"Using this issue to continue the discussions in https://github.com/NVIDIA/spark-rapids/issues/7529.

Low cardinality join and low cardinality groupby share some commons but the performance bottlenecks are not the same:

- Groupby uses a single map so the probing sequence (number of steps for a query key to find a match in hash table) is short (thus few hash collisions). The performance killer for low cardinality cases is the contention with atomic aggregations. Shared memory hash table can help since it splits the atomic aggregation into two levels: a block-level aggregation first and then only one aggregation per block with the final output.
- Hash join uses a multimap so duplicate keys will result in a longer probing sequence thus more hash collisions. The culprit should be high multiplicity as opposed to low cardinality. I need to think more about this but a shared memory hash table probably won't help here.

With that, to address this issue:
For groupby:

- [ ] implement shared-memory hash table with two-level aggregation
- [ ] evaluate the performance impact of using hyperloglog

for high-multiplicity hash join:

- [ ] verify the impact of CG size tuning (https://github.com/NVIDIA/spark-rapids/issues/7529#issuecomment-2138286065). Expose CG size tuning in public APIs if needed",,PointKernel,12716979,MDQ6VXNlcjEyNzE2OTc5,https://avatars.githubusercontent.com/u/12716979?v=4,,https://api.github.com/users/PointKernel,https://github.com/PointKernel,https://api.github.com/users/PointKernel/followers,https://api.github.com/users/PointKernel/following{/other_user},https://api.github.com/users/PointKernel/gists{/gist_id},https://api.github.com/users/PointKernel/starred{/owner}{/repo},https://api.github.com/users/PointKernel/subscriptions,https://api.github.com/users/PointKernel/orgs,https://api.github.com/users/PointKernel/repos,https://api.github.com/users/PointKernel/events{/privacy},https://api.github.com/users/PointKernel/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138373830/reactions,2,1,0,0,0,0,1,0,0,15262
2441,https://api.github.com/repos/rapidsai/cudf/issues/comments/1986850637,https://github.com/rapidsai/cudf/issues/15264#issuecomment-1986850637,https://api.github.com/repos/rapidsai/cudf/issues/15264,1986850637,IC_kwDOBWUGps52bO9N,2024-03-09T12:58:35Z,2024-03-09T12:58:35Z,CONTRIBUTOR,"@nurmanmus Thanks for this issue. Could you share the function parameters you passed? The pivot table function exists but does not support the full range of arguments on the GPU. See if you are using any of the options marked as unsupported in the cudf docs, and that will help us narrow down what features to prioritize: https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.dataframe.pivot_table/#cudf.DataFrame.pivot_table",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1986850637/reactions,0,0,0,0,0,0,0,0,0,15264
2442,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992680659,https://github.com/rapidsai/cudf/issues/15264#issuecomment-1992680659,https://api.github.com/repos/rapidsai/cudf/issues/15264,1992680659,IC_kwDOBWUGps52xeTT,2024-03-12T22:23:43Z,2024-03-13T10:08:56Z,NONE,"Sure, here are the code and parameters:

```python
# Create a pivot table with 'tag' as columns, and 'fp', 'ddate', 'qtrs' as index
pivot_df = filtered_df.pivot_table(index=['name', 'fp', 'ddate', 'qtrs'], columns='tag', values='value', aggfunc='first').reset_index()
pivot_df
```",,nurmanmus,32908355,MDQ6VXNlcjMyOTA4MzU1,https://avatars.githubusercontent.com/u/32908355?v=4,,https://api.github.com/users/nurmanmus,https://github.com/nurmanmus,https://api.github.com/users/nurmanmus/followers,https://api.github.com/users/nurmanmus/following{/other_user},https://api.github.com/users/nurmanmus/gists{/gist_id},https://api.github.com/users/nurmanmus/starred{/owner}{/repo},https://api.github.com/users/nurmanmus/subscriptions,https://api.github.com/users/nurmanmus/orgs,https://api.github.com/users/nurmanmus/repos,https://api.github.com/users/nurmanmus/events{/privacy},https://api.github.com/users/nurmanmus/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992680659/reactions,0,0,0,0,0,0,0,0,0,15264
2443,https://api.github.com/repos/rapidsai/cudf/issues/comments/1994039587,https://github.com/rapidsai/cudf/issues/15264#issuecomment-1994039587,https://api.github.com/repos/rapidsai/cudf/issues/15264,1994039587,IC_kwDOBWUGps522qEj,2024-03-13T10:19:51Z,2024-03-13T10:19:51Z,CONTRIBUTOR,"Thanks, unfortunately without a sample dataset, I can't yet reproduce this pivot table failure. Is it possible for you to share a more complete example that fails, that is, loading a dataset to produce `filtered_df` as a cudf DataFrame and then running the pivot-table command should produce an error (which is why you're seeing the fallback).

This is what I did, which _does_ work:
```python
import cudf
# make a trivial dataframe
df = cudf.DataFrame({""a"": [""a"", ""a"", ""b"", ""c""], ""b"": [1, 1, 2, 3], ""c"": [1, 2, 3, 4], ""d"": [1, 4, 7, 8]})
pivoted = df.pivot_table(index=[""a"", ""b""], columns=""c"", values=""d"", aggfunc=""first"")
```

My _guess_ is that in your dataframe the `value` column is a list or struct column? And the `""first""` aggregation is unsupported.",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1994039587/reactions,0,0,0,0,0,0,0,0,0,15264
2444,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118327358,https://github.com/rapidsai/cudf/issues/15264#issuecomment-2118327358,https://api.github.com/repos/rapidsai/cudf/issues/15264,2118327358,IC_kwDOBWUGps5-Qxw-,2024-05-17T20:20:47Z,2024-05-17T20:20:47Z,CONTRIBUTOR,@nurmanmus any thoughts on the above question?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118327358/reactions,0,0,0,0,0,0,0,0,0,15264
2445,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118764425,https://github.com/rapidsai/cudf/issues/15264#issuecomment-2118764425,https://api.github.com/repos/rapidsai/cudf/issues/15264,2118764425,IC_kwDOBWUGps5-SceJ,2024-05-18T10:21:10Z,2024-05-18T10:21:10Z,NONE,"Noted, I will get back to you on this.",,nurmanmus,32908355,MDQ6VXNlcjMyOTA4MzU1,https://avatars.githubusercontent.com/u/32908355?v=4,,https://api.github.com/users/nurmanmus,https://github.com/nurmanmus,https://api.github.com/users/nurmanmus/followers,https://api.github.com/users/nurmanmus/following{/other_user},https://api.github.com/users/nurmanmus/gists{/gist_id},https://api.github.com/users/nurmanmus/starred{/owner}{/repo},https://api.github.com/users/nurmanmus/subscriptions,https://api.github.com/users/nurmanmus/orgs,https://api.github.com/users/nurmanmus/repos,https://api.github.com/users/nurmanmus/events{/privacy},https://api.github.com/users/nurmanmus/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118764425/reactions,1,1,0,0,0,0,0,0,0,15264
2446,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992729818,https://github.com/rapidsai/cudf/issues/15278#issuecomment-1992729818,https://api.github.com/repos/rapidsai/cudf/issues/15278,1992729818,IC_kwDOBWUGps52xqTa,2024-03-12T23:21:24Z,2024-03-12T23:21:24Z,CONTRIBUTOR,"Hello @revans2, would you please share a bit about the case where a list type is coerced to string? I understand the map type case, but why would you want this for the top-level list rather than only for its child values?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992729818/reactions,0,0,0,0,0,0,0,0,0,15278
2447,https://api.github.com/repos/rapidsai/cudf/issues/comments/1997449150,https://github.com/rapidsai/cudf/issues/15278#issuecomment-1997449150,https://api.github.com/repos/rapidsai/cudf/issues/15278,1997449150,IC_kwDOBWUGps53Dqe-,2024-03-14T13:21:08Z,2024-03-14T13:21:08Z,CONTRIBUTOR,"@GregoryKimball Spark allows anything to be coerced into a string, if the user asks for it.  Also Spark has requirements to treat quoted and unquoted strings differently for essentially all data types, so the schema we pass to the JSON parser has all strings at the leaf nodes. So this can end up being a very common problem, and we have no way to detect it and fall back to the CPU because the issue is in the data, not in anything we have access to at planning time.",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1997449150/reactions,1,1,0,0,0,0,0,0,0,15278
2448,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992682406,https://github.com/rapidsai/cudf/issues/15280#issuecomment-1992682406,https://api.github.com/repos/rapidsai/cudf/issues/15280,1992682406,IC_kwDOBWUGps52xeum,2024-03-12T22:25:37Z,2024-03-12T23:06:20Z,CONTRIBUTOR,"@revans2 thank you for sharing this update - it's hilarious! We will need to brainstorm about our options here. 
* Let invalid JSON get corrected. @revans2 are you willing to accept this behavior?
* libcudf could modify the normalization FST to avoid dropping the whitespace that occurs within a JSON value. We would need to add more states to do this, so it would cost more time and memory. @shrshi what do you think?
* Spark-RAPIDS could run a validity check and flag invalid rows, but perhaps this would not work for the cases where Spark needs to recover records from invalid lines (e.g. `{""A"":1}{""B"":1 2 3}`). @revans2 what do you think?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1992682406/reactions,0,0,0,0,0,0,0,0,0,15280
2449,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015458601,https://github.com/rapidsai/cudf/issues/15299#issuecomment-2015458601,https://api.github.com/repos/rapidsai/cudf/issues/15299,2015458601,IC_kwDOBWUGps54IXUp,2024-03-22T16:27:34Z,2024-03-22T16:27:34Z,CONTRIBUTOR,"To make the performance question a bit more concrete, here is a microbenchmark:
```
In [4]: %%cython
   ...: cdef int its = 1_000_000
   ...: cdef class A:
   ...:     cdef int f(self):
   ...:         return 1
   ...:     @property                                                                                 
   ...:     def g(self):
   ...:         return 1
   ...:     def test_f(self):   
   ...:         cdef int i
   ...:         for i in range(its):
   ...:             self.f()
   ...:     def test_g(self):
   ...:         cdef int i   
   ...:         for i in range(its):
   ...:             self.g   
   ...:                   
                                                   
In [5]: %%timeit a = A()
   ...: a.test_f()          
   ...:                                                                                               
   ...: 
26.2 ms _ 13.2 _s per loop (mean _ std. dev. of 7 runs, 10 loops each)
                                                   
In [6]: %%timeit a = A()
   ...: a.test_g()
   ...:      
   ...: 
53.7 ms _ 38.4 _s per loop (mean _ std. dev. of 7 runs, 10 loops each)
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015458601/reactions,0,0,0,0,0,0,0,0,0,15299
2450,https://api.github.com/repos/rapidsai/cudf/issues/comments/1998522775,https://github.com/rapidsai/cudf/issues/15308#issuecomment-1998522775,https://api.github.com/repos/rapidsai/cudf/issues/15308,1998522775,IC_kwDOBWUGps53HwmX,2024-03-14T21:36:21Z,2024-03-14T21:36:21Z,CONTRIBUTOR,This sounds like a special case of a run-length encoded column.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1998522775/reactions,1,0,0,0,0,0,0,0,1,15308
2451,https://api.github.com/repos/rapidsai/cudf/issues/comments/1998548708,https://github.com/rapidsai/cudf/issues/15308#issuecomment-1998548708,https://api.github.com/repos/rapidsai/cudf/issues/15308,1998548708,IC_kwDOBWUGps53H27k,2024-03-14T21:57:28Z,2024-03-14T21:57:28Z,CONTRIBUTOR,"Could you elaborate on which operations would use this and how they would work?
So much of our code checks to make sure column-types match.
For example, even dictionary columns generally operate only against other dictionary columns.

It may be easier to overload certain APIs to accept a scalar parameter instead of a column.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/1998548708/reactions,0,0,0,0,0,0,0,0,0,15308
2452,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000471052,https://github.com/rapidsai/cudf/issues/15308#issuecomment-2000471052,https://api.github.com/repos/rapidsai/cudf/issues/15308,2000471052,IC_kwDOBWUGps53PMQM,2024-03-15T21:32:43Z,2024-03-15T21:32:52Z,CONTRIBUTOR,"> This sounds like a special case of a run-length encoded column.

Yes I would accept a run length encoded column too.

> Could you elaborate on which operations would use this and how they would work?

That is kind of hard to do right now. Conceptually we pass tables around in Spark between different operators. It is not really a table, as it is Spark specific, but we treat them the same and convert back and forth between them everywhere. I was hoping to be able to keep this abstraction, and just allow us to have a scalar column, or run length encoded column as the case may be. 

If there is no simple way to add an abstraction to get this, then we should go back and see how much of this we can do ourselves outside of using a table everywhere. ",,revans2,3441321,MDQ6VXNlcjM0NDEzMjE=,https://avatars.githubusercontent.com/u/3441321?v=4,,https://api.github.com/users/revans2,https://github.com/revans2,https://api.github.com/users/revans2/followers,https://api.github.com/users/revans2/following{/other_user},https://api.github.com/users/revans2/gists{/gist_id},https://api.github.com/users/revans2/starred{/owner}{/repo},https://api.github.com/users/revans2/subscriptions,https://api.github.com/users/revans2/orgs,https://api.github.com/users/revans2/repos,https://api.github.com/users/revans2/events{/privacy},https://api.github.com/users/revans2/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000471052/reactions,0,0,0,0,0,0,0,0,0,15308
2453,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000574889,https://github.com/rapidsai/cudf/issues/15308#issuecomment-2000574889,https://api.github.com/repos/rapidsai/cudf/issues/15308,2000574889,IC_kwDOBWUGps53Plmp,2024-03-15T22:16:23Z,2024-03-15T22:16:23Z,CONTRIBUTOR,"I assume the scalar column would only be for fixed-width-types and strings. There are certain APIs where the internal implementation converts (non-nested) inputs to iterators and here a scalar could easily be represented as a column using a constant iterator. And so these APIs could have an alternate signature to plumb the scalar (column or rle column) through.
Of course, not all internal implementations are coded this way so the amount of effort here depends on what APIs need to be targeted.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2000574889/reactions,0,0,0,0,0,0,0,0,0,15308
2454,https://api.github.com/repos/rapidsai/cudf/issues/comments/2023973284,https://github.com/rapidsai/cudf/issues/15318#issuecomment-2023973284,https://api.github.com/repos/rapidsai/cudf/issues/15318,2023973284,IC_kwDOBWUGps54o2Gk,2024-03-27T20:56:15Z,2024-03-27T20:56:23Z,CONTRIBUTOR,"Related:
 * https://github.com/NVIDIA/spark-rapids-jni/pull/1897",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2023973284/reactions,0,0,0,0,0,0,0,0,0,15318
2455,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033002855,https://github.com/rapidsai/cudf/issues/15327#issuecomment-2033002855,https://api.github.com/repos/rapidsai/cudf/issues/15327,2033002855,IC_kwDOBWUGps55LSln,2024-04-02T20:04:44Z,2024-04-02T20:04:44Z,CONTRIBUTOR,"CUDA 12.4 ships with CCCL 2.3. 

The CCCL support matrix states that CCCL 2.2 is officially untested/unsupported when using 12.4+, so moving to a newer version will be needed.",,robertmaynard,215756,MDQ6VXNlcjIxNTc1Ng==,https://avatars.githubusercontent.com/u/215756?v=4,,https://api.github.com/users/robertmaynard,https://github.com/robertmaynard,https://api.github.com/users/robertmaynard/followers,https://api.github.com/users/robertmaynard/following{/other_user},https://api.github.com/users/robertmaynard/gists{/gist_id},https://api.github.com/users/robertmaynard/starred{/owner}{/repo},https://api.github.com/users/robertmaynard/subscriptions,https://api.github.com/users/robertmaynard/orgs,https://api.github.com/users/robertmaynard/repos,https://api.github.com/users/robertmaynard/events{/privacy},https://api.github.com/users/robertmaynard/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033002855/reactions,0,0,0,0,0,0,0,0,0,15327
2456,https://api.github.com/repos/rapidsai/cudf/issues/comments/2059101972,https://github.com/rapidsai/cudf/issues/15327#issuecomment-2059101972,https://api.github.com/repos/rapidsai/cudf/issues/15327,2059101972,IC_kwDOBWUGps56u2cU,2024-04-16T13:30:56Z,2024-04-16T13:30:56Z,CONTRIBUTOR,CCCL 2.3 also requires changes to projects due to `thrust::tuple` constructor changes.,,robertmaynard,215756,MDQ6VXNlcjIxNTc1Ng==,https://avatars.githubusercontent.com/u/215756?v=4,,https://api.github.com/users/robertmaynard,https://github.com/robertmaynard,https://api.github.com/users/robertmaynard/followers,https://api.github.com/users/robertmaynard/following{/other_user},https://api.github.com/users/robertmaynard/gists{/gist_id},https://api.github.com/users/robertmaynard/starred{/owner}{/repo},https://api.github.com/users/robertmaynard/subscriptions,https://api.github.com/users/robertmaynard/orgs,https://api.github.com/users/robertmaynard/repos,https://api.github.com/users/robertmaynard/events{/privacy},https://api.github.com/users/robertmaynard/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2059101972/reactions,0,0,0,0,0,0,0,0,0,15327
2457,https://api.github.com/repos/rapidsai/cudf/issues/comments/2091273461,https://github.com/rapidsai/cudf/issues/15327#issuecomment-2091273461,https://api.github.com/repos/rapidsai/cudf/issues/15327,2091273461,IC_kwDOBWUGps58pkz1,2024-05-02T18:52:00Z,2024-05-02T18:52:00Z,CONTRIBUTOR,We can also tackle https://github.com/NVIDIA/cuCollections/issues/469 after this migration is complete.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2091273461/reactions,0,0,0,0,0,0,0,0,0,15327
2458,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113342258,https://github.com/rapidsai/cudf/issues/15327#issuecomment-2113342258,https://api.github.com/repos/rapidsai/cudf/issues/15327,2113342258,IC_kwDOBWUGps599wsy,2024-05-15T19:50:16Z,2024-05-15T19:50:16Z,CONTRIBUTOR,Are we now considering going straight to 12.5? See https://github.com/rapidsai/rapids-cmake/pull/607 (CC @trxcllnt).,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113342258/reactions,1,1,0,0,0,0,0,0,0,15327
2459,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015690375,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2015690375,https://api.github.com/repos/rapidsai/cudf/issues/15376,2015690375,IC_kwDOBWUGps54JP6H,2024-03-22T18:34:50Z,2024-03-22T18:34:50Z,CONTRIBUTOR,"Hello @gm3g11, thank you for sharing your experience with the parquet chunked reader. I'm having some trouble reading the `txt` file you added, maybe it's a problem on my end but it might help to post the code in a hidden markdown block. 

Would you be willing to share more about your file with us? It's possible the 40-50 ms decompress is expected, or there could be a performance hotspot. If we have more information about the data file, we can help estimate the expected read throughput.",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015690375/reactions,0,0,0,0,0,0,0,0,0,15376
2460,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015722296,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2015722296,https://api.github.com/repos/rapidsai/cudf/issues/15376,2015722296,IC_kwDOBWUGps54JXs4,2024-03-22T18:54:15Z,2024-03-22T18:56:07Z,CONTRIBUTOR,"Hi @gm3g11.  Do you know what compression format this file is using?  Also, how large is this file and what settings are you using when creating the chunked reader object?",,nvdbaranec,56695930,MDQ6VXNlcjU2Njk1OTMw,https://avatars.githubusercontent.com/u/56695930?v=4,,https://api.github.com/users/nvdbaranec,https://github.com/nvdbaranec,https://api.github.com/users/nvdbaranec/followers,https://api.github.com/users/nvdbaranec/following{/other_user},https://api.github.com/users/nvdbaranec/gists{/gist_id},https://api.github.com/users/nvdbaranec/starred{/owner}{/repo},https://api.github.com/users/nvdbaranec/subscriptions,https://api.github.com/users/nvdbaranec/orgs,https://api.github.com/users/nvdbaranec/repos,https://api.github.com/users/nvdbaranec/events{/privacy},https://api.github.com/users/nvdbaranec/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015722296/reactions,0,0,0,0,0,0,0,0,0,15376
2461,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015758503,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2015758503,https://api.github.com/repos/rapidsai/cudf/issues/15376,2015758503,IC_kwDOBWUGps54Jgin,2024-03-22T19:17:57Z,2024-03-22T19:50:23Z,NONE,"> Hello @gm3g11, thank you for sharing your experience with the parquet chunked reader. I'm having some trouble reading the `txt` file you added, maybe it's a problem on my end but it might help to post the code in a hidden markdown block.
> 
> Would you be willing to share more about your file with us? It's possible the 40-50 ms decompress is expected, or there could be a performance hotspot. If we have more information about the data file, we can help estimate the expected read throughput.

@GregoryKimball, thanks for your reply. Here is the code I am using:

```
#include <cudf/aggregation.hpp>
#include <cudf/groupby.hpp>
#include <cudf/io/csv.hpp>
#include <cudf/table/table.hpp>

#include <rmm/cuda_device.hpp>
#include <rmm/mr/device/cuda_memory_resource.hpp>
#include <rmm/mr/device/device_memory_resource.hpp>
#include <rmm/mr/device/pool_memory_resource.hpp>
#include <memory>
#include <string>
#include <utility>
#include <vector>
#include <iostream>
#include <string>
#include <vector>

#include <map>
#include <rmm/device_buffer.hpp>

#include <cudf/column/column.hpp>
#include <cudf/lists/lists_column_view.hpp>
#include <cudf/lists/count_elements.hpp>
#include <cudf/column/column_view.hpp>
#include <cudf/concatenate.hpp>
#include <cudf/io/parquet.hpp>
#include <cudf/table/table.hpp>
#include <cudf/table/table_view.hpp>
#include <cudf/types.hpp>
// #include <cudf/io/text/detail/multibyte_split.hpp>

// #include <nvbench/nvbench.cuh>
int main(int argc, char** argv)
{
    rmm::mr::cuda_memory_resource cuda_mr{};
    rmm::mr::pool_memory_resource<rmm::mr::cuda_memory_resource> pool_mr(&cuda_mr, 0, rmm::percent_of_free_device_memory(50));
    rmm::mr::set_current_device_resource(&pool_mr);

    auto byte_limit = static_cast<std::size_t>(1024 * 1024 * 1024); // 1GB chunk size
    auto read_opts = cudf::io::parquet_reader_options::builder(cudf::io::source_info(""./dataset/part-00198-tid-3747487300473043810-11eb4400-583b-4bd3-9c6c-a9803c7aeb94-3334-1-c000.snappy.parquet"")).build();

    // Assuming you have access to a CUDA stream and memory resource
    auto stream = rmm::cuda_stream_default;
    // rmm::cuda_stream stream;
    auto mr = rmm::mr::get_current_device_resource();
    // rmm::cuda_stream stream;
    // rmm::cuda_stream_view stream_view(stream.value());

    cudf::size_type num_rows_read = 0;

    
      
    auto reader   = cudf::io::chunked_parquet_reader(0, read_opts,stream,mr);


      auto start = std::chrono::steady_clock::now();
      do {        
        auto const result = reader.read_chunk();      
        num_rows_read += result.tbl->num_rows();
      } while (reader.has_next());

      auto end = std::chrono::steady_clock::now();
      // total_time += end-start;

    std::cout << ""Chunked reading parquet file time elapsed ""
      << (std::chrono::duration_cast<std::chrono::milliseconds>(end-start)).count()
      << "" ms\n"";
    return 0;
}
```

Here is the link for the parquet file:
https://drive.google.com/file/d/1_OSLSiBg9afVu8Io4Vt_3OpDWjN1CDc0/view?usp=sharing
",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015758503/reactions,1,0,0,0,0,0,1,0,0,15376
2462,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015762280,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2015762280,https://api.github.com/repos/rapidsai/cudf/issues/15376,2015762280,IC_kwDOBWUGps54Jhdo,2024-03-22T19:20:51Z,2024-03-22T19:20:51Z,NONE,"> Hi @gm3g11. Do you know what compression format this file is using? Also, how large is this file and what settings are you using when creating the chunked reader object?

The compression format is SNAPPY, and the size of the uncompressed parquet file is: 1.5056GB. I am using unlimited bytes for in and out for the chuked reader object.",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2015762280/reactions,0,0,0,0,0,0,0,0,0,15376
2463,https://api.github.com/repos/rapidsai/cudf/issues/comments/2017308776,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2017308776,https://api.github.com/repos/rapidsai/cudf/issues/15376,2017308776,IC_kwDOBWUGps54PbBo,2024-03-25T06:22:34Z,2024-03-25T06:22:34Z,CONTRIBUTOR,"@gm3g11 is this a large corpus you cannot control, or would you be able to change how the files are written? Looking at the data, I think one large takeaway is that compression isn't buying you much except for the first column. In fact, for many data pages compression is making the data larger. For the `alert_id` column, you could achieve almost the same data reduction by using `DELTA_BYTE_ARRAY` encoding (each value is a prefix followed by a UUID...DELTA_BYTE_ARRAY would remove that prefix, nearly halving the size). Similarly, the `envelope_fields_version` and `envelope_fields_generation_counter` columns would likely benefit from `DELTA_BINARY_PACKED` encoding. Right now PLAIN+Snappy is reducing 160k to around 99k per page, but given the range of values (all seemingly 6 decimal digits), I'd think using the delta encoding would only require 20 bits per value. This would give you data pages more like 50k in size.

I don't remember how much control over encoding options parquet-mr gives you, but I think if you set compression to none, and enabled V2 data page headers (doing so would cause the most troublesome columns to use delta encoding rather than PLAIN), you _might_ see a good improvement in read performance without increasing the overall file sizes significantly.",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2017308776/reactions,0,0,0,0,0,0,0,0,0,15376
2464,https://api.github.com/repos/rapidsai/cudf/issues/comments/2018337955,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2018337955,https://api.github.com/repos/rapidsai/cudf/issues/15376,2018337955,IC_kwDOBWUGps54TWSj,2024-03-25T15:54:48Z,2024-03-25T15:54:48Z,NONE,"@etseidl Thanks for your reply. For this example parquet file, I can do some experiments and try the mentioned encoding scheme. I will let you know if I make some progress.
",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2018337955/reactions,1,1,0,0,0,0,0,0,0,15376
2465,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021371725,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2021371725,https://api.github.com/repos/rapidsai/cudf/issues/15376,2021371725,IC_kwDOBWUGps54e69N,2024-03-26T20:08:54Z,2024-03-26T20:08:54Z,NONE,"@etseidl 
This method is effective. Without compression, we observed an improvement in Parquet reading performance, decreasing from 123 ms to 45 ms, while the file size did not increase significantly, only from 39M to 50M. 

In the next step, we want to further accelerate parquet reading with multi-streams and multi-threads. Before we implement it, we extend the parquet file from 240,578 rows into 4,811,560 rows (increase 20 times). There is one thing I want to discuss: my multi-threads method seems work but the multi-streams don't work (the streams are still serial shown as below:)
![image](https://github.com/rapidsai/cudf/assets/36735914/140cddf4-24dc-4d66-ace0-a82a9da0c0c9)

I don't find too much material about the streams in the cudf::io::read_parquet API, here is how I am using it in my code, and any comment is welcome:

#include <cudf/io/parquet.hpp>
#include <cudf/table/table.hpp>
#include <rmm/cuda_stream_view.hpp>
#include <rmm/mr/device/cuda_memory_resource.hpp>
#include <rmm/mr/device/per_device_resource.hpp>
#include <chrono>
#include <iostream>
#include <vector>
#include <thread>
#include <numeric>

void read_parquet_chunk(const std::string& file_path, int32_t chunk, int32_t chunk_row_cnt, int32_t total_rows, int32_t chunked_read_num_chunks, std::vector<std::unique_ptr<cudf::table>>& results, rmm::cuda_stream& stream) {
    cudf::io::parquet_reader_options read_options = cudf::io::parquet_reader_options::builder(cudf::io::source_info(file_path))
        .skip_rows(chunk * chunk_row_cnt)
        .num_rows((chunk == chunked_read_num_chunks - 1) ? (total_rows - chunk * chunk_row_cnt) : chunk_row_cnt)
        .build();
    auto result = cudf::io::read_parquet(read_options, stream);
    results[chunk] = std::move(result.tbl);
}

int main() {
    const std::string file_path = ""./dataset/output_no_compression_4M.parquet"";
    constexpr int32_t total_rows = 4811560;
    constexpr int32_t chunked_read_num_chunks = 20;
    const int32_t chunk_row_cnt = total_rows / chunked_read_num_chunks;

    // Initialize CUDA memory resource
    rmm::mr::cuda_memory_resource cuda_mr;
    rmm::mr::set_current_device_resource(&cuda_mr);

    std::vector<rmm::cuda_stream> streams(chunked_read_num_chunks);
    std::vector<std::unique_ptr<cudf::table>> results(chunked_read_num_chunks);
    std::vector<std::thread> threads;

    auto start_time = std::chrono::high_resolution_clock::now();

    for (int32_t chunk = 0; chunk < chunked_read_num_chunks; ++chunk) {
        streams[chunk] = rmm::cuda_stream();
        threads.emplace_back(read_parquet_chunk, std::ref(file_path), chunk, chunk_row_cnt, total_rows, chunked_read_num_chunks, std::ref(results), std::ref(streams[chunk]));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    // Synchronize all streams
    for (auto& stream : streams) {
        stream.synchronize();
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();

    cudf::size_type total_rows_read = 0;
    for (const auto& result : results) {
        total_rows_read += result->num_rows();
    }
    std::cout << ""Total rows read: "" << total_rows_read << std::endl;
    std::cout << ""Total read time: "" << duration << "" ms"" << std::endl;

    return 0;
}",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021371725/reactions,0,0,0,0,0,0,0,0,0,15376
2466,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021551401,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2021551401,https://api.github.com/repos/rapidsai/cudf/issues/15376,2021551401,IC_kwDOBWUGps54fm0p,2024-03-26T22:05:35Z,2024-03-26T22:05:35Z,CONTRIBUTOR,"As I've learned the hard way, simply using separate streams is not necessarily going to cause execution to proceed in parallel on a single GPU. For kernel overlap to occur, you'll need sufficient resources (SMs, shared mem, registers, etc). The parquet kernel is pretty resource heavy, so the chances for overlap occurring are minimal. Also note that internal to libcudf, the various decode kernels execute in separate streams, further constraining resources.

If you want to parallelize further, you'll need to spread execution across multiple GPUs. You could try rolling your own, or use a parallel execution engine like dask or spark.

@nvdbaranec please chime in on anything I got horribly wrong :smile: 


",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021551401/reactions,0,0,0,0,0,0,0,0,0,15376
2467,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021624428,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2021624428,https://api.github.com/repos/rapidsai/cudf/issues/15376,2021624428,IC_kwDOBWUGps54f4ps,2024-03-26T23:16:48Z,2024-03-26T23:16:48Z,NONE,"@etseidl Thanks for sharing. Based on the document, I see there is a stream option in the cudf::io::read_parquet, and then think we can use multi-streams to accelerate the read_parquet further. Currently, I can only test it on a single GPU.",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021624428/reactions,0,0,0,0,0,0,0,0,0,15376
2468,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021780856,https://github.com/rapidsai/cudf/issues/15376#issuecomment-2021780856,https://api.github.com/repos/rapidsai/cudf/issues/15376,2021780856,IC_kwDOBWUGps54ge14,2024-03-27T01:56:55Z,2024-03-27T01:56:55Z,NONE,"Hi @GregoryKimball, I came across the GitHub link: ""[FEA] Add a Parquet reader benchmark that uses multiple CUDA streams #12700"" (https://github.com/rapidsai/cudf/issues/12700), and noticed that you're leading this feature development. I think this feature is related to my case. Could you provide any progresses on the implementation of multiple CUDA streams in the Parquet reader? Thank you.",,gm3g11,36735914,MDQ6VXNlcjM2NzM1OTE0,https://avatars.githubusercontent.com/u/36735914?v=4,,https://api.github.com/users/gm3g11,https://github.com/gm3g11,https://api.github.com/users/gm3g11/followers,https://api.github.com/users/gm3g11/following{/other_user},https://api.github.com/users/gm3g11/gists{/gist_id},https://api.github.com/users/gm3g11/starred{/owner}{/repo},https://api.github.com/users/gm3g11/subscriptions,https://api.github.com/users/gm3g11/orgs,https://api.github.com/users/gm3g11/repos,https://api.github.com/users/gm3g11/events{/privacy},https://api.github.com/users/gm3g11/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021780856/reactions,0,0,0,0,0,0,0,0,0,15376
2469,https://api.github.com/repos/rapidsai/cudf/issues/comments/2016536949,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2016536949,https://api.github.com/repos/rapidsai/cudf/issues/15380,2016536949,IC_kwDOBWUGps54Mel1,2024-03-23T16:15:56Z,2024-03-25T11:53:08Z,CONTRIBUTOR,"Thanks, @raybellwaves!

I think this could be implemented in terms of the existing datetime methods. For instance, `idx.indexer_between_time('09:00', '17:00')` would be `9 <= idx.dt.hour < 17` - unless I'm missing something. 

This would make a great contribution if you (or anyone else) is interested in taking it on! ",,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2016536949/reactions,0,0,0,0,0,0,0,0,0,15380
2470,https://api.github.com/repos/rapidsai/cudf/issues/comments/2041530283,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2041530283,https://api.github.com/repos/rapidsai/cudf/issues/15380,2041530283,IC_kwDOBWUGps55r0er,2024-04-07T17:00:10Z,2024-04-07T17:00:10Z,CONTRIBUTOR,"Hi @shwina, I would like to take up on this issue if no one has started working on this. ",,srinivasyadav18,43375352,MDQ6VXNlcjQzMzc1MzUy,https://avatars.githubusercontent.com/u/43375352?v=4,,https://api.github.com/users/srinivasyadav18,https://github.com/srinivasyadav18,https://api.github.com/users/srinivasyadav18/followers,https://api.github.com/users/srinivasyadav18/following{/other_user},https://api.github.com/users/srinivasyadav18/gists{/gist_id},https://api.github.com/users/srinivasyadav18/starred{/owner}{/repo},https://api.github.com/users/srinivasyadav18/subscriptions,https://api.github.com/users/srinivasyadav18/orgs,https://api.github.com/users/srinivasyadav18/repos,https://api.github.com/users/srinivasyadav18/events{/privacy},https://api.github.com/users/srinivasyadav18/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2041530283/reactions,1,1,0,0,0,0,0,0,0,15380
2471,https://api.github.com/repos/rapidsai/cudf/issues/comments/2041619023,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2041619023,https://api.github.com/repos/rapidsai/cudf/issues/15380,2041619023,IC_kwDOBWUGps55sKJP,2024-04-07T21:46:03Z,2024-04-07T21:46:03Z,CONTRIBUTOR,Fantastic! No one has yet so please feel free to take it on. Don't hesitate to reach out to us either here or on the RAPIDS slack if you have any questions!,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2041619023/reactions,0,0,0,0,0,0,0,0,0,15380
2472,https://api.github.com/repos/rapidsai/cudf/issues/comments/2084472229,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2084472229,https://api.github.com/repos/rapidsai/cudf/issues/15380,2084472229,IC_kwDOBWUGps58PoWl,2024-04-30T06:26:51Z,2024-04-30T06:26:51Z,CONTRIBUTOR,"@srinivasyadav18, still working on this?",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2084472229/reactions,0,0,0,0,0,0,0,0,0,15380
2473,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089454137,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2089454137,https://api.github.com/repos/rapidsai/cudf/issues/15380,2089454137,IC_kwDOBWUGps58ioo5,2024-05-02T03:11:50Z,2024-05-02T03:11:50Z,CONTRIBUTOR,"@er-eis Yes, I have been trying it for few days, but could not make much progress. Please feel free to work on it!",,srinivasyadav18,43375352,MDQ6VXNlcjQzMzc1MzUy,https://avatars.githubusercontent.com/u/43375352?v=4,,https://api.github.com/users/srinivasyadav18,https://github.com/srinivasyadav18,https://api.github.com/users/srinivasyadav18/followers,https://api.github.com/users/srinivasyadav18/following{/other_user},https://api.github.com/users/srinivasyadav18/gists{/gist_id},https://api.github.com/users/srinivasyadav18/starred{/owner}{/repo},https://api.github.com/users/srinivasyadav18/subscriptions,https://api.github.com/users/srinivasyadav18/orgs,https://api.github.com/users/srinivasyadav18/repos,https://api.github.com/users/srinivasyadav18/events{/privacy},https://api.github.com/users/srinivasyadav18/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089454137/reactions,0,0,0,0,0,0,0,0,0,15380
2474,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089478086,https://github.com/rapidsai/cudf/issues/15380#issuecomment-2089478086,https://api.github.com/repos/rapidsai/cudf/issues/15380,2089478086,IC_kwDOBWUGps58iufG,2024-05-02T03:45:35Z,2024-05-02T03:45:35Z,CONTRIBUTOR,"sounds good, i'll take this then!",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089478086/reactions,0,0,0,0,0,0,0,0,0,15380
2475,https://api.github.com/repos/rapidsai/cudf/issues/comments/2019137297,https://github.com/rapidsai/cudf/issues/15385#issuecomment-2019137297,https://api.github.com/repos/rapidsai/cudf/issues/15385,2019137297,IC_kwDOBWUGps54WZcR,2024-03-26T00:08:59Z,2024-03-26T00:13:40Z,CONTRIBUTOR,"Noting that in pandas 3.0, `.values` is going to be read-only, as apart of copy-on-write, so mutations won't be possible

```python
In [1]: In [1]: import pandas as pd # pandas main
   ...: 
   ...: In [2]: s = pd.Series([1, 2, pd.NA])

In [3]: s.values[:2] = 4
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[3], line 1
----> 1 s.values[:2] = 4

ValueError: assignment destination is read-only
```

We have a similar desire for pandas ExtensionArrays (which will affect `.array`) https://github.com/pandas-dev/pandas/issues/58007",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2019137297/reactions,0,0,0,0,0,0,0,0,0,15385
2476,https://api.github.com/repos/rapidsai/cudf/issues/comments/2019185313,https://github.com/rapidsai/cudf/issues/15385#issuecomment-2019185313,https://api.github.com/repos/rapidsai/cudf/issues/15385,2019185313,IC_kwDOBWUGps54WlKh,2024-03-26T00:42:40Z,2024-03-26T00:42:40Z,CONTRIBUTOR,:tada: nice! ,,shwina,3190405,MDQ6VXNlcjMxOTA0MDU=,https://avatars.githubusercontent.com/u/3190405?v=4,,https://api.github.com/users/shwina,https://github.com/shwina,https://api.github.com/users/shwina/followers,https://api.github.com/users/shwina/following{/other_user},https://api.github.com/users/shwina/gists{/gist_id},https://api.github.com/users/shwina/starred{/owner}{/repo},https://api.github.com/users/shwina/subscriptions,https://api.github.com/users/shwina/orgs,https://api.github.com/users/shwina/repos,https://api.github.com/users/shwina/events{/privacy},https://api.github.com/users/shwina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2019185313/reactions,0,0,0,0,0,0,0,0,0,15385
2477,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021679145,https://github.com/rapidsai/cudf/issues/15395#issuecomment-2021679145,https://api.github.com/repos/rapidsai/cudf/issues/15395,2021679145,IC_kwDOBWUGps54gGAp,2024-03-27T00:04:27Z,2024-03-27T00:04:27Z,CONTRIBUTOR,"Thanks for the suggestion @raybellwaves! Yes, we definitely should tackle this. Ideally I think we'd want to do this in a consistent way across RAPIDS. There's some open work to improve the documentation there, let me check in on that and then see what the best way is for us to socialize that!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021679145/reactions,0,0,0,0,0,0,0,0,0,15395
2478,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021718015,https://github.com/rapidsai/cudf/issues/15395#issuecomment-2021718015,https://api.github.com/repos/rapidsai/cudf/issues/15395,2021718015,IC_kwDOBWUGps54gPf_,2024-03-27T00:42:14Z,2024-03-27T00:42:14Z,CONTRIBUTOR,"> Thanks for the suggestion @raybellwaves! Yes, we definitely should tackle this. Ideally I think we'd want to do this in a consistent way across RAPIDS. There's some open work to improve the documentation there, let me check in on that and then see what the best way is for us to socialize that!

Created an issue [here](https://github.com/rapidsai/docs/issues/504) but you're welcome to close it if you feel it's just a dup of this",,raybellwaves,17162724,MDQ6VXNlcjE3MTYyNzI0,https://avatars.githubusercontent.com/u/17162724?v=4,,https://api.github.com/users/raybellwaves,https://github.com/raybellwaves,https://api.github.com/users/raybellwaves/followers,https://api.github.com/users/raybellwaves/following{/other_user},https://api.github.com/users/raybellwaves/gists{/gist_id},https://api.github.com/users/raybellwaves/starred{/owner}{/repo},https://api.github.com/users/raybellwaves/subscriptions,https://api.github.com/users/raybellwaves/orgs,https://api.github.com/users/raybellwaves/repos,https://api.github.com/users/raybellwaves/events{/privacy},https://api.github.com/users/raybellwaves/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2021718015/reactions,0,0,0,0,0,0,0,0,0,15395
2479,https://api.github.com/repos/rapidsai/cudf/issues/comments/2151094057,https://github.com/rapidsai/cudf/issues/15397#issuecomment-2151094057,https://api.github.com/repos/rapidsai/cudf/issues/15397,2151094057,IC_kwDOBWUGps6ANxcp,2024-06-05T22:56:27Z,2024-06-05T22:56:27Z,CONTRIBUTOR,"> We should collect cases where we observe failures like this and see if we can, at minimum, improve the ways in which the code fails.

This is directly related to #15910, so I should also try to catch cases in our proxying scheme where we fallback to Pandas due to NumPy (or other libraries with C APIs).

> If possible, we can also try to come up with more robust strategies for consuming libraries to use such that they won't accidentally go down such bad code paths with cudf.pandas objects.

I think once we run the pandas test suite with cudf.pandas debugging modes turned on we should get a better of what kinds of failures we're running in to.",,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2151094057/reactions,0,0,0,0,0,0,0,0,0,15397
2480,https://api.github.com/repos/rapidsai/cudf/issues/comments/2024090625,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2024090625,https://api.github.com/repos/rapidsai/cudf/issues/15405,2024090625,IC_kwDOBWUGps54pSwB,2024-03-27T22:24:27Z,2024-03-27T22:24:27Z,CONTRIBUTOR,This is definitely more in @davidwendt's wheelhouse than in mine. I'm trying to familiarize myself with `finder_warp_parallell_fn<>`.,,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2024090625/reactions,0,0,0,0,0,0,0,0,0,15405
2481,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030307779,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2030307779,https://api.github.com/repos/rapidsai/cudf/issues/15405,2030307779,IC_kwDOBWUGps55BAnD,2024-04-01T18:30:13Z,2024-04-01T18:30:49Z,CONTRIBUTOR,Perhaps we need to continue the long strings improvements for `find` that were started in #13226 (also see story issue #13048). Would you please share any information you might have on the distribution of string lengths?,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030307779/reactions,0,0,0,0,0,0,0,0,0,15405
2482,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030344612,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2030344612,https://api.github.com/repos/rapidsai/cudf/issues/15405,2030344612,IC_kwDOBWUGps55BJmk,2024-04-01T18:47:39Z,2024-04-01T20:45:14Z,CONTRIBUTOR,"I'll explore the data and post more info here.

I'm still looking at the call stack, etc.  There are certainly wins to be had by switching the query from using `strings::find()` to using `strings::contains()`.

The user query is of the form:
```sql
CASE WHEN instr(lower(my_str), 'my_sub_str') > 0 THEN ...
```

I'd like to check the feasibility of translating `instr(..., ...) > 0` to use `strings::contains()` in the Spark Plugin.
",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030344612/reactions,0,0,0,0,0,0,0,0,0,15405
2483,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030993250,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2030993250,https://api.github.com/repos/rapidsai/cudf/issues/15405,2030993250,IC_kwDOBWUGps55Dn9i,2024-04-02T03:07:46Z,2024-04-02T03:07:46Z,CONTRIBUTOR,"@jlowe mentioned this:  @revans2 already has a fix/workaround in place in Spark-RAPIDS, to detect queries of the from `instr(...,...) > 0`, to convert them into a call to `strings::contains()`.  It appears that this isn't performing much faster than `strings::find()` does. :/",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2030993250/reactions,0,0,0,0,0,0,0,0,0,15405
2484,https://api.github.com/repos/rapidsai/cudf/issues/comments/2031105767,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2031105767,https://api.github.com/repos/rapidsai/cudf/issues/15405,2031105767,IC_kwDOBWUGps55EDbn,2024-04-02T05:23:57Z,2024-04-02T05:23:57Z,CONTRIBUTOR,"I have done some exploration of the data in question, and the query.

1. The query has about 25 invocations of `instr`, which amounts to 25 calls to `strings::contains()` per Spark input-row batch.
2. Exploring the input column for `strings::contains()`: Out of a sampling of 102M rows, 99.98% of them were `""_""`, i.e. nominally blank.
3. The input column had only a handful of unique values (in my sample). Here's a breakdown of their counts and lengths. (I have redacted the actual values.)
```
+--------------------+-----------------------+---------+
|          input_str | char_length(input_str)|   count |
+--------------------+-----------------------+---------+
|                  _ |                      1|102542310|
| AAAAAAAAAAAAAAAAAA |                     54|    13611|
| BBBBBBBBBBBBBBBBBB |                     22|     1404|
| XXXXXXXXXXXXXXXXXX |                     17|      702|
| YYYYYYYYYYYYYYYYYY |                    149|      390|
| ZZZZZZZZZZZZZZZZZZ |                    104|       39|
+--------------------+-----------------------+---------+
```
4. The column seems to have only ASCII characters.
5. The average string length is `1.008`, vastly skewed by the 99% ""_"" value.  Ignoring that row, the average length is `52.02`.

I'm not sure why/how `finder_warp_parallel_fn` or `contains_warp_parallel_fn` kernels landed up in the slow path, given that the average string length seems not to exceed the warp-parallelism threshold (`64`).

I *think* @revans2's changes have seen to it that `strings::contains` is called correctly.  Thereafter, it *should* call the string-per-thread version.

I haven't run a profile on the sample yet. I'll try get that going tomorrow.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2031105767/reactions,0,0,0,0,0,0,0,0,0,15405
2485,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033686791,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2033686791,https://api.github.com/repos/rapidsai/cudf/issues/15405,2033686791,IC_kwDOBWUGps55N5kH,2024-04-03T06:49:32Z,2024-04-03T06:49:32Z,CONTRIBUTOR,"I'm working on a block-parallel version of `contains()` that looks a lot like the warp-parallel one. 
Testing it out now.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033686791/reactions,0,0,0,0,0,0,0,0,0,15405
2486,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033688672,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2033688672,https://api.github.com/repos/rapidsai/cudf/issues/15405,2033688672,IC_kwDOBWUGps55N6Bg,2024-04-03T06:50:57Z,2024-04-03T06:50:57Z,CONTRIBUTOR,"As an aside, I should mention that the data distributions I mentioned above can be ignored, for the moment.  The sample is not representative of the user's data. ",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2033688672/reactions,0,0,0,0,0,0,0,0,0,15405
2487,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035778152,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2035778152,https://api.github.com/repos/rapidsai/cudf/issues/15405,2035778152,IC_kwDOBWUGps55V4Jo,2024-04-03T23:07:27Z,2024-04-03T23:07:27Z,CONTRIBUTOR,"I have a naive block-parallel implementation [here](https://github.com/mythrocks/cudf/blob/block-parallel-contains/cpp/src/strings/search/find.cu#L378).

This change switches to block-parallel if the average string length reaches 256 or 512. (I've tried both.)

Here are some results from running `STRING_BENCH` with and without block-parallel
[STRINGS_BENCH.block-parallel.256.log](https://github.com/rapidsai/cudf/files/14859363/STRINGS_BENCH.block-parallel.256.log)
[STRINGS_BENCH.warp-parallel.log](https://github.com/rapidsai/cudf/files/14859364/STRINGS_BENCH.warp-parallel.log)

It appears that benefits aren't apparent unless the average string sizes reach around 4K-8K. And that gets slightly worse at higher row counts:
| Row Count | String Size | Warp Parallel Time (ms) | Block Parallel Time (ms) |
|-----------|-------------|-------------------------|--------------------------|
| 4096 |  256 |  0.034  |  0.035 |
| 4096 |  512 |  0.039  |  0.040 |  
| 4096 | 1024 |  0.048  |  0.056 |
| 4096 | 2048 |  0.070  |  0.069 |
| 4096 | 4096 |  0.110  |  0.094 |
| 4096 | 8192 |  0.183  |  0.137 |
| 262144 |  256 |  0.313  |  0.325 |
| 262144 |  512 |  0.503  |  0.515 |  
| 262144 | 1024 |  0.902  |  1.6 |
| 262144 | 2048 |  1.74  |  2.25 |
| 262144 | 4096 |  3.47  |  3.53 |
",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035778152/reactions,0,0,0,0,0,0,0,0,0,15405
2488,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035800388,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2035800388,https://api.github.com/repos/rapidsai/cudf/issues/15405,2035800388,IC_kwDOBWUGps55V9lE,2024-04-03T23:24:39Z,2024-04-03T23:29:21Z,CONTRIBUTOR,"From exploring the customer's data, it appears that the majority of the search input strings are under 256 bytes long, although there are outliers (some being 64K long).  The average length amounts to 145.  I don't think going wider than 256 threads per block is reasonable.

I've gotten some `nsys` traces for the block-parallel implementation, and compared them to the warp-parallel versions.  It appears that block-parallel lags warp-per-string, even for short search strings.  My test searched 4 Million input strings with an average length of 256. 

I've also run `ncu` (NSight Compute CLI). I will attach the findings here, but it appears that the block-parallel kernel takes longer than warp-per-string (~1 ms vs 2.76 ms), but has higher `Compute (SM) Throughput` (52.8% vs 39%).

For block-parallel:
```
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         6.48
    SM Frequency            cycle/nsecond         1.45
    Elapsed Cycles                  cycle    3,991,213
    Memory Throughput                   %        50.92
    DRAM Throughput                     %         7.40
    Duration                      msecond         2.75
    L1/TEX Cache Throughput             %        54.65
    L2 Cache Throughput                 %         2.78
    SM Active Cycles                cycle 3,978,530.51
    Compute (SM) Throughput             %        52.83
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                485,000
    Registers Per Thread             register/thread              18
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block              17
    Threads                                   thread     124,160,000
    Waves Per SM                                            1,684.03
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block           10
    Block Limit Shared Mem                block          128
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        85.35
    Achieved Active Warps Per SM           warp        27.31
    ------------------------------- ----------- ------------


    OPT   Estimated Speedup: 14.65%
          This kernel's theoretical occupancy is not impacted by any block limit. The difference between calculated
          theoretical (100.0%) and measured achieved occupancy (85.4%) can be the result of warp scheduling overheads
          or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block
          as well as across blocks of the same kernel. See the CUDA Best Practices Guide
          (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on
          optimizing occupancy.
```

For warp-per-string:
```
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         6.46
    SM Frequency            cycle/nsecond         1.44
    Elapsed Cycles                  cycle    1,445,593
    Memory Throughput                   %        35.02
    DRAM Throughput                     %        20.44
    Duration                      usecond       998.78
    L1/TEX Cache Throughput             %        35.99
    L2 Cache Throughput                 %         7.33
    SM Active Cycles                cycle 1,438,799.26
    Compute (SM) Throughput             %        39.00
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                 60,625
    Registers Per Thread             register/thread              18
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread      15,520,000
    Waves Per SM                                              210.50
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block           10
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        91.36
    Achieved Active Warps Per SM           warp        29.24
    ------------------------------- ----------- ------------

    INF   This kernel's theoretical occupancy is not impacted by any block limit.
```

I wonder if I might be missing a trick here, with the block-parallel implementation.

cc @davidwendt, @nvdbaranec, @hyperbolic2346, whom I've been consulting on this.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035800388/reactions,0,0,0,0,0,0,0,0,0,15405
2489,https://api.github.com/repos/rapidsai/cudf/issues/comments/2040726013,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2040726013,https://api.github.com/repos/rapidsai/cudf/issues/15405,2040726013,IC_kwDOBWUGps55owH9,2024-04-05T22:45:36Z,2024-04-05T23:23:27Z,CONTRIBUTOR,"I've generated a local dataset with the search key distributions in much the same way as that of the reported slow case. (This includes the order of if-else clauses, with a similar match rate.)

At 4M rows, with an average string length of 256, with the search keys of 12-char average lengths, the total runtimes are a near match.  It's not looking like the kernel runtimes have an appreciable effect on the total runtime.  If there's anything afflicting the `block-per-string` approach, it might also be affecting the existing `warp-per-string`.  

NSight Compute analysis did seem to indicate the following warning regarding `Long Scoreboard Stalls`:
>```On average, each warp of this kernel spends 11.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 63.5% of the total average of 18.4 cycles between issuing two instructions```

I'm trying to understand what can be changed here, but I'm wondering if we should be considering an algorithmic fix:
1. We might consider what @jlowe has mentioned vis-a-vis employing short-circuit evaluations of `CASE WHEN`.
2. A longer term change might involve pre-processing the input strings for searches.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2040726013/reactions,0,0,0,0,0,0,0,0,0,15405
2490,https://api.github.com/repos/rapidsai/cudf/issues/comments/2040799455,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2040799455,https://api.github.com/repos/rapidsai/cudf/issues/15405,2040799455,IC_kwDOBWUGps55pCDf,2024-04-06T00:01:39Z,2024-04-06T00:01:39Z,CONTRIBUTOR,"P.S.  I think I left the impression that the `string::contains` kernel is ""slow"", in absolute terms.  That isn't accurate.

More correctly, the profiles of the Spark tasks indicate that the `contains` kernel is being called 30K times per task (as per how the user query is written), presumably around 25 times per input batch (once per `CASE WHEN` clause).  Each call runs in milliseconds, but the number of calls pushes the total time spent in said kernel to several seconds.

Even a small improvement to the kernel is likely to amplify, at that scale.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2040799455/reactions,0,0,0,0,0,0,0,0,0,15405
2491,https://api.github.com/repos/rapidsai/cudf/issues/comments/2070932358,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2070932358,https://api.github.com/repos/rapidsai/cudf/issues/15405,2070932358,IC_kwDOBWUGps57b-uG,2024-04-22T20:52:19Z,2024-04-22T20:52:19Z,CONTRIBUTOR,"The first approach (processing 1 string/threadblock instead of 1 string/warp) was a bust.  At the user's average string size of 144 characters, it appeared that too many threads in the block had too little to do.

The second approach (processing N strings in the same kernel, instead of running the single ""contains_warp_parallel_fn"" kernel N times) should have reduced the processing time (by amortizing the costs of kernel launch).  This seemed like a bust.  Tests at the user site indicated that this was taking slightly longer as well.

The current thought (hat tip to @nvdbaranec) is that this might have something to do with null string inputs.  It's possible that GPU occupancy reduces when there are more null input rows than non-null.  The null-threads exit early, and wait for the completion of non-null threads.  
It might be possible to increase occupancy by reducing the threads-per-block for the kernel launch.  
I'm awaiting clarification on the user's actual null counts. I'm trying to test the behaviour with nulls separately.",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2070932358/reactions,0,0,0,0,0,0,0,0,0,15405
2492,https://api.github.com/repos/rapidsai/cudf/issues/comments/2071033831,https://github.com/rapidsai/cudf/issues/15405#issuecomment-2071033831,https://api.github.com/repos/rapidsai/cudf/issues/15405,2071033831,IC_kwDOBWUGps57cXfn,2024-04-22T22:08:28Z,2024-04-22T22:08:28Z,CONTRIBUTOR,"Null distribution |   | 0% nulls | 30% nulls | 50% nulls | 3 nulls out of 4 | 7 nulls out of 8 | 90% nulls
-- | -- | -- | -- | -- | -- | -- | --
  |   | (ms) | (ms) | (ms) | (ms) | (ms) | (ms)
multi_contains_warp_parallel | 256 threads/block | 11.13 | 10.04 | 8.27 | 4.38 | 3.4 | 3.18
5 x contains_warp_parallel | 256 threads/block | 10.64 | 9.6 | 7.87 | 4.18 | ??? | ???
multi_contains_warp_parallel | 32 threads/block | 18.68 | 13.76 | 10.51 | 6.74 | 4.69 | 4.29
5 x contains_warp_parallel | 32 threads/block | 18.08 | 13.24 | 9.04 | 6.3 | ??? | ???

The fastest execution time to find 5 sub-strings across 1M input rows for a variety of null distributions seems to be to call the `contains_warp_parallel_fn` 5 times.

It appears that the null-row theory isn't completely accurate. :/",,mythrocks,5607330,MDQ6VXNlcjU2MDczMzA=,https://avatars.githubusercontent.com/u/5607330?v=4,,https://api.github.com/users/mythrocks,https://github.com/mythrocks,https://api.github.com/users/mythrocks/followers,https://api.github.com/users/mythrocks/following{/other_user},https://api.github.com/users/mythrocks/gists{/gist_id},https://api.github.com/users/mythrocks/starred{/owner}{/repo},https://api.github.com/users/mythrocks/subscriptions,https://api.github.com/users/mythrocks/orgs,https://api.github.com/users/mythrocks/repos,https://api.github.com/users/mythrocks/events{/privacy},https://api.github.com/users/mythrocks/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2071033831/reactions,0,0,0,0,0,0,0,0,0,15405
2493,https://api.github.com/repos/rapidsai/cudf/issues/comments/2029881326,https://github.com/rapidsai/cudf/issues/15417#issuecomment-2029881326,https://api.github.com/repos/rapidsai/cudf/issues/15417,2029881326,IC_kwDOBWUGps54_Yfu,2024-04-01T14:51:06Z,2024-04-01T14:51:06Z,CONTRIBUTOR,Related bug but in cpp: https://github.com/rapidsai/cudf/issues/15416,,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2029881326/reactions,0,0,0,0,0,0,0,0,0,15417
2494,https://api.github.com/repos/rapidsai/cudf/issues/comments/2029897672,https://github.com/rapidsai/cudf/issues/15417#issuecomment-2029897672,https://api.github.com/repos/rapidsai/cudf/issues/15417,2029897672,IC_kwDOBWUGps54_cfI,2024-04-01T14:59:44Z,2024-04-01T14:59:44Z,CONTRIBUTOR,"The issue with this flag not being set is that we get a `rmm_log.txt` with lines like this:
```
[ 61931][10:48:59:493968][error ] [A][Stream 0x0][Upstream 506799616B][FAILURE maximum pool size exceeded]
```
each time we run out of pinned memory. This is not desirable for production environments as our pool is meant to be opportunistic and these failures are really just going to result in pageable memory being allocated.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2029897672/reactions,0,0,0,0,0,0,0,0,0,15417
2495,https://api.github.com/repos/rapidsai/cudf/issues/comments/2034761771,https://github.com/rapidsai/cudf/issues/15449#issuecomment-2034761771,https://api.github.com/repos/rapidsai/cudf/issues/15449,2034761771,IC_kwDOBWUGps55SAAr,2024-04-03T14:20:25Z,2024-04-03T14:20:25Z,CONTRIBUTOR,"It looks like you're trying to use a user-defined function (UDF) that has a user-defined class `Master10DH`. This class isn't supported by the Numba CUDA JIT engine, which is limited to a set of basic Python types. Take a look at our guide on UDFs for examples: https://docs.rapids.ai/api/cudf/stable/user_guide/guide-to-udfs/

You may need to rewrite the functionality of this class into a simpler expression that can be JIT-compiled.

cc: @gmarkall @brandon-b-miller for any further insight.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2034761771/reactions,0,0,0,0,0,0,0,0,0,15449
2496,https://api.github.com/repos/rapidsai/cudf/issues/comments/2034780138,https://github.com/rapidsai/cudf/issues/15449#issuecomment-2034780138,https://api.github.com/repos/rapidsai/cudf/issues/15449,2034780138,IC_kwDOBWUGps55SEfq,2024-04-03T14:25:44Z,2024-04-03T14:25:44Z,NONE,"Thanks, @brandon-b-miller , @gmarkall, if I use in my custom function several methods from different libraries (spatialmath for example) what should I do? ",,reinzler,109457976,U_kgDOBoYyOA,https://avatars.githubusercontent.com/u/109457976?v=4,,https://api.github.com/users/reinzler,https://github.com/reinzler,https://api.github.com/users/reinzler/followers,https://api.github.com/users/reinzler/following{/other_user},https://api.github.com/users/reinzler/gists{/gist_id},https://api.github.com/users/reinzler/starred{/owner}{/repo},https://api.github.com/users/reinzler/subscriptions,https://api.github.com/users/reinzler/orgs,https://api.github.com/users/reinzler/repos,https://api.github.com/users/reinzler/events{/privacy},https://api.github.com/users/reinzler/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2034780138/reactions,0,0,0,0,0,0,0,0,0,15449
2497,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035435197,https://github.com/rapidsai/cudf/issues/15449#issuecomment-2035435197,https://api.github.com/repos/rapidsai/cudf/issues/15449,2035435197,IC_kwDOBWUGps55Uka9,2024-04-03T19:39:42Z,2024-04-03T19:40:24Z,CONTRIBUTOR,"@bdice is correct, we unfortunately don't support usage of arbitrary math libraries like `spatialmath` within the UDF expression. Sometimes, you can reconstruct a formula that produces your desired result by hand, and use that instead. 

For instance, if instead of 
```python
from mylib import myfunc

def use_myfunc(row):
    return myfunc(row['some_col'], row['some_other_col'])

sr.apply(use_myfunc)
```
perhaps there's a way to rewrite `myfunc` in terms of scalars:

```python
from numba import cuda

@cuda.jit(device=True)
def myfunc(x, y):
    return (2 * x) + (5 * y) * 3
```
The limitation for now is that generally the logic of `myfunc` must be limited to scalar operations and control flow. Use of lists, dicts, or custom classes are not yet supported.


",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2035435197/reactions,0,0,0,0,0,0,0,0,0,15449
2498,https://api.github.com/repos/rapidsai/cudf/issues/comments/2042420140,https://github.com/rapidsai/cudf/issues/15481#issuecomment-2042420140,https://api.github.com/repos/rapidsai/cudf/issues/15481,2042420140,IC_kwDOBWUGps55vNus,2024-04-08T10:41:16Z,2024-04-08T10:41:16Z,NONE,"![cudf-na-issue](https://github.com/rapidsai/cudf/assets/13297503/fb225630-4718-4d57-9925-8514fb7ca3e7)
[read_jnac_parquet_and_nsys_file.zip](https://github.com/rapidsai/cudf/files/14904390/read_jnac_parquet_and_nsys_file.zip)
get to know what's happening under the hood, gpu kernel trace very sparse, but CUDA API calls takes so long...",,pmixer,13297503,MDQ6VXNlcjEzMjk3NTAz,https://avatars.githubusercontent.com/u/13297503?v=4,,https://api.github.com/users/pmixer,https://github.com/pmixer,https://api.github.com/users/pmixer/followers,https://api.github.com/users/pmixer/following{/other_user},https://api.github.com/users/pmixer/gists{/gist_id},https://api.github.com/users/pmixer/starred{/owner}{/repo},https://api.github.com/users/pmixer/subscriptions,https://api.github.com/users/pmixer/orgs,https://api.github.com/users/pmixer/repos,https://api.github.com/users/pmixer/events{/privacy},https://api.github.com/users/pmixer/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2042420140/reactions,0,0,0,0,0,0,0,0,0,15481
2499,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044071877,https://github.com/rapidsai/cudf/issues/15481#issuecomment-2044071877,https://api.github.com/repos/rapidsai/cudf/issues/15481,2044071877,IC_kwDOBWUGps551g_F,2024-04-09T03:05:02Z,2024-04-09T03:05:02Z,NONE,"There might be some tricks to avoid the long time 1st round run cudaHostAlloc, which I haven't figured out yet, code as below may only handle gpu side mem pre-alloc.

```python
import rmm

# rmm.reinitialize(pool_allocator=True, initial_pool_size= 4 * 10 ** 9)
```",,pmixer,13297503,MDQ6VXNlcjEzMjk3NTAz,https://avatars.githubusercontent.com/u/13297503?v=4,,https://api.github.com/users/pmixer,https://github.com/pmixer,https://api.github.com/users/pmixer/followers,https://api.github.com/users/pmixer/following{/other_user},https://api.github.com/users/pmixer/gists{/gist_id},https://api.github.com/users/pmixer/starred{/owner}{/repo},https://api.github.com/users/pmixer/subscriptions,https://api.github.com/users/pmixer/orgs,https://api.github.com/users/pmixer/repos,https://api.github.com/users/pmixer/events{/privacy},https://api.github.com/users/pmixer/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044071877/reactions,0,0,0,0,0,0,0,0,0,15481
2500,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044075930,https://github.com/rapidsai/cudf/issues/15481#issuecomment-2044075930,https://api.github.com/repos/rapidsai/cudf/issues/15481,2044075930,IC_kwDOBWUGps551h-a,2024-04-09T03:10:39Z,2024-04-09T03:10:39Z,NONE,"I also tried 1M rows all (same) integers and 1M rows all (same) string column, cudf.read_parquet still suffering the perf issue, very likely due to the long cudaMallocHost call.

```python
df = pandas.DataFrame({'j2333c': [2333] * 1000000})
df.to_parquet('/dev/shm/j2333c.parquet', compression='ZSTD')

>>> import cudf
>>> import pandas
>>> import pyarrow.parquet
>>> 
>>> import time
>>> 
>>> # not accurate timing, while the diff is so obvious which do not require more accurate timing temporrally
>>> 
>>> ts = time.time(); tb = cudf.read_parquet('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = cudf.read_parquet('j2333c.parquet'); te = time.time()
>>> print(te - ts)
0.08919477462768555
>>> 
>>> ts = time.time(); tb = pandas.read_parquet('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pandas.read_parquet('j2333c.parquet'); te = time.time()
>>> print(te - ts)
0.026215314865112305
>>> 
>>> ts = time.time(); tb = pyarrow.parquet.read_table('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pyarrow.parquet.read_table('j2333c.parquet'); te = time.time()
>>> print(te - ts)
0.014030933380126953


>>> import cudf
>>> import pandas
>>> import pyarrow.parquet
>>> 
>>> import time
>>> 
>>> import rmm
>>> 
>>> rmm.reinitialize(pool_allocator=True, initial_pool_size= 4 * 10 ** 9)
>>> 
>>> # not accurate timing, while the diff is so obvious which do not require more accurate timing temporrally
>>> 
>>> ts = time.time(); tb = cudf.read_parquet('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = cudf.read_parquet('j2333c.parquet'); te = time.time()

>>> print(te - ts)
0.08475613594055176
>>> 
>>> ts = time.time(); tb = pandas.read_parquet('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pandas.read_parquet('j2333c.parquet'); te = time.time()
>>> print(te - ts)
0.025774002075195312
>>> 
>>> ts = time.time(); tb = pyarrow.parquet.read_table('j2333c.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pyarrow.parquet.read_table('j2333c.parquet'); te = time.time()
>>> print(te - ts)
0.011544227600097656

df = pandas.DataFrame({'jstrc', ['2333'] * 1000000})
df.to_parquet('/dev/shm/jstrc.parquet', compression='ZSTD')

>>> import cudf
>>> import pandas
>>> import pyarrow.parquet
>>> 
>>> import time
>>> 
>>> import rmm
>>> 
>>> # rmm.reinitialize(pool_allocator=True, initial_pool_size= 4 * 10 ** 9)
>>> 
>>> # not accurate timing, while the diff is so obvious which do not require more accurate timing temporrally
>>> 
>>> ts = time.time(); tb = cudf.read_parquet('/dev/shm/jstrc.parquet'); te = time.time()
>>> time.sleep(1)

>>> ts = time.time(); tb = cudf.read_parquet('/dev/shm/jstrc.parquet'); te = time.time()
>>> print(te - ts)
0.08581995964050293
>>> 
>>> ts = time.time(); tb = pandas.read_parquet('/dev/shm/jstrc.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pandas.read_parquet('/dev/shm/jstrc.parquet'); te = time.time()
>>> print(te - ts)
0.057205915451049805
>>> 
>>> ts = time.time(); tb = pyarrow.parquet.read_table('/dev/shm/jstrc.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pyarrow.parquet.read_table('/dev/shm/jstrc.parquet'); te = time.time()
>>> print(te - ts)
0.022694826126098633
```
",,pmixer,13297503,MDQ6VXNlcjEzMjk3NTAz,https://avatars.githubusercontent.com/u/13297503?v=4,,https://api.github.com/users/pmixer,https://github.com/pmixer,https://api.github.com/users/pmixer/followers,https://api.github.com/users/pmixer/following{/other_user},https://api.github.com/users/pmixer/gists{/gist_id},https://api.github.com/users/pmixer/starred{/owner}{/repo},https://api.github.com/users/pmixer/subscriptions,https://api.github.com/users/pmixer/orgs,https://api.github.com/users/pmixer/repos,https://api.github.com/users/pmixer/events{/privacy},https://api.github.com/users/pmixer/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044075930/reactions,0,0,0,0,0,0,0,0,0,15481
2501,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044084390,https://github.com/rapidsai/cudf/issues/15481#issuecomment-2044084390,https://api.github.com/repos/rapidsai/cudf/issues/15481,2044084390,IC_kwDOBWUGps551kCm,2024-04-09T03:23:29Z,2024-04-09T03:23:29Z,NONE,"Well, as GPUs are throughput machine, if increasing rows num from millions to billions, the advantages got well shown:

```python

>>> import cudf
>>> import pandas as pd
>>> 
>>> df = pd.DataFrame({'jnac': [None] * 1000000000})
>>> df.to_parquet('/dev/shm/jnac.parquet', compression='ZSTD')
>>> import cudf
>>> import pandas
>>> import pyarrow.parquet
>>> 
>>> import time
>>> 
>>> # not accurate timing, while the diff is so obvious which do not require more accurate timing temporrally
>>> 
>>> ts = time.time(); tb = cudf.read_parquet('/dev/shm/jnac.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = cudf.read_parquet('/dev/shm/jnac.parquet'); te = time.time()
>>> print(te - ts)
0.15029525756835938
>>> 
>>> ts = time.time(); tb = pandas.read_parquet('/dev/shm/jnac.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pandas.read_parquet('/dev/shm/jnac.parquet'); te = time.time()
>>> print(te - ts)
7.30379843711853
>>> 
>>> ts = time.time(); tb = pyarrow.parquet.read_table('/dev/shm/jnac.parquet'); te = time.time()
>>> time.sleep(1)
>>> ts = time.time(); tb = pyarrow.parquet.read_table('/dev/shm/jnac.parquet'); te = time.time()
>>> print(te - ts)
1.51247239112854
>>> 

```

so, now the major problem is how to resolve the issue for millions scale row num chunked tables.",,pmixer,13297503,MDQ6VXNlcjEzMjk3NTAz,https://avatars.githubusercontent.com/u/13297503?v=4,,https://api.github.com/users/pmixer,https://github.com/pmixer,https://api.github.com/users/pmixer/followers,https://api.github.com/users/pmixer/following{/other_user},https://api.github.com/users/pmixer/gists{/gist_id},https://api.github.com/users/pmixer/starred{/owner}{/repo},https://api.github.com/users/pmixer/subscriptions,https://api.github.com/users/pmixer/orgs,https://api.github.com/users/pmixer/repos,https://api.github.com/users/pmixer/events{/privacy},https://api.github.com/users/pmixer/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2044084390/reactions,0,0,0,0,0,0,0,0,0,15481
2502,https://api.github.com/repos/rapidsai/cudf/issues/comments/2059711000,https://github.com/rapidsai/cudf/issues/15481#issuecomment-2059711000,https://api.github.com/repos/rapidsai/cudf/issues/15481,2059711000,IC_kwDOBWUGps56xLIY,2024-04-16T18:36:38Z,2024-04-16T18:36:38Z,CONTRIBUTOR,"TL;DR There is a fixed overhead to using CUDA and cuDF, so very small files are not going to show any improvement, but you can cut down on the startup overhead some, and there are other ways to improve efficiency some.

I'll show some example traces on my RTX A6000 using the 1M integer example from above. First the output:
```
% python3 jnac.py 
0.00894021987915039
0.005298137664794922
0.0025205612182617188
```
and the associated trace
![Screenshot from 2024-04-16 10-22-41](https://github.com/rapidsai/cudf/assets/25541553/8a1d0fc8-08f1-4a46-b9b8-294d58c5a92c)
The area highlighted in green is the actual decode time and is around 21ms. You can see the time is dominated by CUDA initialization (54ms) and setup involved in using kvikio/cuFile (187ms).

The second `read_parquet` call is then much faster (9ms), and is dominated by the decode kernel (6.5ms).
![Screenshot from 2024-04-16 10-25-18](https://github.com/rapidsai/cudf/assets/25541553/b10101ae-50ee-4236-8c72-96d48fb2ed50)

Since the file is so small, we can skip using cuFile by setting the `LIBCUDF_CUFILE_POLICY` envvar to `OFF`. This has no impact on the measured read time, but greatly reduces the setup time.
```
% env LIBCUDF_CUFILE_POLICY=OFF python3 jnac.py 
0.009036540985107422
0.007204532623291016
0.0022492408752441406
```

![Screenshot from 2024-04-16 10-29-08](https://github.com/rapidsai/cudf/assets/25541553/84fa9690-ed2a-4070-8527-1265a17b9492)


Another thing to notice from the above is that pandas is writing all 1M rows into a single page. But libcudf parallelizes parquet reads at the page level, so to see any improvement you'll want more pages. Parquet-mr and libcudf default to 20000 rows max per page, so using cudf to write the initial file has a measurable impact for the 1M row case.
```py
df = pd.DataFrame({'jnac': [2333] * 1000000})
#df.to_parquet(fname, compression='ZSTD')
cdf = cudf.from_pandas(df)
cdf.to_parquet(fname, compression='ZSTD')
```
```
% env LIBCUDF_CUFILE_POLICY=OFF python3 jnac.py
0.002679586410522461
0.005636692047119141
0.0023217201232910156
```

![Screenshot from 2024-04-16 10-31-34](https://github.com/rapidsai/cudf/assets/25541553/f680afce-be4f-4756-9d96-d21ba60c039d)

Now the `to_parquet()` call is bearing the price of cuda initialization. The decode time (again in highlighted in green) has gone from 20ms to around 11, and the decode kernel has gone from a single threadblock and 6.5ms to 50 threadblocks and 140us. And the second `read_parquet` is now down to around 2.6ms.

In summary, we're seeing a pretty fixed cost of 50ms for CUDA setup, 190ms for cuFile setup, and around 10ms for cuDF setup (there are some buffer initializations and a stream pool to set up). Python adds its own latency too, and there's the actual file I/O to take into account. So the minimum time you'll see for a single file read is going to be something over 60ms.  If you can read files in batches and amortize the startup penalty, you'll still only see performance on par with arrow for such small files.  As you've discovered already, to really see the benefit you need files that are large enough to move the bottleneck from setup/IO to the actual compute kernels that will show the parallelization benefit. ",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2059711000/reactions,2,1,0,0,0,0,1,0,0,15481
2503,https://api.github.com/repos/rapidsai/cudf/issues/comments/2049955098,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2049955098,https://api.github.com/repos/rapidsai/cudf/issues/15502,2049955098,IC_kwDOBWUGps56L9Ua,2024-04-11T15:23:57Z,2024-04-11T15:42:00Z,CONTRIBUTOR,"Since option 1 doesnt incur the cost of JIT compilation maybe this is the better approach in terms of performance. My current plan is to arrange the types in increasing order of register usage and split the large switch in `type_dispatcher` into *reasonable* chunks. We activate a chunk using branching at CPU, and dispatching the appropriate compile time `cond` based on type. What do you think about this? This does tie the implementation of the comparator/hasher for a type to the granularity and split of the *chunks*,  but maybe this is okay? Essentially, the compile time conditional would be like `has_nested_column` but more granular. we can abstract out the CPU side branching for creating the compile time `cond` into a function which can be used in places where we need to construct a device row hasher/comparator.
```
if constexpr(cond) {
 switch(...) {
  ...
 }
}
. // repeat for chunks 
.
.
```",,tgujar,23545205,MDQ6VXNlcjIzNTQ1MjA1,https://avatars.githubusercontent.com/u/23545205?v=4,,https://api.github.com/users/tgujar,https://github.com/tgujar,https://api.github.com/users/tgujar/followers,https://api.github.com/users/tgujar/following{/other_user},https://api.github.com/users/tgujar/gists{/gist_id},https://api.github.com/users/tgujar/starred{/owner}{/repo},https://api.github.com/users/tgujar/subscriptions,https://api.github.com/users/tgujar/orgs,https://api.github.com/users/tgujar/repos,https://api.github.com/users/tgujar/events{/privacy},https://api.github.com/users/tgujar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2049955098/reactions,0,0,0,0,0,0,0,0,0,15502
2504,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050069350,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2050069350,https://api.github.com/repos/rapidsai/cudf/issues/15502,2050069350,IC_kwDOBWUGps56MZNm,2024-04-11T16:25:38Z,2024-04-11T16:25:38Z,CONTRIBUTOR,"This sounds like an interesting approach. 
But the mixed-semi-join must still work for all types. So I'm still not sure how this helps.
The `type_dispatcher` is used universally across libcudf and I would be reluctant to modify it like this for general usage.
I would instead recommend building a new `type_dispatcher_chunked` that could be used to vet out this idea.
",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050069350/reactions,0,0,0,0,0,0,0,0,0,15502
2505,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050159950,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2050159950,https://api.github.com/repos/rapidsai/cudf/issues/15502,2050159950,IC_kwDOBWUGps56MvVO,2024-04-11T17:22:59Z,2024-04-11T17:22:59Z,CONTRIBUTOR,Although I tested this out only for `mixed_semi_join` this should be applicable to all hash joins which use `device_row_hasher` and `device_row_comparator`. This allows us to compile different versions of the `type_dispatcher` so that we have lower register usage for rows only using simpler types. We can then dispatch the appropriate version based on CPU side branch instead.,,tgujar,23545205,MDQ6VXNlcjIzNTQ1MjA1,https://avatars.githubusercontent.com/u/23545205?v=4,,https://api.github.com/users/tgujar,https://github.com/tgujar,https://api.github.com/users/tgujar/followers,https://api.github.com/users/tgujar/following{/other_user},https://api.github.com/users/tgujar/gists{/gist_id},https://api.github.com/users/tgujar/starred{/owner}{/repo},https://api.github.com/users/tgujar/subscriptions,https://api.github.com/users/tgujar/orgs,https://api.github.com/users/tgujar/repos,https://api.github.com/users/tgujar/events{/privacy},https://api.github.com/users/tgujar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050159950/reactions,0,0,0,0,0,0,0,0,0,15502
2506,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050844483,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2050844483,https://api.github.com/repos/rapidsai/cudf/issues/15502,2050844483,IC_kwDOBWUGps56PWdD,2024-04-12T02:15:22Z,2024-04-12T02:18:16Z,NONE,"> But the mixed-semi-join must still work for all types.

Right. I guess the idea is that we internally (runtime) dispatch the comparator/hasher type based on the type requirements and then pass the one with the least amount of overhead to the kernel. This is a common pattern I'd say, where each runtime branch leads to a separately compiled kernel. If we can afford the compilation time overhead in cudf, then this is the right way to go. The downside is that if we want this optimization to happen, we have to explicitly type out the `if constexpr (has_type_feature) { // dispatch kernel1 } else if (has other_type_feature) { // dispatch kernel2 } else ...` logic whenever we use the comparator/hasher. It should still work ""for all types"", but offers the opportunity to launch a faster kernel if the actual combination of input types allows for it.",,sleeepyjack,2955913,MDQ6VXNlcjI5NTU5MTM=,https://avatars.githubusercontent.com/u/2955913?v=4,,https://api.github.com/users/sleeepyjack,https://github.com/sleeepyjack,https://api.github.com/users/sleeepyjack/followers,https://api.github.com/users/sleeepyjack/following{/other_user},https://api.github.com/users/sleeepyjack/gists{/gist_id},https://api.github.com/users/sleeepyjack/starred{/owner}{/repo},https://api.github.com/users/sleeepyjack/subscriptions,https://api.github.com/users/sleeepyjack/orgs,https://api.github.com/users/sleeepyjack/repos,https://api.github.com/users/sleeepyjack/events{/privacy},https://api.github.com/users/sleeepyjack/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2050844483/reactions,0,0,0,0,0,0,0,0,0,15502
2507,https://api.github.com/repos/rapidsai/cudf/issues/comments/2062621057,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2062621057,https://api.github.com/repos/rapidsai/cudf/issues/15502,2062621057,IC_kwDOBWUGps568RmB,2024-04-17T23:00:59Z,2024-04-17T23:00:59Z,CONTRIBUTOR,Could this be done using [a custom IdTypeMap](https://github.com/rapidsai/cudf/blob/branch-24.06/cpp/include/cudf/utilities/type_dispatcher.hpp#L453) to the type dispatcher that dispatches unsupported types to null? Perhaps we could define a helper factory to produce such a mapping easily?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2062621057/reactions,0,0,0,0,0,0,0,0,0,15502
2508,https://api.github.com/repos/rapidsai/cudf/issues/comments/2062841173,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2062841173,https://api.github.com/repos/rapidsai/cudf/issues/15502,2062841173,IC_kwDOBWUGps569HVV,2024-04-18T01:42:33Z,2024-04-18T01:42:33Z,CONTRIBUTOR,"I was wondering the same as Vyas:
Something similar to the `dispatch_void_if_nested map` from here:
https://github.com/rapidsai/cudf/blob/888e9d5c38cb27402313681744b87462846bc405/cpp/include/cudf/table/experimental/row_operators.cuh#L77",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2062841173/reactions,1,1,0,0,0,0,0,0,0,15502
2509,https://api.github.com/repos/rapidsai/cudf/issues/comments/2067424608,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2067424608,https://api.github.com/repos/rapidsai/cudf/issues/15502,2067424608,IC_kwDOBWUGps57OmVg,2024-04-20T00:31:58Z,2024-04-20T00:31:58Z,CONTRIBUTOR,Yes exactly I think we can do something like that except consign even more of the types in the first branch of the `conditional_t` to void.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2067424608/reactions,1,1,0,0,0,0,0,0,0,15502
2510,https://api.github.com/repos/rapidsai/cudf/issues/comments/2067737047,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2067737047,https://api.github.com/repos/rapidsai/cudf/issues/15502,2067737047,IC_kwDOBWUGps57PynX,2024-04-20T17:31:42Z,2024-04-20T17:31:42Z,CONTRIBUTOR,"Ah okay, this would also achieve what we need except not have the complexity in the `type_dispatcher` switch. Makes sense!",,tgujar,23545205,MDQ6VXNlcjIzNTQ1MjA1,https://avatars.githubusercontent.com/u/23545205?v=4,,https://api.github.com/users/tgujar,https://github.com/tgujar,https://api.github.com/users/tgujar/followers,https://api.github.com/users/tgujar/following{/other_user},https://api.github.com/users/tgujar/gists{/gist_id},https://api.github.com/users/tgujar/starred{/owner}{/repo},https://api.github.com/users/tgujar/subscriptions,https://api.github.com/users/tgujar/orgs,https://api.github.com/users/tgujar/repos,https://api.github.com/users/tgujar/events{/privacy},https://api.github.com/users/tgujar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2067737047/reactions,0,0,0,0,0,0,0,0,0,15502
2511,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108967341,https://github.com/rapidsai/cudf/issues/15502#issuecomment-2108967341,https://api.github.com/repos/rapidsai/cudf/issues/15502,2108967341,IC_kwDOBWUGps59tEmt,2024-05-13T23:15:09Z,2024-05-13T23:18:42Z,CONTRIBUTOR,"Adding results for reference. Benchmarks from cudf, all join types, speedups from disabling complex types on A100
```
# inner_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     |  98.086 us |      10.98% |  96.404 us |      17.15% |    -1.682 us |  -1.71% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 227.694 us |       0.91% | 240.492 us |       1.21% |    12.798 us |   5.62% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |  77.442 ms |       0.08% |  72.561 ms |       0.27% | -4881.351 us |  -6.30% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 129.711 us |       2.88% | 122.074 us |       1.65% |    -7.637 us |  -5.89% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   2.959 ms |       0.12% |   2.678 ms |       0.19% |  -281.654 us |  -9.52% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   6.161 ms |       0.10% |   4.792 ms |       0.09% | -1368.399 us | -22.21% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 104.352 us |       4.46% | 102.475 us |       4.44% |    -1.877 us |  -1.80% |   PASS   |
|  I32  |     1      |   100000    |     1000     | 141.904 us |       3.33% | 134.245 us |       3.39% |    -7.659 us |  -5.40% |   FAIL   |
|  I32  |     1      |  10000000   |     1000     |   9.487 ms |       0.07% |   7.559 ms |       0.09% | -1927.830 us | -20.32% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 127.620 us |       3.44% | 124.913 us |       3.30% |    -2.706 us |  -2.12% |   PASS   |
|  I32  |     1      |  10000000   |    100000    |   1.102 ms |       0.31% | 845.535 us |       0.57% |  -256.198 us | -23.25% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   3.242 ms |       0.15% |   2.233 ms |       0.22% | -1009.196 us | -31.13% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 101.068 us |       3.71% |  84.700 us |       3.94% |   -16.368 us | -16.19% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 241.602 us |       1.88% | 250.911 us |       1.34% |     9.309 us |   3.85% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |  77.688 ms |       0.09% |  73.055 ms |       0.16% | -4633.707 us |  -5.96% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 133.119 us |       3.02% | 123.304 us |       1.78% |    -9.815 us |  -7.37% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   3.045 ms |       0.15% |   2.771 ms |       0.17% |  -274.473 us |  -9.01% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   6.259 ms |       0.07% |   4.880 ms |       0.09% | -1379.167 us | -22.03% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 108.876 us |       5.20% | 104.452 us |       4.35% |    -4.423 us |  -4.06% |   PASS   |
|  I64  |     1      |   100000    |     1000     | 145.414 us |       2.87% | 135.280 us |       3.01% |   -10.134 us |  -6.97% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   9.611 ms |       0.06% |   7.674 ms |       0.09% | -1936.830 us | -20.15% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 129.239 us |       2.98% | 125.751 us |       3.41% |    -3.487 us |  -2.70% |   PASS   |
|  I64  |     1      |  10000000   |    100000    |   1.134 ms |       0.42% | 868.301 us |       0.60% |  -266.107 us | -23.46% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   3.312 ms |       0.17% |   2.301 ms |       0.27% | -1011.432 us | -30.54% |   FAIL   |

# left_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     |  92.324 us |       3.73% |  83.777 us |       3.14% |    -8.547 us |  -9.26% |   FAIL   |
|  I32  |     0      |   100000    |     1000     | 228.989 us |       1.26% | 240.727 us |       0.83% |    11.737 us |   5.13% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |  77.638 ms |       0.10% |  72.904 ms |       0.18% | -4733.820 us |  -6.10% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 131.165 us |       3.04% | 122.578 us |       1.66% |    -8.586 us |  -6.55% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   2.963 ms |       0.17% |   2.676 ms |       0.20% |  -286.724 us |  -9.68% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   6.331 ms |       0.06% |   4.906 ms |       0.13% | -1424.338 us | -22.50% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 102.337 us |       4.29% | 103.055 us |       4.45% |     0.718 us |   0.70% |   PASS   |
|  I32  |     1      |   100000    |     1000     | 144.638 us |       2.41% | 134.510 us |       3.18% |   -10.127 us |  -7.00% |   FAIL   |
|  I32  |     1      |  10000000   |     1000     |   9.513 ms |       0.07% |   7.590 ms |       0.11% | -1922.358 us | -20.21% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 132.344 us |       3.64% | 125.750 us |       3.37% |    -6.594 us |  -4.98% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   1.103 ms |       0.42% | 848.855 us |       0.49% |  -254.131 us | -23.04% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   3.422 ms |       0.12% |   2.398 ms |       0.23% | -1023.998 us | -29.92% |   FAIL   |
|  I64  |     0      |    1000     |     1000     |  97.573 us |      12.68% |  89.277 us |      13.56% |    -8.296 us |  -8.50% |   PASS   |
|  I64  |     0      |   100000    |     1000     | 246.080 us |       0.88% | 253.108 us |       1.86% |     7.028 us |   2.86% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |  77.868 ms |       0.02% |  73.247 ms |       0.18% | -4621.161 us |  -5.93% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 137.802 us |       1.51% | 123.913 us |       1.69% |   -13.889 us | -10.08% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   3.051 ms |       0.14% |   2.772 ms |       0.21% |  -279.087 us |  -9.15% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   6.432 ms |       0.06% |   4.996 ms |       0.09% | -1436.381 us | -22.33% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 112.130 us |       5.81% | 104.755 us |       4.48% |    -7.375 us |  -6.58% |   FAIL   |
|  I64  |     1      |   100000    |     1000     | 148.167 us |       3.29% | 136.024 us |       3.25% |   -12.144 us |  -8.20% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   9.667 ms |       0.08% |   7.678 ms |       0.09% | -1989.216 us | -20.58% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 137.450 us |       2.99% | 128.075 us |       2.86% |    -9.375 us |  -6.82% |   FAIL   |
|  I64  |     1      |  10000000   |    100000    |   1.139 ms |       0.33% | 871.557 us |       0.48% |  -267.216 us | -23.47% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   3.493 ms |       0.13% |   2.442 ms |       0.17% | -1050.825 us | -30.08% |   FAIL   |

# full_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 166.829 us |       2.76% | 159.519 us |       2.33% |    -7.310 us |  -4.38% |   FAIL   |
|  I32  |     0      |   100000    |     1000     | 309.185 us |       1.64% | 322.705 us |       1.15% |    13.520 us |   4.37% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |  77.990 ms |       0.02% |  73.489 ms |       0.13% | -4500.572 us |  -5.77% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 216.151 us |       1.80% | 204.264 us |       1.79% |   -11.887 us |  -5.50% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   3.507 ms |       0.20% |   3.213 ms |       0.18% |  -294.624 us |  -8.40% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   6.991 ms |       0.07% |   5.569 ms |       0.09% | -1422.066 us | -20.34% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 182.399 us |       2.86% | 181.162 us |       3.14% |    -1.237 us |  -0.68% |   PASS   |
|  I32  |     1      |   100000    |     1000     | 223.190 us |       2.49% | 215.676 us |       2.38% |    -7.514 us |  -3.37% |   FAIL   |
|  I32  |     1      |  10000000   |     1000     |   9.865 ms |       0.07% |   7.920 ms |       0.10% | -1944.961 us | -19.72% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 215.615 us |       2.85% | 205.486 us |       2.15% |   -10.130 us |  -4.70% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   1.435 ms |       0.40% |   1.181 ms |       0.46% |  -253.949 us | -17.69% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   3.923 ms |       0.14% |   2.899 ms |       0.19% | -1023.511 us | -26.09% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 174.889 us |       2.72% | 166.039 us |       2.74% |    -8.849 us |  -5.06% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 325.375 us |       0.97% | 333.593 us |       1.54% |     8.218 us |   2.53% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |  78.326 ms |       0.02% |  73.823 ms |       0.20% | -4503.365 us |  -5.75% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 218.765 us |       1.41% | 204.268 us |       1.79% |   -14.497 us |  -6.63% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   3.594 ms |       0.16% |   3.303 ms |       0.18% |  -291.079 us |  -8.10% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   7.096 ms |       0.08% |   5.659 ms |       0.08% | -1437.104 us | -20.25% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 192.823 us |       4.05% | 185.063 us |       2.98% |    -7.760 us |  -4.02% |   FAIL   |
|  I64  |     1      |   100000    |     1000     | 232.694 us |       2.00% | 216.077 us |       2.11% |   -16.617 us |  -7.14% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   9.981 ms |       0.08% |   8.019 ms |       0.10% | -1962.527 us | -19.66% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 221.943 us |       2.64% | 207.881 us |       2.72% |   -14.062 us |  -6.34% |   FAIL   |
|  I64  |     1      |  10000000   |    100000    |   1.472 ms |       0.32% |   1.205 ms |       0.46% |  -266.914 us | -18.13% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   3.990 ms |       0.13% |   2.948 ms |       0.39% | -1041.570 us | -26.11% |   FAIL   |

# mixed_inner_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 169.332 us |       6.73% | 160.332 us |       2.42% |    -9.000 us |  -5.31% |   FAIL   |
|  I32  |     0      |   100000    |     1000     | 195.335 us |       2.98% | 176.477 us |       1.84% |   -18.858 us |  -9.65% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |   4.233 ms |       0.50% |   2.507 ms |       0.59% | -1725.877 us | -40.77% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 222.984 us |       2.38% | 199.399 us |       2.61% |   -23.585 us | -10.58% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   5.237 ms |       0.11% |   3.165 ms |       0.16% | -2072.743 us | -39.58% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   9.186 ms |       0.06% |   7.028 ms |       0.08% | -2157.709 us | -23.49% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 163.226 us |       3.29% | 160.243 us |       2.92% |    -2.982 us |  -1.83% |   PASS   |
|  I32  |     1      |   100000    |     1000     | 190.103 us |       3.62% | 184.166 us |       3.67% |    -5.936 us |  -3.12% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   2.765 ms |       0.15% |   2.170 ms |       0.20% |  -594.808 us | -21.51% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 200.366 us |       2.95% | 191.996 us |       2.90% |    -8.370 us |  -4.18% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   3.128 ms |       0.18% |   2.421 ms |       0.23% |  -706.507 us | -22.59% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   4.303 ms |       0.15% |   3.344 ms |       0.14% |  -958.981 us | -22.29% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 176.402 us |       1.70% | 164.130 us |       1.93% |   -12.272 us |  -6.96% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 215.997 us |       1.67% | 186.102 us |       2.66% |   -29.895 us | -13.84% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |   4.736 ms |       0.33% |   2.824 ms |       0.37% | -1911.393 us | -40.36% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 229.272 us |       1.15% | 202.858 us |       1.16% |   -26.414 us | -11.52% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   5.513 ms |       0.21% |   3.347 ms |       0.21% | -2165.892 us | -39.29% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   9.374 ms |       0.04% |   7.189 ms |       0.11% | -2185.703 us | -23.32% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 167.720 us |       4.29% | 169.695 us |       5.16% |     1.975 us |   1.18% |   PASS   |
|  I64  |     1      |   100000    |     1000     | 200.827 us |       2.62% | 185.654 us |       2.14% |   -15.173 us |  -7.56% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   2.830 ms |       0.21% |   2.221 ms |       0.18% |  -609.265 us | -21.53% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 207.317 us |       2.38% | 195.208 us |       2.67% |   -12.109 us |  -5.84% |   FAIL   |
|  I64  |     1      |  10000000   |    100000    |   3.258 ms |       0.15% |   2.517 ms |       0.21% |  -741.170 us | -22.75% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   4.402 ms |       0.12% |   3.405 ms |       0.24% |  -996.264 us | -22.63% |   FAIL   |

# mixed_left_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 162.393 us |       2.19% | 163.145 us |       3.06% |     0.752 us |   0.46% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 198.993 us |       1.80% | 183.776 us |       2.78% |   -15.217 us |  -7.65% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |   4.390 ms |       0.50% |   2.821 ms |       0.66% | -1568.944 us | -35.74% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 225.268 us |       1.53% | 208.287 us |       2.38% |   -16.981 us |  -7.54% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   5.403 ms |       0.11% |   3.467 ms |       0.16% | -1935.176 us | -35.82% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   9.380 ms |       0.08% |   7.531 ms |       0.08% | -1848.927 us | -19.71% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 161.592 us |       2.42% | 166.762 us |       3.71% |     5.169 us |   3.20% |   FAIL   |
|  I32  |     1      |   100000    |     1000     | 190.968 us |       2.38% | 189.389 us |       2.76% |    -1.579 us |  -0.83% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   2.851 ms |       0.17% |   2.459 ms |       0.16% |  -391.901 us | -13.74% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 202.721 us |       3.10% | 195.817 us |       2.39% |    -6.904 us |  -3.41% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   3.210 ms |       0.17% |   2.717 ms |       0.16% |  -492.765 us | -15.35% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   4.385 ms |       0.12% |   3.709 ms |       0.14% |  -675.739 us | -15.41% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 176.685 us |       1.68% | 175.911 us |       1.87% |    -0.774 us |  -0.44% |   PASS   |
|  I64  |     0      |   100000    |     1000     | 216.935 us |       1.92% | 196.961 us |       2.35% |   -19.975 us |  -9.21% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |   4.828 ms |       0.39% |   3.257 ms |       0.34% | -1571.047 us | -32.54% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 229.205 us |       1.58% | 215.238 us |       1.39% |   -13.967 us |  -6.09% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   5.622 ms |       0.16% |   3.713 ms |       0.13% | -1909.231 us | -33.96% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   9.529 ms |       0.05% |   7.710 ms |       0.10% | -1818.191 us | -19.08% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 169.657 us |       3.64% | 169.704 us |       5.40% |     0.047 us |   0.03% |   PASS   |
|  I64  |     1      |   100000    |     1000     | 201.867 us |       2.30% | 189.909 us |       2.16% |   -11.958 us |  -5.92% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   2.916 ms |       0.20% |   2.504 ms |       0.16% |  -411.743 us | -14.12% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 208.764 us |       2.42% | 197.789 us |       2.54% |   -10.975 us |  -5.26% |   FAIL   |
|  I64  |     1      |  10000000   |    100000    |   3.349 ms |       0.17% |   2.824 ms |       0.20% |  -525.004 us | -15.68% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   4.487 ms |       0.13% |   3.781 ms |       0.11% |  -706.651 us | -15.75% |   FAIL   |

# mixed_full_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 245.243 us |       2.57% | 245.005 us |       2.24% |    -0.238 us |  -0.10% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 252.424 us |       1.85% | 236.983 us |       2.68% |   -15.441 us |  -6.12% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |   4.801 ms |       0.48% |   3.250 ms |       0.61% | -1550.839 us | -32.30% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 314.877 us |       1.67% | 299.013 us |       2.45% |   -15.865 us |  -5.04% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   5.548 ms |       0.12% |   3.609 ms |       0.17% | -1938.081 us | -34.94% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |  10.065 ms |       0.06% |   8.218 ms |       0.09% | -1847.514 us | -18.36% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 245.065 us |       2.96% | 253.720 us |       2.95% |     8.656 us |   3.53% |   FAIL   |
|  I32  |     1      |   100000    |     1000     | 274.089 us |       1.57% | 276.936 us |       1.91% |     2.848 us |   1.04% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   3.123 ms |       0.19% |   2.735 ms |       0.22% |  -388.611 us | -12.44% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 288.628 us |       2.01% | 288.971 us |       1.95% |     0.343 us |   0.12% |   PASS   |
|  I32  |     1      |  10000000   |    100000    |   3.466 ms |       0.18% |   2.979 ms |       0.19% |  -486.333 us | -14.03% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   4.893 ms |       0.11% |   4.223 ms |       0.14% |  -669.865 us | -13.69% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 259.162 us |       2.31% | 258.211 us |       1.57% |    -0.951 us |  -0.37% |   PASS   |
|  I64  |     0      |   100000    |     1000     | 270.075 us |       1.47% | 250.506 us |       2.16% |   -19.569 us |  -7.25% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |   5.330 ms |       0.36% |   3.696 ms |       0.31% | -1634.293 us | -30.66% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 318.434 us |       1.82% | 305.237 us |       1.81% |   -13.197 us |  -4.14% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   5.764 ms |       0.10% |   3.857 ms |       0.18% | -1906.983 us | -33.08% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |  10.215 ms |       0.06% |   8.399 ms |       0.07% | -1815.278 us | -17.77% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 250.737 us |       2.76% | 252.327 us |       4.18% |     1.590 us |   0.63% |   PASS   |
|  I64  |     1      |   100000    |     1000     | 285.622 us |       2.68% | 276.006 us |       2.14% |    -9.615 us |  -3.37% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   3.187 ms |       0.15% |   2.771 ms |       0.17% |  -415.906 us | -13.05% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 294.446 us |       1.82% | 290.163 us |       1.78% |    -4.283 us |  -1.45% |   PASS   |
|  I64  |     1      |  10000000   |    100000    |   3.604 ms |       0.17% |   3.081 ms |       0.23% |  -522.999 us | -14.51% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   4.995 ms |       0.12% |   4.294 ms |       0.13% |  -701.074 us | -14.04% |   FAIL   |

# mixed_left_semi_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 145.613 us |       2.26% | 144.217 us |       2.23% |    -1.395 us |  -0.96% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 170.829 us |       1.41% | 152.757 us |       1.77% |   -18.072 us | -10.58% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |   1.895 ms |       0.19% |   1.006 ms |       0.60% |  -889.331 us | -46.93% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 202.062 us |       1.80% | 173.403 us |       1.76% |   -28.659 us | -14.18% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   2.211 ms |       0.22% | 924.633 us |       0.86% | -1286.137 us | -58.18% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   6.987 ms |       0.06% |   4.590 ms |       0.33% | -2396.962 us | -34.31% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 167.868 us |       2.66% | 162.233 us |       3.45% |    -5.635 us |  -3.36% |   FAIL   |
|  I32  |     1      |   100000    |     1000     | 185.694 us |       2.22% | 185.361 us |       3.01% |    -0.333 us |  -0.18% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   1.458 ms |       0.27% |   2.204 ms |       0.29% |   746.145 us |  51.17% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 210.904 us |       2.24% | 204.400 us |       2.79% |    -6.505 us |  -3.08% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   1.512 ms |       0.34% |   2.211 ms |       0.26% |   699.026 us |  46.25% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   4.614 ms |       0.11% |   4.338 ms |       0.12% |  -275.850 us |  -5.98% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 149.793 us |       1.96% | 145.067 us |       1.58% |    -4.727 us |  -3.16% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 174.027 us |       2.17% | 153.994 us |       1.76% |   -20.033 us | -11.51% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |   2.043 ms |       0.19% |   1.107 ms |       0.51% |  -936.674 us | -45.84% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 211.646 us |       1.56% | 175.540 us |       1.63% |   -36.106 us | -17.06% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   2.369 ms |       0.17% | 969.291 us |       0.70% | -1399.863 us | -59.09% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   7.239 ms |       0.07% |   4.881 ms |       0.26% | -2357.918 us | -32.57% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 168.605 us |       2.97% | 161.085 us |       2.74% |    -7.520 us |  -4.46% |   FAIL   |
|  I64  |     1      |   100000    |     1000     | 183.886 us |       2.24% | 185.553 us |       2.77% |     1.667 us |   0.91% |   PASS   |
|  I64  |     1      |  10000000   |     1000     |   1.408 ms |       0.33% |   2.100 ms |       0.23% |   692.571 us |  49.20% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 207.247 us |       2.44% | 205.700 us |       2.49% |    -1.547 us |  -0.75% |   PASS   |
|  I64  |     1      |  10000000   |    100000    |   1.550 ms |       0.28% |   2.252 ms |       0.25% |   702.023 us |  45.28% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   4.710 ms |       0.09% |   4.423 ms |       0.13% |  -286.960 us |  -6.09% |   FAIL   |

# mixed_left_anti_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |         Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|--------------|---------|----------|
|  I32  |     0      |    1000     |     1000     | 145.609 us |       2.11% | 144.382 us |       2.63% |    -1.227 us |  -0.84% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 171.825 us |       2.52% | 153.282 us |       2.10% |   -18.543 us | -10.79% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     |   1.904 ms |       0.25% |   1.014 ms |       0.61% |  -889.953 us | -46.74% |   FAIL   |
|  I32  |     0      |   100000    |    100000    | 202.480 us |       1.94% | 173.366 us |       1.72% |   -29.114 us | -14.38% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   2.217 ms |       0.19% | 937.196 us |       0.64% | -1279.905 us | -57.73% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   6.993 ms |       0.05% |   4.595 ms |       0.24% | -2398.078 us | -34.29% |   FAIL   |
|  I32  |     1      |    1000     |     1000     | 168.087 us |       2.87% | 162.103 us |       3.43% |    -5.983 us |  -3.56% |   FAIL   |
|  I32  |     1      |   100000    |     1000     | 185.806 us |       2.24% | 185.825 us |       3.09% |     0.019 us |   0.01% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   1.468 ms |       0.28% |   2.214 ms |       0.29% |   746.122 us |  50.83% |   FAIL   |
|  I32  |     1      |   100000    |    100000    | 210.234 us |       2.17% | 204.434 us |       2.26% |    -5.801 us |  -2.76% |   FAIL   |
|  I32  |     1      |  10000000   |    100000    |   1.520 ms |       0.34% |   2.221 ms |       0.27% |   700.324 us |  46.07% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   4.623 ms |       0.13% |   4.346 ms |       0.11% |  -276.375 us |  -5.98% |   FAIL   |
|  I64  |     0      |    1000     |     1000     | 150.301 us |       2.38% | 145.754 us |       2.26% |    -4.548 us |  -3.03% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 175.850 us |       2.65% | 155.522 us |       2.32% |   -20.328 us | -11.56% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     |   2.053 ms |       0.22% |   1.116 ms |       0.60% |  -937.011 us | -45.65% |   FAIL   |
|  I64  |     0      |   100000    |    100000    | 211.996 us |       1.54% | 176.533 us |       1.88% |   -35.463 us | -16.73% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   2.376 ms |       0.12% | 979.465 us |       0.90% | -1396.656 us | -58.78% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   7.247 ms |       0.05% |   4.889 ms |       0.32% | -2357.155 us | -32.53% |   FAIL   |
|  I64  |     1      |    1000     |     1000     | 165.998 us |       2.76% | 161.697 us |       2.75% |    -4.301 us |  -2.59% |   PASS   |
|  I64  |     1      |   100000    |     1000     | 185.875 us |       2.65% | 186.063 us |       2.70% |     0.188 us |   0.10% |   PASS   |
|  I64  |     1      |  10000000   |     1000     |   1.416 ms |       0.29% |   2.110 ms |       0.22% |   693.833 us |  48.98% |   FAIL   |
|  I64  |     1      |   100000    |    100000    | 210.868 us |       2.16% | 205.904 us |       2.40% |    -4.964 us |  -2.35% |   FAIL   |
|  I64  |     1      |  10000000   |    100000    |   1.557 ms |       0.30% |   2.262 ms |       0.26% |   704.716 us |  45.27% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   4.718 ms |       0.09% |   4.432 ms |       0.14% |  -286.488 us |  -6.07% |   FAIL   |

# distinct_inner_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |          Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|---------------|---------|----------|
|  I32  |     0      |    1000     |     1000     |  65.532 us |       3.09% |  64.982 us |       2.64% |     -0.550 us |  -0.84% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 177.077 us |       2.45% | 173.223 us |       1.58% |     -3.854 us |  -2.18% |   FAIL   |
|  I32  |     0      |  10000000   |     1000     | 127.847 ms |       0.23% | 112.891 ms |       0.29% | -14955.437 us | -11.70% |   FAIL   |
|  I32  |     0      |   100000    |    100000    |  74.174 us |       2.04% |  73.944 us |       2.18% |     -0.230 us |  -0.31% |   PASS   |
|  I32  |     0      |  10000000   |    100000    |   2.902 ms |       0.15% |   2.555 ms |       0.18% |   -346.279 us | -11.93% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   3.399 ms |       0.11% |   3.175 ms |       0.11% |   -223.497 us |  -6.58% |   FAIL   |
|  I32  |     1      |    1000     |     1000     |  79.814 us |       5.41% |  76.913 us |       7.52% |     -2.901 us |  -3.63% |   PASS   |
|  I32  |     1      |   100000    |     1000     |  92.840 us |       3.88% |  92.128 us |       3.51% |     -0.712 us |  -0.77% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   8.466 ms |       0.12% |   7.823 ms |       0.20% |   -643.320 us |  -7.60% |   FAIL   |
|  I32  |     1      |   100000    |    100000    |  83.879 us |       3.92% |  83.950 us |       3.18% |      0.071 us |   0.08% |   PASS   |
|  I32  |     1      |  10000000   |    100000    | 720.880 us |       0.46% | 644.439 us |       0.53% |    -76.441 us | -10.60% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   1.251 ms |       0.33% |   1.123 ms |       0.35% |   -128.557 us | -10.27% |   FAIL   |
|  I64  |     0      |    1000     |     1000     |  59.217 us |       6.45% |  56.825 us |       3.13% |     -2.392 us |  -4.04% |   FAIL   |
|  I64  |     0      |   100000    |     1000     | 160.741 us |       2.43% | 156.386 us |       1.53% |     -4.354 us |  -2.71% |   FAIL   |
|  I64  |     0      |  10000000   |     1000     | 121.953 ms |       0.16% | 108.089 ms |       0.31% | -13864.132 us | -11.37% |   FAIL   |
|  I64  |     0      |   100000    |    100000    |  74.808 us |       3.29% |  75.774 us |       2.21% |      0.966 us |   1.29% |   PASS   |
|  I64  |     0      |  10000000   |    100000    |   2.905 ms |       0.17% |   2.559 ms |       0.21% |   -346.695 us | -11.93% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   3.441 ms |       0.11% |   3.222 ms |       0.13% |   -218.840 us |  -6.36% |   FAIL   |
|  I64  |     1      |    1000     |     1000     |  78.261 us |       5.32% |  80.001 us |       5.87% |      1.740 us |   2.22% |   PASS   |
|  I64  |     1      |   100000    |     1000     |  96.872 us |       4.55% |  92.556 us |       2.97% |     -4.315 us |  -4.45% |   FAIL   |
|  I64  |     1      |  10000000   |     1000     |   8.377 ms |       0.16% |   7.730 ms |       0.24% |   -646.769 us |  -7.72% |   FAIL   |
|  I64  |     1      |   100000    |    100000    |  84.971 us |       5.01% |  84.142 us |       3.24% |     -0.829 us |  -0.98% |   PASS   |
|  I64  |     1      |  10000000   |    100000    | 735.653 us |       0.49% | 655.612 us |       0.48% |    -80.041 us | -10.88% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   1.275 ms |       0.30% |   1.150 ms |       0.33% |   -124.760 us |  -9.79% |   FAIL   |

# distinct_left_join

## [0] NVIDIA A100-PCIE-40GB

|  Key  |  Nullable  |  left_size  |  right_size  |   Ref Time |   Ref Noise |   Cmp Time |   Cmp Noise |          Diff |   %Diff |  Status  |
|-------|------------|-------------|--------------|------------|-------------|------------|-------------|---------------|---------|----------|
|  I32  |     0      |    1000     |     1000     |  45.936 us |       2.89% |  45.162 us |       3.16% |     -0.774 us |  -1.69% |   PASS   |
|  I32  |     0      |   100000    |     1000     | 158.619 us |       1.63% | 157.917 us |       1.45% |     -0.702 us |  -0.44% |   PASS   |
|  I32  |     0      |  10000000   |     1000     | 128.105 ms |       0.12% | 112.870 ms |       0.19% | -15234.979 us | -11.89% |   FAIL   |
|  I32  |     0      |   100000    |    100000    |  54.520 us |       2.29% |  52.926 us |       2.26% |     -1.594 us |  -2.92% |   FAIL   |
|  I32  |     0      |  10000000   |    100000    |   2.879 ms |       0.16% |   2.536 ms |       0.15% |   -343.242 us | -11.92% |   FAIL   |
|  I32  |     0      |  10000000   |   10000000   |   3.103 ms |       0.10% |   2.999 ms |       0.10% |   -104.180 us |  -3.36% |   FAIL   |
|  I32  |     1      |    1000     |     1000     |  62.031 us |       6.20% |  60.302 us |       6.83% |     -1.730 us |  -2.79% |   PASS   |
|  I32  |     1      |   100000    |     1000     |  77.090 us |       3.43% |  75.199 us |       4.36% |     -1.892 us |  -2.45% |   PASS   |
|  I32  |     1      |  10000000   |     1000     |   8.448 ms |       0.11% |   7.804 ms |       0.22% |   -644.545 us |  -7.63% |   FAIL   |
|  I32  |     1      |   100000    |    100000    |  65.435 us |       5.45% |  65.174 us |       4.00% |     -0.260 us |  -0.40% |   PASS   |
|  I32  |     1      |  10000000   |    100000    | 697.154 us |       0.36% | 625.882 us |       0.37% |    -71.272 us | -10.22% |   FAIL   |
|  I32  |     1      |  10000000   |   10000000   |   1.043 ms |       0.28% | 925.832 us |       0.27% |   -117.154 us | -11.23% |   FAIL   |
|  I64  |     0      |    1000     |     1000     |  41.621 us |       3.07% |  40.864 us |       2.73% |     -0.758 us |  -1.82% |   PASS   |
|  I64  |     0      |   100000    |     1000     | 141.435 us |       1.71% | 139.656 us |       1.47% |     -1.779 us |  -1.26% |   PASS   |
|  I64  |     0      |  10000000   |     1000     | 121.780 ms |       0.10% | 108.245 ms |       0.30% | -13535.139 us | -11.11% |   FAIL   |
|  I64  |     0      |   100000    |    100000    |  57.436 us |       2.32% |  54.937 us |       2.13% |     -2.499 us |  -4.35% |   FAIL   |
|  I64  |     0      |  10000000   |    100000    |   2.884 ms |       0.12% |   2.541 ms |       0.17% |   -343.763 us | -11.92% |   FAIL   |
|  I64  |     0      |  10000000   |   10000000   |   3.134 ms |       0.08% |   3.037 ms |       0.10% |    -97.289 us |  -3.10% |   FAIL   |
|  I64  |     1      |    1000     |     1000     |  61.852 us |       6.67% |  59.727 us |       6.78% |     -2.125 us |  -3.44% |   PASS   |
|  I64  |     1      |   100000    |     1000     |  78.340 us |       3.48% |  75.910 us |       3.75% |     -2.429 us |  -3.10% |   PASS   |
|  I64  |     1      |  10000000   |     1000     |   8.355 ms |       0.15% |   7.716 ms |       0.24% |   -639.140 us |  -7.65% |   FAIL   |
|  I64  |     1      |   100000    |    100000    |  67.700 us |       4.27% |  66.098 us |       4.21% |     -1.602 us |  -2.37% |   PASS   |
|  I64  |     1      |  10000000   |    100000    | 714.841 us |       0.41% | 637.604 us |       0.35% |    -77.238 us | -10.80% |   FAIL   |
|  I64  |     1      |  10000000   |   10000000   |   1.066 ms |       0.21% | 947.636 us |       0.33% |   -118.014 us | -11.07% |   FAIL   |
```",,tgujar,23545205,MDQ6VXNlcjIzNTQ1MjA1,https://avatars.githubusercontent.com/u/23545205?v=4,,https://api.github.com/users/tgujar,https://github.com/tgujar,https://api.github.com/users/tgujar/followers,https://api.github.com/users/tgujar/following{/other_user},https://api.github.com/users/tgujar/gists{/gist_id},https://api.github.com/users/tgujar/starred{/owner}{/repo},https://api.github.com/users/tgujar/subscriptions,https://api.github.com/users/tgujar/orgs,https://api.github.com/users/tgujar/repos,https://api.github.com/users/tgujar/events{/privacy},https://api.github.com/users/tgujar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2108967341/reactions,0,0,0,0,0,0,0,0,0,15502
2512,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083840106,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2083840106,https://api.github.com/repos/rapidsai/cudf/issues/15609,2083840106,IC_kwDOBWUGps58NOBq,2024-04-29T23:13:26Z,2024-04-29T23:13:26Z,CONTRIBUTOR,I think we should have similar api support like `import pandas as pd; pd.show_versions()`,,galipremsagar,11664259,MDQ6VXNlcjExNjY0MjU5,https://avatars.githubusercontent.com/u/11664259?v=4,,https://api.github.com/users/galipremsagar,https://github.com/galipremsagar,https://api.github.com/users/galipremsagar/followers,https://api.github.com/users/galipremsagar/following{/other_user},https://api.github.com/users/galipremsagar/gists{/gist_id},https://api.github.com/users/galipremsagar/starred{/owner}{/repo},https://api.github.com/users/galipremsagar/subscriptions,https://api.github.com/users/galipremsagar/orgs,https://api.github.com/users/galipremsagar/repos,https://api.github.com/users/galipremsagar/events{/privacy},https://api.github.com/users/galipremsagar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083840106/reactions,1,1,0,0,0,0,0,0,0,15609
2513,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083856279,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2083856279,https://api.github.com/repos/rapidsai/cudf/issues/15609,2083856279,IC_kwDOBWUGps58NR-X,2024-04-29T23:28:30Z,2024-04-29T23:28:30Z,CONTRIBUTOR,"I love that idea. We can extend that as `cudf.show_versions()` to include any extra information we need.

@galipremsagar What do you think `cudf.pandas` should do?",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083856279/reactions,0,0,0,0,0,0,0,0,0,15609
2514,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087389038,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2087389038,https://api.github.com/repos/rapidsai/cudf/issues/15609,2087389038,IC_kwDOBWUGps58awdu,2024-04-30T21:28:21Z,2024-04-30T21:28:21Z,CONTRIBUTOR,"I'm confused, isn't something like `cudf.show_versions` exactly what you mentioned in your original post as:
>  The downside would be that users having installation troubles wouldn't be able to import the package to call such a function -- but the environment information might still be helpful for diagnosis.

I'm still OK with that approach if we think that covers enough use cases, just making sure I'm not missing something here.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087389038/reactions,0,0,0,0,0,0,0,0,0,15609
2515,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087770411,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2087770411,https://api.github.com/repos/rapidsai/cudf/issues/15609,2087770411,IC_kwDOBWUGps58cNkr,2024-05-01T00:33:23Z,2024-05-01T00:34:06Z,CONTRIBUTOR,"A show_versions function may be enough for most use cases. I am hopeful that other cases with installation issues can be resolved from conda solver output or the pip placeholder packages showing an error that includes environment information (which should be available in recent/future releases, from the Kitmaker team’s updates).",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087770411/reactions,1,1,0,0,0,0,0,0,0,15609
2516,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089976421,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2089976421,https://api.github.com/repos/rapidsai/cudf/issues/15609,2089976421,IC_kwDOBWUGps58koJl,2024-05-02T09:12:05Z,2024-05-02T09:12:05Z,MEMBER,"Wild guess, but presumably most people who have difficulty installing cudf are trying to install it via pip or conda. This means they don't have access to anything inside the package (script or function). So helping them will need something else.

I like the idea of having `cudf.show_versions()`. Easier to use as a user, easier to explain to users",,betatim,1448859,MDQ6VXNlcjE0NDg4NTk=,https://avatars.githubusercontent.com/u/1448859?v=4,,https://api.github.com/users/betatim,https://github.com/betatim,https://api.github.com/users/betatim/followers,https://api.github.com/users/betatim/following{/other_user},https://api.github.com/users/betatim/gists{/gist_id},https://api.github.com/users/betatim/starred{/owner}{/repo},https://api.github.com/users/betatim/subscriptions,https://api.github.com/users/betatim/orgs,https://api.github.com/users/betatim/repos,https://api.github.com/users/betatim/events{/privacy},https://api.github.com/users/betatim/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2089976421/reactions,1,1,0,0,0,0,0,0,0,15609
2517,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105294049,https://github.com/rapidsai/cudf/issues/15609#issuecomment-2105294049,https://api.github.com/repos/rapidsai/cudf/issues/15609,2105294049,IC_kwDOBWUGps59fDzh,2024-05-10T21:29:46Z,2024-05-10T21:29:46Z,CONTRIBUTOR,"There is a much older issue https://github.com/rapidsai/cudf/issues/931 discussing this problem. I'm going to close that one in favor of this one since the discussion here is much more current, but some of the discussions there (particularly around ensuring that we also support non-Python users in some way) still apply.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2105294049/reactions,0,0,0,0,0,0,0,0,0,15609
2518,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083794617,https://github.com/rapidsai/cudf/issues/15612#issuecomment-2083794617,https://api.github.com/repos/rapidsai/cudf/issues/15612,2083794617,IC_kwDOBWUGps58NC65,2024-04-29T22:27:50Z,2024-04-29T22:27:50Z,CONTRIBUTOR,"Measured memory use by `hostdevice_vector` in cuIO benchmarks as a percentage of peak device memory use. The pinned memory use is proportional to device memory use, so we can use the peak device memory use as a measure of how much pinned memory we would need if we used up all device memory.
The results show that we would never fall back to new pinned allocations with a pinned pool sized at 4% of device memory capacity. However, even at 0.5%, the pool can be used to allocate 90% of used pinned memory without additional allocations.
![image](https://github.com/rapidsai/cudf/assets/16005690/dcdc9d0e-5f08-4759-b7b6-14552185e1e4)",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083794617/reactions,0,0,0,0,0,0,0,0,0,15612
2519,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083807703,https://github.com/rapidsai/cudf/issues/15612#issuecomment-2083807703,https://api.github.com/repos/rapidsai/cudf/issues/15612,2083807703,IC_kwDOBWUGps58NGHX,2024-04-29T22:40:00Z,2024-04-29T22:41:45Z,CONTRIBUTOR,"Benchmarking results:
![image](https://github.com/rapidsai/cudf/assets/16005690/6f5282b2-a7bf-4f1b-a59d-3be881261486)
""relative throughput"" is the average ratio of the throughput with the custom resource and the throughput with default (pinned, non-pooled) resource.

Benchmarks consistently show improvement with pooled resource compared to pinned allocations.
`read_json` shows disproportionate improvement because of small benchmarks that are hugely impacted by a single pinned allocation.
Data also show that small pools bring very similar performance improvement to the pool that never falls back to new allocations.
Surprisingly, benchmarks also show that using pageable memory in `hostdevice_vector` is preferable to pinned (non-pooled).

TODO: run benchmarks from https://github.com/rapidsai/cudf/pull/15585 because we expect to see higher impact in multi-threaded use cases.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2083807703/reactions,0,0,0,0,0,0,0,0,0,15612
2520,https://api.github.com/repos/rapidsai/cudf/issues/comments/2088660725,https://github.com/rapidsai/cudf/issues/15618#issuecomment-2088660725,https://api.github.com/repos/rapidsai/cudf/issues/15618,2088660725,IC_kwDOBWUGps58fm71,2024-05-01T15:47:04Z,2024-05-01T15:47:04Z,CONTRIBUTOR,"if in either case we want the user to call `to_cupy`, why not call it directly in `__array__`?",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2088660725/reactions,0,0,0,0,0,0,0,0,0,15618
2521,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099441982,https://github.com/rapidsai/cudf/issues/15618#issuecomment-2099441982,https://api.github.com/repos/rapidsai/cudf/issues/15618,2099441982,IC_kwDOBWUGps59IvE-,2024-05-07T22:56:22Z,2024-05-07T22:56:22Z,CONTRIBUTOR,"Apologies for the slow response here. The main reason not to call it directly in `__array__` is that it would be surprising to users if `np.asarray(cudf.RangeIndex(...))` returned a cupy array instead of a numpy array, especially since there are types that are representable in cudf and in numpy but not in cupy so the above conversion would actually fail if we implicitly converted to cupy instead of numpy.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099441982/reactions,1,1,0,0,0,0,0,0,0,15618
2522,https://api.github.com/repos/rapidsai/cudf/issues/comments/2086306889,https://github.com/rapidsai/cudf/issues/15620#issuecomment-2086306889,https://api.github.com/repos/rapidsai/cudf/issues/15620,2086306889,IC_kwDOBWUGps58WoRJ,2024-04-30T18:01:01Z,2024-04-30T18:01:01Z,CONTRIBUTOR,"Are there any ways in which CCCL's `cuda::memcpy_async` could help us here? https://nvidia.github.io/cccl/libcudacxx/extended_api/asynchronous_operations/memcpy_async.html

I'm not super familiar with the facilities libcudacxx provides for this, but perhaps this could be in scope.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2086306889/reactions,0,0,0,0,0,0,0,0,0,15620
2523,https://api.github.com/repos/rapidsai/cudf/issues/comments/2086667470,https://github.com/rapidsai/cudf/issues/15620#issuecomment-2086667470,https://api.github.com/repos/rapidsai/cudf/issues/15620,2086667470,IC_kwDOBWUGps58YATO,2024-04-30T19:07:47Z,2024-04-30T19:07:47Z,CONTRIBUTOR,"@bdice I am not familiar with it either. A quick code search is yielding that `cuda::memcpy_async` handles D2D copies (shared, global). I suppose we could refer to pinned memory as another ""device"" memory type, so in that case I see some relation, but the main thing is code we use to orchestrate copies should likely fallback to `cudaMemcpyAsync`: if pinned memory isn't available to bounce the copy through, or if it's disabled. I believe single threaded applications (single stream) may want to use `cudaMemcpyAsync` as is, because there shouldn't be much contention on the CE in those cases.",,abellina,1901059,MDQ6VXNlcjE5MDEwNTk=,https://avatars.githubusercontent.com/u/1901059?v=4,,https://api.github.com/users/abellina,https://github.com/abellina,https://api.github.com/users/abellina/followers,https://api.github.com/users/abellina/following{/other_user},https://api.github.com/users/abellina/gists{/gist_id},https://api.github.com/users/abellina/starred{/owner}{/repo},https://api.github.com/users/abellina/subscriptions,https://api.github.com/users/abellina/orgs,https://api.github.com/users/abellina/repos,https://api.github.com/users/abellina/events{/privacy},https://api.github.com/users/abellina/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2086667470/reactions,0,0,0,0,0,0,0,0,0,15620
2524,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087236600,https://github.com/rapidsai/cudf/issues/15620#issuecomment-2087236600,https://api.github.com/repos/rapidsai/cudf/issues/15620,2087236600,IC_kwDOBWUGps58aLP4,2024-04-30T20:49:54Z,2024-04-30T20:49:54Z,CONTRIBUTOR,I suspect many of the small copies in `cuDF` come from `rmm::device_scalar`. We could just update the implementation to use a kernel instead of `cudaMemcpy*`. ,,jrhemstad,15221289,MDQ6VXNlcjE1MjIxMjg5,https://avatars.githubusercontent.com/u/15221289?v=4,,https://api.github.com/users/jrhemstad,https://github.com/jrhemstad,https://api.github.com/users/jrhemstad/followers,https://api.github.com/users/jrhemstad/following{/other_user},https://api.github.com/users/jrhemstad/gists{/gist_id},https://api.github.com/users/jrhemstad/starred{/owner}{/repo},https://api.github.com/users/jrhemstad/subscriptions,https://api.github.com/users/jrhemstad/orgs,https://api.github.com/users/jrhemstad/repos,https://api.github.com/users/jrhemstad/events{/privacy},https://api.github.com/users/jrhemstad/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2087236600/reactions,1,0,0,0,0,0,1,0,0,15620
2525,https://api.github.com/repos/rapidsai/cudf/issues/comments/2093562167,https://github.com/rapidsai/cudf/issues/15620#issuecomment-2093562167,https://api.github.com/repos/rapidsai/cudf/issues/15620,2093562167,IC_kwDOBWUGps58yTk3,2024-05-03T18:40:50Z,2024-05-03T18:40:50Z,CONTRIBUTOR,"> I suspect many of the small copies in `cuDF` come from `rmm::device_scalar`. We could just update the implementation to use a kernel instead of `cudaMemcpy*`.

AFAIK we also need to get `device_scalar` to use pinned memory. Which implies that we'd also need to pass a host memory resource at to enable the use of a pinned pool.",,vuule,16005690,MDQ6VXNlcjE2MDA1Njkw,https://avatars.githubusercontent.com/u/16005690?v=4,,https://api.github.com/users/vuule,https://github.com/vuule,https://api.github.com/users/vuule/followers,https://api.github.com/users/vuule/following{/other_user},https://api.github.com/users/vuule/gists{/gist_id},https://api.github.com/users/vuule/starred{/owner}{/repo},https://api.github.com/users/vuule/subscriptions,https://api.github.com/users/vuule/orgs,https://api.github.com/users/vuule/repos,https://api.github.com/users/vuule/events{/privacy},https://api.github.com/users/vuule/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2093562167/reactions,0,0,0,0,0,0,0,0,0,15620
2526,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094002898,https://github.com/rapidsai/cudf/issues/15647#issuecomment-2094002898,https://api.github.com/repos/rapidsai/cudf/issues/15647,2094002898,IC_kwDOBWUGps58z_LS,2024-05-04T04:25:03Z,2024-05-04T04:25:03Z,CONTRIBUTOR,"@bdice @wence-, tagging you both for visibility here",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094002898/reactions,0,0,0,0,0,0,0,0,0,15647
2527,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099487222,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2099487222,https://api.github.com/repos/rapidsai/cudf/issues/15649,2099487222,IC_kwDOBWUGps59I6H2,2024-05-07T23:48:59Z,2024-05-07T23:48:59Z,CONTRIBUTOR,"I don't think we want to support concatenating indexes, but I think cudf does rely on this behavior internally. I have a vague recollection of trying to remove this at one point and realizing that there were dependent changes required to make that happen. It looks like you've started adding deprecations for this in #15650, which is a great way to check this. Since our test suite runs with warnings as errors, if there are internal usages of concatenating indexes we'll see them as test failures there. Let's see how that goes!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099487222/reactions,0,0,0,0,0,0,0,0,0,15649
2528,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099492442,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2099492442,https://api.github.com/repos/rapidsai/cudf/issues/15649,2099492442,IC_kwDOBWUGps59I7Za,2024-05-07T23:55:40Z,2024-05-08T01:30:47Z,CONTRIBUTOR,"@vyasr assuming we have reasonable test coverage, based on my PR, the areas with dependent code are related to:
1. `cudf` `Index`es (not a big shocker there)
2. `cudf` parquets
3. `dask_cudf` parquets
4. `dask_cudf` accessor
5. `dask_cudf` core",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099492442/reactions,0,0,0,0,0,0,0,0,0,15649
2529,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101670856,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2101670856,https://api.github.com/repos/rapidsai/cudf/issues/15649,2101670856,IC_kwDOBWUGps59RPPI,2024-05-08T23:44:36Z,2024-05-08T23:44:36Z,CONTRIBUTOR,"OK awesome. It looks like you've started trying to catch those warnings in #15650, which is a good way to make sure that you've tracked down all the cases. However, I don't think we want to merge that exactly as is, because if we do then our users will start seeing a lot of warnings from APIs that they can't do anything about. We do want to verify that `cudf.concat` is itself going to throw the warning when users directly use it in a way that will be unsupported in the future, but we want to make sure that users don't see warnings due to our own code internally using deprecated functionality. We should start working through those APIs to see how best to rewrite them so that they don't rely on the deprecated functionality anymore. Does that make sense? Feel free to ask questions here (or on the PR)!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101670856/reactions,0,0,0,0,0,0,0,0,0,15649
2530,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101883426,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2101883426,https://api.github.com/repos/rapidsai/cudf/issues/15649,2101883426,IC_kwDOBWUGps59SDIi,2024-05-09T03:52:00Z,2024-05-09T03:52:00Z,CONTRIBUTOR,"@vyasr that makes sense, i'll set the PR to draft mode until i can work through 2, 3, 4, & 5 listed above (the only failing unit test for 1 directly calls `cudf.concat`, so i think we don't need an investigation there)",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101883426/reactions,0,0,0,0,0,0,0,0,0,15649
2531,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113645616,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2113645616,https://api.github.com/repos/rapidsai/cudf/issues/15649,2113645616,IC_kwDOBWUGps59-6ww,2024-05-15T23:26:04Z,2024-05-15T23:26:04Z,CONTRIBUTOR,Thanks! Feel free to let us know if you run into any issues and need some help.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113645616/reactions,0,0,0,0,0,0,0,0,0,15649
2532,https://api.github.com/repos/rapidsai/cudf/issues/comments/2119244962,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2119244962,https://api.github.com/repos/rapidsai/cudf/issues/15649,2119244962,IC_kwDOBWUGps5-URyi,2024-05-19T13:47:14Z,2024-05-19T13:51:17Z,CONTRIBUTOR,"@vyasr & cc @wence- 

`dask` expects to be able to `concat` `Index` objects: https://github.com/dask/dask/blob/main/dask/dataframe/dispatch.py#L50

`cudf` calls `dask`, which then calls the `concat` in `cudf` via this definition: https://github.com/rapidsai/cudf/blob/branch-24.06/python/dask_cudf/dask_cudf/backends.py#L276

based on the above, it seems to me that we need a function which supports the concatenation of `cudf.BaseIndex` objects. if you agree this is the case, then i think we shouldn't deprecate this functionality. some possibilities that come to mind (i am missing context here):
1. move the concatenation of `cudf.BaseIndex` to a function other than `reshape`'s `concat`. make the func specific to `cudf.BaseIndex`. make a new `backends` func to handle this.
2. leave the functionality in `reshape`'s `concat`, accept we diverge from `pandas` functionality for `concat`
3. remove the associated calls to `dask` so we don't need to worry about what they're doing. this seems like something that wouldn't be worth our time
4. convince the `dask` team to deprecate their concatenation? this seems like something not worth pursuing.

what do you think?",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2119244962/reactions,0,0,0,0,0,0,0,0,0,15649
2533,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121317775,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2121317775,https://api.github.com/repos/rapidsai/cudf/issues/15649,2121317775,IC_kwDOBWUGps5-cL2P,2024-05-20T22:25:35Z,2024-05-20T22:25:35Z,CONTRIBUTOR,"Good analysis! You've found most of the relevant places, but what we ought to also look at is how dask implements concatenation for pandas indexes. It looks dask uses append for pandas indexes. You can see the implementation in dask for pandas dataframes [here](https://github.com/dask/dask/blob/main/dask/dataframe/backends.py#L562). The append method [was removed for Series and DataFrame in pandas 2.0](https://pandas.pydata.org/docs/dev/whatsnew/v2.0.0.html#removal-of-prior-version-deprecations-changes), but [it still exists for indexes](https://pandas.pydata.org/docs/reference/api/pandas.Index.append.html). So what we probably want to do is update the dispatch in the dask_cudf backend that you linked to to use the index append method.

In the long run, we might want to discuss with pandas developers whether there should be more uniformity between the different types and whether they use append or concat. @mroeschke might know how and why pandas ended up in the current heterogeneous state. However, any such changes in pandas would be a longer-term thing, so we should be able to proceed with the above plan in the interim.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121317775/reactions,0,0,0,0,0,0,0,0,0,15649
2534,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121538601,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2121538601,https://api.github.com/repos/rapidsai/cudf/issues/15649,2121538601,IC_kwDOBWUGps5-dBwp,2024-05-21T01:35:29Z,2024-05-21T01:35:29Z,CONTRIBUTOR,"thanks so much for the context, @vyasr! i'll plan to proceed with 1 via the usage of index append -- to me, the implementation in dask pandas is ugly. i think it'd be easier to follow if we separated indices from other objects",,er-eis,23666842,MDQ6VXNlcjIzNjY2ODQy,https://avatars.githubusercontent.com/u/23666842?v=4,,https://api.github.com/users/er-eis,https://github.com/er-eis,https://api.github.com/users/er-eis/followers,https://api.github.com/users/er-eis/following{/other_user},https://api.github.com/users/er-eis/gists{/gist_id},https://api.github.com/users/er-eis/starred{/owner}{/repo},https://api.github.com/users/er-eis/subscriptions,https://api.github.com/users/er-eis/orgs,https://api.github.com/users/er-eis/repos,https://api.github.com/users/er-eis/events{/privacy},https://api.github.com/users/er-eis/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121538601/reactions,0,0,0,0,0,0,0,0,0,15649
2535,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123193514,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2123193514,https://api.github.com/repos/rapidsai/cudf/issues/15649,2123193514,IC_kwDOBWUGps5-jVyq,2024-05-21T18:23:32Z,2024-05-21T18:23:32Z,CONTRIBUTOR,"> In the long run, we might want to discuss with pandas developers whether there should be more uniformity between the different types and whether they use append or concat. @mroeschke might know how and why pandas ended up in the current heterogeneous state. 

IIRC `pandas.Series.append` and `pandas.DataFrame.append` were deprecated because similar and more performance functionality existed in `pandas.concat`; however, `pandas.concat` never worked on `pandas.Index` objects that why `.append` exists on `pandas.Index`.

I'm not sure if `pandas.concat` will ever support `pandas.Index` objects though since it's used for ""concat pandas objects that have axes""",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123193514/reactions,0,0,0,0,0,0,0,0,0,15649
2536,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123576914,https://github.com/rapidsai/cudf/issues/15649#issuecomment-2123576914,https://api.github.com/repos/rapidsai/cudf/issues/15649,2123576914,IC_kwDOBWUGps5-kzZS,2024-05-21T23:12:51Z,2024-05-21T23:12:51Z,CONTRIBUTOR,Hmm OK yeah I guess that sort of makes sense. I really wish there were fewer ways in which we needed to special-case for indexes.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123576914/reactions,0,0,0,0,0,0,0,0,0,15649
2537,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118316919,https://github.com/rapidsai/cudf/issues/15651#issuecomment-2118316919,https://api.github.com/repos/rapidsai/cudf/issues/15651,2118316919,IC_kwDOBWUGps5-QvN3,2024-05-17T20:12:01Z,2024-05-17T20:12:01Z,CONTRIBUTOR,"For reference, the broader ask (refactoring parametrization to either prefer fixtures or move GPU data instantiation into the test to avoid materialization on test collection) is being tracked in #9999. Since you have a PR to close this specific issue, I'm happy to leave this one open, though.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118316919/reactions,0,0,0,0,0,0,0,0,0,15651
2538,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094302309,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2094302309,https://api.github.com/repos/rapidsai/cudf/issues/15653,2094302309,IC_kwDOBWUGps581IRl,2024-05-04T17:00:05Z,2024-05-04T17:00:05Z,CONTRIBUTOR,"@shriramch You can use an owning object like a `std::deque<expression>` or `std::list<expression>` where references are stable (`std::vector` can reallocate and invalidate references). The lifetime of the AST expressions would then be tied to the lifetime of that container, and you can return it or pass it around.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094302309/reactions,0,0,0,0,0,0,0,0,0,15653
2539,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094302953,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2094302953,https://api.github.com/repos/rapidsai/cudf/issues/15653,2094302953,IC_kwDOBWUGps581Ibp,2024-05-04T17:01:53Z,2024-05-04T17:01:53Z,CONTRIBUTOR,"For an example of constructing an expression tree, see this benchmark: https://github.com/rapidsai/cudf/blob/23bb2ed156d164b59e608e7e791c74db5cb4bce8/cpp/benchmarks/ast/transform.cpp#L65-L87",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2094302953/reactions,0,0,0,0,0,0,0,0,0,15653
2540,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099488971,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2099488971,https://api.github.com/repos/rapidsai/cudf/issues/15653,2099488971,IC_kwDOBWUGps59I6jL,2024-05-07T23:50:47Z,2024-05-07T23:50:47Z,CONTRIBUTOR,"FWIW we'd also be OK with changing the current model, see #10744. If you would like to make that change, a PR is welcome!",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2099488971/reactions,0,0,0,0,0,0,0,0,0,15653
2541,https://api.github.com/repos/rapidsai/cudf/issues/comments/2104159372,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2104159372,https://api.github.com/repos/rapidsai/cudf/issues/15653,2104159372,IC_kwDOBWUGps59auyM,2024-05-10T08:16:34Z,2024-05-10T08:16:34Z,NONE,"@bdice Thank you, this approach worked.",,shriramch,55884643,MDQ6VXNlcjU1ODg0NjQz,https://avatars.githubusercontent.com/u/55884643?v=4,,https://api.github.com/users/shriramch,https://github.com/shriramch,https://api.github.com/users/shriramch/followers,https://api.github.com/users/shriramch/following{/other_user},https://api.github.com/users/shriramch/gists{/gist_id},https://api.github.com/users/shriramch/starred{/owner}{/repo},https://api.github.com/users/shriramch/subscriptions,https://api.github.com/users/shriramch/orgs,https://api.github.com/users/shriramch/repos,https://api.github.com/users/shriramch/events{/privacy},https://api.github.com/users/shriramch/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2104159372/reactions,0,0,0,0,0,0,0,0,0,15653
2542,https://api.github.com/repos/rapidsai/cudf/issues/comments/2106173955,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2106173955,https://api.github.com/repos/rapidsai/cudf/issues/15653,2106173955,IC_kwDOBWUGps59iaoD,2024-05-12T09:01:53Z,2024-05-12T09:01:53Z,NONE,"@vyasr Sure, I'd like to try this.",,shriramch,55884643,MDQ6VXNlcjU1ODg0NjQz,https://avatars.githubusercontent.com/u/55884643?v=4,,https://api.github.com/users/shriramch,https://github.com/shriramch,https://api.github.com/users/shriramch/followers,https://api.github.com/users/shriramch/following{/other_user},https://api.github.com/users/shriramch/gists{/gist_id},https://api.github.com/users/shriramch/starred{/owner}{/repo},https://api.github.com/users/shriramch/subscriptions,https://api.github.com/users/shriramch/orgs,https://api.github.com/users/shriramch/repos,https://api.github.com/users/shriramch/events{/privacy},https://api.github.com/users/shriramch/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2106173955/reactions,0,0,0,0,0,0,0,0,0,15653
2543,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113637224,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2113637224,https://api.github.com/repos/rapidsai/cudf/issues/15653,2113637224,IC_kwDOBWUGps59-4to,2024-05-15T23:21:04Z,2024-05-15T23:21:04Z,CONTRIBUTOR,@shriramch OK great! Feel free to post here if you need help in getting a development environment set up for cudf!,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113637224/reactions,0,0,0,0,0,0,0,0,0,15653
2544,https://api.github.com/repos/rapidsai/cudf/issues/comments/2115526022,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2115526022,https://api.github.com/repos/rapidsai/cudf/issues/15653,2115526022,IC_kwDOBWUGps5-GF2G,2024-05-16T15:15:46Z,2024-05-16T15:15:46Z,NONE,@vyasr Is it possible to get a remote development environment? Unfortunately I can't do this on my current PC.,,shriramch,55884643,MDQ6VXNlcjU1ODg0NjQz,https://avatars.githubusercontent.com/u/55884643?v=4,,https://api.github.com/users/shriramch,https://github.com/shriramch,https://api.github.com/users/shriramch/followers,https://api.github.com/users/shriramch/following{/other_user},https://api.github.com/users/shriramch/gists{/gist_id},https://api.github.com/users/shriramch/starred{/owner}{/repo},https://api.github.com/users/shriramch/subscriptions,https://api.github.com/users/shriramch/orgs,https://api.github.com/users/shriramch/repos,https://api.github.com/users/shriramch/events{/privacy},https://api.github.com/users/shriramch/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2115526022/reactions,0,0,0,0,0,0,0,0,0,15653
2545,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118314363,https://github.com/rapidsai/cudf/issues/15653#issuecomment-2118314363,https://api.github.com/repos/rapidsai/cudf/issues/15653,2118314363,IC_kwDOBWUGps5-Qul7,2024-05-17T20:09:52Z,2024-05-17T20:09:52Z,CONTRIBUTOR,Would you be able to spin up an EC2 or GCP instance for this? I think getting access on one of the cloud services would be the easiest. [Paperspace](https://www.paperspace.com/) is another good option.,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2118314363/reactions,0,0,0,0,0,0,0,0,0,15653
2546,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101700454,https://github.com/rapidsai/cudf/issues/15694#issuecomment-2101700454,https://api.github.com/repos/rapidsai/cudf/issues/15694,2101700454,IC_kwDOBWUGps59RWdm,2024-05-09T00:15:39Z,2024-05-09T00:15:39Z,CONTRIBUTOR,"Thanks for the report. As your post highlights it looks like the core issue is that `cudf.pandas` wraps numpy arrays (to use cupy if possible) and this wrapped array is not compatible with numba

```python
In [1]: import cudf.pandas
   ...: cudf.pandas.install()
   ...: 
   ...: import pandas as pd
i
In [2]: import numba

In [3]: @numba.jit(nopython=True, nogil=True)
   ...: def f(x):
   ...:     return x
   ...: 

In [4]: f(pd.Series([1]).values)
---------------------------------------------------------------------------
TypingError                               Traceback (most recent call last)
Cell In[4], line 1
----> 1 f(pd.Series([1]).values)

File ~/miniforge3/envs/cudf-dev/lib/python3.11/site-packages/numba/core/dispatcher.py:468, in _DispatcherBase._compile_for_args(self, *args, **kws)
    464         msg = (f""{str(e).rstrip()} \n\nThis error may have been caused ""
    465                f""by the following argument(s):\n{args_str}\n"")
    466         e.patch_message(msg)
--> 468     error_rewrite(e, 'typing')
    469 except errors.UnsupportedError as e:
    470     # Something unsupported is present in the user code, add help info
    471     error_rewrite(e, 'unsupported_error')

File ~/miniforge3/envs/cudf-dev/lib/python3.11/site-packages/numba/core/dispatcher.py:409, in _DispatcherBase._compile_for_args.<locals>.error_rewrite(e, issue_type)
    407     raise e
    408 else:
--> 409     raise e.with_traceback(None)

TypingError: Failed in nopython mode pipeline (step: nopython frontend)
non-precise type pyobject
During: typing of argument at <ipython-input-3-88a5a2446c8f> (1)

File ""<ipython-input-3-88a5a2446c8f>"", line 1:
@numba.jit(nopython=True, nogil=True)
^ 

This error may have been caused by the following argument(s):
- argument 0: Cannot determine Numba type of <class 'cudf.pandas._wrappers.numpy.ndarray'>
```

Going to repurpose this issue to be about compatibility with numba.",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101700454/reactions,0,0,0,0,0,0,0,0,0,15694
2547,https://api.github.com/repos/rapidsai/cudf/issues/comments/2102756134,https://github.com/rapidsai/cudf/issues/15694#issuecomment-2102756134,https://api.github.com/repos/rapidsai/cudf/issues/15694,2102756134,IC_kwDOBWUGps59VYMm,2024-05-09T14:18:55Z,2024-05-09T14:18:55Z,MEMBER,@brandon-b-miller when you have time can you also take a look at how cudf.pandas and numba are interoperating ?,,quasiben,1403768,MDQ6VXNlcjE0MDM3Njg=,https://avatars.githubusercontent.com/u/1403768?v=4,,https://api.github.com/users/quasiben,https://github.com/quasiben,https://api.github.com/users/quasiben/followers,https://api.github.com/users/quasiben/following{/other_user},https://api.github.com/users/quasiben/gists{/gist_id},https://api.github.com/users/quasiben/starred{/owner}{/repo},https://api.github.com/users/quasiben/subscriptions,https://api.github.com/users/quasiben/orgs,https://api.github.com/users/quasiben/repos,https://api.github.com/users/quasiben/events{/privacy},https://api.github.com/users/quasiben/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2102756134/reactions,0,0,0,0,0,0,0,0,0,15694
2548,https://api.github.com/repos/rapidsai/cudf/issues/comments/2103325431,https://github.com/rapidsai/cudf/issues/15694#issuecomment-2103325431,https://api.github.com/repos/rapidsai/cudf/issues/15694,2103325431,IC_kwDOBWUGps59XjL3,2024-05-09T19:58:13Z,2024-05-09T19:58:13Z,CONTRIBUTOR,There might be a way to write a little numba extension code within `cudf.pandas` that registers `cudf.pandas._wrappers.numpy.ndarray` objects as something numba can unbox into a numpy array or cupy array. If that worked we could probably do the registration at import time. I'll investigate. ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2103325431/reactions,2,2,0,0,0,0,0,0,0,15694
2549,https://api.github.com/repos/rapidsai/cudf/issues/comments/2127325342,https://github.com/rapidsai/cudf/issues/15694#issuecomment-2127325342,https://api.github.com/repos/rapidsai/cudf/issues/15694,2127325342,IC_kwDOBWUGps5-zGie,2024-05-23T14:46:54Z,2024-05-23T14:46:54Z,CONTRIBUTOR,Just a few quick updates here. We took a look at some simple ways of solving this with without too much hacking of numba and didn't come up with a solution we can merge into cuDF in the very immediate term. There's a few more medium term approaches in the form of updates to numba main that may do the trick however. I would like to keep this issue open as we progress and can give more updates here as we have them. ,,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2127325342/reactions,0,0,0,0,0,0,0,0,0,15694
2550,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101680003,https://github.com/rapidsai/cudf/issues/15696#issuecomment-2101680003,https://api.github.com/repos/rapidsai/cudf/issues/15696,2101680003,IC_kwDOBWUGps59RReD,2024-05-08T23:55:23Z,2024-05-08T23:55:23Z,CONTRIBUTOR,"It appears that `groupby.value_counts` is only properly implemented for `DataFrameGroupby`. In pandas `value_counts` has a different signature depending on whether the resulting grouped object is a Series or DataFrame.

```python
# DataFrameGroupby
    def value_counts(
        self,
        subset: Sequence[Hashable] | None = None,
        normalize: bool = False,
        sort: bool = True,
        ascending: bool = False,
        dropna: bool = True,
    ) -> DataFrame | Series:
```

```python
# SeriesGroupby
    def value_counts(
        self,
        normalize: bool = False,
        sort: bool = True,
        ascending: bool = False,
        bins=None,
        dropna: bool = True,
    ) -> Series | DataFrame:
```",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2101680003/reactions,0,0,0,0,0,0,0,0,0,15696
2551,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121402056,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2121402056,https://api.github.com/repos/rapidsai/cudf/issues/15741,2121402056,IC_kwDOBWUGps5-cgbI,2024-05-20T23:34:13Z,2024-05-20T23:34:13Z,CONTRIBUTOR,"This kind of operations is not natively supported, unfortunately. The fundamental issue is that pandas allows you to put arbitrary objects into a Series/DataFrame and it will run Python operations on them. In this case, since you put numpy arrays in, pandas will happily just leave them as numpy arrays and use binary operations on numpy array so this works as expected. cudf does not support arbitrary objects in this way, so we have to be a bit more clever about rearranging the data ourselves to handle this kind of operation. Per-row array data is supported through the list dtype, which is what your'e getting in the `from_pandas` call in your snippet. To work with that in vectorized fashion, the typical approach is to use the [`explode` method, which flattens out the data](https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.dataframe.explode/). Here is a snippet that gives you an essentially equivalent result (slight differences in column names etc):
```
import cudf
import numpy as np
import pandas as pd

# Sample DataFrame with Pandas to cuDF conversion
data = {
    'category': ['A', 'A', 'B', 'B'],
    'values': [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9]), np.array([10, 11, 12])]
}
pdf = pd.DataFrame(data)
df = cudf.DataFrame.from_pandas(pdf)

print(""pandas result"")
print(pdf.groupby('category').agg({'values': ['sum', 'mean']}))
print()

exploded_values = df[[""values""]].explode(""values"")
df = df[[""category""]].merge(exploded_values, left_index=True, right_index=True)
df[""index""] = np.tile(np.arange(3), 4)

print(""cudf result"")
print(df.groupby([""category"", ""index""]).agg({""values"": [""sum"", ""mean""]}).groupby(""category"").collect())
```

This outputs:
```
pandas result
                values                  
                   sum              mean
category                                
A            [5, 7, 9]   [2.5, 3.5, 4.5]
B         [17, 19, 21]  [8.5, 9.5, 10.5]

cudf result
         (values, sum)    (values, mean)
category                                
A            [5, 9, 7]   [2.5, 4.5, 3.5]
B         [19, 17, 21]  [9.5, 8.5, 10.5]
```",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2121402056/reactions,0,0,0,0,0,0,0,0,0,15741
2552,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123811369,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2123811369,https://api.github.com/repos/rapidsai/cudf/issues/15741,2123811369,IC_kwDOBWUGps5-lsop,2024-05-22T03:44:02Z,2024-05-22T03:44:02Z,NONE,"@vyasr Thanks for your suggestion. The suggestion you gave above is equivalent to **splitting array into separate columns, then apply sum()/mean() on each column, and merge the output back into an array**?",,Rhett-Ying,85214957,MDQ6VXNlcjg1MjE0OTU3,https://avatars.githubusercontent.com/u/85214957?v=4,,https://api.github.com/users/Rhett-Ying,https://github.com/Rhett-Ying,https://api.github.com/users/Rhett-Ying/followers,https://api.github.com/users/Rhett-Ying/following{/other_user},https://api.github.com/users/Rhett-Ying/gists{/gist_id},https://api.github.com/users/Rhett-Ying/starred{/owner}{/repo},https://api.github.com/users/Rhett-Ying/subscriptions,https://api.github.com/users/Rhett-Ying/orgs,https://api.github.com/users/Rhett-Ying/repos,https://api.github.com/users/Rhett-Ying/events{/privacy},https://api.github.com/users/Rhett-Ying/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123811369/reactions,0,0,0,0,0,0,0,0,0,15741
2553,https://api.github.com/repos/rapidsai/cudf/issues/comments/2126158200,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2126158200,https://api.github.com/repos/rapidsai/cudf/issues/15741,2126158200,IC_kwDOBWUGps5-upl4,2024-05-23T03:21:57Z,2024-05-23T03:21:57Z,CONTRIBUTOR,"Yes, that is basically equivalent. You cannot operate on the numpy arrays directly, but assuming they are all of the same length you could split them into multiple columns if you have control of that on construction. Otherwise the list-based approach I showed is the way you could process it if you have to take the numpy array-based inputs from pandas as-is.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2126158200/reactions,0,0,0,0,0,0,0,0,0,15741
2554,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138446565,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138446565,https://api.github.com/repos/rapidsai/cudf/issues/15741,2138446565,IC_kwDOBWUGps5_dhrl,2024-05-30T00:13:25Z,2024-05-30T00:13:25Z,CONTRIBUTOR,@Rhett-Ying does the above solution address your needs?,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138446565/reactions,0,0,0,0,0,0,0,0,0,15741
2555,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138461047,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138461047,https://api.github.com/repos/rapidsai/cudf/issues/15741,2138461047,IC_kwDOBWUGps5_dlN3,2024-05-30T00:31:20Z,2024-05-30T00:31:20Z,NONE,@vyasr Thanks for your suggestion. One major concern for me is the performance. Especially when I want to apply more advanced operations on vector data such as K-Nearest-Neighbor Search. Should I leverage tools like [CUVS](https://github.com/rapidsai/cuvs) for operations on vector data?,,Rhett-Ying,85214957,MDQ6VXNlcjg1MjE0OTU3,https://avatars.githubusercontent.com/u/85214957?v=4,,https://api.github.com/users/Rhett-Ying,https://github.com/Rhett-Ying,https://api.github.com/users/Rhett-Ying/followers,https://api.github.com/users/Rhett-Ying/following{/other_user},https://api.github.com/users/Rhett-Ying/gists{/gist_id},https://api.github.com/users/Rhett-Ying/starred{/owner}{/repo},https://api.github.com/users/Rhett-Ying/subscriptions,https://api.github.com/users/Rhett-Ying/orgs,https://api.github.com/users/Rhett-Ying/repos,https://api.github.com/users/Rhett-Ying/events{/privacy},https://api.github.com/users/Rhett-Ying/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138461047/reactions,0,0,0,0,0,0,0,0,0,15741
2556,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145615702,https://github.com/rapidsai/cudf/issues/15741#issuecomment-2145615702,https://api.github.com/repos/rapidsai/cudf/issues/15741,2145615702,IC_kwDOBWUGps5_439W,2024-06-03T16:14:13Z,2024-06-03T16:14:13Z,CONTRIBUTOR,"For more advanced operations, yes it will depend. If operators already exist in other libraries like cuVS those will almost certainly be faster than any apply-based solution you come up with in just cudf. In general, if you are trying to do vectorized operations on homogeneous vectors (i.e. something that would fit in a square matrix, or a higher-order tensor, and not needing a ragged list), you will likely have better luck implementing those types of operations performantly in cupy. That's also true on the host: you would probably get better performance using numpy operations than pandas operations for something like a manual kNN implementation since with numpy you can devolve directly to its vectorized operations (implemented in C) whereas with pandas you introduce some extra layers of Python.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145615702/reactions,0,0,0,0,0,0,0,0,0,15741
2557,https://api.github.com/repos/rapidsai/cudf/issues/comments/2111045750,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2111045750,https://api.github.com/repos/rapidsai/cudf/issues/15746,2111045750,IC_kwDOBWUGps591AB2,2024-05-14T20:02:45Z,2024-05-14T20:02:45Z,CONTRIBUTOR,"This has been requested before: https://github.com/rapidsai/cudf/issues/11979
Supporting an array of single characters may be doable but supporting `\r\n` will likely not be possible.",,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2111045750/reactions,0,0,0,0,0,0,0,0,0,15746
2558,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123425209,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2123425209,https://api.github.com/repos/rapidsai/cudf/issues/15746,2123425209,IC_kwDOBWUGps5-kOW5,2024-05-21T20:54:02Z,2024-05-21T20:54:14Z,CONTRIBUTOR,"Thank you @NVnavkumar for raising this topic. Would you please share more information about this?
* what is the performance for a line terminator pattern that only matches `\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?
* would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?
* As @davidwendt mentioned, supporting a `\r\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?
* Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\r`, `\n`,` \u0085`, `\u2028`, or `\u2029` but not `\r\n`?",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123425209/reactions,0,0,0,0,0,0,0,0,0,15746
2559,https://api.github.com/repos/rapidsai/cudf/issues/comments/2135921038,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2135921038,https://api.github.com/repos/rapidsai/cudf/issues/15746,2135921038,IC_kwDOBWUGps5_T5GO,2024-05-28T19:01:11Z,2024-05-28T19:01:11Z,CONTRIBUTOR,"> Thank you @NVnavkumar for raising this topic. Would you please share more information about this?
> 
> * what is the performance for a line terminator pattern that only matches `\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?
> * would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?
> * As @davidwendt mentioned, supporting a `\r\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?
> * Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\r`, `\n`,` \u0085`, `\u2028`, or `\u2029` but not `\r\n`?

Addressing these questions here:

* I'm still working on measuring the performance impact here, and trying to ascertain that for certain strings that only include newlines (`\n`), what is the performance impact of the transpiled regex vs sending the original regex into cudf directly. The theory is that these would get pretty close to the Spark output so transpilation overhead can be reduced.

* Line terminators actually dictate both `^` and `$` behavior, since they dictate ultimately both the start and end of the line. Sometimes we want to use these in more complicated ways like choice (e.g.`abc|$` matches `abc` or we just want the end of the line, see https://github.com/NVIDIA/spark-rapids/issues/10764 for corresponding spark-rapids issue). In multiline mode, this means that they basically become a matcher for the line terminator characters themselves or the end of the string.

* One option we have (and we might even have it in lieu of this issue), is to substitute `\r\n` for `\n`, and then run the cudf regexp engine. However, this substitution adds an additional GPU operation **and** manipulates the original string, so for some operations (like extract), we won't get the same output since we won't be able to include the original line terminator in the output. Another option is we could simplify the transpilation to something like `\r\n$|$`. If that works, that might be a better option to maintain compatibility with Spark. I also would like to propose that Spark could disable such a transpilation under a ""maximizeCompatiblity"" flag for perfomance purposes.

* Using the second option described in the previous paragraph, this could still be potentially very useful with the simplified transpilation.

I will try to update with some performance numbers soon.",,NVnavkumar,97137715,U_kgDOBco0Mw,https://avatars.githubusercontent.com/u/97137715?v=4,,https://api.github.com/users/NVnavkumar,https://github.com/NVnavkumar,https://api.github.com/users/NVnavkumar/followers,https://api.github.com/users/NVnavkumar/following{/other_user},https://api.github.com/users/NVnavkumar/gists{/gist_id},https://api.github.com/users/NVnavkumar/starred{/owner}{/repo},https://api.github.com/users/NVnavkumar/subscriptions,https://api.github.com/users/NVnavkumar/orgs,https://api.github.com/users/NVnavkumar/repos,https://api.github.com/users/NVnavkumar/events{/privacy},https://api.github.com/users/NVnavkumar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2135921038/reactions,0,0,0,0,0,0,0,0,0,15746
2560,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146150399,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2146150399,https://api.github.com/repos/rapidsai/cudf/issues/15746,2146150399,IC_kwDOBWUGps5_66f_,2024-06-03T21:24:40Z,2024-06-03T21:24:40Z,CONTRIBUTOR,"From a performance perspective, I did a very brief test with regexp_extract and Spark involving randomly generated strings which only included newlines at the end of the string (as opposed to other types of line terminators).  I chose a relatively simple pattern `(boo:+)$` (which involves a single capture group and the `$` to match the end of the string.  I chose extract since that's the case where the Spark-RAPIDS regexp transpiler code since it tests how extract handles the potential non-capturing group for `$` transpilation:


Here is the performance of the `extract` kernel measured with nsys in 2 scenarios, 1 using the transpiled regex, 2 using the regex as given to cudf. 

```
1) Transpiled Regex
Name	Start	Duration	TID	Category
extract	20.7979s	5.596 ms	939788	
extract	20.7979s	5.593 ms	939789	
extract	20.8318s	4.843 ms	939790	
extract	20.8317s	4.827 ms	939791	
------------------------------------------
 avg                          5.215 ms

2) cuDF using the original regex
Name	Start	Duration	TID	Category
extract	20.6463s	2.719 ms	941563	
extract	20.6789s	        1.840 ms	941564	
extract	20.6465s	2.634 ms	941565	
extract	20.6789s	        1.685 ms	941566	
------------------------------------------
 avg                                   2.220 ms
```

More testing can be done to fully vet this performance characteristic, but it should illustrate how much complexity the transpiled regex is adding to handle these additional line terminators. ",,NVnavkumar,97137715,U_kgDOBco0Mw,https://avatars.githubusercontent.com/u/97137715?v=4,,https://api.github.com/users/NVnavkumar,https://github.com/NVnavkumar,https://api.github.com/users/NVnavkumar/followers,https://api.github.com/users/NVnavkumar/following{/other_user},https://api.github.com/users/NVnavkumar/gists{/gist_id},https://api.github.com/users/NVnavkumar/starred{/owner}{/repo},https://api.github.com/users/NVnavkumar/subscriptions,https://api.github.com/users/NVnavkumar/orgs,https://api.github.com/users/NVnavkumar/repos,https://api.github.com/users/NVnavkumar/events{/privacy},https://api.github.com/users/NVnavkumar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146150399/reactions,0,0,0,0,0,0,0,0,0,15746
2561,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148317768,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2148317768,https://api.github.com/repos/rapidsai/cudf/issues/15746,2148317768,IC_kwDOBWUGps6ADLpI,2024-06-04T19:58:41Z,2024-06-04T19:58:41Z,CONTRIBUTOR,@NVnavkumar Would you please post an example of the transpiled pattern? I would love to see the new pattern that comes out after you go through the steps to convert `$` into something that gives correct result.,,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148317768/reactions,0,0,0,0,0,0,0,0,0,15746
2562,https://api.github.com/repos/rapidsai/cudf/issues/comments/2151228813,https://github.com/rapidsai/cudf/issues/15746#issuecomment-2151228813,https://api.github.com/repos/rapidsai/cudf/issues/15746,2151228813,IC_kwDOBWUGps6AOSWN,2024-06-06T01:21:14Z,2024-06-06T01:23:41Z,CONTRIBUTOR,"> @NVnavkumar Would you please post an example of the transpiled pattern? I would love to see the new pattern that comes out after you go through the steps to convert `$` into something that gives correct result.

So the original pattern `(boo:+)$` becomes `(boo:+)(?:\r|\u0085|\u2028|\u2029|\r\n)?$`.  This is to accomodate the `\r\n` double character and the possibility of supporting the 4 additional characters `\r` and the 3 unicode line breaks.
",,NVnavkumar,97137715,U_kgDOBco0Mw,https://avatars.githubusercontent.com/u/97137715?v=4,,https://api.github.com/users/NVnavkumar,https://github.com/NVnavkumar,https://api.github.com/users/NVnavkumar/followers,https://api.github.com/users/NVnavkumar/following{/other_user},https://api.github.com/users/NVnavkumar/gists{/gist_id},https://api.github.com/users/NVnavkumar/starred{/owner}{/repo},https://api.github.com/users/NVnavkumar/subscriptions,https://api.github.com/users/NVnavkumar/orgs,https://api.github.com/users/NVnavkumar/repos,https://api.github.com/users/NVnavkumar/events{/privacy},https://api.github.com/users/NVnavkumar/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2151228813/reactions,0,0,0,0,0,0,0,0,0,15746
2563,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113273373,https://github.com/rapidsai/cudf/issues/15747#issuecomment-2113273373,https://api.github.com/repos/rapidsai/cudf/issues/15747,2113273373,IC_kwDOBWUGps599f4d,2024-05-15T19:07:49Z,2024-05-15T19:07:49Z,CONTRIBUTOR,cf #13297 ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2113273373/reactions,0,0,0,0,0,0,0,0,0,15747
2564,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123419119,https://github.com/rapidsai/cudf/issues/15760#issuecomment-2123419119,https://api.github.com/repos/rapidsai/cudf/issues/15760,2123419119,IC_kwDOBWUGps5-kM3v,2024-05-21T20:49:34Z,2024-05-21T20:49:34Z,CONTRIBUTOR,"Hello @res-life, thank you for studying this item. Would you please first try to implement KMP for strings ""LIKE""? We think that KMP could be useful for strings columns where the string length varies a lot (10-10K characters).",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123419119/reactions,0,0,0,0,0,0,0,0,0,15760
2565,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123345117,https://github.com/rapidsai/cudf/issues/15783#issuecomment-2123345117,https://api.github.com/repos/rapidsai/cudf/issues/15783,2123345117,IC_kwDOBWUGps5-j6zd,2024-05-21T19:58:27Z,2024-05-21T19:58:27Z,CONTRIBUTOR,"I had a call with a couple folks from Sentry (who create Codecov), Sabiha and Vlad. We talked through a few topics related to coverage in RAPIDS.

- Codecov's carryforward option may help us with the problems we face with only running CI on a nightly basis. This may resolve (3) above. We may want to use `-F <component>` (like `-F cudf`) so that we can more easily determine coverage for each part of a repository.

- I requested a feature in Codecov. The UI for Codecov should have an option to stay in sync with the GitHub default branch (currently https://app.codecov.io/gh/rapidsai/cudf/ uses branch-23.06, which is a year old). Currently the branch must be manually adjusted, and we don't want to add work to the release process. Vlad will see what can be done on their side (a UI option to stay in sync with GitHub would be ideal).

- I reported a bug in Codecov: the ""latest commit"" reported for [branch-24.06](https://app.codecov.io/gh/rapidsai/cudf/tree/branch-24.06) on Codecov is 2 weeks old. However, there are newer coverage reports on [the commit list for branch-24.06](https://app.codecov.io/gh/rapidsai/cudf/commits?branch=All%20branches). Vlad said this seems to be a bug and they'll take a look.

- On the RAPIDS side, [we're getting rate limited](https://github.com/rapidsai/cudf/actions/runs/9124031981/job/25087473694#step:9:77) during Codecov uploads, which prevents us from getting full coverage reports on every nightly test run. Copying from that log below for posterity:
```
[2024-05-17T07:24:36.632Z] ['info'] Pinging Codecov: https://codecov.io/upload/v4?package=uploader-0.7.2&token=*******&branch=branch-24.06&build=9124031981&build_url=https%3A%2F%2Fgithub.com%2Frapidsai%2Fcudf%2Factions%2Fruns%2F9124031981&commit=6d5f9653debe57c7eb52f42fb980d38451a9a460&job=test&pr=&service=github-actions&slug=rapidsai%2Fcudf&name=&tag=&flags=&parent=
[2024-05-17T07:24:36.632Z] ['verbose'] Passed token was 0 characters long
[2024-05-17T07:24:36.632Z] ['verbose'] https://codecov.io/upload/v4?package=uploader-0.7.2&branch=branch-24.06&build=9124031981&build_url=https%3A%2F%2Fgithub.com%2Frapidsai%2Fcudf%2Factions%2Fruns%2F9124031981&commit=6d5f9653debe57c7eb52f42fb980d38451a9a460&job=test&pr=&service=github-actions&slug=rapidsai%2Fcudf&name=&tag=&flags=&parent=
        Content-Type: 'text/plain'
        Content-Encoding: 'gzip'
        X-Reduced-Redundancy: 'false'
[2024-05-17T07:24:36.844Z] ['error'] There was an error running the uploader: Error uploading to [https://codecov.io:](https://codecov.io/) Error: There was an error fetching the storage URL during POST: 429 - {'detail': ErrorDetail(string='Rate limit reached. Please upload with the Codecov repository upload token to resolve issue. Expected time to availability: 681s.', code='throttled')}
[2024-05-17T07:24:36.846Z] ['verbose'] The error stack is: Error: Error uploading to [https://codecov.io:](https://codecov.io/) Error: There was an error fetching the storage URL during POST: 429 - {'detail': ErrorDetail(string='Rate limit reached. Please upload with the Codecov repository upload token to resolve issue. Expected time to availability: 681s.', code='throttled')}
    at main (/snapshot/repo/dist/src/index.js)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
[2024-05-17T07:24:36.846Z] ['verbose'] End of uploader: 532 milliseconds
[2024-05-17T07:24:36.846Z] ['info'] Codecov will exit with status code 0. If you are expecting a non-zero exit code, please pass in the `-Z` flag
```
We need to check on the GitHub application configuration and make sure it's set up correctly. We should also update to the newer Codecov CLI to upload, and use an organization token to authenticate our uploads. Currently we are using the older Codecov uploader (see the install step and [shared-workflows call](https://github.com/rapidsai/shared-workflows/blob/19d17957e59cf81574f214e043adf8cff7db9447/.github/workflows/conda-python-tests.yaml#L151-L154)).",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2123345117/reactions,0,0,0,0,0,0,0,0,0,15783
2566,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142487577,https://github.com/rapidsai/cudf/issues/15783#issuecomment-2142487577,https://api.github.com/repos/rapidsai/cudf/issues/15783,2142487577,IC_kwDOBWUGps5_s8QZ,2024-05-31T15:18:50Z,2024-05-31T15:18:50Z,CONTRIBUTOR,"> ...
We need to check on the GitHub application configuration and make sure it's set up correctly. We should also update to the newer Codecov CLI to upload, and use an organization token to authenticate our uploads. Currently we are using the older Codecov uploader (see the install step and [shared-workflows call](https://github.com/rapidsai/shared-workflows/blob/19d17957e59cf81574f214e043adf8cff7db9447/.github/workflows/conda-python-tests.yaml#L151-L154)).

PRs that address this:
- https://github.com/rapidsai/ci-imgs/pull/141
- https://github.com/rapidsai/shared-workflows/pull/212",,AyodeAwe,50372925,MDQ6VXNlcjUwMzcyOTI1,https://avatars.githubusercontent.com/u/50372925?v=4,,https://api.github.com/users/AyodeAwe,https://github.com/AyodeAwe,https://api.github.com/users/AyodeAwe/followers,https://api.github.com/users/AyodeAwe/following{/other_user},https://api.github.com/users/AyodeAwe/gists{/gist_id},https://api.github.com/users/AyodeAwe/starred{/owner}{/repo},https://api.github.com/users/AyodeAwe/subscriptions,https://api.github.com/users/AyodeAwe/orgs,https://api.github.com/users/AyodeAwe/repos,https://api.github.com/users/AyodeAwe/events{/privacy},https://api.github.com/users/AyodeAwe/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142487577/reactions,1,1,0,0,0,0,0,0,0,15783
2567,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142709385,https://github.com/rapidsai/cudf/issues/15783#issuecomment-2142709385,https://api.github.com/repos/rapidsai/cudf/issues/15783,2142709385,IC_kwDOBWUGps5_tyaJ,2024-05-31T17:40:17Z,2024-05-31T17:40:17Z,CONTRIBUTOR,"Amazing! Thanks @AyodeAwe. I will circle back and try this again soon. I think we may get nightly coverage reports for `branch-24.06` since that's currently active in CI, but most new PRs are targeting `branch-24.08` so we may be out-of-sync for a while until the 24.06 release is complete and we move our nightly CI runs to `branch-24.08`.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2142709385/reactions,0,0,0,0,0,0,0,0,0,15783
2568,https://api.github.com/repos/rapidsai/cudf/issues/comments/2126230238,https://github.com/rapidsai/cudf/issues/15825#issuecomment-2126230238,https://api.github.com/repos/rapidsai/cudf/issues/15825,2126230238,IC_kwDOBWUGps5-u7Le,2024-05-23T04:54:09Z,2024-05-23T04:54:09Z,CONTRIBUTOR,"how about something like
```c++
template <class TrieT>
struct _parse_options {
  char delimiter;
  ...
  TrieT trie_true;
  TrieT trie_false;
  TrieT trie_na;
  bool multi_delimiter;
};

using parse_options_view = _parse_options<cudf::detail::trie_view>;

struct parse_options : public _parse_options<cudf::detail::optional_trie> {
  [[nodiscard]] json_inference_options_view json_view() const { ... }
  ...
};
```
cc @vuule ",,etseidl,25541553,MDQ6VXNlcjI1NTQxNTUz,https://avatars.githubusercontent.com/u/25541553?v=4,,https://api.github.com/users/etseidl,https://github.com/etseidl,https://api.github.com/users/etseidl/followers,https://api.github.com/users/etseidl/following{/other_user},https://api.github.com/users/etseidl/gists{/gist_id},https://api.github.com/users/etseidl/starred{/owner}{/repo},https://api.github.com/users/etseidl/subscriptions,https://api.github.com/users/etseidl/orgs,https://api.github.com/users/etseidl/repos,https://api.github.com/users/etseidl/events{/privacy},https://api.github.com/users/etseidl/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2126230238/reactions,0,0,0,0,0,0,0,0,0,15825
2569,https://api.github.com/repos/rapidsai/cudf/issues/comments/2127431111,https://github.com/rapidsai/cudf/issues/15835#issuecomment-2127431111,https://api.github.com/repos/rapidsai/cudf/issues/15835,2127431111,IC_kwDOBWUGps5-zgXH,2024-05-23T15:30:58Z,2024-05-23T15:31:13Z,CONTRIBUTOR,+1. Also there's a ruff rule that would allow us to enforce this https://docs.astral.sh/ruff/rules/zip-without-explicit-strict/,,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2127431111/reactions,0,0,0,0,0,0,0,0,0,15835
2570,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145573192,https://github.com/rapidsai/cudf/issues/15864#issuecomment-2145573192,https://api.github.com/repos/rapidsai/cudf/issues/15864,2145573192,IC_kwDOBWUGps5_4tlI,2024-06-03T15:55:36Z,2024-06-03T15:55:36Z,CONTRIBUTOR,"When evaluating use cases for this feature we should also be thinking about if they would be better served by improving how well the proxy object masquerades for the original. We can't make `isinstance` usable for the differentiation, but ideally calling codes wouldn't have to differentiate, so any time that they do probably indicates an area where the proxy isn't a drop-in replacement to the extent that we'd like it to be.",,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145573192/reactions,0,0,0,0,0,0,0,0,0,15864
2571,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146317671,https://github.com/rapidsai/cudf/issues/15864#issuecomment-2146317671,https://api.github.com/repos/rapidsai/cudf/issues/15864,2146317671,IC_kwDOBWUGps5_7jVn,2024-06-03T23:55:27Z,2024-06-03T23:55:27Z,CONTRIBUTOR,"I'm not sure if we want to go this route, but every proxy type is an instance of the same metaclass. So we could check for that.
```python
s = pd.Series([1])
assert type(type(s)) == cudf.pandas.fast_slow_proxy._FastSlowProxyMeta
```",,Matt711,41342305,MDQ6VXNlcjQxMzQyMzA1,https://avatars.githubusercontent.com/u/41342305?v=4,,https://api.github.com/users/Matt711,https://github.com/Matt711,https://api.github.com/users/Matt711/followers,https://api.github.com/users/Matt711/following{/other_user},https://api.github.com/users/Matt711/gists{/gist_id},https://api.github.com/users/Matt711/starred{/owner}{/repo},https://api.github.com/users/Matt711/subscriptions,https://api.github.com/users/Matt711/orgs,https://api.github.com/users/Matt711/repos,https://api.github.com/users/Matt711/events{/privacy},https://api.github.com/users/Matt711/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146317671/reactions,0,0,0,0,0,0,0,0,0,15864
2572,https://api.github.com/repos/rapidsai/cudf/issues/comments/2152968622,https://github.com/rapidsai/cudf/issues/15864#issuecomment-2152968622,https://api.github.com/repos/rapidsai/cudf/issues/15864,2152968622,IC_kwDOBWUGps6AU7Gu,2024-06-06T16:43:32Z,2024-06-06T16:43:32Z,CONTRIBUTOR,"I think a developer API that checks for `_FastSlowProxyMeta` would be good initial check.

I'm not sure if it's worth differentiating specific object types, i.e. pandas proxy objects vs numpy proxy objects, or make it fully generic by checking that metaclass. My initial feeling is checking `_FastSlowProxyMeta` would be preferable",,mroeschke,10647082,MDQ6VXNlcjEwNjQ3MDgy,https://avatars.githubusercontent.com/u/10647082?v=4,,https://api.github.com/users/mroeschke,https://github.com/mroeschke,https://api.github.com/users/mroeschke/followers,https://api.github.com/users/mroeschke/following{/other_user},https://api.github.com/users/mroeschke/gists{/gist_id},https://api.github.com/users/mroeschke/starred{/owner}{/repo},https://api.github.com/users/mroeschke/subscriptions,https://api.github.com/users/mroeschke/orgs,https://api.github.com/users/mroeschke/repos,https://api.github.com/users/mroeschke/events{/privacy},https://api.github.com/users/mroeschke/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2152968622/reactions,0,0,0,0,0,0,0,0,0,15864
2573,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138347497,https://github.com/rapidsai/cudf/issues/15884#issuecomment-2138347497,https://api.github.com/repos/rapidsai/cudf/issues/15884,2138347497,IC_kwDOBWUGps5_dJfp,2024-05-29T22:14:32Z,2024-05-29T22:14:32Z,CONTRIBUTOR,"what if we do fixed-point -> float, and we exceed e.g. DBL_MAX.  Do we want null here too, or return a double with value infinity?",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138347497/reactions,0,0,0,0,0,0,0,0,0,15884
2574,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138392781,https://github.com/rapidsai/cudf/issues/15884#issuecomment-2138392781,https://api.github.com/repos/rapidsai/cudf/issues/15884,2138392781,IC_kwDOBWUGps5_dUjN,2024-05-29T23:04:22Z,2024-05-29T23:04:22Z,CONTRIBUTOR,Creating nulls for overflow is not something we do in general for other operations (e.g. casting float to integer). Usually nulls identify unvalid input rows and are not used to communicate any operation exceptions in this way. Just wanted to point this out. Perhaps an exception is needed for fixed-point.,,davidwendt,45795991,MDQ6VXNlcjQ1Nzk1OTkx,https://avatars.githubusercontent.com/u/45795991?v=4,,https://api.github.com/users/davidwendt,https://github.com/davidwendt,https://api.github.com/users/davidwendt/followers,https://api.github.com/users/davidwendt/following{/other_user},https://api.github.com/users/davidwendt/gists{/gist_id},https://api.github.com/users/davidwendt/starred{/owner}{/repo},https://api.github.com/users/davidwendt/subscriptions,https://api.github.com/users/davidwendt/orgs,https://api.github.com/users/davidwendt/repos,https://api.github.com/users/davidwendt/events{/privacy},https://api.github.com/users/davidwendt/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138392781/reactions,0,0,0,0,0,0,0,0,0,15884
2575,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138402154,https://github.com/rapidsai/cudf/issues/15884#issuecomment-2138402154,https://api.github.com/repos/rapidsai/cudf/issues/15884,2138402154,IC_kwDOBWUGps5_dW1q,2024-05-29T23:14:22Z,2024-05-29T23:14:22Z,CONTRIBUTOR,"I agree with that. Yes, nullifying the output rows may not be a generic solution to fix all cases. A more comprehensive solution is probably to return a boolean value after nullifying the output rows indicating whether such replacements have happened.

FYI, in Spark, we either choose to nullify the output rows or throw an exception depending on what the user wants (through a config value). ",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2138402154/reactions,0,0,0,0,0,0,0,0,0,15884
2576,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141009000,https://github.com/rapidsai/cudf/issues/15884#issuecomment-2141009000,https://api.github.com/repos/rapidsai/cudf/issues/15884,2141009000,IC_kwDOBWUGps5_nTRo,2024-05-30T23:42:46Z,2024-05-30T23:42:46Z,CONTRIBUTOR,"When we say exception here, do we mean throw a normal C++ exception?  Can we do that from kernel code?  Do we even want to? 

For float -> fixed-point, the conversion could return a std::optional, which is std::nullopt_t if the value overflowed.  Upstream code (e.g. the kernel) can then decide what to do with this (Null or exception).  ",,pmattione-nvidia,156858817,U_kgDOCVl5wQ,https://avatars.githubusercontent.com/u/156858817?v=4,,https://api.github.com/users/pmattione-nvidia,https://github.com/pmattione-nvidia,https://api.github.com/users/pmattione-nvidia/followers,https://api.github.com/users/pmattione-nvidia/following{/other_user},https://api.github.com/users/pmattione-nvidia/gists{/gist_id},https://api.github.com/users/pmattione-nvidia/starred{/owner}{/repo},https://api.github.com/users/pmattione-nvidia/subscriptions,https://api.github.com/users/pmattione-nvidia/orgs,https://api.github.com/users/pmattione-nvidia/repos,https://api.github.com/users/pmattione-nvidia/events{/privacy},https://api.github.com/users/pmattione-nvidia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141009000/reactions,0,0,0,0,0,0,0,0,0,15884
2577,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141011699,https://github.com/rapidsai/cudf/issues/15884#issuecomment-2141011699,https://api.github.com/repos/rapidsai/cudf/issues/15884,2141011699,IC_kwDOBWUGps5_nT7z,2024-05-30T23:46:32Z,2024-05-30T23:46:32Z,CONTRIBUTOR,"What I do in such cases is nullify the output row, and also set a boolean flag (which will be returned) indicating that such overflow occurred during conversion.",,ttnghia,7416935,MDQ6VXNlcjc0MTY5MzU=,https://avatars.githubusercontent.com/u/7416935?v=4,,https://api.github.com/users/ttnghia,https://github.com/ttnghia,https://api.github.com/users/ttnghia/followers,https://api.github.com/users/ttnghia/following{/other_user},https://api.github.com/users/ttnghia/gists{/gist_id},https://api.github.com/users/ttnghia/starred{/owner}{/repo},https://api.github.com/users/ttnghia/subscriptions,https://api.github.com/users/ttnghia/orgs,https://api.github.com/users/ttnghia/repos,https://api.github.com/users/ttnghia/events{/privacy},https://api.github.com/users/ttnghia/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2141011699/reactions,0,0,0,0,0,0,0,0,0,15884
2578,https://api.github.com/repos/rapidsai/cudf/issues/comments/2143056369,https://github.com/rapidsai/cudf/issues/15903#issuecomment-2143056369,https://api.github.com/repos/rapidsai/cudf/issues/15903,2143056369,IC_kwDOBWUGps5_vHHx,2024-05-31T22:27:48Z,2024-05-31T22:27:48Z,CONTRIBUTOR,"Hello @shrshi, I added this issue about the refactoring work you started this week. Please excuse me if you documented this elsewhere and I missed it. Please feel free to update these topics with your current picture of the project. Thank you!",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2143056369/reactions,0,0,0,0,0,0,0,0,0,15903
2579,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145974881,https://github.com/rapidsai/cudf/issues/15903#issuecomment-2145974881,https://api.github.com/repos/rapidsai/cudf/issues/15903,2145974881,IC_kwDOBWUGps5_6Pph,2024-06-03T19:37:47Z,2024-06-03T19:37:47Z,CONTRIBUTOR,"Tree representation:

This feature introduces a new `column_tree_csr` struct that stores the column tree representation in CSR format. The nodes are renumbered level-wise instead of being directly mapped to column ids. This serves two purposes - (i) sub-trees matching input dtype schema can be skipped in between-column pruning, and (ii) sub-trees matching non-conforming dtypes in mixed type columns can be similarly skipped (within-column pruning).
The key advantage of wrapping column properties -  mixed types and map types support, column pruning, ignoring null literals, column validity, and array of arrays support - as 'non-zero' values in `column_tree_csr` struct is maintainability and ease of adding new features in the future.",,shrshi,7304582,MDQ6VXNlcjczMDQ1ODI=,https://avatars.githubusercontent.com/u/7304582?v=4,,https://api.github.com/users/shrshi,https://github.com/shrshi,https://api.github.com/users/shrshi/followers,https://api.github.com/users/shrshi/following{/other_user},https://api.github.com/users/shrshi/gists{/gist_id},https://api.github.com/users/shrshi/starred{/owner}{/repo},https://api.github.com/users/shrshi/subscriptions,https://api.github.com/users/shrshi/orgs,https://api.github.com/users/shrshi/repos,https://api.github.com/users/shrshi/events{/privacy},https://api.github.com/users/shrshi/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2145974881/reactions,0,0,0,0,0,0,0,0,0,15903
2580,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148299442,https://github.com/rapidsai/cudf/issues/15907#issuecomment-2148299442,https://api.github.com/repos/rapidsai/cudf/issues/15907,2148299442,IC_kwDOBWUGps6ADHKy,2024-06-04T19:46:36Z,2024-06-04T19:47:22Z,CONTRIBUTOR,"Line 386 in json.hpp is std::map of std::string. string_view can not be used here because the string_view's underlying string may get invalidated and the string_view will still point to destroyed/modified object memory. 
",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148299442/reactions,1,1,0,0,0,0,0,0,0,15907
2581,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148301470,https://github.com/rapidsai/cudf/issues/15907#issuecomment-2148301470,https://api.github.com/repos/rapidsai/cudf/issues/15907,2148301470,IC_kwDOBWUGps6ADHqe,2024-06-04T19:47:57Z,2024-06-04T19:48:02Z,CONTRIBUTOR," `source_info` constructor  could be updated to take string_view https://github.com/rapidsai/cudf/blob/branch-24.08/cpp/include/cudf/io/types.hpp#L338
It's common for many readers",,karthikeyann,6488848,MDQ6VXNlcjY0ODg4NDg=,https://avatars.githubusercontent.com/u/6488848?v=4,,https://api.github.com/users/karthikeyann,https://github.com/karthikeyann,https://api.github.com/users/karthikeyann/followers,https://api.github.com/users/karthikeyann/following{/other_user},https://api.github.com/users/karthikeyann/gists{/gist_id},https://api.github.com/users/karthikeyann/starred{/owner}{/repo},https://api.github.com/users/karthikeyann/subscriptions,https://api.github.com/users/karthikeyann/orgs,https://api.github.com/users/karthikeyann/repos,https://api.github.com/users/karthikeyann/events{/privacy},https://api.github.com/users/karthikeyann/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148301470/reactions,0,0,0,0,0,0,0,0,0,15907
2582,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146251113,https://github.com/rapidsai/cudf/issues/15909#issuecomment-2146251113,https://api.github.com/repos/rapidsai/cudf/issues/15909,2146251113,IC_kwDOBWUGps5_7TFp,2024-06-03T22:45:32Z,2024-06-03T22:45:32Z,CONTRIBUTOR,"Hi @raybellwaves, so far we haven't done a cuDF only benchmark run to use as a direct comparison. However, we do provide some tools for determining how close to speed of light your particular workflow is. The [cudf.pandas profiler](https://docs.rapids.ai/api/cudf/stable/cudf_pandas/usage/#understanding-performance-the-cudf-pandas-profiler) in particular can highlight areas of a workflow that are hitting a CPU side bottleneck which can negatively impact your performance. Assuming the entire query is able to execute GPU side, the `cudf.pandas` python layer itself is quite lightweight, and I wouldn't expect it to have a significant effect on performance at scale. We'd probably consider such a slowdown to be somewhat buggy behavior so if you encounter that, I'd encourage reporting it as a bug. Sorry I can't offer a better comparison!",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2146251113/reactions,0,0,0,0,0,0,0,0,0,15909
2583,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147302085,https://github.com/rapidsai/cudf/issues/15913#issuecomment-2147302085,https://api.github.com/repos/rapidsai/cudf/issues/15913,2147302085,IC_kwDOBWUGps5__TrF,2024-06-04T11:31:30Z,2024-06-04T11:31:30Z,CONTRIBUTOR,Thanks for the question. Can you print `sys.executable` and `sys.path` and make sure your notebook is using the right environment? Sometimes notebooks use a different kernel than the environment you would expect when launching. Also please share how you installed cudf (conda? pip?) and version/platform information.,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147302085/reactions,0,0,0,0,0,0,0,0,0,15913
2584,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147430547,https://github.com/rapidsai/cudf/issues/15913#issuecomment-2147430547,https://api.github.com/repos/rapidsai/cudf/issues/15913,2147430547,IC_kwDOBWUGps5__zCT,2024-06-04T12:37:14Z,2024-06-04T12:40:38Z,NONE,"I am running Ubuntu 20.04.6 LTS

cudf is installed by:
`conda create -n rapids-24.04 -c rapidsai -c conda-forge -c nvidia rapids=24.04 python=3.10 cuda-version=11.8`

From command line:
```
(rapids-24.04) $ python
>>> print(f'sys.executable={sys.executable}')
sys.executable=/home/recsys-api/mnt/miniconda3/envs/rapids-24.04/bin/python3
>>> print(f'sys.path={sys.path}')
sys.path=['', '/home/recsys-api/mnt/miniconda3/envs/rapids-24.04/lib/python310.zip', '/home/recsys-api/mnt/miniconda3/envs/rapids-24.04/lib/python3.10', '/home/recsys-api/mnt/miniconda3/envs/rapids-24.04/lib/python3.10/lib-dynload', '/home/recsys-api/.local/lib/python3.10/site-packages', '/home/recsys-api/mnt/miniconda3/envs/rapids-24.04/lib/python3.10/site-packages']
```

Jupyter server is started in `rapids-24.04`, in the notebook:
```
sys.executable=/usr/bin/python3
```
```
sys.path=['/usr/lib/python310.zip', '/usr/lib/python3.10', '/usr/lib/python3.10/lib-dynload', '', '/home/recsys-api/.local/lib/python3.10/site-packages', '/usr/local/lib/python3.10/dist-packages', '/usr/lib/python3/dist-packages']
```

Jupyterlab version is 4.1.8

Thanks!",,Ullar-Kask,13900171,MDQ6VXNlcjEzOTAwMTcx,https://avatars.githubusercontent.com/u/13900171?v=4,,https://api.github.com/users/Ullar-Kask,https://github.com/Ullar-Kask,https://api.github.com/users/Ullar-Kask/followers,https://api.github.com/users/Ullar-Kask/following{/other_user},https://api.github.com/users/Ullar-Kask/gists{/gist_id},https://api.github.com/users/Ullar-Kask/starred{/owner}{/repo},https://api.github.com/users/Ullar-Kask/subscriptions,https://api.github.com/users/Ullar-Kask/orgs,https://api.github.com/users/Ullar-Kask/repos,https://api.github.com/users/Ullar-Kask/events{/privacy},https://api.github.com/users/Ullar-Kask/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147430547/reactions,0,0,0,0,0,0,0,0,0,15913
2585,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147594600,https://github.com/rapidsai/cudf/issues/15913#issuecomment-2147594600,https://api.github.com/repos/rapidsai/cudf/issues/15913,2147594600,IC_kwDOBWUGps6AAbFo,2024-06-04T13:51:46Z,2024-06-04T13:51:46Z,CONTRIBUTOR,"Hi @Ullar-Kask ,
It seems like you might have some environment issues stemming from the cuDF installation and your jupyter notebook server not being co-located. One thing that might help if you want to use a jupyter notebook with cuDF is to try creating the rapids conda environment with the notebook package included from the start. This is your installation command with `notebook` appended to the end:

```
conda create -n rapids-24.04 -c rapidsai -c conda-forge -c nvidia rapids=24.04 python=3.10 cuda-version=11.8 notebook
```

This should avoid having to separately install notebook which I could see maybe leading to issues like what you're seeing. With this command I'm able to start a notebook from within the `rapids-24.04` environment and `import cudf` successfully. Can you try it this way and see if that works for you? 

",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147594600/reactions,0,0,0,0,0,0,0,0,0,15913
2586,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147596114,https://github.com/rapidsai/cudf/issues/15913#issuecomment-2147596114,https://api.github.com/repos/rapidsai/cudf/issues/15913,2147596114,IC_kwDOBWUGps6AAbdS,2024-06-04T13:52:21Z,2024-06-04T13:52:21Z,CONTRIBUTOR,"`sys.executable=/usr/bin/python3` indicates that your Jupyter kernel is not using the RAPIDS conda environment you created.

You might need something like this? https://stackoverflow.com/questions/39604271/conda-environments-not-showing-up-in-jupyter-notebook

I think that installing jupyter into the RAPIDS conda environment and using that may work as well.",,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2147596114/reactions,0,0,0,0,0,0,0,0,0,15913
2587,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148213860,https://github.com/rapidsai/cudf/issues/15919#issuecomment-2148213860,https://api.github.com/repos/rapidsai/cudf/issues/15919,2148213860,IC_kwDOBWUGps6ACyRk,2024-06-04T19:05:33Z,2024-06-04T19:05:33Z,CONTRIBUTOR,CC @GregoryKimball @rjzamora ,,vyasr,1538165,MDQ6VXNlcjE1MzgxNjU=,https://avatars.githubusercontent.com/u/1538165?v=4,,https://api.github.com/users/vyasr,https://github.com/vyasr,https://api.github.com/users/vyasr/followers,https://api.github.com/users/vyasr/following{/other_user},https://api.github.com/users/vyasr/gists{/gist_id},https://api.github.com/users/vyasr/starred{/owner}{/repo},https://api.github.com/users/vyasr/subscriptions,https://api.github.com/users/vyasr/orgs,https://api.github.com/users/vyasr/repos,https://api.github.com/users/vyasr/events{/privacy},https://api.github.com/users/vyasr/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148213860/reactions,0,0,0,0,0,0,0,0,0,15919
2588,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148463846,https://github.com/rapidsai/cudf/issues/15919#issuecomment-2148463846,https://api.github.com/repos/rapidsai/cudf/issues/15919,2148463846,IC_kwDOBWUGps6ADvTm,2024-06-04T21:43:08Z,2024-06-04T21:43:08Z,MEMBER,"Thank you for raising @vyasr !

I have spent some time exploring the importance of cudf's `NativeFile` dependency. In theory, we should be able to achieve the same performance without it. We are not actually using arrow to transfer any remote data at all unless the user specifically opens their file(s) with the pyarrow filesystem API. Instead, we are just using arrow as a translation layer between our python-based fsspec file and something that is recognized by libcudf as a proper data source.

If we were to change the python code to stop relying on `NativeFile` today, we could probably optimize the existing [`use_python_file_object=False`](https://github.com/rapidsai/cudf/blob/fe7412915a289e7a9469040ada1dcf74cda2c4d6/python/cudf/cudf/utils/ioutils.py#L175) logic to avoid a significant run-time regression. The only necessary regression (besides losing support for pyarrow filesystems) would be an increase in host-memory usage during partial IO. This is because we would need to pass down a byte range to libcudf that ""looks"" like an entire file (even if we are only reading a single column, and most of the bytes are left ""empty"").

**Near-term Solution**: In order to avoid excessive host-memory usage in the near term, we could probably introduce some kind of ""sparse"" byte-range data-source to libcudf. It is fairly easy to populate a mapping of known byte ranges efficiently with fsspec. If these known byte ranges could be used to populate a structure that is understood as a file-like object by libcudf, then we can avoid the host-memory issue.

**(Possible) Long-term Solution**: We roll our own filesystem API at the cpp level and avoid all python-related performance concerns :)",,rjzamora,20461013,MDQ6VXNlcjIwNDYxMDEz,https://avatars.githubusercontent.com/u/20461013?v=4,,https://api.github.com/users/rjzamora,https://github.com/rjzamora,https://api.github.com/users/rjzamora/followers,https://api.github.com/users/rjzamora/following{/other_user},https://api.github.com/users/rjzamora/gists{/gist_id},https://api.github.com/users/rjzamora/starred{/owner}{/repo},https://api.github.com/users/rjzamora/subscriptions,https://api.github.com/users/rjzamora/orgs,https://api.github.com/users/rjzamora/repos,https://api.github.com/users/rjzamora/events{/privacy},https://api.github.com/users/rjzamora/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2148463846/reactions,1,0,0,0,0,0,1,0,0,15919
2589,https://api.github.com/repos/rapidsai/cudf/issues/comments/2149759368,https://github.com/rapidsai/cudf/issues/15924#issuecomment-2149759368,https://api.github.com/repos/rapidsai/cudf/issues/15924,2149759368,IC_kwDOBWUGps6AIrmI,2024-06-05T12:44:08Z,2024-06-05T12:44:08Z,CONTRIBUTOR,"Hi @a-hirota , 
Thanks for raising this issue. While I'm not aware of any current efforts to implement this feature, I'd like to leave this issue open for further discussion and updates in the future. Enough people expressing interest here might be enough to generate some ideas and eventually move forward.",,brandon-b-miller,53796099,MDQ6VXNlcjUzNzk2MDk5,https://avatars.githubusercontent.com/u/53796099?v=4,,https://api.github.com/users/brandon-b-miller,https://github.com/brandon-b-miller,https://api.github.com/users/brandon-b-miller/followers,https://api.github.com/users/brandon-b-miller/following{/other_user},https://api.github.com/users/brandon-b-miller/gists{/gist_id},https://api.github.com/users/brandon-b-miller/starred{/owner}{/repo},https://api.github.com/users/brandon-b-miller/subscriptions,https://api.github.com/users/brandon-b-miller/orgs,https://api.github.com/users/brandon-b-miller/repos,https://api.github.com/users/brandon-b-miller/events{/privacy},https://api.github.com/users/brandon-b-miller/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2149759368/reactions,0,0,0,0,0,0,0,0,0,15924
2590,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150895058,https://github.com/rapidsai/cudf/issues/15924#issuecomment-2150895058,https://api.github.com/repos/rapidsai/cudf/issues/15924,2150895058,IC_kwDOBWUGps6ANA3S,2024-06-05T20:18:16Z,2024-06-05T20:18:16Z,CONTRIBUTOR,"Hello @a-hirota, thank you for your request. I believe this reader is something that we can support by combining cudf APIs today. Would you please let me know if this works for you?

```
series = cudf.read_text('data.txt', delimiter='\n')
colspecs=[(0, 6), (6, 23), (23, 37), (37, 41)]

df = cudf.DataFrame()
for n, d in enumerate(colspecs):
    df[n] = series.str.slice(d[0], d[1]).str.strip()

    if df[n].str.contains(r'\d+\.\d+').all():
        df[n] = df[n].astype('float64')
    elif df[n].str.contains(r'\d+').all():
        df[n] = df[n].astype('int64')
     
print(df)
```

```
        0                 1    2     3
0  abcdef 123456790.1234567  abc  1234
1  ABCDEF 123456790.1234567  abc  5678
```",,GregoryKimball,12725111,MDQ6VXNlcjEyNzI1MTEx,https://avatars.githubusercontent.com/u/12725111?v=4,,https://api.github.com/users/GregoryKimball,https://github.com/GregoryKimball,https://api.github.com/users/GregoryKimball/followers,https://api.github.com/users/GregoryKimball/following{/other_user},https://api.github.com/users/GregoryKimball/gists{/gist_id},https://api.github.com/users/GregoryKimball/starred{/owner}{/repo},https://api.github.com/users/GregoryKimball/subscriptions,https://api.github.com/users/GregoryKimball/orgs,https://api.github.com/users/GregoryKimball/repos,https://api.github.com/users/GregoryKimball/events{/privacy},https://api.github.com/users/GregoryKimball/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150895058/reactions,0,0,0,0,0,0,0,0,0,15924
2591,https://api.github.com/repos/rapidsai/cudf/issues/comments/2149340625,https://github.com/rapidsai/cudf/issues/15925#issuecomment-2149340625,https://api.github.com/repos/rapidsai/cudf/issues/15925,2149340625,IC_kwDOBWUGps6AHFXR,2024-06-05T09:36:30Z,2024-06-05T09:36:30Z,CONTRIBUTOR,"Hmm, weird. Can we try a few things in the docker container please?

First, what does running this python file show?

```python
from cuda import cuda
print(cuda.cuInit(0))
```

And then this one:

```python
import numba.cuda

print(numba.cuda.cudadrv.driver.locate_driver_and_loader())

print(numba.cuda.cudadrv.driver.driver.cuInit(0))
```

Can you also compile and run this C++ program:

```c++
// Suppose it is named init.cpp
#include <cuda.h>
#include <iostream>

int main(void)
{
  auto err = cuInit(0);
  if (err != CUDA_SUCCESS) {
    std::cout << ""cuInit unsuccessful: "" << err << std::endl;
  } else {
    std::cout << ""cuInit successful: "" << err << std::endl;
  }
  return 0;
}
```
And show the output
```
$ nvcc -o init init.cpp -lcuda
$ ./init
$ ldd ./init
```

Thanks!",,wence-,1126981,MDQ6VXNlcjExMjY5ODE=,https://avatars.githubusercontent.com/u/1126981?v=4,,https://api.github.com/users/wence-,https://github.com/wence-,https://api.github.com/users/wence-/followers,https://api.github.com/users/wence-/following{/other_user},https://api.github.com/users/wence-/gists{/gist_id},https://api.github.com/users/wence-/starred{/owner}{/repo},https://api.github.com/users/wence-/subscriptions,https://api.github.com/users/wence-/orgs,https://api.github.com/users/wence-/repos,https://api.github.com/users/wence-/events{/privacy},https://api.github.com/users/wence-/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2149340625/reactions,1,1,0,0,0,0,0,0,0,15925
2592,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150107949,https://github.com/rapidsai/cudf/issues/15925#issuecomment-2150107949,https://api.github.com/repos/rapidsai/cudf/issues/15925,2150107949,IC_kwDOBWUGps6AKAst,2024-06-05T14:11:47Z,2024-06-05T14:12:06Z,CONTRIBUTOR,Another possibility would be to check that you have `nvidia-container-runtime`. I'm not 100% sure if this is required for WSL or not. See the docs here on how to install `nvidia-container-runtime`: https://docs.rapids.ai/install#docker,,bdice,3943761,MDQ6VXNlcjM5NDM3NjE=,https://avatars.githubusercontent.com/u/3943761?v=4,,https://api.github.com/users/bdice,https://github.com/bdice,https://api.github.com/users/bdice/followers,https://api.github.com/users/bdice/following{/other_user},https://api.github.com/users/bdice/gists{/gist_id},https://api.github.com/users/bdice/starred{/owner}{/repo},https://api.github.com/users/bdice/subscriptions,https://api.github.com/users/bdice/orgs,https://api.github.com/users/bdice/repos,https://api.github.com/users/bdice/events{/privacy},https://api.github.com/users/bdice/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150107949/reactions,1,1,0,0,0,0,0,0,0,15925
2593,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150637342,https://github.com/rapidsai/cudf/issues/15925#issuecomment-2150637342,https://api.github.com/repos/rapidsai/cudf/issues/15925,2150637342,IC_kwDOBWUGps6AMB8e,2024-06-05T17:57:13Z,2024-06-05T17:57:13Z,NONE,"> First, what does running this python file show?
> 
> ```python
> from cuda import cuda
> print(cuda.cuInit(0))
> ```

`(<CUresuIt.CUDA_ERROR_NOT_FOUND: 500>,)`

> And then this one:
> 
> ```python
> import numba.cuda
> 
> print(numba.cuda.cudadrv.driver.locate_driver_and_loader())
> 
> print(numba.cuda.cudadrv.driver.driver.cuInit(0))
> ```

`(<class 'ctypes.CDLL'>, ['libcuda.so', 'libcuda.so.1', '/usr/lib/libcuda.so', '/usr/lib/libcuda.so.1', '/usr/lib64/libcuda.so', '/usr/lib64/libcuda.so.1']) `

```
---------------------------------------------------------------------------
CudaAPIError                              Traceback (most recent call last)
File /opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:254, in Driver.ensure_initialized(self)
    [253](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:253)     _logger.info('init')
--> [254](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:254)     self.cuInit(0)
    [255](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:255) except CudaAPIError as e:

File /opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:327, in Driver._ctypes_wrap_fn.<locals>.safe_cuda_api_call(*args)
    [326](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:326) retcode = libfn(*args)
--> [327](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:327) self._check_ctypes_error(fname, retcode)

File /opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:395, in Driver._check_ctypes_error(self, fname, retcode)
    [394](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:394)     self._detect_fork()
--> [395](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:395) raise CudaAPIError(retcode, msg)

CudaAPIError: [500] Call to cuInit results in CUDA_ERROR_NOT_FOUND

During handling of the above exception, another exception occurred:

CudaSupportError                          Traceback (most recent call last)
Cell In[1], [line 5](vscode-notebook-cell:?execution_count=1&line=5)
      [1](vscode-notebook-cell:?execution_count=1&line=1) import numba.cuda
      [3](vscode-notebook-cell:?execution_count=1&line=3) print(numba.cuda.cudadrv.driver.locate_driver_and_loader())
----> [5](vscode-notebook-cell:?execution_count=1&line=5) print(numba.cuda.cudadrv.driver.driver.cuInit(0))

File /opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:292, in Driver.__getattr__(self, fname)
    [290](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:290) def __getattr__(self, fname):
    [291](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:291)     # First request of a driver API function
--> [292](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:292)     self.ensure_initialized()
    [294](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:294)     if self.initialization_error is not None:
    [295](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:295)         raise CudaSupportError(""Error at driver init: \n%s:"" %
    [296](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:296)                                self.initialization_error)

File /opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:258, in Driver.ensure_initialized(self)
    [256](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:256)     description = f""{e.msg} ({e.code})""
    [257](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:257)     self.initialization_error = description
--> [258](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:258)     raise CudaSupportError(f""Error at driver init: {description}"")
    [259](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:259) else:
    [260](https://vscode-remote+attached-002dcontainer-002b7b22636f6e7461696e65724e616d65223a222f657069635f616c6d65696461227d.vscode-resource.vscode-cdn.net/opt/conda/lib/python3.11/site-packages/numba/cuda/cudadrv/driver.py:260)     self.pid = _getpid()

CudaSupportError: Error at driver init: Call to cuInit results in CUDA_ERROR_NOT_FOUND (500)
```
Speaking of the C++ program, nvcc is unable to find the gcc compiler on the docker's container. (I'm no a developer so I may get difficulties in dubuging in docker.)
",,BILL-SUN521,97337746,U_kgDOBc1Bkg,https://avatars.githubusercontent.com/u/97337746?v=4,,https://api.github.com/users/BILL-SUN521,https://github.com/BILL-SUN521,https://api.github.com/users/BILL-SUN521/followers,https://api.github.com/users/BILL-SUN521/following{/other_user},https://api.github.com/users/BILL-SUN521/gists{/gist_id},https://api.github.com/users/BILL-SUN521/starred{/owner}{/repo},https://api.github.com/users/BILL-SUN521/subscriptions,https://api.github.com/users/BILL-SUN521/orgs,https://api.github.com/users/BILL-SUN521/repos,https://api.github.com/users/BILL-SUN521/events{/privacy},https://api.github.com/users/BILL-SUN521/received_events,User,False,https://api.github.com/repos/rapidsai/cudf/issues/comments/2150637342/reactions,0,0,0,0,0,0,0,0,0,15925
